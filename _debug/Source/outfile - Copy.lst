
========================================================================

** ELF Header Information

    File Name: D:\Oasis\src\AmunRa\Code\Source\Objects\Oasis.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: Not specified
    Flags: EF_ARM_ABI_FLOAT_SOFT (0x05000200)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: Arm Compiler for Embedded 6.18 Tool: armasm [5e4cbe00]
    Component: Arm Compiler for Embedded 6.18 Tool: armlink [5e4cc100]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 2
    Section header entries: 17

    Program header offset: 217396 (0x00035134)
    Section header offset: 217460 (0x00035174)

    Section header string table index: 16

========================================================================

** Program header #0 (PT_LOAD) [PF_R]
    Size : 76 bytes
    Virtual address: 0x00000000 (Alignment 4)


====================================

** Program header #1 (PT_LOAD) [PF_X + PF_W + PF_R]
    Size : 38456 bytes (35360 bytes in file)
    Virtual address: 0x00000200 (Alignment 8)


========================================================================

** Section #1 'FLASH_EXEC_0' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 76 bytes (alignment 4)
    Address: 0x00000000


** Section #2 'FLASH_EXEC_1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 35348 bytes (alignment 4)
    Address: 0x00000200

    $t
    .emb_text
    __aeabi_memcpy4
    __aeabi_memcpy8
        0x00000200:    b570        p.      PUSH     {r4-r6,lr}
        0x00000202:    4605        .F      MOV      r5,r0
        0x00000204:    460c        .F      MOV      r4,r1
        0x00000206:    4616        .F      MOV      r6,r2
        0x00000208:    e002        ..      B        0x210 ; __aeabi_memcpy4 + 16
        0x0000020a:    cc0f        ..      LDM      r4!,{r0-r3}
        0x0000020c:    c50f        ..      STM      r5!,{r0-r3}
        0x0000020e:    3e10        .>      SUBS     r6,r6,#0x10
        0x00000210:    2e10        ..      CMP      r6,#0x10
        0x00000212:    d2fa        ..      BCS      0x20a ; __aeabi_memcpy4 + 10
        0x00000214:    2e08        ..      CMP      r6,#8
        0x00000216:    d302        ..      BCC      0x21e ; __aeabi_memcpy4 + 30
        0x00000218:    cc03        ..      LDM      r4!,{r0,r1}
        0x0000021a:    c503        ..      STM      r5!,{r0,r1}
        0x0000021c:    3e08        .>      SUBS     r6,r6,#8
        0x0000021e:    2e04        ..      CMP      r6,#4
        0x00000220:    d307        ..      BCC      0x232 ; __aeabi_memcpy4 + 50
        0x00000222:    cc01        ..      LDM      r4!,{r0}
        0x00000224:    c501        ..      STM      r5!,{r0}
        0x00000226:    1f36        6.      SUBS     r6,r6,#4
        0x00000228:    e003        ..      B        0x232 ; __aeabi_memcpy4 + 50
        0x0000022a:    7821        !x      LDRB     r1,[r4,#0]
        0x0000022c:    7029        )p      STRB     r1,[r5,#0]
        0x0000022e:    1c64        d.      ADDS     r4,r4,#1
        0x00000230:    1c6d        m.      ADDS     r5,r5,#1
        0x00000232:    1e76        v.      SUBS     r6,r6,#1
        0x00000234:    d2f9        ..      BCS      0x22a ; __aeabi_memcpy4 + 42
        0x00000236:    bd70        p.      POP      {r4-r6,pc}
    $t.0
    Chip_THC80F340A_ReadFileHandler
;;;5      }
        0x00000238:    4770        pG      BX       lr
    Chip_THC80F340A_WriteFileHandler
;;;6      
;;;7      uMonoByte Chip_THC80F340A_WriteFileHandler(uQuadByte ineeStartAddress, puMonoByte inpStructAddress, uMonoByte inumbStructLength)
;;;8      {
        0x0000023a:    2000        .       MOVS     r0,#0
;;;9      	return 0;
        0x0000023c:    4770        pG      BX       lr
    Chip_THC80F340A_WriteNBytesNonAtomic
;;;10     }
;;;11     
;;;12     uMonoByte Chip_THC80F340A_WriteNBytesNonAtomic(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;13     {
        0x0000023e:    2000        .       MOVS     r0,#0
;;;14     	return 0;
        0x00000240:    4770        pG      BX       lr
        0x00000242:    46c0        .F      MOV      r8,r8
    Chip_THC80F340A_WriteNBytes
;;;15     }
;;;16     
;;;17     static uMonoByte umbFlashBuff[PAGE_SIZE];
;;;18     
;;;19     uMonoByte Chip_THC80F340A_WriteNBytes(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;20     {
        0x00000244:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000246:    b087        ..      SUB      sp,sp,#0x1c
        0x00000248:    9102        ..      STR      r1,[sp,#8]
        0x0000024a:    4606        .F      MOV      r6,r0
        0x0000024c:    2000        .       MOVS     r0,#0
        0x0000024e:    2a00        .*      CMP      r2,#0
        0x00000250:    9001        ..      STR      r0,[sp,#4]
        0x00000252:    d039        9.      BEQ      0x2c8 ; Chip_THC80F340A_WriteNBytes + 132
;;; HardwareLayers/HAL_THC80F340A\Chip_THC80F340A_ReadWrite.c
        0x00000254:    4615        .F      MOV      r5,r2
        0x00000256:    4c21        !L      LDR      r4,[pc,#132] ; [0x2dc] = 0xfffffe00
        0x00000258:    4034        4@      ANDS     r4,r4,r6
        0x0000025a:    2001        .       MOVS     r0,#1
        0x0000025c:    0242        B.      LSLS     r2,r0,#9
        0x0000025e:    2700        .'      MOVS     r7,#0
        0x00000260:    491f        .I      LDR      r1,[pc,#124] ; [0x2e0] = 0x2000081d
        0x00000262:    9206        ..      STR      r2,[sp,#0x18]
        0x00000264:    4608        .F      MOV      r0,r1
        0x00000266:    9405        ..      STR      r4,[sp,#0x14]
        0x00000268:    4621        !F      MOV      r1,r4
        0x0000026a:    9a06        ..      LDR      r2,[sp,#0x18]
        0x0000026c:    f000fba7    ....    BL       mem_cpyFwd ; 0x9be
        0x00000270:    9906        ..      LDR      r1,[sp,#0x18]
        0x00000272:    1e4b        K.      SUBS     r3,r1,#1
        0x00000274:    4033        3@      ANDS     r3,r3,r6
        0x00000276:    9504        ..      STR      r5,[sp,#0x10]
;;;1      #include "types.h"
;;;2      #include "ChipExtern.h"
;;;3      void Chip_THC80F340A_ReadFileHandler(uQuadByte ineeStartAddress, puMonoByte inpStructAddress, uMonoByte inumbStructLength)
;;;4      {
;;;5      }
;;;6      
;;;7      uMonoByte Chip_THC80F340A_WriteFileHandler(uQuadByte ineeStartAddress, puMonoByte inpStructAddress, uMonoByte inumbStructLength)
;;;8      {
;;;9      	return 0;
;;;10     }
;;;11     
;;;12     uMonoByte Chip_THC80F340A_WriteNBytesNonAtomic(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;13     {
;;;14     	return 0;
;;;15     }
;;;16     
;;;17     static uMonoByte umbFlashBuff[PAGE_SIZE];
;;;18     
;;;19     uMonoByte Chip_THC80F340A_WriteNBytes(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;20     {
;;;21     	uMonoByte umbRet;
;;;22     	uDiByte		udbOffset;
;;;23     	uDiByte 	udbRemain;
;;;24     	uDiByte 	udbToDo;
;;;25     	uDiByte 	udbCounter=0x00;
;;;26     	uQuadByte uqbFlashAddr;
;;;27     	
;;;28     	uqbFlashAddr = ineeStartAddress & (0xFFFFFE00 | PageSize); 
;;;29     	udbOffset = (uDiByte)(ineeStartAddress & (PageSize - 1));
;;;30     	    
;;;31     	for(udbRemain = inudbDataLength; udbRemain; udbRemain  -= udbToDo)
;;;32     	{
;;;33     		udbToDo = (udbOffset + udbRemain) < PageSize ? udbRemain : (PageSize - udbOffset);
        0x00000278:    b2ae        ..      UXTH     r6,r5
        0x0000027a:    1998        ..      ADDS     r0,r3,r6
        0x0000027c:    4288        .B      CMP      r0,r1
        0x0000027e:    d300        ..      BCC      0x282 ; Chip_THC80F340A_WriteNBytes + 62
        0x00000280:    1ace        ..      SUBS     r6,r1,r3
;;;34     					
;;;35     		mem_cpy(umbFlashBuff,(BYTE *)uqbFlashAddr,PageSize);
;;;36     		
;;;37     
;;;38     		mem_cpy(&umbFlashBuff[udbOffset],&inpumbSourceBuffer[udbCounter],udbToDo);
        0x00000282:    b2b2        ..      UXTH     r2,r6
        0x00000284:    b2bd        ..      UXTH     r5,r7
        0x00000286:    9802        ..      LDR      r0,[sp,#8]
        0x00000288:    1941        A.      ADDS     r1,r0,r5
        0x0000028a:    4f15        .O      LDR      r7,[pc,#84] ; [0x2e0] = 0x2000081d
        0x0000028c:    9303        ..      STR      r3,[sp,#0xc]
        0x0000028e:    18f8        ..      ADDS     r0,r7,r3
        0x00000290:    f000fb95    ....    BL       mem_cpyFwd ; 0x9be
        0x00000294:    9c05        ..      LDR      r4,[sp,#0x14]
;;;39     		udbCounter += udbToDo;			
;;;40     			
;;;41     		if((umbRet = Erase_Page(uqbFlashAddr)) == 0x01)
        0x00000296:    4620         F      MOV      r0,r4
        0x00000298:    f000fa44    ..D.    BL       Erase_Page ; 0x724
        0x0000029c:    b2c1        ..      UXTB     r1,r0
        0x0000029e:    2901        .)      CMP      r1,#1
        0x000002a0:    d112        ..      BNE      0x2c8 ; Chip_THC80F340A_WriteNBytes + 132
;;;42     		{
;;;43     			if((umbRet = 	Write_page((WORD)uqbFlashAddr, umbFlashBuff)) != 0x01)
        0x000002a2:    4620         F      MOV      r0,r4
        0x000002a4:    4639        9F      MOV      r1,r7
        0x000002a6:    f000fb3b    ..;.    BL       Write_page ; 0x920
        0x000002aa:    b2c1        ..      UXTB     r1,r0
        0x000002ac:    2901        .)      CMP      r1,#1
        0x000002ae:    d10b        ..      BNE      0x2c8 ; Chip_THC80F340A_WriteNBytes + 132
        0x000002b0:    1977        w.      ADDS     r7,r6,r5
        0x000002b2:    9a06        ..      LDR      r2,[sp,#0x18]
        0x000002b4:    18a4        ..      ADDS     r4,r4,r2
;;;44     			{	
;;;45     				break;
;;;46     			}
;;;47     		}
;;;48     		else
;;;49     		{			
;;;50     			break;
;;;51     		}
;;;52     			
;;;53     		udbOffset = (uDiByte)(udbToDo + udbOffset) & (PageSize - 1);
        0x000002b6:    9903        ..      LDR      r1,[sp,#0xc]
        0x000002b8:    1871        q.      ADDS     r1,r6,r1
        0x000002ba:    b289        ..      UXTH     r1,r1
        0x000002bc:    9d04        ..      LDR      r5,[sp,#0x10]
        0x000002be:    1bad        ..      SUBS     r5,r5,r6
        0x000002c0:    460e        .F      MOV      r6,r1
        0x000002c2:    0429        ).      LSLS     r1,r5,#16
        0x000002c4:    4906        .I      LDR      r1,[pc,#24] ; [0x2e0] = 0x2000081d
        0x000002c6:    d1cd        ..      BNE      0x264 ; Chip_THC80F340A_WriteNBytes + 32
;;;54     		uqbFlashAddr += PageSize;
;;;55     	}
;;;56     	
;;;57     	if(0x01 != umbRet)
        0x000002c8:    b2c0        ..      UXTB     r0,r0
;;;58     	{
;;;59     		return FALSE;
;;;60     	}
;;;61     	return TRUE;
;;;62     }
        0x000002ca:    2801        .(      CMP      r0,#1
        0x000002cc:    d002        ..      BEQ      0x2d4 ; Chip_THC80F340A_WriteNBytes + 144
        0x000002ce:    9801        ..      LDR      r0,[sp,#4]
        0x000002d0:    b007        ..      ADD      sp,sp,#0x1c
        0x000002d2:    bdf0        ..      POP      {r4-r7,pc}
        0x000002d4:    20ff        .       MOVS     r0,#0xff
        0x000002d6:    b007        ..      ADD      sp,sp,#0x1c
        0x000002d8:    bdf0        ..      POP      {r4-r7,pc}
        0x000002da:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.3_0
        0x000002dc:    fffffe00    ....    DCD    4294966784
    __arm_cp.3_1
        0x000002e0:    2000081d    ...     DCD    536872989
    $t.2
    Chip_THC80F340A_WriteNBytesDirect
;;;63     
;;;64     uMonoByte Chip_THC80F340A_WriteNBytesDirect(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;65     {
        0x000002e4:    2000        .       MOVS     r0,#0
;;;66     	return 0;
        0x000002e6:    4770        pG      BX       lr
    Chip_THC80F340A_WriteNBytesFromNVM
;;;67     }
;;;68     
;;;69     uMonoByte Chip_THC80F340A_WriteNBytesFromNVM(uQuadByte ineeDestAddress, uQuadByte ineeSourceAddress, uDiByte inudbDataLength)
;;;70     {
        0x000002e8:    2000        .       MOVS     r0,#0
;;;71     	return 0;
        0x000002ea:    4770        pG      BX       lr
    Chip_THC80F340A_WritePage
;;;72     }
;;;73     
;;;74     /*Page MUST be erased before calling this function*/
;;;75     uMonoByte Chip_THC80F340A_WritePage(uQuadByte ineeStartAddress, puMonoByte pumbInput){
        0x000002ec:    b580        ..      PUSH     {r7,lr}
        0x000002ee:    05c2        ..      LSLS     r2,r0,#23
        0x000002f0:    d002        ..      BEQ      0x2f8 ; Chip_THC80F340A_WritePage + 12
;;; HardwareLayers/HAL_THC80F340A\Chip_THC80F340A_ReadWrite.c
        0x000002f2:    2100        .!      MOVS     r1,#0
        0x000002f4:    b2c8        ..      UXTB     r0,r1
        0x000002f6:    bd80        ..      POP      {r7,pc}
        0x000002f8:    f000fb12    ....    BL       Write_page ; 0x920
        0x000002fc:    2100        .!      MOVS     r1,#0
        0x000002fe:    2801        .(      CMP      r0,#1
        0x00000300:    d100        ..      BNE      0x304 ; Chip_THC80F340A_WritePage + 24
        0x00000302:    43c9        .C      MVNS     r1,r1
;;;1      #include "types.h"
;;;2      #include "ChipExtern.h"
;;;3      void Chip_THC80F340A_ReadFileHandler(uQuadByte ineeStartAddress, puMonoByte inpStructAddress, uMonoByte inumbStructLength)
;;;4      {
;;;5      }
;;;6      
;;;7      uMonoByte Chip_THC80F340A_WriteFileHandler(uQuadByte ineeStartAddress, puMonoByte inpStructAddress, uMonoByte inumbStructLength)
;;;8      {
;;;9      	return 0;
;;;10     }
;;;11     
;;;12     uMonoByte Chip_THC80F340A_WriteNBytesNonAtomic(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;13     {
;;;14     	return 0;
;;;15     }
;;;16     
;;;17     static uMonoByte umbFlashBuff[PAGE_SIZE];
;;;18     
;;;19     uMonoByte Chip_THC80F340A_WriteNBytes(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;20     {
;;;21     	uMonoByte umbRet;
;;;22     	uDiByte		udbOffset;
;;;23     	uDiByte 	udbRemain;
;;;24     	uDiByte 	udbToDo;
;;;25     	uDiByte 	udbCounter=0x00;
;;;26     	uQuadByte uqbFlashAddr;
;;;27     	
;;;28     	uqbFlashAddr = ineeStartAddress & (0xFFFFFE00 | PageSize); 
;;;29     	udbOffset = (uDiByte)(ineeStartAddress & (PageSize - 1));
;;;30     	    
;;;31     	for(udbRemain = inudbDataLength; udbRemain; udbRemain  -= udbToDo)
;;;32     	{
;;;33     		udbToDo = (udbOffset + udbRemain) < PageSize ? udbRemain : (PageSize - udbOffset);
;;;34     					
;;;35     		mem_cpy(umbFlashBuff,(BYTE *)uqbFlashAddr,PageSize);
;;;36     		
;;;37     
;;;38     		mem_cpy(&umbFlashBuff[udbOffset],&inpumbSourceBuffer[udbCounter],udbToDo);
;;;39     		udbCounter += udbToDo;			
;;;40     			
;;;41     		if((umbRet = Erase_Page(uqbFlashAddr)) == 0x01)
;;;42     		{
;;;43     			if((umbRet = 	Write_page((WORD)uqbFlashAddr, umbFlashBuff)) != 0x01)
;;;44     			{	
;;;45     				break;
;;;46     			}
;;;47     		}
;;;48     		else
;;;49     		{			
;;;50     			break;
;;;51     		}
;;;52     			
;;;53     		udbOffset = (uDiByte)(udbToDo + udbOffset) & (PageSize - 1);
;;;54     		uqbFlashAddr += PageSize;
;;;55     	}
;;;56     	
;;;57     	if(0x01 != umbRet)
;;;58     	{
;;;59     		return FALSE;
;;;60     	}
;;;61     	return TRUE;
;;;62     }
;;;63     
;;;64     uMonoByte Chip_THC80F340A_WriteNBytesDirect(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;65     {
;;;66     	return 0;
;;;67     }
;;;68     
;;;69     uMonoByte Chip_THC80F340A_WriteNBytesFromNVM(uQuadByte ineeDestAddress, uQuadByte ineeSourceAddress, uDiByte inudbDataLength)
;;;70     {
;;;71     	return 0;
;;;72     }
;;;73     
;;;74     /*Page MUST be erased before calling this function*/
;;;75     uMonoByte Chip_THC80F340A_WritePage(uQuadByte ineeStartAddress, puMonoByte pumbInput){
;;;76     	
;;;77     	/*check if address is page aligned*/
;;;78     	if(0x00 != (ineeStartAddress & (PageSize - 1))){
;;;79     		
;;;80     		/*if address is not page aligned*/
;;;81     		return FALSE;
;;;82     	}
;;;83     	
;;;84     	if(0x01 != (Write_page((WORD)ineeStartAddress, pumbInput))){
;;;85     		
;;;86     		/*PAGE write failed*/
;;;87     		return FALSE;
;;;88     	}
;;;89     	/*page write succeed*/
;;;90     	return TRUE;
;;;91     }
        0x00000304:    b2c8        ..      UXTB     r0,r1
        0x00000306:    bd80        ..      POP      {r7,pc}
    Chip_THC80F340A_ErasePage
;;;92     
;;;93     uMonoByte Chip_THC80F340A_ErasePage(uQuadByte ineeStartAddress)
;;;94     {
        0x00000308:    b580        ..      PUSH     {r7,lr}
        0x0000030a:    05c1        ..      LSLS     r1,r0,#23
        0x0000030c:    d002        ..      BEQ      0x314 ; Chip_THC80F340A_ErasePage + 12
;;; HardwareLayers/HAL_THC80F340A\Chip_THC80F340A_ReadWrite.c
        0x0000030e:    2100        .!      MOVS     r1,#0
        0x00000310:    b2c8        ..      UXTB     r0,r1
        0x00000312:    bd80        ..      POP      {r7,pc}
        0x00000314:    f000fa06    ....    BL       Erase_Page ; 0x724
        0x00000318:    2100        .!      MOVS     r1,#0
        0x0000031a:    2801        .(      CMP      r0,#1
        0x0000031c:    d100        ..      BNE      0x320 ; Chip_THC80F340A_ErasePage + 24
        0x0000031e:    43c9        .C      MVNS     r1,r1
;;;1      #include "types.h"
;;;2      #include "ChipExtern.h"
;;;3      void Chip_THC80F340A_ReadFileHandler(uQuadByte ineeStartAddress, puMonoByte inpStructAddress, uMonoByte inumbStructLength)
;;;4      {
;;;5      }
;;;6      
;;;7      uMonoByte Chip_THC80F340A_WriteFileHandler(uQuadByte ineeStartAddress, puMonoByte inpStructAddress, uMonoByte inumbStructLength)
;;;8      {
;;;9      	return 0;
;;;10     }
;;;11     
;;;12     uMonoByte Chip_THC80F340A_WriteNBytesNonAtomic(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;13     {
;;;14     	return 0;
;;;15     }
;;;16     
;;;17     static uMonoByte umbFlashBuff[PAGE_SIZE];
;;;18     
;;;19     uMonoByte Chip_THC80F340A_WriteNBytes(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;20     {
;;;21     	uMonoByte umbRet;
;;;22     	uDiByte		udbOffset;
;;;23     	uDiByte 	udbRemain;
;;;24     	uDiByte 	udbToDo;
;;;25     	uDiByte 	udbCounter=0x00;
;;;26     	uQuadByte uqbFlashAddr;
;;;27     	
;;;28     	uqbFlashAddr = ineeStartAddress & (0xFFFFFE00 | PageSize); 
;;;29     	udbOffset = (uDiByte)(ineeStartAddress & (PageSize - 1));
;;;30     	    
;;;31     	for(udbRemain = inudbDataLength; udbRemain; udbRemain  -= udbToDo)
;;;32     	{
;;;33     		udbToDo = (udbOffset + udbRemain) < PageSize ? udbRemain : (PageSize - udbOffset);
;;;34     					
;;;35     		mem_cpy(umbFlashBuff,(BYTE *)uqbFlashAddr,PageSize);
;;;36     		
;;;37     
;;;38     		mem_cpy(&umbFlashBuff[udbOffset],&inpumbSourceBuffer[udbCounter],udbToDo);
;;;39     		udbCounter += udbToDo;			
;;;40     			
;;;41     		if((umbRet = Erase_Page(uqbFlashAddr)) == 0x01)
;;;42     		{
;;;43     			if((umbRet = 	Write_page((WORD)uqbFlashAddr, umbFlashBuff)) != 0x01)
;;;44     			{	
;;;45     				break;
;;;46     			}
;;;47     		}
;;;48     		else
;;;49     		{			
;;;50     			break;
;;;51     		}
;;;52     			
;;;53     		udbOffset = (uDiByte)(udbToDo + udbOffset) & (PageSize - 1);
;;;54     		uqbFlashAddr += PageSize;
;;;55     	}
;;;56     	
;;;57     	if(0x01 != umbRet)
;;;58     	{
;;;59     		return FALSE;
;;;60     	}
;;;61     	return TRUE;
;;;62     }
;;;63     
;;;64     uMonoByte Chip_THC80F340A_WriteNBytesDirect(uQuadByte ineeStartAddress, puMonoByte inpumbSourceBuffer, uDiByte inudbDataLength)
;;;65     {
;;;66     	return 0;
;;;67     }
;;;68     
;;;69     uMonoByte Chip_THC80F340A_WriteNBytesFromNVM(uQuadByte ineeDestAddress, uQuadByte ineeSourceAddress, uDiByte inudbDataLength)
;;;70     {
;;;71     	return 0;
;;;72     }
;;;73     
;;;74     /*Page MUST be erased before calling this function*/
;;;75     uMonoByte Chip_THC80F340A_WritePage(uQuadByte ineeStartAddress, puMonoByte pumbInput){
;;;76     	
;;;77     	/*check if address is page aligned*/
;;;78     	if(0x00 != (ineeStartAddress & (PageSize - 1))){
;;;79     		
;;;80     		/*if address is not page aligned*/
;;;81     		return FALSE;
;;;82     	}
;;;83     	
;;;84     	if(0x01 != (Write_page((WORD)ineeStartAddress, pumbInput))){
;;;85     		
;;;86     		/*PAGE write failed*/
;;;87     		return FALSE;
;;;88     	}
;;;89     	/*page write succeed*/
;;;90     	return TRUE;
;;;91     }
;;;92     
;;;93     uMonoByte Chip_THC80F340A_ErasePage(uQuadByte ineeStartAddress)
;;;94     {
;;;95     	/*check if address is page aligned*/
;;;96     	if(0x00 != (ineeStartAddress & (PageSize - 1))){
;;;97     		
;;;98     		/*if address is not page aligned*/
;;;99     		return FALSE;
;;;100    	}
;;;101    	
;;;102    	if(0x01 != Erase_Page((WORD)ineeStartAddress)){
;;;103    
;;;104    		/*Page erase failed*/
;;;105    		return FALSE;
;;;106    	}
;;;107    	
;;;108    	/*page erase succeeded*/ 
;;;109    	return TRUE;
;;;110    }
        0x00000320:    b2c8        ..      UXTB     r0,r1
        0x00000322:    bd80        ..      POP      {r7,pc}
    hwAbs_osMain
;;; HardwareLayers/Abstraction\Main.c
;;;6      	_7816_3_transmitAtr();
        0x00000324:    f007f84c    ..L.    BL       _7816_3_transmitAtr ; 0x73c0
;;;7      
;;;8      	/*PPS handshaking*/
;;;9      	_7816_3_ppsExchange();
        0x00000328:    f007f894    ....    BL       _7816_3_ppsExchange ; 0x7454
;;;10     
;;;11     	/*First command after ATR*/
;;;12     	bFirstCommandAfterATR = TRUE;
        0x0000032c:    4802        .H      LDR      r0,[pc,#8] ; [0x338] = 0x20000000
        0x0000032e:    21ff        .!      MOVS     r1,#0xff
        0x00000330:    7001        .p      STRB     r1,[r0,#0]
        0x00000332:    f000fc81    ....    BL       cmdRout_commandRouter ; 0xc38
;;;13     	
;;;14     	/*Continues till the end of card session*/
;;;15     	while (TRUE)
        0x00000336:    e7fc        ..      B        0x332 ; hwAbs_osMain + 14
    $d.1
    __arm_cp.0_0
        0x00000338:    20000000    ...     DCD    536870912
    $t.0
    Chip_THC80F340A_sendPPSresponse
;;; HardwareLayers/HAL_THC80F340A\Chip_THC80F340A_ISO7816.c
;;;12     void Chip_THC80F340A_sendPPSresponse(puMonoByte pumbFiDi, uMonoByte umbLen){
        0x0000033c:    b510        ..      PUSH     {r4,lr}
        0x0000033e:    4604        .F      MOV      r4,r0
        0x00000340:    7880        .x      LDRB     r0,[r0,#2]
        0x00000342:    4602        .F      MOV      r2,r0
        0x00000344:    3a91        .:      SUBS     r2,r2,#0x91
        0x00000346:    2a07        .*      CMP      r2,#7
        0x00000348:    d307        ..      BCC      0x35a ; Chip_THC80F340A_sendPPSresponse + 30
;;; HardwareLayers/HAL_THC80F340A\Chip_THC80F340A_ISO7816.c
        0x0000034a:    2818        .(      CMP      r0,#0x18
        0x0000034c:    d80c        ..      BHI      0x368 ; Chip_THC80F340A_sendPPSresponse + 44
        0x0000034e:    2201        ."      MOVS     r2,#1
        0x00000350:    4082        .@      LSLS     r2,r2,r0
        0x00000352:    2087        .       MOVS     r0,#0x87
        0x00000354:    0440        @.      LSLS     r0,r0,#17
        0x00000356:    4202        .B      TST      r2,r0
        0x00000358:    d006        ..      BEQ      0x368 ; Chip_THC80F340A_sendPPSresponse + 44
;;;1      
;;;2      
;;;3      #include	"ChipLowLevel.h"
;;;4      #define INDEX_DEFAULT_FIDI									(0x01)
;;;5      const	BYTE	umbSupportedFiDi[] = {11, 0x11, 0x12, 0x13, 0x18, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97};
;;;6      
;;;7      /*
;;;8      * Send PPS response and Configure Fi-Di
;;;9      *
;;;10     * @param umbFiDi: Frequency & Baudrate
;;;11     */
;;;12     void Chip_THC80F340A_sendPPSresponse(puMonoByte pumbFiDi, uMonoByte umbLen){
;;;13     		/*stores index */
;;;14     	uMonoByte	umbCounter = 0;
;;;15     	
;;;16     	while(umbCounter < umbSupportedFiDi[0]) // check if current index is less than length of supported list
;;;17     	{
;;;18     		/*Check if presented FiDi matches with any of supported list*/
;;;19     		if(pumbFiDi[0x02] == umbSupportedFiDi[umbCounter + 1]) 
;;;20     		{
;;;21     			/*Send PPS response*/
;;;22     			ISO7816_TxNByte(umbLen,pumbFiDi);
        0x0000035a:    4608        .F      MOV      r0,r1
        0x0000035c:    4621        !F      MOV      r1,r4
        0x0000035e:    f000f8f7    ....    BL       ISO7816_TxNByte ; 0x550
;;;23     			
;;;24     			/*Set given FiDi*/
;;;25     			ISOBRC = pumbFiDi[0x02];
        0x00000362:    78a0        .x      LDRB     r0,[r4,#2]
        0x00000364:    4901        .I      LDR      r1,[pc,#4] ; [0x36c] = 0x40080010
        0x00000366:    6008        .`      STR      r0,[r1,#0]
;;;26     			return;
;;;27     		}
;;;28     		else // different FiDi
;;;29     		{
;;;30     			/*next FiDi*/
;;;31     			umbCounter ++;
;;;32     		}
;;;33     	}	
;;;34     }
        0x00000368:    bd10        ..      POP      {r4,pc}
        0x0000036a:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x0000036c:    40080010    ...@    DCD    1074266128
    $t.2
    Chip_THC80F340A_setFiDi
;;;35     /*
;;;36     * Configure Fi-Di
;;;37     *
;;;38     * @param umbFiDi: Frequency & Baudrate
;;;39     */
;;;40     void Chip_THC80F340A_setFiDi(uMonoByte umbFiDi){
;;;41     	
;;;42     	/*stores index */
;;;43     	uMonoByte	umbCounter = 0;
;;;44     	
;;;45     	while(umbCounter < umbSupportedFiDi[0]) // check if current index is less than length of supported list
;;;46     	{
;;;47     		/*Check if presented FiDi matches with any of supported list*/
;;;48     		if(umbFiDi == umbSupportedFiDi[umbCounter + 1]) 
        0x00000370:    4601        .F      MOV      r1,r0
        0x00000372:    3991        .9      SUBS     r1,r1,#0x91
        0x00000374:    2907        .)      CMP      r1,#7
        0x00000376:    d307        ..      BCC      0x388 ; Chip_THC80F340A_setFiDi + 24
;;; HardwareLayers/HAL_THC80F340A\Chip_THC80F340A_ISO7816.c
        0x00000378:    2818        .(      CMP      r0,#0x18
        0x0000037a:    d807        ..      BHI      0x38c ; Chip_THC80F340A_setFiDi + 28
        0x0000037c:    2101        .!      MOVS     r1,#1
        0x0000037e:    4081        .@      LSLS     r1,r1,r0
        0x00000380:    2287        ."      MOVS     r2,#0x87
        0x00000382:    0452        R.      LSLS     r2,r2,#17
        0x00000384:    4211        .B      TST      r1,r2
        0x00000386:    d001        ..      BEQ      0x38c ; Chip_THC80F340A_setFiDi + 28
        0x00000388:    4901        .I      LDR      r1,[pc,#4] ; [0x390] = 0x40080010
        0x0000038a:    6008        .`      STR      r0,[r1,#0]
        0x0000038c:    4770        pG      BX       lr
        0x0000038e:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00000390:    40080010    ...@    DCD    1074266128
    $t.4
    Chip_THC80F340A_sendByte
;;;1      
;;;2      
;;;3      #include	"ChipLowLevel.h"
;;;4      #define INDEX_DEFAULT_FIDI									(0x01)
;;;5      const	BYTE	umbSupportedFiDi[] = {11, 0x11, 0x12, 0x13, 0x18, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97};
;;;6      
;;;7      /*
;;;8      * Send PPS response and Configure Fi-Di
;;;9      *
;;;10     * @param umbFiDi: Frequency & Baudrate
;;;11     */
;;;12     void Chip_THC80F340A_sendPPSresponse(puMonoByte pumbFiDi, uMonoByte umbLen){
;;;13     		/*stores index */
;;;14     	uMonoByte	umbCounter = 0;
;;;15     	
;;;16     	while(umbCounter < umbSupportedFiDi[0]) // check if current index is less than length of supported list
;;;17     	{
;;;18     		/*Check if presented FiDi matches with any of supported list*/
;;;19     		if(pumbFiDi[0x02] == umbSupportedFiDi[umbCounter + 1]) 
;;;20     		{
;;;21     			/*Send PPS response*/
;;;22     			ISO7816_TxNByte(umbLen,pumbFiDi);
;;;23     			
;;;24     			/*Set given FiDi*/
;;;25     			ISOBRC = pumbFiDi[0x02];
;;;26     			return;
;;;27     		}
;;;28     		else // different FiDi
;;;29     		{
;;;30     			/*next FiDi*/
;;;31     			umbCounter ++;
;;;32     		}
;;;33     	}	
;;;34     }
;;;35     /*
;;;36     * Configure Fi-Di
;;;37     *
;;;38     * @param umbFiDi: Frequency & Baudrate
;;;39     */
;;;40     void Chip_THC80F340A_setFiDi(uMonoByte umbFiDi){
;;;41     	
;;;42     	/*stores index */
;;;43     	uMonoByte	umbCounter = 0;
;;;44     	
;;;45     	while(umbCounter < umbSupportedFiDi[0]) // check if current index is less than length of supported list
;;;46     	{
;;;47     		/*Check if presented FiDi matches with any of supported list*/
;;;48     		if(umbFiDi == umbSupportedFiDi[umbCounter + 1]) 
;;;49     		{
;;;50     			/*Set given FiDi*/
;;;51     			ISOBRC = umbFiDi;
;;;52     			return;
;;;53     		}
;;;54     		else // different FiDi
;;;55     		{
;;;56     			/*next FiDi*/
;;;57     			umbCounter ++;
;;;58     		}
;;;59     	}	
;;;60     }
;;;61     void Chip_THC80F340A_sendByte(uMonoByte umbValue){
        0x00000394:    b580        ..      PUSH     {r7,lr}
;;;62     	
;;;63     	ISO7816_TxByte(umbValue);
        0x00000396:    f000f8c1    ....    BL       ISO7816_TxByte ; 0x51c
;;;64     	
;;;65     }
        0x0000039a:    bd80        ..      POP      {r7,pc}
    Chip_THC80F340A_sendLastByte
;;;66     uMonoByte Chip_THC80F340A_sendLastByte(uMonoByte umbValue){
        0x0000039c:    b580        ..      PUSH     {r7,lr}
;;;67     	
;;;68     	/*Send Last byte of transmission*/
;;;69     	ISO7816_TxByte(umbValue);
        0x0000039e:    f000f8bd    ....    BL       ISO7816_TxByte ; 0x51c
;;;70     	
;;;71     	/*Put the SIM in sleep mode, will awake by H/W*/
;;;72     	sleep_mode();
        0x000003a2:    f000fbfb    ....    BL       sleep_mode ; 0xb9c
;;;73     	
;;;74     	/*receive first byte i.e. class byte of next command*/
;;;75     	return ISO7816_RxByte();
        0x000003a6:    f000f819    ....    BL       ISO7816_RxByte ; 0x3dc
        0x000003aa:    bd80        ..      POP      {r7,pc}
    Chip_THC80F340A_receiveByte
;;;76     }
;;;77     
;;;78     uMonoByte Chip_THC80F340A_receiveByte(void){
        0x000003ac:    b580        ..      PUSH     {r7,lr}
;;;79     	
;;;80     	return ISO7816_RxByte();
        0x000003ae:    f000f815    ....    BL       ISO7816_RxByte ; 0x3dc
        0x000003b2:    bd80        ..      POP      {r7,pc}
    Chip_THC80F340A_enableNullProcedureByte
;;;81     }
;;;82     
;;;83     /*
;;;84     *	Enable Sending Null procedure byte
;;;85     */
;;;86     void Chip_THC80F340A_enableNullProcedureByte(void){
        0x000003b4:    b580        ..      PUSH     {r7,lr}
        0x000003b6:    2001        .       MOVS     r0,#1
        0x000003b8:    2160        `!      MOVS     r1,#0x60
        0x000003ba:    4a02        .J      LDR      r2,[pc,#8] ; [0x3c4] = 0x1f3f
        0x000003bc:    f000f980    ....    BL       ISO7816_AutoTxNULL ; 0x6c0
        0x000003c0:    bd80        ..      POP      {r7,pc}
        0x000003c2:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.5_0
        0x000003c4:    00001f3f    ?...    DCD    7999
    $t.6
    Chip_THC80F340A_disableNullProcedureByte
;;;87     	
;;;88     	TX_NULL_BYTE_ON						//	Enable every 8000 etu to send one NULL byte 60H
;;;89     }
;;;90     
;;;91     /*
;;;92     *	Disable Sending Null Procedure byte
;;;93     */
;;;94     void Chip_THC80F340A_disableNullProcedureByte(void){
        0x000003c8:    b580        ..      PUSH     {r7,lr}
        0x000003ca:    2000        .       MOVS     r0,#0
        0x000003cc:    2160        `!      MOVS     r1,#0x60
        0x000003ce:    4a02        .J      LDR      r2,[pc,#8] ; [0x3d8] = 0x1f3f
        0x000003d0:    f000f976    ..v.    BL       ISO7816_AutoTxNULL ; 0x6c0
        0x000003d4:    bd80        ..      POP      {r7,pc}
        0x000003d6:    46c0        .F      MOV      r8,r8
    $d.7
    __arm_cp.6_0
        0x000003d8:    00001f3f    ?...    DCD    7999
    $t.0
    ISO7816_RxByte
;;; HardwareLayers/HAL_THC80F340A/Startup/ISO7816\ISO7816_API.c
;;;70     {
        0x000003dc:    4807        .H      LDR      r0,[pc,#28] ; [0x3fc] = 0x4008000c
;;;71     	while(!(ISOSTS & 0x02))			//	Waiting for ISO buffer is full
        0x000003de:    6801        .h      LDR      r1,[r0,#0]
        0x000003e0:    0789        ..      LSLS     r1,r1,#30
        0x000003e2:    d408        ..      BMI      0x3f6 ; ISO7816_RxByte + 26
        0x000003e4:    6801        .h      LDR      r1,[r0,#0]
        0x000003e6:    0789        ..      LSLS     r1,r1,#30
        0x000003e8:    d405        ..      BMI      0x3f6 ; ISO7816_RxByte + 26
        0x000003ea:    6801        .h      LDR      r1,[r0,#0]
        0x000003ec:    0789        ..      LSLS     r1,r1,#30
        0x000003ee:    d402        ..      BMI      0x3f6 ; ISO7816_RxByte + 26
        0x000003f0:    6801        .h      LDR      r1,[r0,#0]
        0x000003f2:    0789        ..      LSLS     r1,r1,#30
        0x000003f4:    d5f3        ..      BPL      0x3de ; ISO7816_RxByte + 2
;;;72     	{;}								
;;;73     	return	ISOBUF;					//	Return the received byte
        0x000003f6:    6880        .h      LDR      r0,[r0,#8]
        0x000003f8:    b2c0        ..      UXTB     r0,r0
        0x000003fa:    4770        pG      BX       lr
    $d.1
    __arm_cp.0_0
        0x000003fc:    4008000c    ...@    DCD    1074266124
    $t.2
    ISO7816_RxNByte
;;;74     }
;;;75     
;;;76     //====================================================
;;;77     //	Receive n bytes by ISO
;;;78     void    ISO7816_RxNByte(HALFW n,BYTE * buf)
;;;79     {	
        0x00000400:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000402:    b081        ..      SUB      sp,sp,#4
        0x00000404:    2800        .(      CMP      r0,#0
        0x00000406:    d03c        <.      BEQ      0x482 ; ISO7816_RxNByte + 130
;;; HardwareLayers/HAL_THC80F340A/Startup/ISO7816\ISO7816_API.c
        0x00000408:    2503        .%      MOVS     r5,#3
        0x0000040a:    4603        .F      MOV      r3,r0
        0x0000040c:    402b        +@      ANDS     r3,r3,r5
        0x0000040e:    1e42        B.      SUBS     r2,r0,#1
        0x00000410:    b294        ..      UXTH     r4,r2
        0x00000412:    4a41        AJ      LDR      r2,[pc,#260] ; [0x518] = 0x4008000c
        0x00000414:    2c03        .,      CMP      r4,#3
        0x00000416:    9300        ..      STR      r3,[sp,#0]
        0x00000418:    d235        5.      BCS      0x486 ; ISO7816_RxNByte + 134
        0x0000041a:    2400        .$      MOVS     r4,#0
        0x0000041c:    9d00        ..      LDR      r5,[sp,#0]
        0x0000041e:    2d00        .-      CMP      r5,#0
        0x00000420:    d02f        /.      BEQ      0x482 ; ISO7816_RxNByte + 130
        0x00000422:    6810        .h      LDR      r0,[r2,#0]
        0x00000424:    0780        ..      LSLS     r0,r0,#30
        0x00000426:    d408        ..      BMI      0x43a ; ISO7816_RxNByte + 58
        0x00000428:    6810        .h      LDR      r0,[r2,#0]
        0x0000042a:    0780        ..      LSLS     r0,r0,#30
        0x0000042c:    d405        ..      BMI      0x43a ; ISO7816_RxNByte + 58
        0x0000042e:    6810        .h      LDR      r0,[r2,#0]
        0x00000430:    0780        ..      LSLS     r0,r0,#30
        0x00000432:    d402        ..      BMI      0x43a ; ISO7816_RxNByte + 58
        0x00000434:    6810        .h      LDR      r0,[r2,#0]
        0x00000436:    0780        ..      LSLS     r0,r0,#30
        0x00000438:    d5f3        ..      BPL      0x422 ; ISO7816_RxNByte + 34
        0x0000043a:    6890        .h      LDR      r0,[r2,#8]
        0x0000043c:    5508        .U      STRB     r0,[r1,r4]
        0x0000043e:    2d01        .-      CMP      r5,#1
        0x00000440:    d01f        ..      BEQ      0x482 ; ISO7816_RxNByte + 130
        0x00000442:    1c60        `.      ADDS     r0,r4,#1
        0x00000444:    6813        .h      LDR      r3,[r2,#0]
        0x00000446:    079b        ..      LSLS     r3,r3,#30
        0x00000448:    d408        ..      BMI      0x45c ; ISO7816_RxNByte + 92
        0x0000044a:    6813        .h      LDR      r3,[r2,#0]
        0x0000044c:    079b        ..      LSLS     r3,r3,#30
        0x0000044e:    d405        ..      BMI      0x45c ; ISO7816_RxNByte + 92
        0x00000450:    6813        .h      LDR      r3,[r2,#0]
        0x00000452:    079b        ..      LSLS     r3,r3,#30
        0x00000454:    d402        ..      BMI      0x45c ; ISO7816_RxNByte + 92
        0x00000456:    6813        .h      LDR      r3,[r2,#0]
        0x00000458:    079b        ..      LSLS     r3,r3,#30
        0x0000045a:    d5f3        ..      BPL      0x444 ; ISO7816_RxNByte + 68
        0x0000045c:    6893        .h      LDR      r3,[r2,#8]
        0x0000045e:    540b        .T      STRB     r3,[r1,r0]
        0x00000460:    2d02        .-      CMP      r5,#2
        0x00000462:    d00e        ..      BEQ      0x482 ; ISO7816_RxNByte + 130
        0x00000464:    1ca0        ..      ADDS     r0,r4,#2
;;;1      
;;;2      
;;;3      #include	"TSIM.h"
;;;4      const BYTE VectorTable[0x78] = {
;;;5      0xA8, 0x11, 0x00, 0x20, 0x45, 0x00, 0x00, 0x00, 0x59, 0x00, 
;;;6      0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;7      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;8      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;9      0x00, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;10     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 
;;;11     0x61, 0x00, 0x00, 0x00, 0x55, 0x43, 0x05, 0x00, 0x07, 0x48, 
;;;12     0x01, 0x78, 0x07, 0x4A, 0x91, 0x42, 0x02, 0xD1, 0x07, 0x48, 
;;;13     0x07, 0x49, 0x01, 0x60, 0x07, 0x48, 0x00, 0x47, 0x70, 0x47, 
;;;14     0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x00, 0xBF, 
;;;15     0x00, 0x44, 0x05, 0x00, 0xA5, 0x00, 0x00, 0x00, 0x08, 0xED, 
;;;16     0x00, 0xE0, 0x00, 0x2C, 0x05, 0x00, 0xB9, 0x42, 0x05, 0x00
;;;17     };
;;;18     #if 0
;;;19     //====================================================
;;;20     //	Configure FI/DI
;;;21     void	ISO7816_ConfigFIDI(BYTE FIDI)
;;;22     {	
;;;23     	BYTE	counter = 0;
;;;24     	
;;;25     	while(counter < ValidFIDI[0])
;;;26     	{
;;;27     		if(FIDI == ValidFIDI[counter + 1])
;;;28     		{
;;;29     			ISOBRC = FIDI;
;;;30     			break;
;;;31     		}
;;;32     		else
;;;33     		{
;;;34     			counter ++;
;;;35     		}
;;;36     	}
;;;37     }
;;;38     
;;;39     //====================================================
;;;40     //	PPS acknowledge
;;;41     void    ISO7816_PPS_ACK(BYTE * buf)
;;;42     {
;;;43     	ISO7816_TxNByte(4,buf);
;;;44     }
;;;45     
;;;46     //====================================================
;;;47     //	PPS
;;;48     void	ISO7816_PPS(BYTE * PPSCMD)
;;;49     {	
;;;50     	BYTE	counter = 0;
;;;51     	
;;;52     	while(counter < ValidFIDI[0])	//	PCK checked before
;;;53     	{
;;;54     		if(PPSCMD[2] == ValidFIDI[counter + 1])
;;;55     		{
;;;56     			ISO7816_PPS_ACK((BYTE *)PPSCMD);
;;;57     			ISOBRC = PPSCMD[2];
;;;58     			break;
;;;59     		}
;;;60     		else
;;;61     		{
;;;62     			counter ++;
;;;63     		}
;;;64     	}
;;;65     }
;;;66     #endif
;;;67     //====================================================
;;;68     //	Receive one byte by ISO
;;;69     BYTE	ISO7816_RxByte(void)
;;;70     {
;;;71     	while(!(ISOSTS & 0x02))			//	Waiting for ISO buffer is full
        0x00000466:    6813        .h      LDR      r3,[r2,#0]
        0x00000468:    079b        ..      LSLS     r3,r3,#30
        0x0000046a:    d408        ..      BMI      0x47e ; ISO7816_RxNByte + 126
        0x0000046c:    6813        .h      LDR      r3,[r2,#0]
        0x0000046e:    079b        ..      LSLS     r3,r3,#30
        0x00000470:    d405        ..      BMI      0x47e ; ISO7816_RxNByte + 126
        0x00000472:    6813        .h      LDR      r3,[r2,#0]
        0x00000474:    079b        ..      LSLS     r3,r3,#30
        0x00000476:    d402        ..      BMI      0x47e ; ISO7816_RxNByte + 126
        0x00000478:    6813        .h      LDR      r3,[r2,#0]
        0x0000047a:    079b        ..      LSLS     r3,r3,#30
        0x0000047c:    d5f3        ..      BPL      0x466 ; ISO7816_RxNByte + 102
        0x0000047e:    6892        .h      LDR      r2,[r2,#8]
        0x00000480:    540a        .T      STRB     r2,[r1,r0]
        0x00000482:    b001        ..      ADD      sp,sp,#4
        0x00000484:    bdf0        ..      POP      {r4-r7,pc}
        0x00000486:    43a8        .C      BICS     r0,r0,r5
        0x00000488:    2400        .$      MOVS     r4,#0
        0x0000048a:    4626        &F      MOV      r6,r4
        0x0000048c:    e006        ..      B        0x49c ; ISO7816_RxNByte + 156
        0x0000048e:    6893        .h      LDR      r3,[r2,#8]
        0x00000490:    55cb        .U      STRB     r3,[r1,r7]
        0x00000492:    1d24        $.      ADDS     r4,r4,#4
        0x00000494:    1d36        6.      ADDS     r6,r6,#4
        0x00000496:    b2b3        ..      UXTH     r3,r6
        0x00000498:    4283        .B      CMP      r3,r0
        0x0000049a:    d0bf        ..      BEQ      0x41c ; ISO7816_RxNByte + 28
        0x0000049c:    6817        .h      LDR      r7,[r2,#0]
        0x0000049e:    07bf        ..      LSLS     r7,r7,#30
        0x000004a0:    d408        ..      BMI      0x4b4 ; ISO7816_RxNByte + 180
        0x000004a2:    6817        .h      LDR      r7,[r2,#0]
        0x000004a4:    07bf        ..      LSLS     r7,r7,#30
        0x000004a6:    d405        ..      BMI      0x4b4 ; ISO7816_RxNByte + 180
        0x000004a8:    6817        .h      LDR      r7,[r2,#0]
        0x000004aa:    07bf        ..      LSLS     r7,r7,#30
        0x000004ac:    d402        ..      BMI      0x4b4 ; ISO7816_RxNByte + 180
        0x000004ae:    6817        .h      LDR      r7,[r2,#0]
        0x000004b0:    07bf        ..      LSLS     r7,r7,#30
        0x000004b2:    d5f3        ..      BPL      0x49c ; ISO7816_RxNByte + 156
        0x000004b4:    6897        .h      LDR      r7,[r2,#8]
        0x000004b6:    550f        .U      STRB     r7,[r1,r4]
        0x000004b8:    2701        .'      MOVS     r7,#1
        0x000004ba:    4327        'C      ORRS     r7,r7,r4
        0x000004bc:    6813        .h      LDR      r3,[r2,#0]
        0x000004be:    079b        ..      LSLS     r3,r3,#30
        0x000004c0:    d408        ..      BMI      0x4d4 ; ISO7816_RxNByte + 212
        0x000004c2:    6813        .h      LDR      r3,[r2,#0]
        0x000004c4:    079b        ..      LSLS     r3,r3,#30
        0x000004c6:    d405        ..      BMI      0x4d4 ; ISO7816_RxNByte + 212
        0x000004c8:    6813        .h      LDR      r3,[r2,#0]
        0x000004ca:    079b        ..      LSLS     r3,r3,#30
        0x000004cc:    d402        ..      BMI      0x4d4 ; ISO7816_RxNByte + 212
        0x000004ce:    6813        .h      LDR      r3,[r2,#0]
        0x000004d0:    079b        ..      LSLS     r3,r3,#30
        0x000004d2:    d5f3        ..      BPL      0x4bc ; ISO7816_RxNByte + 188
        0x000004d4:    6893        .h      LDR      r3,[r2,#8]
        0x000004d6:    55cb        .U      STRB     r3,[r1,r7]
        0x000004d8:    2702        .'      MOVS     r7,#2
        0x000004da:    4327        'C      ORRS     r7,r7,r4
        0x000004dc:    6813        .h      LDR      r3,[r2,#0]
        0x000004de:    079b        ..      LSLS     r3,r3,#30
        0x000004e0:    d408        ..      BMI      0x4f4 ; ISO7816_RxNByte + 244
        0x000004e2:    6813        .h      LDR      r3,[r2,#0]
        0x000004e4:    079b        ..      LSLS     r3,r3,#30
        0x000004e6:    d405        ..      BMI      0x4f4 ; ISO7816_RxNByte + 244
        0x000004e8:    6813        .h      LDR      r3,[r2,#0]
        0x000004ea:    079b        ..      LSLS     r3,r3,#30
        0x000004ec:    d402        ..      BMI      0x4f4 ; ISO7816_RxNByte + 244
        0x000004ee:    6813        .h      LDR      r3,[r2,#0]
        0x000004f0:    079b        ..      LSLS     r3,r3,#30
        0x000004f2:    d5f3        ..      BPL      0x4dc ; ISO7816_RxNByte + 220
        0x000004f4:    6893        .h      LDR      r3,[r2,#8]
        0x000004f6:    55cb        .U      STRB     r3,[r1,r7]
        0x000004f8:    4627        'F      MOV      r7,r4
        0x000004fa:    432f        /C      ORRS     r7,r7,r5
        0x000004fc:    6813        .h      LDR      r3,[r2,#0]
        0x000004fe:    079b        ..      LSLS     r3,r3,#30
        0x00000500:    d4c5        ..      BMI      0x48e ; ISO7816_RxNByte + 142
        0x00000502:    6813        .h      LDR      r3,[r2,#0]
        0x00000504:    079b        ..      LSLS     r3,r3,#30
        0x00000506:    d4c2        ..      BMI      0x48e ; ISO7816_RxNByte + 142
        0x00000508:    6813        .h      LDR      r3,[r2,#0]
        0x0000050a:    079b        ..      LSLS     r3,r3,#30
        0x0000050c:    d4bf        ..      BMI      0x48e ; ISO7816_RxNByte + 142
        0x0000050e:    6813        .h      LDR      r3,[r2,#0]
        0x00000510:    079b        ..      LSLS     r3,r3,#30
        0x00000512:    d5f3        ..      BPL      0x4fc ; ISO7816_RxNByte + 252
        0x00000514:    e7bb        ..      B        0x48e ; ISO7816_RxNByte + 142
        0x00000516:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00000518:    4008000c    ...@    DCD    1074266124
    $t.4
    ISO7816_TxByte
;;;72     	{;}								
;;;73     	return	ISOBUF;					//	Return the received byte
;;;74     }
;;;75     
;;;76     //====================================================
;;;77     //	Receive n bytes by ISO
;;;78     void    ISO7816_RxNByte(HALFW n,BYTE * buf)
;;;79     {	
;;;80     	WORD	i = 0;
;;;81     
;;;82     	while(n > 0)
;;;83     	{	
;;;84     		buf[i] = ISO7816_RxByte();
;;;85     		i ++;
;;;86     		n --;
;;;87     	}
;;;88     }
;;;89     
;;;90     //====================================================
;;;91     //	Transmit one byte by ISO
;;;92     void	ISO7816_TxByte(BYTE c)
;;;93     {
        0x0000051c:    490b        .I      LDR      r1,[pc,#44] ; [0x54c] = 0x40080000
;;;94     	ISOCON |= 0x20;					//	ISO mode,Tx
        0x0000051e:    680a        .h      LDR      r2,[r1,#0]
        0x00000520:    2320         #      MOVS     r3,#0x20
        0x00000522:    4313        .C      ORRS     r3,r3,r2
        0x00000524:    600b        .`      STR      r3,[r1,#0]
;;;95     
;;;96     	ISOBUF = c;						//	Load the transmitted byte into buffer
        0x00000526:    6148        Ha      STR      r0,[r1,#0x14]
;;;97     	while(!(ISOSTS & 0x01))			//	Until buffer is empty
        0x00000528:    68c8        .h      LDR      r0,[r1,#0xc]
        0x0000052a:    07c0        ..      LSLS     r0,r0,#31
        0x0000052c:    d108        ..      BNE      0x540 ; ISO7816_TxByte + 36
        0x0000052e:    68c8        .h      LDR      r0,[r1,#0xc]
        0x00000530:    07c0        ..      LSLS     r0,r0,#31
        0x00000532:    d105        ..      BNE      0x540 ; ISO7816_TxByte + 36
        0x00000534:    68c8        .h      LDR      r0,[r1,#0xc]
        0x00000536:    07c0        ..      LSLS     r0,r0,#31
        0x00000538:    d102        ..      BNE      0x540 ; ISO7816_TxByte + 36
        0x0000053a:    68c8        .h      LDR      r0,[r1,#0xc]
        0x0000053c:    07c0        ..      LSLS     r0,r0,#31
        0x0000053e:    d0f3        ..      BEQ      0x528 ; ISO7816_TxByte + 12
;;;98     	{;}
;;;99     
;;;100    	ISOCON &= 0xDF;					//	ISO mode,Rx
        0x00000540:    6808        .h      LDR      r0,[r1,#0]
        0x00000542:    22df        ."      MOVS     r2,#0xdf
        0x00000544:    4002        .@      ANDS     r2,r2,r0
        0x00000546:    600a        .`      STR      r2,[r1,#0]
;;;101    }
        0x00000548:    4770        pG      BX       lr
        0x0000054a:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x0000054c:    40080000    ...@    DCD    1074266112
    $t.6
    ISO7816_TxNByte
;;;102    
;;;103    //====================================================
;;;104    //	Transmit n bytes by ISO
;;;105    void 	ISO7816_TxNByte(HALFW n,BYTE * databuf)
;;;106    {
        0x00000550:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000552:    b082        ..      SUB      sp,sp,#8
        0x00000554:    2800        .(      CMP      r0,#0
        0x00000556:    d04e        N.      BEQ      0x5f6 ; ISO7816_TxNByte + 166
;;; HardwareLayers/HAL_THC80F340A/Startup/ISO7816\ISO7816_API.c
        0x00000558:    2503        .%      MOVS     r5,#3
        0x0000055a:    4603        .F      MOV      r3,r0
        0x0000055c:    402b        +@      ANDS     r3,r3,r5
        0x0000055e:    1e44        D.      SUBS     r4,r0,#1
        0x00000560:    4a56        VJ      LDR      r2,[pc,#344] ; [0x6bc] = 0x40080000
        0x00000562:    2c03        .,      CMP      r4,#3
        0x00000564:    9300        ..      STR      r3,[sp,#0]
        0x00000566:    d248        H.      BCS      0x5fa ; ISO7816_TxNByte + 170
        0x00000568:    2400        .$      MOVS     r4,#0
        0x0000056a:    9e00        ..      LDR      r6,[sp,#0]
        0x0000056c:    2e00        ..      CMP      r6,#0
        0x0000056e:    d042        B.      BEQ      0x5f6 ; ISO7816_TxNByte + 166
        0x00000570:    5d0b        .]      LDRB     r3,[r1,r4]
        0x00000572:    6815        .h      LDR      r5,[r2,#0]
        0x00000574:    2020                MOVS     r0,#0x20
        0x00000576:    4305        .C      ORRS     r5,r5,r0
        0x00000578:    6015        .`      STR      r5,[r2,#0]
        0x0000057a:    6153        Sa      STR      r3,[r2,#0x14]
        0x0000057c:    68d3        .h      LDR      r3,[r2,#0xc]
        0x0000057e:    07db        ..      LSLS     r3,r3,#31
        0x00000580:    d108        ..      BNE      0x594 ; ISO7816_TxNByte + 68
        0x00000582:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000584:    07db        ..      LSLS     r3,r3,#31
        0x00000586:    d105        ..      BNE      0x594 ; ISO7816_TxNByte + 68
        0x00000588:    68d3        .h      LDR      r3,[r2,#0xc]
        0x0000058a:    07db        ..      LSLS     r3,r3,#31
        0x0000058c:    d102        ..      BNE      0x594 ; ISO7816_TxNByte + 68
        0x0000058e:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000590:    07db        ..      LSLS     r3,r3,#31
        0x00000592:    d0f3        ..      BEQ      0x57c ; ISO7816_TxNByte + 44
        0x00000594:    6813        .h      LDR      r3,[r2,#0]
        0x00000596:    25df        .%      MOVS     r5,#0xdf
        0x00000598:    402b        +@      ANDS     r3,r3,r5
        0x0000059a:    6013        .`      STR      r3,[r2,#0]
        0x0000059c:    2e01        ..      CMP      r6,#1
        0x0000059e:    d02a        *.      BEQ      0x5f6 ; ISO7816_TxNByte + 166
        0x000005a0:    1861        a.      ADDS     r1,r4,r1
        0x000005a2:    784b        Kx      LDRB     r3,[r1,#1]
        0x000005a4:    6814        .h      LDR      r4,[r2,#0]
        0x000005a6:    4304        .C      ORRS     r4,r4,r0
        0x000005a8:    6014        .`      STR      r4,[r2,#0]
        0x000005aa:    6153        Sa      STR      r3,[r2,#0x14]
        0x000005ac:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000005ae:    07db        ..      LSLS     r3,r3,#31
        0x000005b0:    d108        ..      BNE      0x5c4 ; ISO7816_TxNByte + 116
        0x000005b2:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000005b4:    07db        ..      LSLS     r3,r3,#31
        0x000005b6:    d105        ..      BNE      0x5c4 ; ISO7816_TxNByte + 116
        0x000005b8:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000005ba:    07db        ..      LSLS     r3,r3,#31
        0x000005bc:    d102        ..      BNE      0x5c4 ; ISO7816_TxNByte + 116
        0x000005be:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000005c0:    07db        ..      LSLS     r3,r3,#31
        0x000005c2:    d0f3        ..      BEQ      0x5ac ; ISO7816_TxNByte + 92
        0x000005c4:    6813        .h      LDR      r3,[r2,#0]
        0x000005c6:    402b        +@      ANDS     r3,r3,r5
        0x000005c8:    6013        .`      STR      r3,[r2,#0]
        0x000005ca:    2e02        ..      CMP      r6,#2
        0x000005cc:    d013        ..      BEQ      0x5f6 ; ISO7816_TxNByte + 166
        0x000005ce:    7889        .x      LDRB     r1,[r1,#2]
        0x000005d0:    6813        .h      LDR      r3,[r2,#0]
        0x000005d2:    4303        .C      ORRS     r3,r3,r0
        0x000005d4:    6013        .`      STR      r3,[r2,#0]
        0x000005d6:    6151        Qa      STR      r1,[r2,#0x14]
        0x000005d8:    68d0        .h      LDR      r0,[r2,#0xc]
        0x000005da:    07c0        ..      LSLS     r0,r0,#31
        0x000005dc:    d108        ..      BNE      0x5f0 ; ISO7816_TxNByte + 160
        0x000005de:    68d0        .h      LDR      r0,[r2,#0xc]
        0x000005e0:    07c0        ..      LSLS     r0,r0,#31
        0x000005e2:    d105        ..      BNE      0x5f0 ; ISO7816_TxNByte + 160
        0x000005e4:    68d0        .h      LDR      r0,[r2,#0xc]
        0x000005e6:    07c0        ..      LSLS     r0,r0,#31
        0x000005e8:    d102        ..      BNE      0x5f0 ; ISO7816_TxNByte + 160
        0x000005ea:    68d0        .h      LDR      r0,[r2,#0xc]
        0x000005ec:    07c0        ..      LSLS     r0,r0,#31
        0x000005ee:    d0f3        ..      BEQ      0x5d8 ; ISO7816_TxNByte + 136
        0x000005f0:    6810        .h      LDR      r0,[r2,#0]
        0x000005f2:    4028        (@      ANDS     r0,r0,r5
        0x000005f4:    6010        .`      STR      r0,[r2,#0]
        0x000005f6:    b002        ..      ADD      sp,sp,#8
        0x000005f8:    bdf0        ..      POP      {r4-r7,pc}
        0x000005fa:    9501        ..      STR      r5,[sp,#4]
        0x000005fc:    43a8        .C      BICS     r0,r0,r5
        0x000005fe:    2400        .$      MOVS     r4,#0
        0x00000600:    e005        ..      B        0x60e ; ISO7816_TxNByte + 190
        0x00000602:    6813        .h      LDR      r3,[r2,#0]
        0x00000604:    403b        ;@      ANDS     r3,r3,r7
        0x00000606:    6013        .`      STR      r3,[r2,#0]
        0x00000608:    1d24        $.      ADDS     r4,r4,#4
        0x0000060a:    4284        .B      CMP      r4,r0
        0x0000060c:    d0ad        ..      BEQ      0x56a ; ISO7816_TxNByte + 26
        0x0000060e:    5d0f        .]      LDRB     r7,[r1,r4]
;;;1      
;;;2      
;;;3      #include	"TSIM.h"
;;;4      const BYTE VectorTable[0x78] = {
;;;5      0xA8, 0x11, 0x00, 0x20, 0x45, 0x00, 0x00, 0x00, 0x59, 0x00, 
;;;6      0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;7      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;8      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;9      0x00, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 
;;;10     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 
;;;11     0x61, 0x00, 0x00, 0x00, 0x55, 0x43, 0x05, 0x00, 0x07, 0x48, 
;;;12     0x01, 0x78, 0x07, 0x4A, 0x91, 0x42, 0x02, 0xD1, 0x07, 0x48, 
;;;13     0x07, 0x49, 0x01, 0x60, 0x07, 0x48, 0x00, 0x47, 0x70, 0x47, 
;;;14     0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x70, 0x47, 0x00, 0xBF, 
;;;15     0x00, 0x44, 0x05, 0x00, 0xA5, 0x00, 0x00, 0x00, 0x08, 0xED, 
;;;16     0x00, 0xE0, 0x00, 0x2C, 0x05, 0x00, 0xB9, 0x42, 0x05, 0x00
;;;17     };
;;;18     #if 0
;;;19     //====================================================
;;;20     //	Configure FI/DI
;;;21     void	ISO7816_ConfigFIDI(BYTE FIDI)
;;;22     {	
;;;23     	BYTE	counter = 0;
;;;24     	
;;;25     	while(counter < ValidFIDI[0])
;;;26     	{
;;;27     		if(FIDI == ValidFIDI[counter + 1])
;;;28     		{
;;;29     			ISOBRC = FIDI;
;;;30     			break;
;;;31     		}
;;;32     		else
;;;33     		{
;;;34     			counter ++;
;;;35     		}
;;;36     	}
;;;37     }
;;;38     
;;;39     //====================================================
;;;40     //	PPS acknowledge
;;;41     void    ISO7816_PPS_ACK(BYTE * buf)
;;;42     {
;;;43     	ISO7816_TxNByte(4,buf);
;;;44     }
;;;45     
;;;46     //====================================================
;;;47     //	PPS
;;;48     void	ISO7816_PPS(BYTE * PPSCMD)
;;;49     {	
;;;50     	BYTE	counter = 0;
;;;51     	
;;;52     	while(counter < ValidFIDI[0])	//	PCK checked before
;;;53     	{
;;;54     		if(PPSCMD[2] == ValidFIDI[counter + 1])
;;;55     		{
;;;56     			ISO7816_PPS_ACK((BYTE *)PPSCMD);
;;;57     			ISOBRC = PPSCMD[2];
;;;58     			break;
;;;59     		}
;;;60     		else
;;;61     		{
;;;62     			counter ++;
;;;63     		}
;;;64     	}
;;;65     }
;;;66     #endif
;;;67     //====================================================
;;;68     //	Receive one byte by ISO
;;;69     BYTE	ISO7816_RxByte(void)
;;;70     {
;;;71     	while(!(ISOSTS & 0x02))			//	Waiting for ISO buffer is full
;;;72     	{;}								
;;;73     	return	ISOBUF;					//	Return the received byte
;;;74     }
;;;75     
;;;76     //====================================================
;;;77     //	Receive n bytes by ISO
;;;78     void    ISO7816_RxNByte(HALFW n,BYTE * buf)
;;;79     {	
;;;80     	WORD	i = 0;
;;;81     
;;;82     	while(n > 0)
;;;83     	{	
;;;84     		buf[i] = ISO7816_RxByte();
;;;85     		i ++;
;;;86     		n --;
;;;87     	}
;;;88     }
;;;89     
;;;90     //====================================================
;;;91     //	Transmit one byte by ISO
;;;92     void	ISO7816_TxByte(BYTE c)
;;;93     {
;;;94     	ISOCON |= 0x20;					//	ISO mode,Tx
        0x00000610:    6813        .h      LDR      r3,[r2,#0]
        0x00000612:    2620         &      MOVS     r6,#0x20
        0x00000614:    4333        3C      ORRS     r3,r3,r6
        0x00000616:    6013        .`      STR      r3,[r2,#0]
        0x00000618:    6157        Wa      STR      r7,[r2,#0x14]
        0x0000061a:    68d3        .h      LDR      r3,[r2,#0xc]
        0x0000061c:    07db        ..      LSLS     r3,r3,#31
        0x0000061e:    d108        ..      BNE      0x632 ; ISO7816_TxNByte + 226
        0x00000620:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000622:    07db        ..      LSLS     r3,r3,#31
        0x00000624:    d105        ..      BNE      0x632 ; ISO7816_TxNByte + 226
        0x00000626:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000628:    07db        ..      LSLS     r3,r3,#31
        0x0000062a:    d102        ..      BNE      0x632 ; ISO7816_TxNByte + 226
        0x0000062c:    68d3        .h      LDR      r3,[r2,#0xc]
        0x0000062e:    07db        ..      LSLS     r3,r3,#31
        0x00000630:    d0f3        ..      BEQ      0x61a ; ISO7816_TxNByte + 202
        0x00000632:    6813        .h      LDR      r3,[r2,#0]
        0x00000634:    27df        .'      MOVS     r7,#0xdf
        0x00000636:    403b        ;@      ANDS     r3,r3,r7
        0x00000638:    6013        .`      STR      r3,[r2,#0]
        0x0000063a:    2301        .#      MOVS     r3,#1
        0x0000063c:    4323        #C      ORRS     r3,r3,r4
        0x0000063e:    5ccb        .\      LDRB     r3,[r1,r3]
        0x00000640:    6815        .h      LDR      r5,[r2,#0]
        0x00000642:    4335        5C      ORRS     r5,r5,r6
        0x00000644:    6015        .`      STR      r5,[r2,#0]
        0x00000646:    6153        Sa      STR      r3,[r2,#0x14]
        0x00000648:    68d3        .h      LDR      r3,[r2,#0xc]
        0x0000064a:    07db        ..      LSLS     r3,r3,#31
        0x0000064c:    d108        ..      BNE      0x660 ; ISO7816_TxNByte + 272
        0x0000064e:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000650:    07db        ..      LSLS     r3,r3,#31
        0x00000652:    d105        ..      BNE      0x660 ; ISO7816_TxNByte + 272
        0x00000654:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000656:    07db        ..      LSLS     r3,r3,#31
        0x00000658:    d102        ..      BNE      0x660 ; ISO7816_TxNByte + 272
        0x0000065a:    68d3        .h      LDR      r3,[r2,#0xc]
        0x0000065c:    07db        ..      LSLS     r3,r3,#31
        0x0000065e:    d0f3        ..      BEQ      0x648 ; ISO7816_TxNByte + 248
        0x00000660:    6813        .h      LDR      r3,[r2,#0]
        0x00000662:    403b        ;@      ANDS     r3,r3,r7
        0x00000664:    6013        .`      STR      r3,[r2,#0]
        0x00000666:    2302        .#      MOVS     r3,#2
        0x00000668:    4323        #C      ORRS     r3,r3,r4
        0x0000066a:    5ccb        .\      LDRB     r3,[r1,r3]
        0x0000066c:    6815        .h      LDR      r5,[r2,#0]
        0x0000066e:    4335        5C      ORRS     r5,r5,r6
        0x00000670:    6015        .`      STR      r5,[r2,#0]
        0x00000672:    6153        Sa      STR      r3,[r2,#0x14]
        0x00000674:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000676:    07db        ..      LSLS     r3,r3,#31
        0x00000678:    d108        ..      BNE      0x68c ; ISO7816_TxNByte + 316
        0x0000067a:    68d3        .h      LDR      r3,[r2,#0xc]
        0x0000067c:    07db        ..      LSLS     r3,r3,#31
        0x0000067e:    d105        ..      BNE      0x68c ; ISO7816_TxNByte + 316
        0x00000680:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000682:    07db        ..      LSLS     r3,r3,#31
        0x00000684:    d102        ..      BNE      0x68c ; ISO7816_TxNByte + 316
        0x00000686:    68d3        .h      LDR      r3,[r2,#0xc]
        0x00000688:    07db        ..      LSLS     r3,r3,#31
        0x0000068a:    d0f3        ..      BEQ      0x674 ; ISO7816_TxNByte + 292
        0x0000068c:    6813        .h      LDR      r3,[r2,#0]
        0x0000068e:    403b        ;@      ANDS     r3,r3,r7
        0x00000690:    6013        .`      STR      r3,[r2,#0]
        0x00000692:    4623        #F      MOV      r3,r4
        0x00000694:    9d01        ..      LDR      r5,[sp,#4]
        0x00000696:    432b        +C      ORRS     r3,r3,r5
        0x00000698:    5ccb        .\      LDRB     r3,[r1,r3]
        0x0000069a:    6815        .h      LDR      r5,[r2,#0]
        0x0000069c:    4335        5C      ORRS     r5,r5,r6
        0x0000069e:    6015        .`      STR      r5,[r2,#0]
;;;95     
;;;96     	ISOBUF = c;						//	Load the transmitted byte into buffer
        0x000006a0:    6153        Sa      STR      r3,[r2,#0x14]
;;;97     	while(!(ISOSTS & 0x01))			//	Until buffer is empty
        0x000006a2:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000006a4:    07db        ..      LSLS     r3,r3,#31
        0x000006a6:    d1ac        ..      BNE      0x602 ; ISO7816_TxNByte + 178
        0x000006a8:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000006aa:    07db        ..      LSLS     r3,r3,#31
        0x000006ac:    d1a9        ..      BNE      0x602 ; ISO7816_TxNByte + 178
        0x000006ae:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000006b0:    07db        ..      LSLS     r3,r3,#31
        0x000006b2:    d1a6        ..      BNE      0x602 ; ISO7816_TxNByte + 178
        0x000006b4:    68d3        .h      LDR      r3,[r2,#0xc]
        0x000006b6:    07db        ..      LSLS     r3,r3,#31
        0x000006b8:    d0f3        ..      BEQ      0x6a2 ; ISO7816_TxNByte + 338
        0x000006ba:    e7a2        ..      B        0x602 ; ISO7816_TxNByte + 178
    $d.7
    __arm_cp.3_0
        0x000006bc:    40080000    ...@    DCD    1074266112
    $t.8
    ISO7816_AutoTxNULL
;;;98     	{;}
;;;99     
;;;100    	ISOCON &= 0xDF;					//	ISO mode,Rx
;;;101    }
;;;102    
;;;103    //====================================================
;;;104    //	Transmit n bytes by ISO
;;;105    void 	ISO7816_TxNByte(HALFW n,BYTE * databuf)
;;;106    {
;;;107    	WORD	i;
;;;108    
;;;109    	for(i = 0;i < n;i ++)
;;;110    	{	
;;;111    		ISO7816_TxByte(databuf[i]);
;;;112    	}
;;;113    }
;;;114    
;;;115    //====================================================
;;;116    //	ISO/IEC 7816 interface ISO Tx NULL byte automatically
;;;117    void	ISO7816_AutoTxNULL(BYTE mode,BYTE null,HALFW ETUcount)
;;;118    {
        0x000006c0:    4b0b        .K      LDR      r3,[pc,#44] ; [0x6f0] = 0x40080050
;;;119    	if(mode == 1)
        0x000006c2:    2801        .(      CMP      r0,#1
        0x000006c4:    d10e        ..      BNE      0x6e4 ; ISO7816_AutoTxNULL + 36
;;;120    	{
;;;121    		ISOTDAT = ISOTRLD = ETUcount;				//	Every 128-etu to send 1 NULL byte
        0x000006c6:    609a        .`      STR      r2,[r3,#8]
        0x000006c8:    605a        Z`      STR      r2,[r3,#4]
;;;122    		ISONULL = null;								//	NULL byte is 0x60
        0x000006ca:    6119        .a      STR      r1,[r3,#0x10]
;;;123    		ISOTMSK |= 0x01;							//	ISO timing to send NULL byte interrupt disabled
        0x000006cc:    68d8        .h      LDR      r0,[r3,#0xc]
        0x000006ce:    2101        .!      MOVS     r1,#1
        0x000006d0:    4308        .C      ORRS     r0,r0,r1
        0x000006d2:    60d8        .`      STR      r0,[r3,#0xc]
;;;124    		ISOTCON &= 0xF9;							//	Counting mode
        0x000006d4:    6818        .h      LDR      r0,[r3,#0]
        0x000006d6:    22f9        ."      MOVS     r2,#0xf9
        0x000006d8:    4002        .@      ANDS     r2,r2,r0
        0x000006da:    601a        .`      STR      r2,[r3,#0]
;;;125    		ISOTCON |= 0x01;							//	Timer start
        0x000006dc:    6818        .h      LDR      r0,[r3,#0]
        0x000006de:    4308        .C      ORRS     r0,r0,r1
        0x000006e0:    6018        .`      STR      r0,[r3,#0]
        0x000006e2:    4770        pG      BX       lr
;;;126    	}
;;;127    	else
;;;128    	{
;;;129    		ISOTCON &= 0xFE;
        0x000006e4:    6819        .h      LDR      r1,[r3,#0]
        0x000006e6:    20fe        .       MOVS     r0,#0xfe
        0x000006e8:    4008        .@      ANDS     r0,r0,r1
        0x000006ea:    6018        .`      STR      r0,[r3,#0]
;;;130    	}
;;;131    }
        0x000006ec:    4770        pG      BX       lr
        0x000006ee:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.4_0
        0x000006f0:    40080050    P..@    DCD    1074266192
    $t.10
    ReturnToBL
;;;132    #if 0
;;;133    //====================================================
;;;134    //	Change base address of flash
;;;135    void	SetBase(void)
;;;136    {
;;;137    	if(P3 != 0x00)
;;;138    	{
;;;139    		SWptr = P3ERROR;						//	6C00
;;;140    	}
;;;141    	else
;;;142    	{
;;;143    		FlashBaseAddr = Foffset * 0x10000;
;;;144    	}
;;;145    }
;;;146    //====================================================
;;;147    //	Read memory
;;;148    //	Parameter: foffset=P1P2,RAMbuf=IO buffer,length=P3
;;;149    void	ReadFlash(HALFW foffset,BYTE * RAMbuf,HALFW length)
;;;150    {
;;;151    	WORD	FlashAddr;
;;;152    
;;;153    	if(length == 0x00)
;;;154    	{
;;;155    		length = 0x100;	   									//	P3 = 0x00, read 256 bytes
;;;156    	}
;;;157    	
;;;158    	FlashAddr = FlashBaseAddr + foffset;
;;;159    		
;;;160    	mem_cpyFwd(RAMbuf,(BYTE *)FlashAddr,length);
;;;161    }
;;;162     
;;;163    //====================================================
;;;164    //	Flash erase: INS = 0x2E
;;;165    //	Parameter: foffset=P1P2,
;;;166    void	EraseFlash(HALFW foffset,BYTE *RAMbuf)
;;;167    {
;;;168    	BYTE	flasherr;
;;;169    	HALFW	i,sectors;
;;;170    	WORD	FlashAddr;
;;;171    
;;;172    	FlashAddr = FlashBaseAddr + foffset;		//	Start page 
;;;173    	sectors = ExtractBEHalfword((BYTE *)RAMbuf);
;;;174    
;;;175    	if(P3 != 2)
;;;176    	{
;;;177    		SWptr = P3ERROR;
;;;178    		return;	
;;;179    	}
;;;180    			
;;;181    	for(i = 0; i < sectors; i++)
;;;182    	{		
;;;183    		if((flasherr = Erase_Page(FlashAddr)) != 0x01)			
;;;184    		{
;;;185    			SWHandler(flasherr);
;;;186    			break;
;;;187    		}
;;;188    		FlashAddr += PageSize;
;;;189    	}	
;;;190    	return;	
;;;191    }
;;;192    
;;;193    //====================================================
;;;194    //	Update memory,return value: success-1,fail-0
;;;195    //	Parameter: foffset=P1P2,RAMbuf=source data(IO buffer),length=P3
;;;196    void	UpdateMemory(HALFW foffset,BYTE * RAMbuf,BYTE length)
;;;197    {
;;;198    	WORD	FlashAddr;
;;;199    	HALFW	intRemain,toDo,poffset;
;;;200    	BYTE    flasherr,counter = 0;
;;;201    
;;;202    	FlashAddr = FlashBaseAddr + foffset;
;;;203    	
;;;204    	//***************************************************//	
;;;205    	//	 update SFR and RAM
;;;206    	if(((FlashBaseAddr >= SCSFRBase) && (FlashAddr < SFRLimit))|| ((FlashBaseAddr >= RAMBase) && (FlashBaseAddr < RAMLimit)))
;;;207    	{
;;;208    		mem_cpy_autoadapt((BYTE *)FlashAddr,RAMbuf,length);
;;;209    	}
;;;210    	
;;;211    	//***************************************************//	
;;;212    	//	update flash
;;;213    	else if(IsFlash(FlashAddr) || IsOTP(FlashAddr))					//	Flash and OTP memory area
;;;214    	{   					
;;;215    	    FlashAddr &= (0xFFFFFE00 | PageSize); 
;;;216    	    poffset = (HALFW)foffset & (PageSize - 1);
;;;217    	    
;;;218    		for(intRemain = length; intRemain; intRemain  -= toDo)
;;;219    		{
;;;220    			toDo = (poffset + intRemain) < PageSize ? intRemain : (PageSize - poffset);
;;;221    						
;;;222    			mem_cpyFwd(FlashBuffer,(BYTE *)FlashAddr,PageSize);
;;;223    			
;;;224    	
;;;225    			mem_cpyFwd(&FlashBuffer[poffset],&RAMbuf[counter],toDo);
;;;226    			counter += toDo;			
;;;227    				
;;;228    			if((flasherr = Erase_Page(FlashAddr)) == 0x01)
;;;229    			{
;;;230    				if((flasherr = 	Write_page((WORD)FlashAddr, FlashBuffer)) != 0x01)
;;;231    				{	
;;;232    					SWHandler(flasherr);
;;;233    					return;
;;;234    				}
;;;235    			}
;;;236    			else
;;;237    			{
;;;238    				SWHandler(flasherr);
;;;239    				return;
;;;240    			}
;;;241    				
;;;242    			poffset = (HALFW)(toDo + poffset) & (PageSize - 1);
;;;243    			FlashAddr += PageSize;
;;;244    		}
;;;245    	}
;;;246    	else
;;;247    	{
;;;248    		SWptr = P1P2ERR;						//	6A00
;;;249    	}
;;;250    }
;;;251    //====================================================
;;;252    //	Flash write: INS = 0x58
;;;253    //	Parameter: foffset=P1P2,0x80=P3
;;;254    void	WriteFlash(HALFW foffset,BYTE * RAMbuf,BYTE length)
;;;255    {
;;;256    	WORD	FlashAddr;
;;;257    	BYTE	flasherr;
;;;258    
;;;259    	FlashAddr = FlashBaseAddr + foffset;
;;;260    
;;;261    	if((flasherr = Write_Bytes((BYTE *)FlashAddr,RAMbuf,length)) != 0x01)
;;;262    	{	
;;;263    		SWHandler(flasherr);
;;;264    	}
;;;265    }
;;;266    
;;;267    //====================================================
;;;268    
;;;269    //	Compute CRC by hardware
;;;270    HALFW	calCRC(WORD tgtaddr, WORD length)
;;;271    {
;;;272    	USHORT sResult;
;;;273    	CRCCON0 = 0x00;
;;;274    	
;;;275    	while(length != 0)
;;;276    	{
;;;277    		CRCDAT = *(BYTE *)tgtaddr;
;;;278    		tgtaddr ++;
;;;279    		length --;
;;;280    	}
;;;281    
;;;282    	sResult = CRCDAT;
;;;283    	sResult = (sResult << 8) + CRCDAT;
;;;284    
;;;285    	return sResult;
;;;286    }
;;;287    
;;;288    //====================================================
;;;289    //	Generate random number
;;;290    void	RandomNumGen(BYTE * rngbuf,USHORT length)
;;;291    {
;;;292    	RNGCON &= Bit0_Dis;						//	Open RNG
;;;293    	
;;;294    	if (length == 0x00)
;;;295    	{
;;;296    		length = 0x100;
;;;297    	}
;;;298    	while(length > 0)					//	Length could be 3,2,or 1 byte(s)
;;;299    	{
;;;300    		while(!(RNGSTS & Bit0_En))
;;;301    		{;}
;;;302    		*rngbuf++ = (BYTE)RNGDAT;
;;;303    		length--;
;;;304    	}
;;;305    	
;;;306    	RNGCON |= Bit0_En;					//	Close RNG	 
;;;307    }
;;;308    
;;;309    #endif
;;;310    //====================================================
;;;311    uMonoByte	ReturnToBL(void)
;;;312    {
        0x000006f4:    b580        ..      PUSH     {r7,lr}
        0x000006f6:    4909        .I      LDR      r1,[pc,#36] ; [0x71c] = 0x40000104
        0x000006f8:    2000        .       MOVS     r0,#0
;;;313    	SCINTEN1 = SCINTEN2 = 0;
        0x000006fa:    6048        H`      STR      r0,[r1,#4]
        0x000006fc:    6008        .`      STR      r0,[r1,#0]
;;;314    	
;;;315    	if((0x01 != Erase_Page(0x0000)) || (0x01 != (Write_Bytes((BYTE *)(WORD)0x0000,VectorTable,0x78)))){
        0x000006fe:    f000f811    ....    BL       Erase_Page ; 0x724
        0x00000702:    2801        .(      CMP      r0,#1
        0x00000704:    d108        ..      BNE      0x718 ; ReturnToBL + 36
        0x00000706:    2000        .       MOVS     r0,#0
        0x00000708:    4905        .I      LDR      r1,[pc,#20] ; [0x720] = 0x8170
        0x0000070a:    2278        x"      MOVS     r2,#0x78
        0x0000070c:    f000f852    ..R.    BL       Write_Bytes ; 0x7b4
        0x00000710:    1e40        @.      SUBS     r0,r0,#1
        0x00000712:    1e41        A.      SUBS     r1,r0,#1
        0x00000714:    4188        .A      SBCS     r0,r0,r1
;;;316    		return 1;
;;;317    	}
;;;318    	return 0;
;;;319    }
        0x00000716:    bd80        ..      POP      {r7,pc}
        0x00000718:    2001        .       MOVS     r0,#1
        0x0000071a:    bd80        ..      POP      {r7,pc}
    $d.11
    __arm_cp.5_0
        0x0000071c:    40000104    ...@    DCD    1073742084
    __arm_cp.5_1
        0x00000720:    00008170    p...    DCD    33136
    $t.0
    Erase_Page
;;; HardwareLayers/HAL_THC80F340A/Startup/NORFlash\NORFlash.c
;;;8      {
        0x00000724:    b082        ..      SUB      sp,sp,#8
        0x00000726:    9000        ..      STR      r0,[sp,#0]
        0x00000728:    491e        .I      LDR      r1,[pc,#120] ; [0x7a4] = 0x4002000c
        0x0000072a:    2011        .       MOVS     r0,#0x11
;;;9      	FLCON = 0x11;
        0x0000072c:    6008        .`      STR      r0,[r1,#0]
        0x0000072e:    491e        .I      LDR      r1,[pc,#120] ; [0x7a8] = 0x40020004
        0x00000730:    2055        U       MOVS     r0,#0x55
;;;10     	
;;;11     //	Erase the target sector	
;;;12     	FLSDP1 = 0x55;
        0x00000732:    6008        .`      STR      r0,[r1,#0]
        0x00000734:    491d        .I      LDR      r1,[pc,#116] ; [0x7ac] = 0x40020008
        0x00000736:    20aa        .       MOVS     r0,#0xaa
;;;13     	FLSDP2 = 0xAA;	
        0x00000738:    6008        .`      STR      r0,[r1,#0]
;;;14     		__asm (
        0x0000073a:    f3bf8f4f    ..O.    DSB      
;;;15           "DSB"
;;;16     	);
;;;17     	*(BYTE *)tgtaddr = 0xFF;		//	Write a FFH to any address in the target sector	
        0x0000073e:    9900        ..      LDR      r1,[sp,#0]
        0x00000740:    20ff        .       MOVS     r0,#0xff
        0x00000742:    7008        .p      STRB     r0,[r1,#0]
;;;18     	
;;;19     	while(!(FLSTS & Bit0_En))		//	Waiting for erase complete
        0x00000744:    e7ff        ..      B        0x746 ; Erase_Page + 34
        0x00000746:    481a        .H      LDR      r0,[pc,#104] ; [0x7b0] = 0x40020000
        0x00000748:    6800        .h      LDR      r0,[r0,#0]
        0x0000074a:    07c0        ..      LSLS     r0,r0,#31
        0x0000074c:    2800        .(      CMP      r0,#0
        0x0000074e:    d101        ..      BNE      0x754 ; Erase_Page + 48
        0x00000750:    e7ff        ..      B        0x752 ; Erase_Page + 46
        0x00000752:    e7f8        ..      B        0x746 ; Erase_Page + 34
        0x00000754:    4816        .H      LDR      r0,[pc,#88] ; [0x7b0] = 0x40020000
;;;20     	{;}
;;;21     	FLSTS &= Bit0_En;
        0x00000756:    6801        .h      LDR      r1,[r0,#0]
        0x00000758:    2201        ."      MOVS     r2,#1
        0x0000075a:    4011        .@      ANDS     r1,r1,r2
        0x0000075c:    6001        .`      STR      r1,[r0,#0]
;;;22     
;;;23     	if(FLSTS & Bit1_En)				//	Mistaken operation,FLSTS.OVER will not be set if this error happens
        0x0000075e:    6800        .h      LDR      r0,[r0,#0]
        0x00000760:    0780        ..      LSLS     r0,r0,#30
        0x00000762:    2800        .(      CMP      r0,#0
        0x00000764:    d508        ..      BPL      0x778 ; Erase_Page + 84
        0x00000766:    e7ff        ..      B        0x768 ; Erase_Page + 68
        0x00000768:    4a11        .J      LDR      r2,[pc,#68] ; [0x7b0] = 0x40020000
;;;24     	{	
;;;25     		FLSTS &= Bit1_En;			//	Clear this bit
        0x0000076a:    6811        .h      LDR      r1,[r2,#0]
        0x0000076c:    2002        .       MOVS     r0,#2
        0x0000076e:    4001        .@      ANDS     r1,r1,r0
        0x00000770:    6011        .`      STR      r1,[r2,#0]
        0x00000772:    a901        ..      ADD      r1,sp,#4
;;;26     		return	0x02;
        0x00000774:    7008        .p      STRB     r0,[r1,#0]
        0x00000776:    e011        ..      B        0x79c ; Erase_Page + 120
        0x00000778:    480d        .H      LDR      r0,[pc,#52] ; [0x7b0] = 0x40020000
;;;27     	}
;;;28     	if(FLSTS & Bit2_En)            
        0x0000077a:    6800        .h      LDR      r0,[r0,#0]
        0x0000077c:    0740        @.      LSLS     r0,r0,#29
        0x0000077e:    2800        .(      CMP      r0,#0
        0x00000780:    d508        ..      BPL      0x794 ; Erase_Page + 112
        0x00000782:    e7ff        ..      B        0x784 ; Erase_Page + 96
        0x00000784:    4a0a        .J      LDR      r2,[pc,#40] ; [0x7b0] = 0x40020000
;;;29     	{
;;;30     		FLSTS &= Bit2_En;
        0x00000786:    6811        .h      LDR      r1,[r2,#0]
        0x00000788:    2004        .       MOVS     r0,#4
        0x0000078a:    4001        .@      ANDS     r1,r1,r0
        0x0000078c:    6011        .`      STR      r1,[r2,#0]
        0x0000078e:    a901        ..      ADD      r1,sp,#4
;;;31     		return  0x04;
        0x00000790:    7008        .p      STRB     r0,[r1,#0]
        0x00000792:    e003        ..      B        0x79c ; Erase_Page + 120
        0x00000794:    a901        ..      ADD      r1,sp,#4
        0x00000796:    2001        .       MOVS     r0,#1
;;;32     	}
;;;33     
;;;34     	return	0x01;		
        0x00000798:    7008        .p      STRB     r0,[r1,#0]
        0x0000079a:    e7ff        ..      B        0x79c ; Erase_Page + 120
        0x0000079c:    a801        ..      ADD      r0,sp,#4
;;;35     }
        0x0000079e:    7800        .x      LDRB     r0,[r0,#0]
        0x000007a0:    b002        ..      ADD      sp,sp,#8
        0x000007a2:    4770        pG      BX       lr
    $d.1
    __arm_cp.0_0
        0x000007a4:    4002000c    ...@    DCD    1073872908
    __arm_cp.0_1
        0x000007a8:    40020004    ...@    DCD    1073872900
    __arm_cp.0_2
        0x000007ac:    40020008    ...@    DCD    1073872904
    __arm_cp.0_3
        0x000007b0:    40020000    ...@    DCD    1073872896
    $t.2
    Write_Bytes
;;;36     
;;;37     
;;;38     //====================================================
;;;39     //	Write BYTE.
;;;40     //	Return value:	0x01 - success,0x02 - operation error,0x04 - verification failed
;;;41     BYTE	Write_Bytes(BYTE * pDest,const BYTE * pSrc,HALFW len)
;;;42     {
        0x000007b4:    b580        ..      PUSH     {r7,lr}
        0x000007b6:    b086        ..      SUB      sp,sp,#0x18
        0x000007b8:    9004        ..      STR      r0,[sp,#0x10]
        0x000007ba:    9103        ..      STR      r1,[sp,#0xc]
        0x000007bc:    a802        ..      ADD      r0,sp,#8
        0x000007be:    8002        ..      STRH     r2,[r0,#0]
        0x000007c0:    a901        ..      ADD      r1,sp,#4
        0x000007c2:    2000        .       MOVS     r0,#0
        0x000007c4:    8008        ..      STRH     r0,[r1,#0]
        0x000007c6:    e7ff        ..      B        0x7c8 ; Write_Bytes + 20
;;; HardwareLayers/HAL_THC80F340A/Startup/NORFlash\NORFlash.c
        0x000007c8:    a801        ..      ADD      r0,sp,#4
;;;1      #include	"TSIM.h"
;;;2      __align(4)	BYTE	FlashBuffer[PageSize];
;;;3      
;;;4      //====================================================
;;;5      //	Page Erase 
;;;6      //	Return value:	0x01 - success,0x02 - operation error,0x04 - verification failed
;;;7      BYTE	Erase_Page(WORD tgtaddr)
;;;8      {
;;;9      	FLCON = 0x11;
;;;10     	
;;;11     //	Erase the target sector	
;;;12     	FLSDP1 = 0x55;
;;;13     	FLSDP2 = 0xAA;	
;;;14     		__asm (
;;;15           "DSB"
;;;16     	);
;;;17     	*(BYTE *)tgtaddr = 0xFF;		//	Write a FFH to any address in the target sector	
;;;18     	
;;;19     	while(!(FLSTS & Bit0_En))		//	Waiting for erase complete
;;;20     	{;}
;;;21     	FLSTS &= Bit0_En;
;;;22     
;;;23     	if(FLSTS & Bit1_En)				//	Mistaken operation,FLSTS.OVER will not be set if this error happens
;;;24     	{	
;;;25     		FLSTS &= Bit1_En;			//	Clear this bit
;;;26     		return	0x02;
;;;27     	}
;;;28     	if(FLSTS & Bit2_En)            
;;;29     	{
;;;30     		FLSTS &= Bit2_En;
;;;31     		return  0x04;
;;;32     	}
;;;33     
;;;34     	return	0x01;		
;;;35     }
;;;36     
;;;37     
;;;38     //====================================================
;;;39     //	Write BYTE.
;;;40     //	Return value:	0x01 - success,0x02 - operation error,0x04 - verification failed
;;;41     BYTE	Write_Bytes(BYTE * pDest,const BYTE * pSrc,HALFW len)
;;;42     {
;;;43     	HALFW	i;
;;;44     
;;;45      	for(i = 0;i < len;i ++)
        0x000007ca:    8800        ..      LDRH     r0,[r0,#0]
        0x000007cc:    a902        ..      ADD      r1,sp,#8
        0x000007ce:    8809        ..      LDRH     r1,[r1,#0]
        0x000007d0:    4288        .B      CMP      r0,r1
        0x000007d2:    da31        1.      BGE      0x838 ; Write_Bytes + 132
        0x000007d4:    e7ff        ..      B        0x7d6 ; Write_Bytes + 34
        0x000007d6:    4923        #I      LDR      r1,[pc,#140] ; [0x864] = 0x4002000c
        0x000007d8:    2001        .       MOVS     r0,#1
;;;46     	{
;;;47     		FLCON = 0x01;
        0x000007da:    6008        .`      STR      r0,[r1,#0]
        0x000007dc:    4922        "I      LDR      r1,[pc,#136] ; [0x868] = 0x40020004
        0x000007de:    20aa        .       MOVS     r0,#0xaa
;;;48     		FLSDP1 = 0xAA;
        0x000007e0:    6008        .`      STR      r0,[r1,#0]
        0x000007e2:    4922        "I      LDR      r1,[pc,#136] ; [0x86c] = 0x40020008
        0x000007e4:    2055        U       MOVS     r0,#0x55
;;;49     		FLSDP2 = 0x55;	
        0x000007e6:    6008        .`      STR      r0,[r1,#0]
;;;50     		__asm (
        0x000007e8:    f3bf8f4f    ..O.    DSB      
;;;51           "DSB"
;;;52     	);
;;;53     		*(pDest + i) = pSrc[i];
        0x000007ec:    9803        ..      LDR      r0,[sp,#0xc]
        0x000007ee:    a901        ..      ADD      r1,sp,#4
        0x000007f0:    880a        ..      LDRH     r2,[r1,#0]
        0x000007f2:    5c80        .\      LDRB     r0,[r0,r2]
        0x000007f4:    9904        ..      LDR      r1,[sp,#0x10]
        0x000007f6:    5488        .T      STRB     r0,[r1,r2]
;;;54     
;;;55     		while(!(FLSTS & Bit0_En));			//	FL_CTL.FL_OVER		
        0x000007f8:    e7ff        ..      B        0x7fa ; Write_Bytes + 70
        0x000007fa:    481d        .H      LDR      r0,[pc,#116] ; [0x870] = 0x40020000
        0x000007fc:    6800        .h      LDR      r0,[r0,#0]
        0x000007fe:    07c0        ..      LSLS     r0,r0,#31
        0x00000800:    2800        .(      CMP      r0,#0
        0x00000802:    d101        ..      BNE      0x808 ; Write_Bytes + 84
        0x00000804:    e7ff        ..      B        0x806 ; Write_Bytes + 82
        0x00000806:    e7f8        ..      B        0x7fa ; Write_Bytes + 70
        0x00000808:    4819        .H      LDR      r0,[pc,#100] ; [0x870] = 0x40020000
;;;56     		FLSTS &= Bit0_En;					//	Clear FLSTS.OVER
        0x0000080a:    6801        .h      LDR      r1,[r0,#0]
        0x0000080c:    2201        ."      MOVS     r2,#1
        0x0000080e:    4011        .@      ANDS     r1,r1,r2
        0x00000810:    6001        .`      STR      r1,[r0,#0]
;;;57     
;;;58     		if(FLSTS & Bit1_En)					//	Mistaken operation
        0x00000812:    6800        .h      LDR      r0,[r0,#0]
        0x00000814:    0780        ..      LSLS     r0,r0,#30
        0x00000816:    2800        .(      CMP      r0,#0
        0x00000818:    d508        ..      BPL      0x82c ; Write_Bytes + 120
        0x0000081a:    e7ff        ..      B        0x81c ; Write_Bytes + 104
        0x0000081c:    4a14        .J      LDR      r2,[pc,#80] ; [0x870] = 0x40020000
;;;59     		{							   	
;;;60     			FLSTS &= Bit1_En;
        0x0000081e:    6811        .h      LDR      r1,[r2,#0]
        0x00000820:    2002        .       MOVS     r0,#2
        0x00000822:    4001        .@      ANDS     r1,r1,r0
        0x00000824:    6011        .`      STR      r1,[r2,#0]
        0x00000826:    a905        ..      ADD      r1,sp,#0x14
;;;61     			return	0x02;
        0x00000828:    7008        .p      STRB     r0,[r1,#0]
        0x0000082a:    e016        ..      B        0x85a ; Write_Bytes + 166
;;;62     		}
;;;63     	}
        0x0000082c:    e7ff        ..      B        0x82e ; Write_Bytes + 122
        0x0000082e:    9801        ..      LDR      r0,[sp,#4]
        0x00000830:    1c40        @.      ADDS     r0,r0,#1
        0x00000832:    a901        ..      ADD      r1,sp,#4
        0x00000834:    8008        ..      STRH     r0,[r1,#0]
        0x00000836:    e7c7        ..      B        0x7c8 ; Write_Bytes + 20
;;;64     	if(mem_cmp((BYTE *)pDest,pSrc,len))
        0x00000838:    9804        ..      LDR      r0,[sp,#0x10]
        0x0000083a:    9903        ..      LDR      r1,[sp,#0xc]
        0x0000083c:    aa02        ..      ADD      r2,sp,#8
        0x0000083e:    8812        ..      LDRH     r2,[r2,#0]
        0x00000840:    f000f913    ....    BL       mem_cmp ; 0xa6a
        0x00000844:    2800        .(      CMP      r0,#0
        0x00000846:    d004        ..      BEQ      0x852 ; Write_Bytes + 158
        0x00000848:    e7ff        ..      B        0x84a ; Write_Bytes + 150
        0x0000084a:    a905        ..      ADD      r1,sp,#0x14
        0x0000084c:    2004        .       MOVS     r0,#4
;;;65     	{
;;;66     		return	0x04;						//	Write verification failed
        0x0000084e:    7008        .p      STRB     r0,[r1,#0]
        0x00000850:    e003        ..      B        0x85a ; Write_Bytes + 166
        0x00000852:    a905        ..      ADD      r1,sp,#0x14
        0x00000854:    2001        .       MOVS     r0,#1
;;;67     	}
;;;68     	return 0x01;
        0x00000856:    7008        .p      STRB     r0,[r1,#0]
        0x00000858:    e7ff        ..      B        0x85a ; Write_Bytes + 166
        0x0000085a:    a805        ..      ADD      r0,sp,#0x14
;;;69     }
        0x0000085c:    7800        .x      LDRB     r0,[r0,#0]
        0x0000085e:    b006        ..      ADD      sp,sp,#0x18
        0x00000860:    bd80        ..      POP      {r7,pc}
        0x00000862:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00000864:    4002000c    ...@    DCD    1073872908
    __arm_cp.1_1
        0x00000868:    40020004    ...@    DCD    1073872900
    __arm_cp.1_2
        0x0000086c:    40020008    ...@    DCD    1073872904
    __arm_cp.1_3
        0x00000870:    40020000    ...@    DCD    1073872896
    $t.4
    Write_ROW_Bytes
;;;70     //====================================================
;;;71     BYTE	Write_ROW_Bytes(BYTE * pDest,BYTE * pSrc,HALFW len)
;;;72     {
        0x00000874:    b580        ..      PUSH     {r7,lr}
        0x00000876:    b084        ..      SUB      sp,sp,#0x10
        0x00000878:    9002        ..      STR      r0,[sp,#8]
        0x0000087a:    9101        ..      STR      r1,[sp,#4]
        0x0000087c:    4668        hF      MOV      r0,sp
        0x0000087e:    8002        ..      STRH     r2,[r0,#0]
;;;73     	FLRPVAD = (WORD)pSrc;
        0x00000880:    9901        ..      LDR      r1,[sp,#4]
        0x00000882:    4a21        !J      LDR      r2,[pc,#132] ; [0x908] = 0x40020020
        0x00000884:    6011        .`      STR      r1,[r2,#0]
;;;74     	FLRPVLEN = len;
        0x00000886:    8800        ..      LDRH     r0,[r0,#0]
        0x00000888:    4920         I      LDR      r1,[pc,#128] ; [0x90c] = 0x40020024
        0x0000088a:    6008        .`      STR      r0,[r1,#0]
        0x0000088c:    4920         I      LDR      r1,[pc,#128] ; [0x910] = 0x4002000c
        0x0000088e:    2041        A       MOVS     r0,#0x41
;;;75     	FLCON = (Bit6_En | Bit0_En);
        0x00000890:    6008        .`      STR      r0,[r1,#0]
        0x00000892:    4920         I      LDR      r1,[pc,#128] ; [0x914] = 0x40020004
        0x00000894:    20aa        .       MOVS     r0,#0xaa
;;;76     	FLSDP1 = 0xAA;
        0x00000896:    6008        .`      STR      r0,[r1,#0]
        0x00000898:    491f        .I      LDR      r1,[pc,#124] ; [0x918] = 0x40020008
        0x0000089a:    2055        U       MOVS     r0,#0x55
;;;77     	FLSDP2 = 0x55;
        0x0000089c:    6008        .`      STR      r0,[r1,#0]
;;;78     		__asm (
        0x0000089e:    f3bf8f4f    ..O.    DSB      
;;;79           "DSB"
;;;80     	);
;;;81     
;;;82     	*pDest = 0xFF;
        0x000008a2:    9902        ..      LDR      r1,[sp,#8]
        0x000008a4:    20ff        .       MOVS     r0,#0xff
        0x000008a6:    7008        .p      STRB     r0,[r1,#0]
;;;83     
;;;84      
;;;85     	while(!(FLSTS & Bit0_En));			//	FL_CTL.FL_OVER		
        0x000008a8:    e7ff        ..      B        0x8aa ; Write_ROW_Bytes + 54
        0x000008aa:    481c        .H      LDR      r0,[pc,#112] ; [0x91c] = 0x40020000
        0x000008ac:    6800        .h      LDR      r0,[r0,#0]
        0x000008ae:    07c0        ..      LSLS     r0,r0,#31
        0x000008b0:    2800        .(      CMP      r0,#0
        0x000008b2:    d101        ..      BNE      0x8b8 ; Write_ROW_Bytes + 68
        0x000008b4:    e7ff        ..      B        0x8b6 ; Write_ROW_Bytes + 66
        0x000008b6:    e7f8        ..      B        0x8aa ; Write_ROW_Bytes + 54
        0x000008b8:    4818        .H      LDR      r0,[pc,#96] ; [0x91c] = 0x40020000
;;;86     	FLSTS &= Bit0_En;					//	Clear FLSTS.OVER
        0x000008ba:    6801        .h      LDR      r1,[r0,#0]
        0x000008bc:    2201        ."      MOVS     r2,#1
        0x000008be:    4011        .@      ANDS     r1,r1,r2
        0x000008c0:    6001        .`      STR      r1,[r0,#0]
;;;87     
;;;88     	if(FLSTS & Bit1_En)					//	Mistaken operation
        0x000008c2:    6800        .h      LDR      r0,[r0,#0]
        0x000008c4:    0780        ..      LSLS     r0,r0,#30
        0x000008c6:    2800        .(      CMP      r0,#0
        0x000008c8:    d508        ..      BPL      0x8dc ; Write_ROW_Bytes + 104
        0x000008ca:    e7ff        ..      B        0x8cc ; Write_ROW_Bytes + 88
        0x000008cc:    4a13        .J      LDR      r2,[pc,#76] ; [0x91c] = 0x40020000
;;;89     	{							   	
;;;90     		FLSTS &= Bit1_En;
        0x000008ce:    6811        .h      LDR      r1,[r2,#0]
        0x000008d0:    2002        .       MOVS     r0,#2
        0x000008d2:    4001        .@      ANDS     r1,r1,r0
        0x000008d4:    6011        .`      STR      r1,[r2,#0]
        0x000008d6:    a903        ..      ADD      r1,sp,#0xc
;;;91     		return	0x02;
        0x000008d8:    7008        .p      STRB     r0,[r1,#0]
        0x000008da:    e010        ..      B        0x8fe ; Write_ROW_Bytes + 138
;;;92     	}
;;;93     	if(mem_cmp((BYTE *)pDest,pSrc,len))
        0x000008dc:    9802        ..      LDR      r0,[sp,#8]
        0x000008de:    9901        ..      LDR      r1,[sp,#4]
        0x000008e0:    466a        jF      MOV      r2,sp
        0x000008e2:    8812        ..      LDRH     r2,[r2,#0]
        0x000008e4:    f000f8c1    ....    BL       mem_cmp ; 0xa6a
        0x000008e8:    2800        .(      CMP      r0,#0
        0x000008ea:    d004        ..      BEQ      0x8f6 ; Write_ROW_Bytes + 130
        0x000008ec:    e7ff        ..      B        0x8ee ; Write_ROW_Bytes + 122
        0x000008ee:    a903        ..      ADD      r1,sp,#0xc
        0x000008f0:    2004        .       MOVS     r0,#4
;;;94     	{
;;;95     		return	0x04;						//	Write verification failed
        0x000008f2:    7008        .p      STRB     r0,[r1,#0]
        0x000008f4:    e003        ..      B        0x8fe ; Write_ROW_Bytes + 138
        0x000008f6:    a903        ..      ADD      r1,sp,#0xc
        0x000008f8:    2001        .       MOVS     r0,#1
;;;96     	}
;;;97     	return 0x01;
        0x000008fa:    7008        .p      STRB     r0,[r1,#0]
        0x000008fc:    e7ff        ..      B        0x8fe ; Write_ROW_Bytes + 138
        0x000008fe:    a803        ..      ADD      r0,sp,#0xc
;;;98     }
        0x00000900:    7800        .x      LDRB     r0,[r0,#0]
        0x00000902:    b004        ..      ADD      sp,sp,#0x10
        0x00000904:    bd80        ..      POP      {r7,pc}
        0x00000906:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x00000908:    40020020     ..@    DCD    1073872928
    __arm_cp.2_1
        0x0000090c:    40020024    $..@    DCD    1073872932
    __arm_cp.2_2
        0x00000910:    4002000c    ...@    DCD    1073872908
    __arm_cp.2_3
        0x00000914:    40020004    ...@    DCD    1073872900
    __arm_cp.2_4
        0x00000918:    40020008    ...@    DCD    1073872904
    __arm_cp.2_5
        0x0000091c:    40020000    ...@    DCD    1073872896
    $t.6
    Write_page
;;;99     //===================================================
;;;100    BYTE	Write_page(WORD FlashAddr,BYTE * pSrc)
;;;101    {
        0x00000920:    b580        ..      PUSH     {r7,lr}
        0x00000922:    b086        ..      SUB      sp,sp,#0x18
        0x00000924:    9004        ..      STR      r0,[sp,#0x10]
        0x00000926:    9103        ..      STR      r1,[sp,#0xc]
        0x00000928:    a901        ..      ADD      r1,sp,#4
        0x0000092a:    2001        .       MOVS     r0,#1
;;;102        BYTE i, res = 0x01;
        0x0000092c:    7008        .p      STRB     r0,[r1,#0]
        0x0000092e:    a902        ..      ADD      r1,sp,#8
        0x00000930:    2000        .       MOVS     r0,#0
;;;103    	for (i = 0 ;i < PageSize/RowSize; i++)
        0x00000932:    7008        .p      STRB     r0,[r1,#0]
        0x00000934:    e7ff        ..      B        0x936 ; Write_page + 22
        0x00000936:    a802        ..      ADD      r0,sp,#8
        0x00000938:    7800        .x      LDRB     r0,[r0,#0]
        0x0000093a:    2803        .(      CMP      r0,#3
        0x0000093c:    dc27        '.      BGT      0x98e ; Write_page + 110
        0x0000093e:    e7ff        ..      B        0x940 ; Write_page + 32
;;;104    	{
;;;105    		if(mem_cmp((BYTE *)(FlashAddr + i * RowSize),pSrc + i * RowSize,RowSize))
        0x00000940:    9804        ..      LDR      r0,[sp,#0x10]
        0x00000942:    a902        ..      ADD      r1,sp,#8
        0x00000944:    7809        .x      LDRB     r1,[r1,#0]
        0x00000946:    01ca        ..      LSLS     r2,r1,#7
        0x00000948:    1880        ..      ADDS     r0,r0,r2
        0x0000094a:    9903        ..      LDR      r1,[sp,#0xc]
        0x0000094c:    1889        ..      ADDS     r1,r1,r2
        0x0000094e:    2280        ."      MOVS     r2,#0x80
        0x00000950:    f000f88b    ....    BL       mem_cmp ; 0xa6a
        0x00000954:    2800        .(      CMP      r0,#0
        0x00000956:    d014        ..      BEQ      0x982 ; Write_page + 98
        0x00000958:    e7ff        ..      B        0x95a ; Write_page + 58
;;;106    		{
;;;107    			if((res = Write_ROW_Bytes((BYTE *)(FlashAddr + i * RowSize),pSrc + i * RowSize,RowSize)) != 0x01)
        0x0000095a:    9804        ..      LDR      r0,[sp,#0x10]
        0x0000095c:    a902        ..      ADD      r1,sp,#8
        0x0000095e:    7809        .x      LDRB     r1,[r1,#0]
        0x00000960:    01ca        ..      LSLS     r2,r1,#7
        0x00000962:    1880        ..      ADDS     r0,r0,r2
        0x00000964:    9903        ..      LDR      r1,[sp,#0xc]
        0x00000966:    1889        ..      ADDS     r1,r1,r2
        0x00000968:    2280        ."      MOVS     r2,#0x80
        0x0000096a:    f7ffff83    ....    BL       Write_ROW_Bytes ; 0x874
        0x0000096e:    a901        ..      ADD      r1,sp,#4
        0x00000970:    7008        .p      STRB     r0,[r1,#0]
        0x00000972:    2801        .(      CMP      r0,#1
        0x00000974:    d004        ..      BEQ      0x980 ; Write_page + 96
        0x00000976:    e7ff        ..      B        0x978 ; Write_page + 88
;;;108    			{
;;;109    				return res;
        0x00000978:    9801        ..      LDR      r0,[sp,#4]
        0x0000097a:    a905        ..      ADD      r1,sp,#0x14
        0x0000097c:    7008        .p      STRB     r0,[r1,#0]
        0x0000097e:    e00a        ..      B        0x996 ; Write_page + 118
;;;110    			}
;;;111    		}
        0x00000980:    e7ff        ..      B        0x982 ; Write_page + 98
;;;112    	}
        0x00000982:    e7ff        ..      B        0x984 ; Write_page + 100
        0x00000984:    9802        ..      LDR      r0,[sp,#8]
        0x00000986:    1c40        @.      ADDS     r0,r0,#1
        0x00000988:    a902        ..      ADD      r1,sp,#8
        0x0000098a:    7008        .p      STRB     r0,[r1,#0]
        0x0000098c:    e7d3        ..      B        0x936 ; Write_page + 22
;;;113    	return res;
        0x0000098e:    9801        ..      LDR      r0,[sp,#4]
        0x00000990:    a905        ..      ADD      r1,sp,#0x14
        0x00000992:    7008        .p      STRB     r0,[r1,#0]
        0x00000994:    e7ff        ..      B        0x996 ; Write_page + 118
        0x00000996:    a805        ..      ADD      r0,sp,#0x14
;;;114    }
        0x00000998:    7800        .x      LDRB     r0,[r0,#0]
        0x0000099a:    b006        ..      ADD      sp,sp,#0x18
        0x0000099c:    bd80        ..      POP      {r7,pc}
        0x0000099e:    0000        ..      MOVS     r0,r0
    TransitBigLittle
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
;;;13     	*(WORD *)temp = *(WORD *)buffer;
        0x000009a0:    6801        .h      LDR      r1,[r0,#0]
        0x000009a2:    70c1        .p      STRB     r1,[r0,#3]
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c (13)
        0x000009a4:    0a0a        ..      LSRS     r2,r1,#8
        0x000009a6:    7082        .p      STRB     r2,[r0,#2]
        0x000009a8:    0c0a        ..      LSRS     r2,r1,#16
        0x000009aa:    7042        Bp      STRB     r2,[r0,#1]
        0x000009ac:    0e09        ..      LSRS     r1,r1,#24
;;;14     	
;;;15     	for(i=0;i<4;i++)
;;;16     	{
;;;17     		buffer[i] = temp[3-i];
        0x000009ae:    7001        .p      STRB     r1,[r0,#0]
;;;18     	}
;;;19     }
        0x000009b0:    4770        pG      BX       lr
    ExtractBEHalfword
;;;20     
;;;21     //====================================================
;;;22     //	Extract big endian halfword
;;;23     HALFW	ExtractBEHalfword(BYTE * buffer)
;;;24     {
;;;25     	return	((HALFW)(buffer[0] << 8) + buffer[1]);
        0x000009b2:    7841        Ax      LDRB     r1,[r0,#1]
        0x000009b4:    7800        .x      LDRB     r0,[r0,#0]
        0x000009b6:    0200        ..      LSLS     r0,r0,#8
        0x000009b8:    1840        @.      ADDS     r0,r0,r1
        0x000009ba:    b280        ..      UXTH     r0,r0
        0x000009bc:    4770        pG      BX       lr
    mem_cpyFwd
        0x000009be:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000009c0:    2a00        .*      CMP      r2,#0
        0x000009c2:    d008        ..      BEQ      0x9d6 ; mem_cpyFwd + 24
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
        0x000009c4:    2403        .$      MOVS     r4,#3
        0x000009c6:    4613        .F      MOV      r3,r2
        0x000009c8:    4023        #@      ANDS     r3,r3,r4
        0x000009ca:    1e55        U.      SUBS     r5,r2,#1
        0x000009cc:    2d03        .-      CMP      r5,#3
        0x000009ce:    d203        ..      BCS      0x9d8 ; mem_cpyFwd + 26
        0x000009d0:    2400        .$      MOVS     r4,#0
        0x000009d2:    2b00        .+      CMP      r3,#0
        0x000009d4:    d112        ..      BNE      0x9fc ; mem_cpyFwd + 62
        0x000009d6:    bdf0        ..      POP      {r4-r7,pc}
        0x000009d8:    43a2        .C      BICS     r2,r2,r4
        0x000009da:    2400        .$      MOVS     r4,#0
;;;1      
;;;2      #include	"TSIM.h"
;;;3      
;;;4      //====================================================
;;;5      //	Transit from Big Endian WORD to Little Endian WORD
;;;6      //	Transit from Little Endian WORD to Big Endian WORD
;;;7      void	TransitBigLittle(BYTE * buffer)
;;;8      {
;;;9      	int	i;
;;;10     	BYTE	temp[4];
;;;11     	
;;;12     	//	temp[i] = buffer[i],i=0~3,no matter Big or Little Endian
;;;13     	*(WORD *)temp = *(WORD *)buffer;
;;;14     	
;;;15     	for(i=0;i<4;i++)
;;;16     	{
;;;17     		buffer[i] = temp[3-i];
;;;18     	}
;;;19     }
;;;20     
;;;21     //====================================================
;;;22     //	Extract big endian halfword
;;;23     HALFW	ExtractBEHalfword(BYTE * buffer)
;;;24     {
;;;25     	return	((HALFW)(buffer[0] << 8) + buffer[1]);
;;;26     }
;;;27     
;;;28     //====================================================
;;;29     //	Copy memory from forward
;;;30     void	mem_cpyFwd(BYTE * dst,const BYTE * src,USHORT len)
;;;31     {
;;;32     	USHORT	i;
;;;33     	
;;;34     	for(i=0;i<len;i++)
;;;35     	{
;;;36     		dst[i] = *src++;
        0x000009dc:    5d0d        .]      LDRB     r5,[r1,r4]
        0x000009de:    5505        .U      STRB     r5,[r0,r4]
        0x000009e0:    1905        ..      ADDS     r5,r0,r4
        0x000009e2:    190e        ..      ADDS     r6,r1,r4
        0x000009e4:    7877        wx      LDRB     r7,[r6,#1]
        0x000009e6:    706f        op      STRB     r7,[r5,#1]
        0x000009e8:    78b7        .x      LDRB     r7,[r6,#2]
        0x000009ea:    70af        .p      STRB     r7,[r5,#2]
        0x000009ec:    78f6        .x      LDRB     r6,[r6,#3]
        0x000009ee:    70ee        .p      STRB     r6,[r5,#3]
        0x000009f0:    1d24        $.      ADDS     r4,r4,#4
        0x000009f2:    42a2        .B      CMP      r2,r4
        0x000009f4:    d1f2        ..      BNE      0x9dc ; mem_cpyFwd + 30
        0x000009f6:    1909        ..      ADDS     r1,r1,r4
        0x000009f8:    2b00        .+      CMP      r3,#0
        0x000009fa:    d0ec        ..      BEQ      0x9d6 ; mem_cpyFwd + 24
        0x000009fc:    780a        .x      LDRB     r2,[r1,#0]
        0x000009fe:    5502        .U      STRB     r2,[r0,r4]
        0x00000a00:    2b01        .+      CMP      r3,#1
        0x00000a02:    d0e8        ..      BEQ      0x9d6 ; mem_cpyFwd + 24
        0x00000a04:    1820         .      ADDS     r0,r4,r0
        0x00000a06:    784a        Jx      LDRB     r2,[r1,#1]
        0x00000a08:    7042        Bp      STRB     r2,[r0,#1]
        0x00000a0a:    2b02        .+      CMP      r3,#2
        0x00000a0c:    d0e3        ..      BEQ      0x9d6 ; mem_cpyFwd + 24
        0x00000a0e:    7889        .x      LDRB     r1,[r1,#2]
        0x00000a10:    7081        .p      STRB     r1,[r0,#2]
;;;37     	}
;;;38     }
        0x00000a12:    bdf0        ..      POP      {r4-r7,pc}
    mem_cpyBwd
;;;39     
;;;40     //====================================================
;;;41     //	Copy memory from backward
;;;42     void	mem_cpyBwd(BYTE * dst,const BYTE * src,USHORT len)
;;;43     {	
        0x00000a14:    b570        p.      PUSH     {r4-r6,lr}
        0x00000a16:    2a00        .*      CMP      r2,#0
        0x00000a18:    d026        &.      BEQ      0xa68 ; mem_cpyBwd + 84
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
        0x00000a1a:    2503        .%      MOVS     r5,#3
;;;1      
;;;2      #include	"TSIM.h"
;;;3      
;;;4      //====================================================
;;;5      //	Transit from Big Endian WORD to Little Endian WORD
;;;6      //	Transit from Little Endian WORD to Big Endian WORD
;;;7      void	TransitBigLittle(BYTE * buffer)
;;;8      {
;;;9      	int	i;
;;;10     	BYTE	temp[4];
;;;11     	
;;;12     	//	temp[i] = buffer[i],i=0~3,no matter Big or Little Endian
;;;13     	*(WORD *)temp = *(WORD *)buffer;
;;;14     	
;;;15     	for(i=0;i<4;i++)
;;;16     	{
;;;17     		buffer[i] = temp[3-i];
;;;18     	}
;;;19     }
;;;20     
;;;21     //====================================================
;;;22     //	Extract big endian halfword
;;;23     HALFW	ExtractBEHalfword(BYTE * buffer)
;;;24     {
;;;25     	return	((HALFW)(buffer[0] << 8) + buffer[1]);
;;;26     }
;;;27     
;;;28     //====================================================
;;;29     //	Copy memory from forward
;;;30     void	mem_cpyFwd(BYTE * dst,const BYTE * src,USHORT len)
;;;31     {
;;;32     	USHORT	i;
;;;33     	
;;;34     	for(i=0;i<len;i++)
;;;35     	{
;;;36     		dst[i] = *src++;
;;;37     	}
;;;38     }
;;;39     
;;;40     //====================================================
;;;41     //	Copy memory from backward
;;;42     void	mem_cpyBwd(BYTE * dst,const BYTE * src,USHORT len)
;;;43     {	
;;;44     	while(len>0)
        0x00000a1c:    4015        .@      ANDS     r5,r5,r2
        0x00000a1e:    1e54        T.      SUBS     r4,r2,#1
        0x00000a20:    2d00        .-      CMP      r5,#0
        0x00000a22:    d00d        ..      BEQ      0xa40 ; mem_cpyBwd + 44
;;;45     	{
;;;46     		dst[len-1] = src[len-1];
        0x00000a24:    1e53        S.      SUBS     r3,r2,#1
        0x00000a26:    5cce        .\      LDRB     r6,[r1,r3]
        0x00000a28:    54c6        .T      STRB     r6,[r0,r3]
        0x00000a2a:    2d01        .-      CMP      r5,#1
        0x00000a2c:    d009        ..      BEQ      0xa42 ; mem_cpyBwd + 46
        0x00000a2e:    1e93        ..      SUBS     r3,r2,#2
        0x00000a30:    5cce        .\      LDRB     r6,[r1,r3]
        0x00000a32:    54c6        .T      STRB     r6,[r0,r3]
        0x00000a34:    2d02        .-      CMP      r5,#2
        0x00000a36:    d004        ..      BEQ      0xa42 ; mem_cpyBwd + 46
        0x00000a38:    1ed3        ..      SUBS     r3,r2,#3
        0x00000a3a:    5cca        .\      LDRB     r2,[r1,r3]
        0x00000a3c:    54c2        .T      STRB     r2,[r0,r3]
        0x00000a3e:    e000        ..      B        0xa42 ; mem_cpyBwd + 46
        0x00000a40:    4613        .F      MOV      r3,r2
        0x00000a42:    b2a2        ..      UXTH     r2,r4
        0x00000a44:    2a03        .*      CMP      r2,#3
        0x00000a46:    d30f        ..      BCC      0xa68 ; mem_cpyBwd + 84
        0x00000a48:    1f1a        ..      SUBS     r2,r3,#4
        0x00000a4a:    1889        ..      ADDS     r1,r1,r2
        0x00000a4c:    1880        ..      ADDS     r0,r0,r2
        0x00000a4e:    78ca        .x      LDRB     r2,[r1,#3]
        0x00000a50:    70c2        .p      STRB     r2,[r0,#3]
        0x00000a52:    788a        .x      LDRB     r2,[r1,#2]
        0x00000a54:    7082        .p      STRB     r2,[r0,#2]
        0x00000a56:    784a        Jx      LDRB     r2,[r1,#1]
        0x00000a58:    7042        Bp      STRB     r2,[r0,#1]
        0x00000a5a:    780a        .x      LDRB     r2,[r1,#0]
        0x00000a5c:    7002        .p      STRB     r2,[r0,#0]
        0x00000a5e:    1f09        ..      SUBS     r1,r1,#4
        0x00000a60:    1f00        ..      SUBS     r0,r0,#4
;;;47     		len--;
        0x00000a62:    1f1b        ..      SUBS     r3,r3,#4
        0x00000a64:    041a        ..      LSLS     r2,r3,#16
        0x00000a66:    d1f2        ..      BNE      0xa4e ; mem_cpyBwd + 58
;;;48     	}
;;;49     }
        0x00000a68:    bd70        p.      POP      {r4-r6,pc}
    mem_cmp
        0x00000a6a:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000a6c:    b086        ..      SUB      sp,sp,#0x18
        0x00000a6e:    2a00        .*      CMP      r2,#0
        0x00000a70:    d037        7.      BEQ      0xae2 ; mem_cmp + 120
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
        0x00000a72:    2303        .#      MOVS     r3,#3
        0x00000a74:    1a9b        ..      SUBS     r3,r3,r2
        0x00000a76:    9301        ..      STR      r3,[sp,#4]
        0x00000a78:    2302        .#      MOVS     r3,#2
        0x00000a7a:    43db        .C      MVNS     r3,r3
        0x00000a7c:    1a9b        ..      SUBS     r3,r3,r2
        0x00000a7e:    9302        ..      STR      r3,[sp,#8]
        0x00000a80:    4252        RB      RSBS     r2,r2,#0
        0x00000a82:    9205        ..      STR      r2,[sp,#0x14]
        0x00000a84:    2600        .&      MOVS     r6,#0
        0x00000a86:    9100        ..      STR      r1,[sp,#0]
        0x00000a88:    5d8b        .]      LDRB     r3,[r1,r6]
        0x00000a8a:    5d84        .]      LDRB     r4,[r0,r6]
        0x00000a8c:    2201        ."      MOVS     r2,#1
        0x00000a8e:    429c        .B      CMP      r4,r3
        0x00000a90:    d124        $.      BNE      0xadc ; mem_cmp + 114
        0x00000a92:    9b02        ..      LDR      r3,[sp,#8]
        0x00000a94:    199b        ..      ADDS     r3,r3,r6
        0x00000a96:    2400        .$      MOVS     r4,#0
        0x00000a98:    1d1b        ..      ADDS     r3,r3,#4
        0x00000a9a:    d02e        ..      BEQ      0xafa ; mem_cmp + 144
        0x00000a9c:    9403        ..      STR      r4,[sp,#0xc]
        0x00000a9e:    9204        ..      STR      r2,[sp,#0x10]
        0x00000aa0:    198b        ..      ADDS     r3,r1,r6
        0x00000aa2:    1984        ..      ADDS     r4,r0,r6
        0x00000aa4:    7865        ex      LDRB     r5,[r4,#1]
        0x00000aa6:    785f        _x      LDRB     r7,[r3,#1]
        0x00000aa8:    42bd        .B      CMP      r5,r7
        0x00000aaa:    d11e        ..      BNE      0xaea ; mem_cmp + 128
        0x00000aac:    4602        .F      MOV      r2,r0
;;;1      
;;;2      #include	"TSIM.h"
;;;3      
;;;4      //====================================================
;;;5      //	Transit from Big Endian WORD to Little Endian WORD
;;;6      //	Transit from Little Endian WORD to Big Endian WORD
;;;7      void	TransitBigLittle(BYTE * buffer)
;;;8      {
;;;9      	int	i;
;;;10     	BYTE	temp[4];
;;;11     	
;;;12     	//	temp[i] = buffer[i],i=0~3,no matter Big or Little Endian
;;;13     	*(WORD *)temp = *(WORD *)buffer;
;;;14     	
;;;15     	for(i=0;i<4;i++)
;;;16     	{
;;;17     		buffer[i] = temp[3-i];
;;;18     	}
;;;19     }
;;;20     
;;;21     //====================================================
;;;22     //	Extract big endian halfword
;;;23     HALFW	ExtractBEHalfword(BYTE * buffer)
;;;24     {
;;;25     	return	((HALFW)(buffer[0] << 8) + buffer[1]);
;;;26     }
;;;27     
;;;28     //====================================================
;;;29     //	Copy memory from forward
;;;30     void	mem_cpyFwd(BYTE * dst,const BYTE * src,USHORT len)
;;;31     {
;;;32     	USHORT	i;
;;;33     	
;;;34     	for(i=0;i<len;i++)
;;;35     	{
;;;36     		dst[i] = *src++;
;;;37     	}
;;;38     }
;;;39     
;;;40     //====================================================
;;;41     //	Copy memory from backward
;;;42     void	mem_cpyBwd(BYTE * dst,const BYTE * src,USHORT len)
;;;43     {	
;;;44     	while(len>0)
;;;45     	{
;;;46     		dst[len-1] = src[len-1];
;;;47     		len--;
;;;48     	}
;;;49     }
;;;50     
;;;51     //====================================================
;;;52     //	Compare memory
;;;53     BYTE	mem_cmp(const BYTE * dst, const BYTE * src,USHORT len)
;;;54     {
;;;55     	USHORT	i;
;;;56     	
;;;57     	for(i=0;i<len;i++)
        0x00000aae:    9805        ..      LDR      r0,[sp,#0x14]
        0x00000ab0:    1985        ..      ADDS     r5,r0,r6
        0x00000ab2:    1cad        ..      ADDS     r5,r5,#2
        0x00000ab4:    d01d        ..      BEQ      0xaf2 ; mem_cmp + 136
        0x00000ab6:    78a5        .x      LDRB     r5,[r4,#2]
        0x00000ab8:    789f        .x      LDRB     r7,[r3,#2]
        0x00000aba:    42bd        .B      CMP      r5,r7
        0x00000abc:    d115        ..      BNE      0xaea ; mem_cmp + 128
        0x00000abe:    9801        ..      LDR      r0,[sp,#4]
        0x00000ac0:    1985        ..      ADDS     r5,r0,r6
        0x00000ac2:    d016        ..      BEQ      0xaf2 ; mem_cmp + 136
        0x00000ac4:    78e4        .x      LDRB     r4,[r4,#3]
        0x00000ac6:    78db        .x      LDRB     r3,[r3,#3]
        0x00000ac8:    429c        .B      CMP      r4,r3
        0x00000aca:    9900        ..      LDR      r1,[sp,#0]
        0x00000acc:    4610        .F      MOV      r0,r2
        0x00000ace:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00000ad0:    d104        ..      BNE      0xadc ; mem_cmp + 114
        0x00000ad2:    1d36        6.      ADDS     r6,r6,#4
        0x00000ad4:    9a05        ..      LDR      r2,[sp,#0x14]
        0x00000ad6:    1992        ..      ADDS     r2,r2,r6
        0x00000ad8:    9a03        ..      LDR      r2,[sp,#0xc]
        0x00000ada:    d1d5        ..      BNE      0xa88 ; mem_cmp + 30
;;;58     	{
;;;59     		if(dst[i] != *src++)
;;;60     			return 1;
;;;61     	}
;;;62     	return 0;
;;;63     }
        0x00000adc:    4610        .F      MOV      r0,r2
        0x00000ade:    b006        ..      ADD      sp,sp,#0x18
        0x00000ae0:    bdf0        ..      POP      {r4-r7,pc}
        0x00000ae2:    2200        ."      MOVS     r2,#0
        0x00000ae4:    4610        .F      MOV      r0,r2
        0x00000ae6:    b006        ..      ADD      sp,sp,#0x18
        0x00000ae8:    bdf0        ..      POP      {r4-r7,pc}
        0x00000aea:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00000aec:    4610        .F      MOV      r0,r2
        0x00000aee:    b006        ..      ADD      sp,sp,#0x18
        0x00000af0:    bdf0        ..      POP      {r4-r7,pc}
        0x00000af2:    9a03        ..      LDR      r2,[sp,#0xc]
        0x00000af4:    4610        .F      MOV      r0,r2
        0x00000af6:    b006        ..      ADD      sp,sp,#0x18
        0x00000af8:    bdf0        ..      POP      {r4-r7,pc}
        0x00000afa:    4622        "F      MOV      r2,r4
        0x00000afc:    4610        .F      MOV      r0,r2
        0x00000afe:    b006        ..      ADD      sp,sp,#0x18
        0x00000b00:    bdf0        ..      POP      {r4-r7,pc}
        0x00000b02:    46c0        .F      MOV      r8,r8
    mem_cpy_autoadapt
;;;64     
;;;65     //====================================================
;;;66     //	Copy memory auto adapt
;;;67     void	mem_cpy_autoadapt(BYTE * dst,const BYTE * src,HALFW len)
;;;68     {
        0x00000b04:    b510        ..      PUSH     {r4,lr}
        0x00000b06:    2a00        .*      CMP      r2,#0
        0x00000b08:    d021        !.      BEQ      0xb4e ; mem_cpy_autoadapt + 74
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
        0x00000b0a:    4b11        .K      LDR      r3,[pc,#68] ; [0xb50] = 0xfffc
        0x00000b0c:    e007        ..      B        0xb1e ; mem_cpy_autoadapt + 26
        0x00000b0e:    780c        .x      LDRB     r4,[r1,#0]
        0x00000b10:    7004        .p      STRB     r4,[r0,#0]
        0x00000b12:    1cdc        ..      ADDS     r4,r3,#3
        0x00000b14:    1c40        @.      ADDS     r0,r0,#1
        0x00000b16:    1c49        I.      ADDS     r1,r1,#1
        0x00000b18:    1912        ..      ADDS     r2,r2,r4
        0x00000b1a:    0414        ..      LSLS     r4,r2,#16
        0x00000b1c:    d017        ..      BEQ      0xb4e ; mem_cpy_autoadapt + 74
        0x00000b1e:    078c        ..      LSLS     r4,r1,#30
        0x00000b20:    d00c        ..      BEQ      0xb3c ; mem_cpy_autoadapt + 56
        0x00000b22:    07cc        ..      LSLS     r4,r1,#31
        0x00000b24:    d1f3        ..      BNE      0xb0e ; mem_cpy_autoadapt + 10
        0x00000b26:    07c4        ..      LSLS     r4,r0,#31
        0x00000b28:    d1f1        ..      BNE      0xb0e ; mem_cpy_autoadapt + 10
        0x00000b2a:    b294        ..      UXTH     r4,r2
        0x00000b2c:    2c02        .,      CMP      r4,#2
        0x00000b2e:    d3ee        ..      BCC      0xb0e ; mem_cpy_autoadapt + 10
        0x00000b30:    880c        ..      LDRH     r4,[r1,#0]
        0x00000b32:    8004        ..      STRH     r4,[r0,#0]
        0x00000b34:    1c9c        ..      ADDS     r4,r3,#2
        0x00000b36:    1c89        ..      ADDS     r1,r1,#2
        0x00000b38:    1c80        ..      ADDS     r0,r0,#2
        0x00000b3a:    e7ed        ..      B        0xb18 ; mem_cpy_autoadapt + 20
        0x00000b3c:    0784        ..      LSLS     r4,r0,#30
        0x00000b3e:    d1f0        ..      BNE      0xb22 ; mem_cpy_autoadapt + 30
        0x00000b40:    b294        ..      UXTH     r4,r2
;;;1      
;;;2      #include	"TSIM.h"
;;;3      
;;;4      //====================================================
;;;5      //	Transit from Big Endian WORD to Little Endian WORD
;;;6      //	Transit from Little Endian WORD to Big Endian WORD
;;;7      void	TransitBigLittle(BYTE * buffer)
;;;8      {
;;;9      	int	i;
;;;10     	BYTE	temp[4];
;;;11     	
;;;12     	//	temp[i] = buffer[i],i=0~3,no matter Big or Little Endian
;;;13     	*(WORD *)temp = *(WORD *)buffer;
;;;14     	
;;;15     	for(i=0;i<4;i++)
;;;16     	{
;;;17     		buffer[i] = temp[3-i];
;;;18     	}
;;;19     }
;;;20     
;;;21     //====================================================
;;;22     //	Extract big endian halfword
;;;23     HALFW	ExtractBEHalfword(BYTE * buffer)
;;;24     {
;;;25     	return	((HALFW)(buffer[0] << 8) + buffer[1]);
;;;26     }
;;;27     
;;;28     //====================================================
;;;29     //	Copy memory from forward
;;;30     void	mem_cpyFwd(BYTE * dst,const BYTE * src,USHORT len)
;;;31     {
;;;32     	USHORT	i;
;;;33     	
;;;34     	for(i=0;i<len;i++)
;;;35     	{
;;;36     		dst[i] = *src++;
;;;37     	}
;;;38     }
;;;39     
;;;40     //====================================================
;;;41     //	Copy memory from backward
;;;42     void	mem_cpyBwd(BYTE * dst,const BYTE * src,USHORT len)
;;;43     {	
;;;44     	while(len>0)
;;;45     	{
;;;46     		dst[len-1] = src[len-1];
;;;47     		len--;
;;;48     	}
;;;49     }
;;;50     
;;;51     //====================================================
;;;52     //	Compare memory
;;;53     BYTE	mem_cmp(const BYTE * dst, const BYTE * src,USHORT len)
;;;54     {
;;;55     	USHORT	i;
;;;56     	
;;;57     	for(i=0;i<len;i++)
;;;58     	{
;;;59     		if(dst[i] != *src++)
;;;60     			return 1;
;;;61     	}
;;;62     	return 0;
;;;63     }
;;;64     
;;;65     //====================================================
;;;66     //	Copy memory auto adapt
;;;67     void	mem_cpy_autoadapt(BYTE * dst,const BYTE * src,HALFW len)
;;;68     {
;;;69     	while(len > 0)
;;;70     	{
;;;71     		if(((WORD)src % 4 == 0) && ((WORD)dst % 4 == 0) && (len >= 4))
        0x00000b42:    2c04        .,      CMP      r4,#4
        0x00000b44:    d3ed        ..      BCC      0xb22 ; mem_cpy_autoadapt + 30
;;;72     		{
;;;73     			*(WORD *)dst = *(WORD *)src;
        0x00000b46:    c910        ..      LDM      r1!,{r4}
        0x00000b48:    c010        ..      STM      r0!,{r4}
        0x00000b4a:    461c        .F      MOV      r4,r3
        0x00000b4c:    e7e4        ..      B        0xb18 ; mem_cpy_autoadapt + 20
;;;74     			dst += 4;
;;;75     			src += 4;
;;;76     			len -= 4;
;;;77     		}
;;;78     		else if(((WORD)src % 2 == 0) && ((WORD)dst % 2 == 0) && (len >= 2))
;;;79     		{
;;;80     			*(HALFW *)dst = *(HALFW *)src;
;;;81     			dst += 2;
;;;82     			src += 2;
;;;83     			len -= 2;
;;;84     		}
;;;85     		else
;;;86     		{
;;;87     			*dst ++ = *src ++;
;;;88     			len --;
;;;89     		}
;;;90     	}
;;;91     }
        0x00000b4e:    bd10        ..      POP      {r4,pc}
    $d.1
    __arm_cp.5_0
        0x00000b50:    0000fffc    ....    DCD    65532
    $t.2
    mem_set
;;;92     //====================================================
;;;93     // Set memory with given value
;;;94     void	mem_set(BYTE * dst,BYTE value,USHORT len){
        0x00000b54:    b580        ..      PUSH     {r7,lr}
        0x00000b56:    2a00        .*      CMP      r2,#0
        0x00000b58:    d004        ..      BEQ      0xb64 ; mem_set + 16
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
        0x00000b5a:    460b        .F      MOV      r3,r1
;;;1      
;;;2      #include	"TSIM.h"
;;;3      
;;;4      //====================================================
;;;5      //	Transit from Big Endian WORD to Little Endian WORD
;;;6      //	Transit from Little Endian WORD to Big Endian WORD
;;;7      void	TransitBigLittle(BYTE * buffer)
;;;8      {
;;;9      	int	i;
;;;10     	BYTE	temp[4];
;;;11     	
;;;12     	//	temp[i] = buffer[i],i=0~3,no matter Big or Little Endian
;;;13     	*(WORD *)temp = *(WORD *)buffer;
;;;14     	
;;;15     	for(i=0;i<4;i++)
;;;16     	{
;;;17     		buffer[i] = temp[3-i];
;;;18     	}
;;;19     }
;;;20     
;;;21     //====================================================
;;;22     //	Extract big endian halfword
;;;23     HALFW	ExtractBEHalfword(BYTE * buffer)
;;;24     {
;;;25     	return	((HALFW)(buffer[0] << 8) + buffer[1]);
;;;26     }
;;;27     
;;;28     //====================================================
;;;29     //	Copy memory from forward
;;;30     void	mem_cpyFwd(BYTE * dst,const BYTE * src,USHORT len)
;;;31     {
;;;32     	USHORT	i;
;;;33     	
;;;34     	for(i=0;i<len;i++)
;;;35     	{
;;;36     		dst[i] = *src++;
;;;37     	}
;;;38     }
;;;39     
;;;40     //====================================================
;;;41     //	Copy memory from backward
;;;42     void	mem_cpyBwd(BYTE * dst,const BYTE * src,USHORT len)
;;;43     {	
;;;44     	while(len>0)
;;;45     	{
;;;46     		dst[len-1] = src[len-1];
;;;47     		len--;
;;;48     	}
;;;49     }
;;;50     
;;;51     //====================================================
;;;52     //	Compare memory
;;;53     BYTE	mem_cmp(const BYTE * dst, const BYTE * src,USHORT len)
;;;54     {
;;;55     	USHORT	i;
;;;56     	
;;;57     	for(i=0;i<len;i++)
;;;58     	{
;;;59     		if(dst[i] != *src++)
;;;60     			return 1;
;;;61     	}
;;;62     	return 0;
;;;63     }
;;;64     
;;;65     //====================================================
;;;66     //	Copy memory auto adapt
;;;67     void	mem_cpy_autoadapt(BYTE * dst,const BYTE * src,HALFW len)
;;;68     {
;;;69     	while(len > 0)
;;;70     	{
;;;71     		if(((WORD)src % 4 == 0) && ((WORD)dst % 4 == 0) && (len >= 4))
;;;72     		{
;;;73     			*(WORD *)dst = *(WORD *)src;
;;;74     			dst += 4;
;;;75     			src += 4;
;;;76     			len -= 4;
;;;77     		}
;;;78     		else if(((WORD)src % 2 == 0) && ((WORD)dst % 2 == 0) && (len >= 2))
;;;79     		{
;;;80     			*(HALFW *)dst = *(HALFW *)src;
;;;81     			dst += 2;
;;;82     			src += 2;
;;;83     			len -= 2;
;;;84     		}
;;;85     		else
;;;86     		{
;;;87     			*dst ++ = *src ++;
;;;88     			len --;
;;;89     		}
;;;90     	}
;;;91     }
;;;92     //====================================================
;;;93     // Set memory with given value
;;;94     void	mem_set(BYTE * dst,BYTE value,USHORT len){
;;;95     	USHORT	i;
;;;96     	
;;;97     	for(i=0;i<len;i++)
;;;98     	{
;;;99     		dst[i] = value;
        0x00000b5c:    4611        .F      MOV      r1,r2
        0x00000b5e:    461a        .F      MOV      r2,r3
        0x00000b60:    f006fe45    ..E.    BL       __aeabi_memset ; 0x77ee
;;;100    	}
;;;101    }
        0x00000b64:    bd80        ..      POP      {r7,pc}
    IsFlash
        0x00000b66:    0b00        ..      LSRS     r0,r0,#12
        0x00000b68:    2855        U(      CMP      r0,#0x55
        0x00000b6a:    d301        ..      BCC      0xb70 ; IsFlash + 10
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
        0x00000b6c:    2000        .       MOVS     r0,#0
        0x00000b6e:    4770        pG      BX       lr
        0x00000b70:    2001        .       MOVS     r0,#1
;;;1      
;;;2      #include	"TSIM.h"
;;;3      
;;;4      //====================================================
;;;5      //	Transit from Big Endian WORD to Little Endian WORD
;;;6      //	Transit from Little Endian WORD to Big Endian WORD
;;;7      void	TransitBigLittle(BYTE * buffer)
;;;8      {
;;;9      	int	i;
;;;10     	BYTE	temp[4];
;;;11     	
;;;12     	//	temp[i] = buffer[i],i=0~3,no matter Big or Little Endian
;;;13     	*(WORD *)temp = *(WORD *)buffer;
;;;14     	
;;;15     	for(i=0;i<4;i++)
;;;16     	{
;;;17     		buffer[i] = temp[3-i];
;;;18     	}
;;;19     }
;;;20     
;;;21     //====================================================
;;;22     //	Extract big endian halfword
;;;23     HALFW	ExtractBEHalfword(BYTE * buffer)
;;;24     {
;;;25     	return	((HALFW)(buffer[0] << 8) + buffer[1]);
;;;26     }
;;;27     
;;;28     //====================================================
;;;29     //	Copy memory from forward
;;;30     void	mem_cpyFwd(BYTE * dst,const BYTE * src,USHORT len)
;;;31     {
;;;32     	USHORT	i;
;;;33     	
;;;34     	for(i=0;i<len;i++)
;;;35     	{
;;;36     		dst[i] = *src++;
;;;37     	}
;;;38     }
;;;39     
;;;40     //====================================================
;;;41     //	Copy memory from backward
;;;42     void	mem_cpyBwd(BYTE * dst,const BYTE * src,USHORT len)
;;;43     {	
;;;44     	while(len>0)
;;;45     	{
;;;46     		dst[len-1] = src[len-1];
;;;47     		len--;
;;;48     	}
;;;49     }
;;;50     
;;;51     //====================================================
;;;52     //	Compare memory
;;;53     BYTE	mem_cmp(const BYTE * dst, const BYTE * src,USHORT len)
;;;54     {
;;;55     	USHORT	i;
;;;56     	
;;;57     	for(i=0;i<len;i++)
;;;58     	{
;;;59     		if(dst[i] != *src++)
;;;60     			return 1;
;;;61     	}
;;;62     	return 0;
;;;63     }
;;;64     
;;;65     //====================================================
;;;66     //	Copy memory auto adapt
;;;67     void	mem_cpy_autoadapt(BYTE * dst,const BYTE * src,HALFW len)
;;;68     {
;;;69     	while(len > 0)
;;;70     	{
;;;71     		if(((WORD)src % 4 == 0) && ((WORD)dst % 4 == 0) && (len >= 4))
;;;72     		{
;;;73     			*(WORD *)dst = *(WORD *)src;
;;;74     			dst += 4;
;;;75     			src += 4;
;;;76     			len -= 4;
;;;77     		}
;;;78     		else if(((WORD)src % 2 == 0) && ((WORD)dst % 2 == 0) && (len >= 2))
;;;79     		{
;;;80     			*(HALFW *)dst = *(HALFW *)src;
;;;81     			dst += 2;
;;;82     			src += 2;
;;;83     			len -= 2;
;;;84     		}
;;;85     		else
;;;86     		{
;;;87     			*dst ++ = *src ++;
;;;88     			len --;
;;;89     		}
;;;90     	}
;;;91     }
;;;92     //====================================================
;;;93     // Set memory with given value
;;;94     void	mem_set(BYTE * dst,BYTE value,USHORT len){
;;;95     	USHORT	i;
;;;96     	
;;;97     	for(i=0;i<len;i++)
;;;98     	{
;;;99     		dst[i] = value;
;;;100    	}
;;;101    }
;;;102    //====================================================
;;;103    //	Flash area
;;;104    BYTE	IsFlash(WORD addr)
;;;105    {
;;;106    	BYTE rtn;
;;;107    	if (addr == FlashStart)
;;;108    	{
;;;109    		rtn = 1;
;;;110    	}
;;;111    	else if (addr > FlashStart)
;;;112    	{
;;;113    		if (addr < FlashLimit)
;;;114    		{
;;;115    			rtn = 1;
;;;116    		}
;;;117    		else
;;;118    		{
;;;119    			rtn = 0;
;;;120    		}
;;;121    	}
;;;122    	else
;;;123    	{
;;;124    		rtn = 0;
;;;125    	}
;;;126    	return rtn;
        0x00000b72:    4770        pG      BX       lr
    IsOTP
;;;127    }
;;;128    
;;;129    //====================================================
;;;130    //	OTP area			
;;;131    BYTE	IsOTP(WORD addr)
;;;132    {
;;;133    	return(addr >= OTPStart ? (addr < OTPLimit ? 1 : 0) : 0);
        0x00000b74:    0a80        ..      LSRS     r0,r0,#10
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\Memory_API.c
        0x00000b76:    4902        .I      LDR      r1,[pc,#8] ; [0xb80] = 0xfffe0000
        0x00000b78:    1841        A.      ADDS     r1,r0,r1
        0x00000b7a:    4248        HB      RSBS     r0,r1,#0
        0x00000b7c:    4148        HA      ADCS     r0,r0,r1
        0x00000b7e:    4770        pG      BX       lr
    $d.3
    __arm_cp.8_0
        0x00000b80:    fffe0000    ....    DCD    4294836224
    $t.0
    HWInit
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\SC_API.c
;;;8      {	
        0x00000b84:    4803        .H      LDR      r0,[pc,#12] ; [0xb94] = 0x40000010
        0x00000b86:    2180        .!      MOVS     r1,#0x80
;;;9      	SCSYS = 0x80;			
        0x00000b88:    6001        .`      STR      r1,[r0,#0]
        0x00000b8a:    4803        .H      LDR      r0,[pc,#12] ; [0xb98] = 0x4008001c
        0x00000b8c:    21ff        .!      MOVS     r1,#0xff
;;;10     	ISOMSK = 0xFF;
        0x00000b8e:    6001        .`      STR      r1,[r0,#0]
;;;11     // 	ISOCON1	= 0x27;				//	EGT = 4
;;;12     }
        0x00000b90:    4770        pG      BX       lr
        0x00000b92:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x00000b94:    40000010    ...@    DCD    1073741840
    __arm_cp.0_1
        0x00000b98:    4008001c    ...@    DCD    1074266140
    $t.2
    sleep_mode
;;;13     
;;;14     //====================================================
;;;15     //	Chip enters idle mode, be awaken up by UART interrupt
;;;16     void	sleep_mode(void)
;;;17     {
        0x00000b9c:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00000b9e:    4809        .H      LDR      r0,[pc,#36] ; [0xbc4] = 0x40060000
        0x00000ba0:    6801        .h      LDR      r1,[r0,#0]
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\SC_API.c
        0x00000ba2:    4a09        .J      LDR      r2,[pc,#36] ; [0xbc8] = 0x40061000
        0x00000ba4:    6813        .h      LDR      r3,[r2,#0]
        0x00000ba6:    2400        .$      MOVS     r4,#0
;;;1      
;;;2      #include	"TSIM.h"
;;;3      //#define	Emulator	1		//	Just for debug in emulator
;;;4      
;;;5      //====================================================
;;;6      //	Initialize H/W
;;;7      void	HWInit(void)
;;;8      {	
;;;9      	SCSYS = 0x80;			
;;;10     	ISOMSK = 0xFF;
;;;11     // 	ISOCON1	= 0x27;				//	EGT = 4
;;;12     }
;;;13     
;;;14     //====================================================
;;;15     //	Chip enters idle mode, be awaken up by UART interrupt
;;;16     void	sleep_mode(void)
;;;17     {
;;;18     	WORD	BackUpVDCON = VDCON;
;;;19     	WORD	BackUpFDCON = FDCON;
;;;20     
;;;21     	VDCON = 0x00;
        0x00000ba8:    6004        .`      STR      r4,[r0,#0]
;;;22     	FDCON = 0x00;
        0x00000baa:    6014        .`      STR      r4,[r2,#0]
        0x00000bac:    2401        .$      MOVS     r4,#1
        0x00000bae:    07a5        ..      LSLS     r5,r4,#30
;;;23     	
;;;24     	SCSLEEP = 0x01;						
        0x00000bb0:    602c        ,`      STR      r4,[r5,#0]
;;;25     
;;;26     	__nop();
        0x00000bb2:    bf00        ..      NOP      
;;;27     	__nop();	
        0x00000bb4:    bf00        ..      NOP      
;;;28     	__nop();
        0x00000bb6:    bf00        ..      NOP      
;;;29     	__nop();			
        0x00000bb8:    bf00        ..      NOP      
;;;30     	__nop();
        0x00000bba:    bf00        ..      NOP      
;;;31     
;;;32     
;;;33     #if	Emulator
;;;34     	while(SCSLEEP == 0x01);					//	Just for emulator debugging
;;;35     #endif
;;;36        VDCON = BackUpVDCON;
        0x00000bbc:    6001        .`      STR      r1,[r0,#0]
;;;37        FDCON = BackUpFDCON;
        0x00000bbe:    6013        .`      STR      r3,[r2,#0]
;;;38     }
        0x00000bc0:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00000bc2:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00000bc4:    40060000    ...@    DCD    1074135040
    __arm_cp.1_1
        0x00000bc8:    40061000    ...@    DCD    1074139136
    $t.0
    TMR_ISR
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\SC000_ISR.c
;;;6      {
        0x00000bcc:    2002        .       MOVS     r0,#2
        0x00000bce:    43c0        .C      MVNS     r0,r0
        0x00000bd0:    4909        .I      LDR      r1,[pc,#36] ; [0xbf8] = 0x40000204
        0x00000bd2:    680a        .h      LDR      r2,[r1,#0]
        0x00000bd4:    07d2        ..      LSLS     r2,r2,#31
        0x00000bd6:    d104        ..      BNE      0xbe2 ; TMR_ISR + 22
        0x00000bd8:    6809        .h      LDR      r1,[r1,#0]
        0x00000bda:    0789        ..      LSLS     r1,r1,#30
        0x00000bdc:    d50b        ..      BPL      0xbf6 ; TMR_ISR + 42
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\SC000_ISR.c
        0x00000bde:    2180        .!      MOVS     r1,#0x80
        0x00000be0:    e001        ..      B        0xbe6 ; TMR_ISR + 26
        0x00000be2:    1c40        @.      ADDS     r0,r0,#1
        0x00000be4:    2120         !      MOVS     r1,#0x20
        0x00000be6:    4a05        .J      LDR      r2,[pc,#20] ; [0xbfc] = 0x40000104
        0x00000be8:    6813        .h      LDR      r3,[r2,#0]
        0x00000bea:    4003        .@      ANDS     r3,r3,r0
        0x00000bec:    6013        .`      STR      r3,[r2,#0]
        0x00000bee:    4804        .H      LDR      r0,[pc,#16] ; [0xc00] = 0x40003018
        0x00000bf0:    6802        .h      LDR      r2,[r0,#0]
        0x00000bf2:    400a        .@      ANDS     r2,r2,r1
        0x00000bf4:    6002        .`      STR      r2,[r0,#0]
        0x00000bf6:    4770        pG      BX       lr
    $d.1
    __arm_cp.0_0
        0x00000bf8:    40000204    ...@    DCD    1073742340
    __arm_cp.0_1
        0x00000bfc:    40000104    ...@    DCD    1073742084
    __arm_cp.0_2
        0x00000c00:    40003018    .0.@    DCD    1073754136
    $t.2
    FLASH_ISR
;;;1      #include	"TSIM.h"
;;;2      
;;;3      //====================================================
;;;4      //	Timer 0 interrutp service routine
;;;5      void	TMR_ISR(void)
;;;6      {
;;;7      	if(SCINTSTS1 & Bit0_En )				//	TIMER0
;;;8      	{	
;;;9      		SCINTEN1 &= Bit0_Dis;
;;;10     		TCON &= Bit5_En;					
;;;11     	}
;;;12     	else if(SCINTSTS1 & Bit1_En)			//	TIMER1
;;;13     	{
;;;14     		SCINTEN1 &= Bit1_Dis;
;;;15     		TCON &= Bit7_En;
;;;16     	}
;;;17     	return;
;;;18     }
;;;19     //====================================================
;;;20     //	Flash write finish interrutp service routine
;;;21     void	FLASH_ISR(void)	
;;;22     {
        0x00000c04:    4804        .H      LDR      r0,[pc,#16] ; [0xc18] = 0x40000108
;;;23     	SCINTEN2 &= Bit0_Dis;
        0x00000c06:    6801        .h      LDR      r1,[r0,#0]
        0x00000c08:    2201        ."      MOVS     r2,#1
        0x00000c0a:    4391        .C      BICS     r1,r1,r2
        0x00000c0c:    6001        .`      STR      r1,[r0,#0]
        0x00000c0e:    4803        .H      LDR      r0,[pc,#12] ; [0xc1c] = 0x40020000
;;;24     	FLSTS |= Bit0_En;
        0x00000c10:    6801        .h      LDR      r1,[r0,#0]
        0x00000c12:    4311        .C      ORRS     r1,r1,r2
        0x00000c14:    6001        .`      STR      r1,[r0,#0]
;;;25     	return;
        0x00000c16:    4770        pG      BX       lr
    $d.3
    __arm_cp.1_0
        0x00000c18:    40000108    ...@    DCD    1073742088
    __arm_cp.1_1
        0x00000c1c:    40020000    ...@    DCD    1073872896
    $t
    .text
    NMI_Handler
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS/SC000_Vect.s
;;;59     	BX	LR
        0x00000c20:    4770        pG      BX       lr
    HardFault_Handler
;;;60     
;;;61     HardFault_Handler
;;;62     	BX	LR
        0x00000c22:    4770        pG      BX       lr
    SVCall_Handler
;;;63     
;;;64     SVCall_Handler
;;;65     	BX	LR
        0x00000c24:    4770        pG      BX       lr
    PendSV_Handler
;;;66     
;;;67     PendSV_Handler
;;;68     	BX	LR
        0x00000c26:    4770        pG      BX       lr
    SysTick_Handler
;;;69     
;;;70     SysTick_Handler
;;;71     	BX	LR
        0x00000c28:    4770        pG      BX       lr
    FIQ_Handler
;;;72     
;;;73     FIQ_Handler
;;;74     	BX	LR
        0x00000c2a:    4770        pG      BX       lr
    $t.0
    Testmain
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS\THC80_Main.c
;;;10     {	
        0x00000c2c:    b580        ..      PUSH     {r7,lr}
;;;11     	HWInit();								//	H/W initial
        0x00000c2e:    f7ffffa9    ....    BL       HWInit ; 0xb84
;;;12     	
;;;13     	hwAbs_osMain();
        0x00000c32:    f7fffb77    ..w.    BL       hwAbs_osMain ; 0x324
;;;14     
;;;15     }
        0x00000c36:    bd80        ..      POP      {r7,pc}
    cmdRout_commandRouter
;;; Core/CommandRouter/source\CommandRouter.c
;;;9      void cmdRout_commandRouter(void) {
        0x00000c38:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00000c3a:    b082        ..      SUB      sp,sp,#8
        0x00000c3c:    a801        ..      ADD      r0,sp,#4
        0x00000c3e:    2500        .%      MOVS     r5,#0
;;;10     
;;;11     	cmdFunc		commandToCall; //stores command function
;;;12     	volatile	uMonoByte	umbTypeOfCmd = 0x00; // stores type of command
        0x00000c40:    7005        .p      STRB     r5,[r0,#0]
;;;13     	uMonoByte	umbChannel = 0x00;
;;;14     
;;;15     	DBG_FUNC_ENTRY(">>[CommandRouter] cmdRout_commandRouter() \n");
;;;16     	
;;;17     	/*Receive header of Command*/
;;;18     	_7816_3_receiveCommandHeader();
        0x00000c42:    f006fc53    ..S.    BL       _7816_3_receiveCommandHeader ; 0x74ec
;;;19     	
;;;20     	/*Check if this is first command after ATR*/
;;;21     	if (TRUE == bFirstCommandAfterATR) {
        0x00000c46:    4c47        GL      LDR      r4,[pc,#284] ; [0xd64] = 0x20000000
        0x00000c48:    7820         x      LDRB     r0,[r4,#0]
        0x00000c4a:    28ff        .(      CMP      r0,#0xff
        0x00000c4c:    d106        ..      BNE      0xc5c ; cmdRout_commandRouter + 36
;;;22     		
;;;23     		/*Requesting Chip communication module to keep sending NULL procedure byte for additional Processing time*/
;;;24     		enableNullProcedure();
        0x00000c4e:    f7fffbb1    ....    BL       Chip_THC80F340A_enableNullProcedureByte ; 0x3b4
;;;25     		
;;;26     		/*Initalize configuration of OS (if any)*/
;;;27     		osInit_osInit();
        0x00000c52:    f000fb99    ....    BL       osInit_osInit ; 0x1388
;;;28     		
;;;29     		/*Disable the NULL procedure byte*/
;;;30     		disableNullProcedure();
        0x00000c56:    f7fffbb7    ....    BL       Chip_THC80F340A_disableNullProcedureByte ; 0x3c8
;;;31     		
;;;32     		/* Reset the First command flag*/
;;;33     		bFirstCommandAfterATR = FALSE;
        0x00000c5a:    7025        %p      STRB     r5,[r4,#0]
;;;34     	}
;;;35     	
;;;36     	TRY{
        0x00000c5c:    4842        BH      LDR      r0,[pc,#264] ; [0xd68] = 0x20000648
        0x00000c5e:    f006fecb    ....    BL       setjmp ; 0x79f8
        0x00000c62:    4942        BI      LDR      r1,[pc,#264] ; [0xd6c] = 0x2000023a
        0x00000c64:    7008        .p      STRB     r0,[r1,#0]
        0x00000c66:    0600        ..      LSLS     r0,r0,#24
        0x00000c68:    d013        ..      BEQ      0xc92 ; cmdRout_commandRouter + 90
        0x00000c6a:    4c41        AL      LDR      r4,[pc,#260] ; [0xd70] = 0x2000023c
        0x00000c6c:    8820         .      LDRH     r0,[r4,#0]
        0x00000c6e:    a901        ..      ADD      r1,sp,#4
        0x00000c70:    7809        .x      LDRB     r1,[r1,#0]
        0x00000c72:    2901        .)      CMP      r1,#1
        0x00000c74:    d004        ..      BEQ      0xc80 ; cmdRout_commandRouter + 72
        0x00000c76:    2800        .(      CMP      r0,#0
        0x00000c78:    d002        ..      BEQ      0xc80 ; cmdRout_commandRouter + 72
        0x00000c7a:    f006fc49    ..I.    BL       _7816_3_sendResponseData ; 0x7510
        0x00000c7e:    8820         .      LDRH     r0,[r4,#0]
        0x00000c80:    2800        .(      CMP      r0,#0
        0x00000c82:    d002        ..      BEQ      0xc8a ; cmdRout_commandRouter + 82
        0x00000c84:    2001        .       MOVS     r0,#1
        0x00000c86:    f006fc85    ....    BL       _7816_3_setProcedureByte ; 0x7594
        0x00000c8a:    f006fc91    ....    BL       _7816_3_sendStatusWords ; 0x75b0
        0x00000c8e:    b002        ..      ADD      sp,sp,#8
        0x00000c90:    bdb0        ..      POP      {r4,r5,r7,pc}
;;;37     
;;;38     		if (NAA_UICC == gumbCurrentNaaApp) {
        0x00000c92:    4838        8H      LDR      r0,[pc,#224] ; [0xd74] = 0x20000343
        0x00000c94:    7801        .x      LDRB     r1,[r0,#0]
        0x00000c96:    2900        .)      CMP      r1,#0
        0x00000c98:    d006        ..      BEQ      0xca8 ; cmdRout_commandRouter + 112
        0x00000c9a:    4837        7H      LDR      r0,[pc,#220] ; [0xd78] = 0x2000023e
        0x00000c9c:    2901        .)      CMP      r1,#1
        0x00000c9e:    d10a        ..      BNE      0xcb6 ; cmdRout_commandRouter + 126
        0x00000ca0:    7800        .x      LDRB     r0,[r0,#0]
        0x00000ca2:    28a0        .(      CMP      r0,#0xa0
        0x00000ca4:    d010        ..      BEQ      0xcc8 ; cmdRout_commandRouter + 144
        0x00000ca6:    e02a        *.      B        0xcfe ; cmdRout_commandRouter + 198
;;;39     
;;;40     			if (CLA_SIM == CLA_BYTE) { //If CLA byte is 0xA0 initially
        0x00000ca8:    4933        3I      LDR      r1,[pc,#204] ; [0xd78] = 0x2000023e
        0x00000caa:    7809        .x      LDRB     r1,[r1,#0]
        0x00000cac:    29a0        .)      CMP      r1,#0xa0
        0x00000cae:    d104        ..      BNE      0xcba ; cmdRout_commandRouter + 130
        0x00000cb0:    2101        .!      MOVS     r1,#1
;;;41     
;;;42     				/*GSM session activated*/
;;;43     				gumbCurrentNaaApp = NAA_SIM;
        0x00000cb2:    7001        .p      STRB     r1,[r0,#0]
        0x00000cb4:    e008        ..      B        0xcc8 ; cmdRout_commandRouter + 144
;;;44     			}
;;;45     			else {
;;;46     				/*clear the response prepared for SIM application in OS_Init*/
;;;47     				gudbOutputLen = 0x00;
;;;48     
;;;49     				/*USIM session activated*/
;;;50     				gumbCurrentNaaApp = NAA_USIM;
;;;51     			}
;;;52     		}
;;;53     		
;;;54     		/*Check if CLA is valid*/
;;;55     		if (gumbCurrentNaaApp == NAA_SIM)
;;;56     		{
;;;57     			if (CLA_SIM != CLA_BYTE) {//check if class byte is not 'A0'
;;;58     				gudbOutputLen = 0x00;
;;;59     				DBG_ERR("[CommandRouter] cmdRout_commandRouter: Invalid Class byte not 'A0'  \n");
;;;60     				THROW(EXCEP_INVALID_CLASS);
;;;61     			}
;;;62     		}
;;;63     		//If USIM/UICC
;;;64     		else if(CLA_BYTE & MASK_CLA) { //check if class byte is not '0X' or '8X'
        0x00000cb6:    7801        .x      LDRB     r1,[r0,#0]
        0x00000cb8:    e003        ..      B        0xcc2 ; cmdRout_commandRouter + 138
        0x00000cba:    2202        ."      MOVS     r2,#2
        0x00000cbc:    7002        .p      STRB     r2,[r0,#0]
        0x00000cbe:    482c        ,H      LDR      r0,[pc,#176] ; [0xd70] = 0x2000023c
        0x00000cc0:    8005        ..      STRH     r5,[r0,#0]
        0x00000cc2:    0648        H.      LSLS     r0,r1,#25
        0x00000cc4:    0ec0        ..      LSRS     r0,r0,#27
        0x00000cc6:    d11a        ..      BNE      0xcfe ; cmdRout_commandRouter + 198
        0x00000cc8:    a801        ..      ADD      r0,sp,#4
;;;65     			gudbOutputLen = 0x00;
;;;66     			DBG_ERR("[CommandRouter] cmdRout_commandRouter: Invalid Class byte neither '0X' nore '8X' \n");
;;;67     			THROW(EXCEP_INVALID_CLASS);
;;;68     		}
;;;69     		
;;;70     		DBG_FUNC("[CommandRouter] cmdRout_commandRouter: Valid Class Byte\n");
;;;71     
;;;72     		//Call Command dispatcher to call command function
;;;73     		commandToCall = _102221_fetchTheCommandFunc((puMonoByte)&umbTypeOfCmd);
        0x00000cca:    f001fda7    ....    BL       _102221_fetchTheCommandFunc ; 0x281c
        0x00000cce:    4604        .F      MOV      r4,r0
;;;74     
;;;75     		/*get current logical channel*/
;;;76     		umbChannel = CLA_BYTE & MASK_LOGICAL_CHANNEL;
        0x00000cd0:    4829        )H      LDR      r0,[pc,#164] ; [0xd78] = 0x2000023e
        0x00000cd2:    7802        .x      LDRB     r2,[r0,#0]
        0x00000cd4:    2103        .!      MOVS     r1,#3
;;;77     
;;;78     		if (gumbChannelsState & (SHIFT_LEFT_BY_N_BITS(0x01, umbChannel))) { //check if channel closed
        0x00000cd6:    4011        .@      ANDS     r1,r1,r2
        0x00000cd8:    4a28        (J      LDR      r2,[pc,#160] ; [0xd7c] = 0x20000001
        0x00000cda:    7812        .x      LDRB     r2,[r2,#0]
        0x00000cdc:    40ca        .@      LSRS     r2,r2,r1
        0x00000cde:    07d2        ..      LSLS     r2,r2,#31
        0x00000ce0:    d113        ..      BNE      0xd0a ; cmdRout_commandRouter + 210
        0x00000ce2:    220c        ."      MOVS     r2,#0xc
;;;79     
;;;80     			//Channel is closed
;;;81     			DBG_ERR("[CommandRouter] cmdRout_commandRouter: Channel %1 is closed\n", umbChannel);
;;;82     			THROW(EXCEP_LOGICAL_CHANNEL_NOT_SUPPORTED);
;;;83     		}
;;;84     
;;;85     		//Set current channel context
;;;86     		pccCurrentChannel = &ccContexts[CLA_BYTE & MASK_LOGICAL_CHANNEL];
        0x00000ce4:    434a        JC      MULS     r2,r1,r2
        0x00000ce6:    4926        &I      LDR      r1,[pc,#152] ; [0xd80] = 0x2000020a
        0x00000ce8:    1889        ..      ADDS     r1,r1,r2
        0x00000cea:    4a26        &J      LDR      r2,[pc,#152] ; [0xd84] = 0x200006e8
        0x00000cec:    6011        .`      STR      r1,[r2,#0]
;;;87     
;;;88     		//Check if it is NULL, i,e. command not supported by dispatcher
;;;89     		if ((commandToCall == NULL)
;;;90     			||
        0x00000cee:    2c00        .,      CMP      r4,#0
        0x00000cf0:    d10f        ..      BNE      0xd12 ; cmdRout_commandRouter + 218
;;;91     			((NO_FILE_PRESENT == pccCurrentChannel->fhaCurrentDf)
;;;92     				&&
;;;93     				(INS_BYTE != INS_CREATE_FILE))) /*If No file is created , so first command must be a Create File Command*/
;;;94     		{
;;;95     			//Invalid instruction
;;;96     			DBG_ERR("[CommandRouter] cmdRout_commandRouter: There is no such instruction '%1' in current application\n", INS_BYTE);
;;;97     			gudbOutputLen = 0x00;
        0x00000cf2:    481f        .H      LDR      r0,[pc,#124] ; [0xd70] = 0x2000023c
        0x00000cf4:    8005        ..      STRH     r5,[r0,#0]
;;;98     			THROW(EXCEP_INVALID_INS);
        0x00000cf6:    481c        .H      LDR      r0,[pc,#112] ; [0xd68] = 0x20000648
        0x00000cf8:    2105        .!      MOVS     r1,#5
        0x00000cfa:    f006fe94    ....    BL       longjmp ; 0x7a26
        0x00000cfe:    481c        .H      LDR      r0,[pc,#112] ; [0xd70] = 0x2000023c
        0x00000d00:    8005        ..      STRH     r5,[r0,#0]
        0x00000d02:    4819        .H      LDR      r0,[pc,#100] ; [0xd68] = 0x20000648
        0x00000d04:    2104        .!      MOVS     r1,#4
        0x00000d06:    f006fe8e    ....    BL       longjmp ; 0x7a26
        0x00000d0a:    4817        .H      LDR      r0,[pc,#92] ; [0xd68] = 0x20000648
        0x00000d0c:    211f        .!      MOVS     r1,#0x1f
        0x00000d0e:    f006fe8a    ....    BL       longjmp ; 0x7a26
        0x00000d12:    88c9        ..      LDRH     r1,[r1,#6]
        0x00000d14:    2900        .)      CMP      r1,#0
        0x00000d16:    d102        ..      BNE      0xd1e ; cmdRout_commandRouter + 230
        0x00000d18:    7841        Ax      LDRB     r1,[r0,#1]
        0x00000d1a:    29e0        .)      CMP      r1,#0xe0
        0x00000d1c:    d1e9        ..      BNE      0xcf2 ; cmdRout_commandRouter + 186
        0x00000d1e:    a901        ..      ADD      r1,sp,#4
;;;99     		}
;;;100    
;;;101    		DBG_FUNC("[CommandRouter] cmdRout_commandRouter: Restore context of channel %1\n", CLA_BYTE & MASK_LOGICAL_CHANNEL);
;;;102    
;;;103    		/*check if command need rest of the input command data*/
;;;104    		if (INS_INPUT == (umbTypeOfCmd & MASK_INS_INPUT))
        0x00000d20:    7809        .x      LDRB     r1,[r1,#0]
        0x00000d22:    07c9        ..      LSLS     r1,r1,#31
        0x00000d24:    d015        ..      BEQ      0xd52 ; cmdRout_commandRouter + 282
;;;105    		{
;;;106    			DBG_FUNC("[CommandRouter] cmdRout_commandRouter: Command of type Case 3 or Case 4 \n");
;;;107    
;;;108    			if (P3_BYTE) {// As this is input command P3 cant be 00
        0x00000d26:    7901        .y      LDRB     r1,[r0,#4]
        0x00000d28:    2900        .)      CMP      r1,#0
        0x00000d2a:    d10a        ..      BNE      0xd42 ; cmdRout_commandRouter + 266
        0x00000d2c:    a901        ..      ADD      r1,sp,#4
        0x00000d2e:    7809        .x      LDRB     r1,[r1,#0]
        0x00000d30:    0749        I.      LSLS     r1,r1,#29
        0x00000d32:    d40c        ..      BMI      0xd4e ; cmdRout_commandRouter + 278
        0x00000d34:    7105        .q      STRB     r5,[r0,#4]
        0x00000d36:    480e        .H      LDR      r0,[pc,#56] ; [0xd70] = 0x2000023c
        0x00000d38:    8005        ..      STRH     r5,[r0,#0]
        0x00000d3a:    480b        .H      LDR      r0,[pc,#44] ; [0xd68] = 0x20000648
        0x00000d3c:    2107        .!      MOVS     r1,#7
        0x00000d3e:    f006fe72    ..r.    BL       longjmp ; 0x7a26
;;;109    
;;;110    				DBG_FUNC("[CommandRouter] cmdRout_commandRouter: Fetching Command Data of length %1\n", P3_BYTE);
;;;111    
;;;112    				/*Receive remaining data of input command*/
;;;113    				_7816_3_receiveCommandData();
        0x00000d42:    f006fc13    ....    BL       _7816_3_receiveCommandData ; 0x756c
        0x00000d46:    a801        ..      ADD      r0,sp,#4
        0x00000d48:    2101        .!      MOVS     r1,#1
;;;114    
;;;115    				/*input has been taken*/
;;;116    				umbTypeOfCmd = INS_INPUT;
        0x00000d4a:    7001        .p      STRB     r1,[r0,#0]
        0x00000d4c:    e001        ..      B        0xd52 ; cmdRout_commandRouter + 282
        0x00000d4e:    a801        ..      ADD      r0,sp,#4
;;;117    			}
;;;118    			else if(INS_CMD_DATA_MANDATORY == (umbTypeOfCmd & MASK_INS_CMD_DATA)) { // p3 is 00 and Its mandatory to have input
;;;119    
;;;120    				DBG_ERR("[CommandRouter] cmdRout_commandRouter: No command data %1\n", P3_BYTE);
;;;121    				gudbOutputLen = 0x00;
;;;122    				/*Wrong p3*/
;;;123    				THROW2(EXCEP_WRONG_P3,0x00);
;;;124    			}
;;;125    			else {
;;;126    
;;;127    				/*No input*/
;;;128    				umbTypeOfCmd = INS_NO_INPUT;
        0x00000d50:    7005        .p      STRB     r5,[r0,#0]
;;;129    			}
;;;130    		}
;;;131    
;;;132    		DBG_FUNC("[CommandRouter] cmdRout_commandRouter: Calling command pointer function\n");
;;;133    		
;;;134    		/*Requesting Chip communication module to keep sending NULL procedure byte for additional Processing time*/
;;;135    		enableNullProcedure();
        0x00000d52:    f7fffb2f    ../.    BL       Chip_THC80F340A_enableNullProcedureByte ; 0x3b4
;;;136    		
;;;137    		//Call the command function
;;;138    		commandToCall();
        0x00000d56:    47a0        .G      BLX      r4
;;;139    		
;;;140    		/*Disable the NULL procedure byte*/
;;;141    		disableNullProcedure();
        0x00000d58:    f7fffb36    ..6.    BL       Chip_THC80F340A_disableNullProcedureByte ; 0x3c8
;;;142    		
;;;143    
;;;144    		DBG_FUNC("[CommandRouter] cmdRout_commandRouter: Normal exeuction of Command function\n");
;;;145    
;;;146    		/*Ideally control shall not reach here as command function must
;;;147    		* throw exception. But to just play safe side send normal ending
;;;148    		*/ 
;;;149    		THROW(EXCEP_NORMAL_ENDING);
        0x00000d5c:    4802        .H      LDR      r0,[pc,#8] ; [0xd68] = 0x20000648
        0x00000d5e:    2103        .!      MOVS     r1,#3
        0x00000d60:    f006fe61    ..a.    BL       longjmp ; 0x7a26
    $d.1
    __arm_cp.0_0
        0x00000d64:    20000000    ...     DCD    536870912
    __arm_cp.0_1
        0x00000d68:    20000648    H..     DCD    536872520
    __arm_cp.0_2
        0x00000d6c:    2000023a    :..     DCD    536871482
    __arm_cp.0_3
        0x00000d70:    2000023c    <..     DCD    536871484
    __arm_cp.0_4
        0x00000d74:    20000343    C..     DCD    536871747
    __arm_cp.0_5
        0x00000d78:    2000023e    >..     DCD    536871486
    __arm_cp.0_6
        0x00000d7c:    20000001    ...     DCD    536870913
    __arm_cp.0_7
        0x00000d80:    2000020a    ...     DCD    536871434
    __arm_cp.0_8
        0x00000d84:    200006e8    ...     DCD    536872680
    $t.0
    mm_alloc
;;; Core/MemoryManager/source\MemoryManager.c
;;;79     {
        0x00000d88:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000d8a:    b095        ..      SUB      sp,sp,#0x54
        0x00000d8c:    9107        ..      STR      r1,[sp,#0x1c]
        0x00000d8e:    4607        .F      MOV      r7,r0
        0x00000d90:    a812        ..      ADD      r0,sp,#0x48
        0x00000d92:    2400        .$      MOVS     r4,#0
        0x00000d94:    8004        ..      STRH     r4,[r0,#0]
        0x00000d96:    940f        ..      STR      r4,[sp,#0x3c]
        0x00000d98:    940e        ..      STR      r4,[sp,#0x38]
        0x00000d9a:    940d        ..      STR      r4,[sp,#0x34]
        0x00000d9c:    940c        ..      STR      r4,[sp,#0x30]
        0x00000d9e:    940b        ..      STR      r4,[sp,#0x2c]
        0x00000da0:    940a        ..      STR      r4,[sp,#0x28]
        0x00000da2:    9409        ..      STR      r4,[sp,#0x24]
        0x00000da4:    9408        ..      STR      r4,[sp,#0x20]
        0x00000da6:    2f00        ./      CMP      r7,#0
        0x00000da8:    d100        ..      BNE      0xdac ; mm_alloc + 36
        0x00000daa:    e0ba        ..      B        0xf22 ; mm_alloc + 410
        0x00000dac:    2005        .       MOVS     r0,#5
        0x00000dae:    0340        @.      LSLS     r0,r0,#13
        0x00000db0:    9003        ..      STR      r0,[sp,#0xc]
        0x00000db2:    1c86        ..      ADDS     r6,r0,#2
        0x00000db4:    ad13        ..      ADD      r5,sp,#0x4c
        0x00000db6:    2202        ."      MOVS     r2,#2
        0x00000db8:    4630        0F      MOV      r0,r6
        0x00000dba:    4629        )F      MOV      r1,r5
        0x00000dbc:    f005ff9e    ....    BL       baseReadNBytes ; 0x6cfc
        0x00000dc0:    06f8        ..      LSLS     r0,r7,#27
        0x00000dc2:    9704        ..      STR      r7,[sp,#0x10]
        0x00000dc4:    097f        ..      LSRS     r7,r7,#5
        0x00000dc6:    2800        .(      CMP      r0,#0
        0x00000dc8:    d105        ..      BNE      0xdd6 ; mm_alloc + 78
        0x00000dca:    8828        (.      LDRH     r0,[r5,#0]
        0x00000dcc:    4287        .B      CMP      r7,r0
        0x00000dce:    d906        ..      BLS      0xdde ; mm_alloc + 86
        0x00000dd0:    4620         F      MOV      r0,r4
        0x00000dd2:    b015        ..      ADD      sp,sp,#0x54
        0x00000dd4:    bdf0        ..      POP      {r4-r7,pc}
;;; Core/MemoryManager/source\MemoryManager.c
        0x00000dd6:    1c7f        ..      ADDS     r7,r7,#1
        0x00000dd8:    8828        (.      LDRH     r0,[r5,#0]
        0x00000dda:    4287        .B      CMP      r7,r0
        0x00000ddc:    d8f8        ..      BHI      0xdd0 ; mm_alloc + 72
        0x00000dde:    9601        ..      STR      r6,[sp,#4]
        0x00000de0:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00000de2:    2900        .)      CMP      r1,#0
        0x00000de4:    d005        ..      BEQ      0xdf2 ; mm_alloc + 106
        0x00000de6:    a808        ..      ADD      r0,sp,#0x20
        0x00000de8:    2220         "      MOVS     r2,#0x20
        0x00000dea:    f7fffeb3    ....    BL       mem_set ; 0xb54
        0x00000dee:    a813        ..      ADD      r0,sp,#0x4c
        0x00000df0:    8800        ..      LDRH     r0,[r0,#0]
        0x00000df2:    9707        ..      STR      r7,[sp,#0x1c]
        0x00000df4:    1bc0        ..      SUBS     r0,r0,r7
        0x00000df6:    a913        ..      ADD      r1,sp,#0x4c
        0x00000df8:    8008        ..      STRH     r0,[r1,#0]
        0x00000dfa:    ac12        ..      ADD      r4,sp,#0x48
        0x00000dfc:    2202        ."      MOVS     r2,#2
        0x00000dfe:    9803        ..      LDR      r0,[sp,#0xc]
        0x00000e00:    4621        !F      MOV      r1,r4
        0x00000e02:    f005ff7b    ..{.    BL       baseReadNBytes ; 0x6cfc
        0x00000e06:    2051        Q       MOVS     r0,#0x51
        0x00000e08:    0245        E.      LSLS     r5,r0,#9
        0x00000e0a:    f005feee    ....    BL       at_beginTxn ; 0x6bea
        0x00000e0e:    9002        ..      STR      r0,[sp,#8]
        0x00000e10:    8827        '.      LDRH     r7,[r4,#0]
        0x00000e12:    4946        FI      LDR      r1,[pc,#280] ; [0xf2c] = 0xffff
        0x00000e14:    9e04        ..      LDR      r6,[sp,#0x10]
        0x00000e16:    e01b        ..      B        0xe50 ; mm_alloc + 200
        0x00000e18:    a910        ..      ADD      r1,sp,#0x40
        0x00000e1a:    2200        ."      MOVS     r2,#0
        0x00000e1c:    704a        Jp      STRB     r2,[r1,#1]
        0x00000e1e:    3e20         >      SUBS     r6,r6,#0x20
        0x00000e20:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00000e22:    b280        ..      UXTH     r0,r0
        0x00000e24:    0080        ..      LSLS     r0,r0,#2
        0x00000e26:    1828        (.      ADDS     r0,r5,r0
        0x00000e28:    1f00        ..      SUBS     r0,r0,#4
        0x00000e2a:    a910        ..      ADD      r1,sp,#0x40
        0x00000e2c:    2204        ."      MOVS     r2,#4
        0x00000e2e:    f005ffcd    ....    BL       baseWriteNBytes ; 0x6dcc
        0x00000e32:    ac12        ..      ADD      r4,sp,#0x48
        0x00000e34:    8820         .      LDRH     r0,[r4,#0]
        0x00000e36:    0140        @.      LSLS     r0,r0,#5
        0x00000e38:    493e        >I      LDR      r1,[pc,#248] ; [0xf34] = 0x126c0
        0x00000e3a:    1840        @.      ADDS     r0,r0,r1
        0x00000e3c:    a908        ..      ADD      r1,sp,#0x20
        0x00000e3e:    2220         "      MOVS     r2,#0x20
        0x00000e40:    f005ffc4    ....    BL       baseWriteNBytes ; 0x6dcc
        0x00000e44:    8821        !.      LDRH     r1,[r4,#0]
        0x00000e46:    1e7f        ..      SUBS     r7,r7,#1
        0x00000e48:    9707        ..      STR      r7,[sp,#0x1c]
        0x00000e4a:    0438        8.      LSLS     r0,r7,#16
        0x00000e4c:    460f        .F      MOV      r7,r1
        0x00000e4e:    d032        2.      BEQ      0xeb6 ; mm_alloc + 302
        0x00000e50:    9106        ..      STR      r1,[sp,#0x18]
        0x00000e52:    2100        .!      MOVS     r1,#0
        0x00000e54:    0438        8.      LSLS     r0,r7,#16
        0x00000e56:    9105        ..      STR      r1,[sp,#0x14]
        0x00000e58:    4608        .F      MOV      r0,r1
        0x00000e5a:    d01e        ..      BEQ      0xe9a ; mm_alloc + 274
        0x00000e5c:    9604        ..      STR      r6,[sp,#0x10]
        0x00000e5e:    2600        .&      MOVS     r6,#0
        0x00000e60:    e005        ..      B        0xe6e ; mm_alloc + 230
        0x00000e62:    1c7f        ..      ADDS     r7,r7,#1
        0x00000e64:    1c76        v.      ADDS     r6,r6,#1
        0x00000e66:    b2b0        ..      UXTH     r0,r6
        0x00000e68:    4931        1I      LDR      r1,[pc,#196] ; [0xf30] = 0x2138
        0x00000e6a:    4288        .B      CMP      r0,r1
        0x00000e6c:    d013        ..      BEQ      0xe96 ; mm_alloc + 270
        0x00000e6e:    00b8        ..      LSLS     r0,r7,#2
        0x00000e70:    1f00        ..      SUBS     r0,r0,#4
        0x00000e72:    b280        ..      UXTH     r0,r0
        0x00000e74:    1940        @.      ADDS     r0,r0,r5
        0x00000e76:    ac14        ..      ADD      r4,sp,#0x50
        0x00000e78:    2204        ."      MOVS     r2,#4
        0x00000e7a:    4621        !F      MOV      r1,r4
        0x00000e7c:    f005ff3e    ..>.    BL       baseReadNBytes ; 0x6cfc
        0x00000e80:    7820         x      LDRB     r0,[r4,#0]
        0x00000e82:    2800        .(      CMP      r0,#0
        0x00000e84:    d105        ..      BNE      0xe92 ; mm_alloc + 266
        0x00000e86:    b2b8        ..      UXTH     r0,r7
        0x00000e88:    4929        )I      LDR      r1,[pc,#164] ; [0xf30] = 0x2138
        0x00000e8a:    4288        .B      CMP      r0,r1
        0x00000e8c:    d1e9        ..      BNE      0xe62 ; mm_alloc + 218
        0x00000e8e:    2701        .'      MOVS     r7,#1
        0x00000e90:    e7e8        ..      B        0xe64 ; mm_alloc + 220
        0x00000e92:    4638        8F      MOV      r0,r7
        0x00000e94:    e000        ..      B        0xe98 ; mm_alloc + 272
        0x00000e96:    2000        .       MOVS     r0,#0
        0x00000e98:    9e04        ..      LDR      r6,[sp,#0x10]
        0x00000e9a:    a912        ..      ADD      r1,sp,#0x48
        0x00000e9c:    8008        ..      STRH     r0,[r1,#0]
        0x00000e9e:    a910        ..      ADD      r1,sp,#0x40
        0x00000ea0:    9a06        ..      LDR      r2,[sp,#0x18]
        0x00000ea2:    804a        J.      STRH     r2,[r1,#2]
        0x00000ea4:    9a05        ..      LDR      r2,[sp,#0x14]
        0x00000ea6:    700a        .p      STRB     r2,[r1,#0]
        0x00000ea8:    b2b1        ..      UXTH     r1,r6
        0x00000eaa:    291f        .)      CMP      r1,#0x1f
        0x00000eac:    d8b4        ..      BHI      0xe18 ; mm_alloc + 144
        0x00000eae:    a910        ..      ADD      r1,sp,#0x40
        0x00000eb0:    704e        Np      STRB     r6,[r1,#1]
        0x00000eb2:    2600        .&      MOVS     r6,#0
        0x00000eb4:    e7b4        ..      B        0xe20 ; mm_alloc + 152
        0x00000eb6:    2900        .)      CMP      r1,#0
        0x00000eb8:    d01b        ..      BEQ      0xef2 ; mm_alloc + 362
        0x00000eba:    2600        .&      MOVS     r6,#0
        0x00000ebc:    e006        ..      B        0xecc ; mm_alloc + 324
        0x00000ebe:    1c7f        ..      ADDS     r7,r7,#1
        0x00000ec0:    1c76        v.      ADDS     r6,r6,#1
        0x00000ec2:    b2b0        ..      UXTH     r0,r6
        0x00000ec4:    491a        .I      LDR      r1,[pc,#104] ; [0xf30] = 0x2138
        0x00000ec6:    4288        .B      CMP      r0,r1
        0x00000ec8:    4639        9F      MOV      r1,r7
        0x00000eca:    d012        ..      BEQ      0xef2 ; mm_alloc + 362
;;;1      #include "MemoryManager.h"
;;;2      
;;;3      /*
;;;4      * SMART- SIM Memory Allocation Root Table (like FAT)
;;;5      * Disk Memory (Chunks of cluster)
;;;6      */
;;;7      
;;;8      /*
;;;9      * It finds first free cluster header after traversing SMART
;;;10     *
;;;11     * @param maLastReturnedCluster, Last free cluster returned, this param is passed to avoid re-traversing
;;;12     *					the whole table
;;;13     * @return tMemAddr, first free cluster header in SMART
;;;14     */
;;;15     static tMemAddr mm_getFreeCluster(IN_ARG tMemAddr maLastReturnedCluster) {
;;;16     
;;;17     	uDiByte				udbClusterOffset; 
;;;18     	uDiByte				udbNoOfClustersProcessed = 0x00;
;;;19     	tMemAddr			maBlockIndex; //contains SMART index
;;;20     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc() \n");
;;;23     
;;;24     	/*check if no memory available*/
;;;25     	if (NO_FREE_CLUSTER == maLastReturnedCluster)
;;;26     	{
;;;27     		DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;28     		return NO_FREE_MEMORY;
;;;29     	}
;;;30     
;;;31     	/*Starts traversing from given Cluster no.*/
;;;32     	maBlockIndex = maLastReturnedCluster;
;;;33     
;;;34     	do
;;;35     	{
;;;36     		/*calculate offset of cluster header*/
;;;37     		udbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
        0x00000ecc:    0088        ..      LSLS     r0,r1,#2
        0x00000ece:    1f00        ..      SUBS     r0,r0,#4
;;;38     
;;;39     		/*Read back cluster in SMART*/
;;;40     		baseReadNBytes(ADDRESS_SMART_START + udbClusterOffset, (puMonoByte) &chCurrFreeHeader, sizeof(tClusterHeader));
        0x00000ed0:    b280        ..      UXTH     r0,r0
        0x00000ed2:    1940        @.      ADDS     r0,r0,r5
        0x00000ed4:    ac14        ..      ADD      r4,sp,#0x50
        0x00000ed6:    2204        ."      MOVS     r2,#4
        0x00000ed8:    460f        .F      MOV      r7,r1
        0x00000eda:    4621        !F      MOV      r1,r4
        0x00000edc:    f005ff0e    ....    BL       baseReadNBytes ; 0x6cfc
;;;41     
;;;42     		/*check if its free*/
;;;43     		if (chCurrFreeHeader.umbBusy != CLUSTER_BUSY) {
        0x00000ee0:    7820         x      LDRB     r0,[r4,#0]
        0x00000ee2:    2800        .(      CMP      r0,#0
        0x00000ee4:    d106        ..      BNE      0xef4 ; mm_alloc + 364
;;;44     
;;;45     			/*return free cluster index*/
;;;46     			DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns %2\n", maBlockIndex);
;;;47     			return maBlockIndex;
;;;48     		}
;;;49     		if (NO_OF_CLUSTERS == maBlockIndex) {
        0x00000ee6:    b2b8        ..      UXTH     r0,r7
        0x00000ee8:    4911        .I      LDR      r1,[pc,#68] ; [0xf30] = 0x2138
        0x00000eea:    4288        .B      CMP      r0,r1
        0x00000eec:    d1e7        ..      BNE      0xebe ; mm_alloc + 310
        0x00000eee:    2701        .'      MOVS     r7,#1
        0x00000ef0:    e7e6        ..      B        0xec0 ; mm_alloc + 312
        0x00000ef2:    2700        .'      MOVS     r7,#0
        0x00000ef4:    9d01        ..      LDR      r5,[sp,#4]
        0x00000ef6:    a911        ..      ADD      r1,sp,#0x44
;;;50     
;;;51     			/*reset to first cluster for further traversing*/
;;;52     			maBlockIndex = SMART_START_INDEX;
;;;53     		}
;;;54     		else {
;;;55     
;;;56     			/*next cluster*/
;;;57     			maBlockIndex++;
;;;58     		}
;;;59     
;;;60     		/*increment the total no. of clusters processed so far*/
;;;61     		udbNoOfClustersProcessed++;
;;;62     
;;;63     	} while (NO_OF_CLUSTERS != udbNoOfClustersProcessed); //If all clusters are processed
;;;64     
;;;65     	/*if control is here, it means no free cluster*/
;;;66     	DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_CLUSTER %2\n", NO_FREE_CLUSTER);
;;;67     	return NO_FREE_CLUSTER;
;;;68     
;;;69     }
;;;70     /*
;;;71     * It allocates the Cluster header and memory Clusters to the requester as per required size.
;;;72     * If there are no. of clusters, it connects them by making chain.
;;;73     * 
;;;74     * @param udbSize: Total size of memory required by requester
;;;75     * 
;;;76     * @return tMemAddr index of first cluster header in allocated memory.
;;;77     */
;;;78     tMemAddr mm_alloc(IN_ARG uDiByte udbSize, IN_ARG uMonoByte umbDefaultByte)
;;;79     {
;;;80     #ifdef FEAT_EXHAUSTEARING	
;;;81     	boolean 			bCloseTheTxn=FALSE;
;;;82     #endif
;;;83     	uDiByte				udbNoOfClusters; //Store no. of clusters required for object
;;;84     	uDiByte				udbRemainingClusters;
;;;85     	tMemAddr			maBlockIndex = 0x00; //will contain next free mem block address
;;;86     	tMemAddr			maPrevIndex = END_OF_CLUSTER_CHAIN; //Stores index of previous cluster
;;;87     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;88     	tCluster			cClusterData = { 0x00 };
;;;89     	uQuadByte			uqbClusterOffset; //stores relative offset of cluster header in SMART
;;;90     
;;;91     	/*Check size*/
;;;92     	assert(udbSize != 0x00);
;;;93     
;;;94     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc()\n");
;;;95     
;;;96     	/*Count no. of clusters required*/
;;;97     	udbNoOfClusters = udbSize / CLUSTER_SIZE;
;;;98     
;;;99     	DBG_FUNC("[MemoryManager] mm_alloc: Requested size of memory %2 umbDefaultByte %1\n", udbSize, umbDefaultByte);
;;;100    
;;;101    	/*Check if remainder is there*/
;;;102    	if (udbSize % CLUSTER_SIZE){
;;;103    
;;;104    		/*increment cluster as there is extra data which requires 1 cluster more*/
;;;105    		udbNoOfClusters++;
;;;106    	}
;;;107    
;;;108    	DBG_FUNC("[MemoryManager] mm_alloc: No. of Clusters required %2\n", udbNoOfClusters);
;;;109    
;;;110    	/*read no. of free clusters*/
;;;111    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;112    
;;;113    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of Clusters %2\n", udbRemainingClusters);
;;;114    
;;;115    	/*Check if no. of free clusters are sufficient*/
;;;116    	if (udbNoOfClusters > udbRemainingClusters)
;;;117    	{
;;;118    		/*insufficient memory*/
;;;119    		DBG_WARN("[MemoryManager] mm_alloc: Required no. of clusters is more than remaining clusters \n");
;;;120    		DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;121    		return NO_FREE_MEMORY;
;;;122    	}
;;;123    
;;;124    	if (umbDefaultByte) { //if non-zero default byte passed
;;;125    		
;;;126    		/*Fill the all elements of clutserdata with default value*/
;;;127    		mem_set(cClusterData, umbDefaultByte, CLUSTER_SIZE);
;;;128    	}
;;;129    
;;;130    	/*remaining no of clusters*/
;;;131    	udbRemainingClusters -= udbNoOfClusters;
;;;132    
;;;133    	/*Read the next available cluster from system page*/
;;;134    	baseReadNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maBlockIndex, SIZE_OF_MEMORY_ADDRESS);
;;;135    
;;;136    #ifdef FEAT_EXHAUSTEARING
;;;137    	/*begin the transaction*/
;;;138    	if (TRUE == at_beginTxn()) { 
;;;139    
;;;140    		/*indication to close the transaction in same function*/
;;;141    		bCloseTheTxn = TRUE;
;;;142    	}
;;;143    #endif
;;;144    
;;;145    	do {
;;;146    		/*Get free cluster*/
;;;147    		maBlockIndex = mm_getFreeCluster(maBlockIndex);
;;;148    
;;;149    		/*Set busy on that cluster*/
;;;150    		chCurrFreeHeader.umbBusy = CLUSTER_BUSY;
;;;151    
;;;152    		/*Store index to previous cluster*/
;;;153    		chCurrFreeHeader.maNextCluster = maPrevIndex;
;;;154    
;;;155    		/*Check if data less than cluster size*/
;;;156    		if (udbSize < CLUSTER_SIZE) {
;;;157    
;;;158    			/*note used data length*/
;;;159    			chCurrFreeHeader.umbSize = (uMonoByte)udbSize;
;;;160    
;;;161    			/*No more clusters required*/
;;;162    			udbSize = 0x00;
;;;163    		}
;;;164    		else {
;;;165    
;;;166    			/*indicates that cluster is fully used*/
;;;167    			chCurrFreeHeader.umbSize = 0x00;
;;;168    
;;;169    			/*Remaining required size of memory*/
;;;170    			udbSize -= CLUSTER_SIZE; 
;;;171    		}
;;;172    
;;;173    		/*calculate offset of cluster header*/
;;;174    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
;;;175    
;;;176    		/*write back cluster header in SMART*/
;;;177    		baseWriteNBytes(ADDRESS_SMART_START + uqbClusterOffset, (puMonoByte)&chCurrFreeHeader, sizeof(tClusterHeader));
;;;178    
;;;179    		/*calculate offset of cluster data*/
;;;180    		uqbClusterOffset = sizeof(tCluster) * (maBlockIndex - 1);
;;;181    
;;;182    		/*write cluster in DISK area*/
;;;183    		baseWriteNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, (puMonoByte)&cClusterData, sizeof(tCluster));
;;;184    
;;;185    		/*Stores index of current cluster as previous*/
;;;186    		maPrevIndex = maBlockIndex;
;;;187    
;;;188    		DBG_FUNC("[MemoryManager] mm_alloc: Cluster %2 allocated\n", maBlockIndex);
;;;189    
;;;190    		/*decrement cluster as one already located*/
;;;191    		udbNoOfClusters--;
;;;192    
;;;193    	} while (udbNoOfClusters); //if no more clusters required
;;;194    
;;;195    	DBG_FUNC("[MemoryManager] mm_alloc: Memory data has been allocated to requestor\n");
;;;196    
;;;197    	/*search for next free cluster*/
;;;198    	maPrevIndex = mm_getFreeCluster(maBlockIndex);
        0x00000ef8:    800f        ..      STRH     r7,[r1,#0]
        0x00000efa:    2402        .$      MOVS     r4,#2
;;;199    
;;;200    	DBG_FUNC("[MemoryManager] mm_alloc: Next free cluster %2\n", maPrevIndex);
;;;201    
;;;202    	/*Write the next available cluster on system page*/
;;;203    	baseWriteNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maPrevIndex, SIZE_OF_MEMORY_ADDRESS);
        0x00000efc:    9803        ..      LDR      r0,[sp,#0xc]
        0x00000efe:    4622        "F      MOV      r2,r4
        0x00000f00:    f005ff64    ..d.    BL       baseWriteNBytes ; 0x6dcc
        0x00000f04:    a913        ..      ADD      r1,sp,#0x4c
;;;204    
;;;205    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of clusters %2\n", udbRemainingClusters);
;;;206    
;;;207    	/*write free clusters*/
;;;208    	baseWriteNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
        0x00000f06:    4628        (F      MOV      r0,r5
        0x00000f08:    4622        "F      MOV      r2,r4
        0x00000f0a:    f005ff5f    .._.    BL       baseWriteNBytes ; 0x6dcc
;;;209    
;;;210    #ifdef FEAT_EXHAUSTEARING
;;;211    
;;;212    	if (TRUE == bCloseTheTxn) {
        0x00000f0e:    9802        ..      LDR      r0,[sp,#8]
        0x00000f10:    28ff        .(      CMP      r0,#0xff
        0x00000f12:    d101        ..      BNE      0xf18 ; mm_alloc + 400
;;;213    		
;;;214    		/*commit the txn started in the beginning of function*/
;;;215    		at_commitTxn();
        0x00000f14:    f005fe7e    ..~.    BL       at_commitTxn ; 0x6c14
        0x00000f18:    a812        ..      ADD      r0,sp,#0x48
;;;216    	}
;;;217    #endif
;;;218    
;;;219    	DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns %2\n", maBlockIndex);
;;;220    
;;;221    	/*return Starting allocated cluster*/
;;;222    	return maBlockIndex;
        0x00000f1a:    8804        ..      LDRH     r4,[r0,#0]
;;;223    }
        0x00000f1c:    4620         F      MOV      r0,r4
        0x00000f1e:    b015        ..      ADD      sp,sp,#0x54
        0x00000f20:    bdf0        ..      POP      {r4-r7,pc}
        0x00000f22:    a005        ..      ADR      r0,{pc}+0x16 ; 0xf38
        0x00000f24:    4908        .I      LDR      r1,[pc,#32] ; [0xf48] = 0x843d
        0x00000f26:    225c        \"      MOVS     r2,#0x5c
        0x00000f28:    f006fbe2    ....    BL       __aeabi_assert ; 0x76f0
    $d.1
    __arm_cp.0_0
        0x00000f2c:    0000ffff    ....    DCD    65535
    __arm_cp.0_1
        0x00000f30:    00002138    8!..    DCD    8504
    __arm_cp.0_2
        0x00000f34:    000126c0    .&..    DCD    75456
        0x00000f38:    53626475    udbS    DCD    1398957173
        0x00000f3c:    20657a69    ize     DCD    543521385
        0x00000f40:    30203d21    != 0    DCD    807419169
        0x00000f44:    00303078    x00.    DCD    3158136
    __arm_cp.0_4
        0x00000f48:    0000843d    =...    DCD    33853
    $t.2
    mm_GetAvailableMemory
;;;224    
;;;225    /*
;;;226    * It returns the free memory in NVM
;;;227    *
;;;228    * @param udbSize: Total size of memory required by requester
;;;229    *
;;;230    * @return tMemAddr index of first cluster header in allocated memory.
;;;231    */
;;;232    uQuadByte mm_GetAvailableMemory(void) {
        0x00000f4c:    b510        ..      PUSH     {r4,lr}
        0x00000f4e:    b082        ..      SUB      sp,sp,#8
        0x00000f50:    4804        .H      LDR      r0,[pc,#16] ; [0xf64] = 0xa002
        0x00000f52:    ac01        ..      ADD      r4,sp,#4
        0x00000f54:    2202        ."      MOVS     r2,#2
;;;233    	/*stores remaining no. of free clusters*/
;;;234    	uDiByte udbRemainingClusters;
;;;235    	
;;;236    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_GetAvailableMemory() \n");
;;;237    
;;;238    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Cluster size is %2\n", CLUSTER_SIZE);
;;;239    
;;;240    	/*read no. of free clusters*/
;;;241    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
        0x00000f56:    4621        !F      MOV      r1,r4
        0x00000f58:    f005fed0    ....    BL       baseReadNBytes ; 0x6cfc
;;;242    
;;;243    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Free clusters are %2\n", udbRemainingClusters);
;;;244    
;;;245    	DBG_FUNC_EXIT("<<[MemoryManager] mm_GetAvailableMemory() returns %4\n", (udbRemainingClusters * CLUSTER_SIZE));
;;;246    
;;;247    	/*return free memory*/
;;;248    	return (udbRemainingClusters * CLUSTER_SIZE);
        0x00000f5c:    8820         .      LDRH     r0,[r4,#0]
        0x00000f5e:    0140        @.      LSLS     r0,r0,#5
        0x00000f60:    b002        ..      ADD      sp,sp,#8
        0x00000f62:    bd10        ..      POP      {r4,pc}
    $d.3
    __arm_cp.1_0
        0x00000f64:    0000a002    ....    DCD    40962
    $t.4
    mm_ReadUpdate
;;;249    }
;;;250    
;;;251    /*
;;;252    * It Read/writes the given data into present cluster chain
;;;253    *
;;;254    * @param maBlock: starting block of cluster chain
;;;255    * @param pumbData: data will be read/write from/to this array
;;;256    * @param udbOffset: offset of memory from where to start writing/reading data
;;;257    * @param udbDataSize: Length of data to read/write in memory
;;;258    * @param mmMode: Read or Write
;;;259    *
;;;260    * @return FALSE if maBlock is empty, otherwise TRUE
;;;261    * @precondition: Caller ensure Data size to update must not exceed the allocated size
;;;262    */
;;;263    boolean mm_ReadUpdate(IN_ARG		tMemAddr	maBlock,
;;;264    						INOUT_ARG	puMonoByte	pumbData, 
;;;265    						IN_ARG		uDiByte		udbOffset, 
;;;266    						IN_ARG		uDiByte		udbDataSize, 
;;;267    						IN_ARG		tMemMode	mmMode) {
        0x00000f68:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000f6a:    b083        ..      SUB      sp,sp,#0xc
        0x00000f6c:    2900        .)      CMP      r1,#0
        0x00000f6e:    d075        u.      BEQ      0x105c ; mm_ReadUpdate + 244
;;; Core/MemoryManager/source\MemoryManager.c
        0x00000f70:    4606        .F      MOV      r6,r0
        0x00000f72:    2800        .(      CMP      r0,#0
        0x00000f74:    d00d        ..      BEQ      0xf92 ; mm_ReadUpdate + 42
        0x00000f76:    461c        .F      MOV      r4,r3
        0x00000f78:    4617        .F      MOV      r7,r2
        0x00000f7a:    460d        .F      MOV      r5,r1
        0x00000f7c:    9808        ..      LDR      r0,[sp,#0x20]
        0x00000f7e:    2801        .(      CMP      r0,#1
        0x00000f80:    9000        ..      STR      r0,[sp,#0]
        0x00000f82:    d10a        ..      BNE      0xf9a ; mm_ReadUpdate + 50
        0x00000f84:    f005fe31    ..1.    BL       at_beginTxn ; 0x6bea
        0x00000f88:    38ff        .8      SUBS     r0,r0,#0xff
        0x00000f8a:    4241        AB      RSBS     r1,r0,#0
        0x00000f8c:    4141        AA      ADCS     r1,r1,r0
        0x00000f8e:    9101        ..      STR      r1,[sp,#4]
        0x00000f90:    e007        ..      B        0xfa2 ; mm_ReadUpdate + 58
        0x00000f92:    2400        .$      MOVS     r4,#0
        0x00000f94:    4620         F      MOV      r0,r4
        0x00000f96:    b003        ..      ADD      sp,sp,#0xc
        0x00000f98:    bdf0        ..      POP      {r4-r7,pc}
        0x00000f9a:    2800        .(      CMP      r0,#0
        0x00000f9c:    d038        8.      BEQ      0x1010 ; mm_ReadUpdate + 168
        0x00000f9e:    2000        .       MOVS     r0,#0
        0x00000fa0:    9001        ..      STR      r0,[sp,#4]
        0x00000fa2:    b2b8        ..      UXTH     r0,r7
        0x00000fa4:    281f        .(      CMP      r0,#0x1f
        0x00000fa6:    d814        ..      BHI      0xfd2 ; mm_ReadUpdate + 106
        0x00000fa8:    b2a1        ..      UXTH     r1,r4
        0x00000faa:    1809        ..      ADDS     r1,r1,r0
        0x00000fac:    2920         )      CMP      r1,#0x20
        0x00000fae:    4621        !F      MOV      r1,r4
        0x00000fb0:    d301        ..      BCC      0xfb6 ; mm_ReadUpdate + 78
        0x00000fb2:    2120         !      MOVS     r1,#0x20
        0x00000fb4:    1bc9        ..      SUBS     r1,r1,r7
        0x00000fb6:    b2cf        ..      UXTB     r7,r1
        0x00000fb8:    0171        q.      LSLS     r1,r6,#5
        0x00000fba:    1808        ..      ADDS     r0,r1,r0
        0x00000fbc:    492c        ,I      LDR      r1,[pc,#176] ; [0x1070] = 0x126e0
        0x00000fbe:    1840        @.      ADDS     r0,r0,r1
        0x00000fc0:    3820         8      SUBS     r0,r0,#0x20
        0x00000fc2:    4629        )F      MOV      r1,r5
        0x00000fc4:    463a        :F      MOV      r2,r7
        0x00000fc6:    f005ff01    ....    BL       baseWriteNBytes ; 0x6dcc
        0x00000fca:    1be4        ..      SUBS     r4,r4,r7
        0x00000fcc:    19ed        ..      ADDS     r5,r5,r7
        0x00000fce:    2700        .'      MOVS     r7,#0
        0x00000fd0:    e000        ..      B        0xfd4 ; mm_ReadUpdate + 108
        0x00000fd2:    3f20         ?      SUBS     r7,r7,#0x20
        0x00000fd4:    00b0        ..      LSLS     r0,r6,#2
        0x00000fd6:    4925        %I      LDR      r1,[pc,#148] ; [0x106c] = 0xa1fc
        0x00000fd8:    1840        @.      ADDS     r0,r0,r1
        0x00000fda:    ae02        ..      ADD      r6,sp,#8
        0x00000fdc:    2204        ."      MOVS     r2,#4
        0x00000fde:    4631        1F      MOV      r1,r6
        0x00000fe0:    f005fe8c    ....    BL       baseReadNBytes ; 0x6cfc
        0x00000fe4:    0420         .      LSLS     r0,r4,#16
        0x00000fe6:    d003        ..      BEQ      0xff0 ; mm_ReadUpdate + 136
        0x00000fe8:    8876        v.      LDRH     r6,[r6,#2]
        0x00000fea:    481f        .H      LDR      r0,[pc,#124] ; [0x1068] = 0xffff
        0x00000fec:    4286        .B      CMP      r6,r0
        0x00000fee:    d1d8        ..      BNE      0xfa2 ; mm_ReadUpdate + 58
        0x00000ff0:    24ff        .$      MOVS     r4,#0xff
        0x00000ff2:    9800        ..      LDR      r0,[sp,#0]
        0x00000ff4:    2801        .(      CMP      r0,#1
        0x00000ff6:    d1cd        ..      BNE      0xf94 ; mm_ReadUpdate + 44
        0x00000ff8:    9801        ..      LDR      r0,[sp,#4]
        0x00000ffa:    2800        .(      CMP      r0,#0
        0x00000ffc:    d0ca        ..      BEQ      0xf94 ; mm_ReadUpdate + 44
        0x00000ffe:    f005fe09    ....    BL       at_commitTxn ; 0x6c14
        0x00001002:    4620         F      MOV      r0,r4
        0x00001004:    b003        ..      ADD      sp,sp,#0xc
        0x00001006:    bdf0        ..      POP      {r4-r7,pc}
        0x00001008:    8876        v.      LDRH     r6,[r6,#2]
        0x0000100a:    4817        .H      LDR      r0,[pc,#92] ; [0x1068] = 0xffff
        0x0000100c:    4286        .B      CMP      r6,r0
        0x0000100e:    d0ef        ..      BEQ      0xff0 ; mm_ReadUpdate + 136
;;;1      #include "MemoryManager.h"
;;;2      
;;;3      /*
;;;4      * SMART- SIM Memory Allocation Root Table (like FAT)
;;;5      * Disk Memory (Chunks of cluster)
;;;6      */
;;;7      
;;;8      /*
;;;9      * It finds first free cluster header after traversing SMART
;;;10     *
;;;11     * @param maLastReturnedCluster, Last free cluster returned, this param is passed to avoid re-traversing
;;;12     *					the whole table
;;;13     * @return tMemAddr, first free cluster header in SMART
;;;14     */
;;;15     static tMemAddr mm_getFreeCluster(IN_ARG tMemAddr maLastReturnedCluster) {
;;;16     
;;;17     	uDiByte				udbClusterOffset; 
;;;18     	uDiByte				udbNoOfClustersProcessed = 0x00;
;;;19     	tMemAddr			maBlockIndex; //contains SMART index
;;;20     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc() \n");
;;;23     
;;;24     	/*check if no memory available*/
;;;25     	if (NO_FREE_CLUSTER == maLastReturnedCluster)
;;;26     	{
;;;27     		DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;28     		return NO_FREE_MEMORY;
;;;29     	}
;;;30     
;;;31     	/*Starts traversing from given Cluster no.*/
;;;32     	maBlockIndex = maLastReturnedCluster;
;;;33     
;;;34     	do
;;;35     	{
;;;36     		/*calculate offset of cluster header*/
;;;37     		udbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
;;;38     
;;;39     		/*Read back cluster in SMART*/
;;;40     		baseReadNBytes(ADDRESS_SMART_START + udbClusterOffset, (puMonoByte) &chCurrFreeHeader, sizeof(tClusterHeader));
;;;41     
;;;42     		/*check if its free*/
;;;43     		if (chCurrFreeHeader.umbBusy != CLUSTER_BUSY) {
;;;44     
;;;45     			/*return free cluster index*/
;;;46     			DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns %2\n", maBlockIndex);
;;;47     			return maBlockIndex;
;;;48     		}
;;;49     		if (NO_OF_CLUSTERS == maBlockIndex) {
;;;50     
;;;51     			/*reset to first cluster for further traversing*/
;;;52     			maBlockIndex = SMART_START_INDEX;
;;;53     		}
;;;54     		else {
;;;55     
;;;56     			/*next cluster*/
;;;57     			maBlockIndex++;
;;;58     		}
;;;59     
;;;60     		/*increment the total no. of clusters processed so far*/
;;;61     		udbNoOfClustersProcessed++;
;;;62     
;;;63     	} while (NO_OF_CLUSTERS != udbNoOfClustersProcessed); //If all clusters are processed
;;;64     
;;;65     	/*if control is here, it means no free cluster*/
;;;66     	DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_CLUSTER %2\n", NO_FREE_CLUSTER);
;;;67     	return NO_FREE_CLUSTER;
;;;68     
;;;69     }
;;;70     /*
;;;71     * It allocates the Cluster header and memory Clusters to the requester as per required size.
;;;72     * If there are no. of clusters, it connects them by making chain.
;;;73     * 
;;;74     * @param udbSize: Total size of memory required by requester
;;;75     * 
;;;76     * @return tMemAddr index of first cluster header in allocated memory.
;;;77     */
;;;78     tMemAddr mm_alloc(IN_ARG uDiByte udbSize, IN_ARG uMonoByte umbDefaultByte)
;;;79     {
;;;80     #ifdef FEAT_EXHAUSTEARING	
;;;81     	boolean 			bCloseTheTxn=FALSE;
;;;82     #endif
;;;83     	uDiByte				udbNoOfClusters; //Store no. of clusters required for object
;;;84     	uDiByte				udbRemainingClusters;
;;;85     	tMemAddr			maBlockIndex = 0x00; //will contain next free mem block address
;;;86     	tMemAddr			maPrevIndex = END_OF_CLUSTER_CHAIN; //Stores index of previous cluster
;;;87     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;88     	tCluster			cClusterData = { 0x00 };
;;;89     	uQuadByte			uqbClusterOffset; //stores relative offset of cluster header in SMART
;;;90     
;;;91     	/*Check size*/
;;;92     	assert(udbSize != 0x00);
;;;93     
;;;94     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc()\n");
;;;95     
;;;96     	/*Count no. of clusters required*/
;;;97     	udbNoOfClusters = udbSize / CLUSTER_SIZE;
;;;98     
;;;99     	DBG_FUNC("[MemoryManager] mm_alloc: Requested size of memory %2 umbDefaultByte %1\n", udbSize, umbDefaultByte);
;;;100    
;;;101    	/*Check if remainder is there*/
;;;102    	if (udbSize % CLUSTER_SIZE){
;;;103    
;;;104    		/*increment cluster as there is extra data which requires 1 cluster more*/
;;;105    		udbNoOfClusters++;
;;;106    	}
;;;107    
;;;108    	DBG_FUNC("[MemoryManager] mm_alloc: No. of Clusters required %2\n", udbNoOfClusters);
;;;109    
;;;110    	/*read no. of free clusters*/
;;;111    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;112    
;;;113    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of Clusters %2\n", udbRemainingClusters);
;;;114    
;;;115    	/*Check if no. of free clusters are sufficient*/
;;;116    	if (udbNoOfClusters > udbRemainingClusters)
;;;117    	{
;;;118    		/*insufficient memory*/
;;;119    		DBG_WARN("[MemoryManager] mm_alloc: Required no. of clusters is more than remaining clusters \n");
;;;120    		DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;121    		return NO_FREE_MEMORY;
;;;122    	}
;;;123    
;;;124    	if (umbDefaultByte) { //if non-zero default byte passed
;;;125    		
;;;126    		/*Fill the all elements of clutserdata with default value*/
;;;127    		mem_set(cClusterData, umbDefaultByte, CLUSTER_SIZE);
;;;128    	}
;;;129    
;;;130    	/*remaining no of clusters*/
;;;131    	udbRemainingClusters -= udbNoOfClusters;
;;;132    
;;;133    	/*Read the next available cluster from system page*/
;;;134    	baseReadNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maBlockIndex, SIZE_OF_MEMORY_ADDRESS);
;;;135    
;;;136    #ifdef FEAT_EXHAUSTEARING
;;;137    	/*begin the transaction*/
;;;138    	if (TRUE == at_beginTxn()) { 
;;;139    
;;;140    		/*indication to close the transaction in same function*/
;;;141    		bCloseTheTxn = TRUE;
;;;142    	}
;;;143    #endif
;;;144    
;;;145    	do {
;;;146    		/*Get free cluster*/
;;;147    		maBlockIndex = mm_getFreeCluster(maBlockIndex);
;;;148    
;;;149    		/*Set busy on that cluster*/
;;;150    		chCurrFreeHeader.umbBusy = CLUSTER_BUSY;
;;;151    
;;;152    		/*Store index to previous cluster*/
;;;153    		chCurrFreeHeader.maNextCluster = maPrevIndex;
;;;154    
;;;155    		/*Check if data less than cluster size*/
;;;156    		if (udbSize < CLUSTER_SIZE) {
;;;157    
;;;158    			/*note used data length*/
;;;159    			chCurrFreeHeader.umbSize = (uMonoByte)udbSize;
;;;160    
;;;161    			/*No more clusters required*/
;;;162    			udbSize = 0x00;
;;;163    		}
;;;164    		else {
;;;165    
;;;166    			/*indicates that cluster is fully used*/
;;;167    			chCurrFreeHeader.umbSize = 0x00;
;;;168    
;;;169    			/*Remaining required size of memory*/
;;;170    			udbSize -= CLUSTER_SIZE; 
;;;171    		}
;;;172    
;;;173    		/*calculate offset of cluster header*/
;;;174    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
;;;175    
;;;176    		/*write back cluster header in SMART*/
;;;177    		baseWriteNBytes(ADDRESS_SMART_START + uqbClusterOffset, (puMonoByte)&chCurrFreeHeader, sizeof(tClusterHeader));
;;;178    
;;;179    		/*calculate offset of cluster data*/
;;;180    		uqbClusterOffset = sizeof(tCluster) * (maBlockIndex - 1);
;;;181    
;;;182    		/*write cluster in DISK area*/
;;;183    		baseWriteNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, (puMonoByte)&cClusterData, sizeof(tCluster));
;;;184    
;;;185    		/*Stores index of current cluster as previous*/
;;;186    		maPrevIndex = maBlockIndex;
;;;187    
;;;188    		DBG_FUNC("[MemoryManager] mm_alloc: Cluster %2 allocated\n", maBlockIndex);
;;;189    
;;;190    		/*decrement cluster as one already located*/
;;;191    		udbNoOfClusters--;
;;;192    
;;;193    	} while (udbNoOfClusters); //if no more clusters required
;;;194    
;;;195    	DBG_FUNC("[MemoryManager] mm_alloc: Memory data has been allocated to requestor\n");
;;;196    
;;;197    	/*search for next free cluster*/
;;;198    	maPrevIndex = mm_getFreeCluster(maBlockIndex);
;;;199    
;;;200    	DBG_FUNC("[MemoryManager] mm_alloc: Next free cluster %2\n", maPrevIndex);
;;;201    
;;;202    	/*Write the next available cluster on system page*/
;;;203    	baseWriteNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maPrevIndex, SIZE_OF_MEMORY_ADDRESS);
;;;204    
;;;205    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of clusters %2\n", udbRemainingClusters);
;;;206    
;;;207    	/*write free clusters*/
;;;208    	baseWriteNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;209    
;;;210    #ifdef FEAT_EXHAUSTEARING
;;;211    
;;;212    	if (TRUE == bCloseTheTxn) {
;;;213    		
;;;214    		/*commit the txn started in the beginning of function*/
;;;215    		at_commitTxn();
;;;216    	}
;;;217    #endif
;;;218    
;;;219    	DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns %2\n", maBlockIndex);
;;;220    
;;;221    	/*return Starting allocated cluster*/
;;;222    	return maBlockIndex;
;;;223    }
;;;224    
;;;225    /*
;;;226    * It returns the free memory in NVM
;;;227    *
;;;228    * @param udbSize: Total size of memory required by requester
;;;229    *
;;;230    * @return tMemAddr index of first cluster header in allocated memory.
;;;231    */
;;;232    uQuadByte mm_GetAvailableMemory(void) {
;;;233    	/*stores remaining no. of free clusters*/
;;;234    	uDiByte udbRemainingClusters;
;;;235    	
;;;236    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_GetAvailableMemory() \n");
;;;237    
;;;238    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Cluster size is %2\n", CLUSTER_SIZE);
;;;239    
;;;240    	/*read no. of free clusters*/
;;;241    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;242    
;;;243    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Free clusters are %2\n", udbRemainingClusters);
;;;244    
;;;245    	DBG_FUNC_EXIT("<<[MemoryManager] mm_GetAvailableMemory() returns %4\n", (udbRemainingClusters * CLUSTER_SIZE));
;;;246    
;;;247    	/*return free memory*/
;;;248    	return (udbRemainingClusters * CLUSTER_SIZE);
;;;249    }
;;;250    
;;;251    /*
;;;252    * It Read/writes the given data into present cluster chain
;;;253    *
;;;254    * @param maBlock: starting block of cluster chain
;;;255    * @param pumbData: data will be read/write from/to this array
;;;256    * @param udbOffset: offset of memory from where to start writing/reading data
;;;257    * @param udbDataSize: Length of data to read/write in memory
;;;258    * @param mmMode: Read or Write
;;;259    *
;;;260    * @return FALSE if maBlock is empty, otherwise TRUE
;;;261    * @precondition: Caller ensure Data size to update must not exceed the allocated size
;;;262    */
;;;263    boolean mm_ReadUpdate(IN_ARG		tMemAddr	maBlock,
;;;264    						INOUT_ARG	puMonoByte	pumbData, 
;;;265    						IN_ARG		uDiByte		udbOffset, 
;;;266    						IN_ARG		uDiByte		udbDataSize, 
;;;267    						IN_ARG		tMemMode	mmMode) {
;;;268    
;;;269    	uMonoByte	umbDataLength; //length of data to read/write in a cluster
;;;270    	uQuadByte	uqbClusterOffset; // stores the exact offset 
;;;271    #ifdef FEAT_EXHAUSTEARING
;;;272    	boolean bCloseTheTxn = FALSE;
;;;273    #endif
;;;274    
;;;275    	tClusterHeader chCurrHeader; //stores cluster header
;;;276    	
;;;277    	/*Check address must not be NULL*/
;;;278    	assert(pumbData != NULL);
;;;279    
;;;280    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_ReadUpdate() \n");
;;;281    
;;;282    	DBG_FUNC("[MemoryManager] mm_ReadUpdate: maBlock %2  udbOffset %2 udbDataSize %2  mmMode %1\n", maBlock, udbOffset, udbDataSize, mmMode);
;;;283    
;;;284    	/*Check if Clusterindex is not invalid one*/
;;;285    	if (EMPTY_OBJECT == maBlock)
;;;286    	{
;;;287    		/*invalid cluster/block index*/
;;;288    		DBG_FUNC_EXIT("<<[MemoryManager] mm_ReadUpdate() returns FALSE i.e. %1\n", FALSE);
;;;289    		return FALSE;
;;;290    	}
;;;291    
;;;292    #ifdef FEAT_EXHAUSTEARING
;;;293    	if (MEM_MODE_UPDATE == mmMode) {
;;;294    
;;;295    		if (TRUE == at_beginTxn()) {
;;;296    			
;;;297    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Start the transaction, as memory is going to be change\n");
;;;298    
;;;299    			/*indication to close the transaction in same function*/
;;;300    			bCloseTheTxn = TRUE;
;;;301    		}
;;;302    	}
;;;303    #endif
;;;304    
;;;305    	do {
;;;306    
;;;307    		/*check if Offset is less than Cluster size*/
;;;308    		if (udbOffset < CLUSTER_SIZE) //Read/writing can be start from current cluster
        0x00001010:    b2b8        ..      UXTH     r0,r7
        0x00001012:    2820         (      CMP      r0,#0x20
        0x00001014:    d214        ..      BCS      0x1040 ; mm_ReadUpdate + 216
;;;309    		{
;;;310    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Offset %2 of cluster %2 \n", udbOffset, maBlock);
;;;311    
;;;312    			/*calculate offset within cluster data*/
;;;313    			uqbClusterOffset = (sizeof(tCluster) * (maBlock - 1)) + udbOffset;
;;;314    
;;;315    			/*Check if offset + data size less than cluster size*/
;;;316    			if ((udbDataSize + udbOffset) < CLUSTER_SIZE) {
        0x00001016:    b2a1        ..      UXTH     r1,r4
        0x00001018:    1809        ..      ADDS     r1,r1,r0
        0x0000101a:    2920         )      CMP      r1,#0x20
        0x0000101c:    4621        !F      MOV      r1,r4
        0x0000101e:    d301        ..      BCC      0x1024 ; mm_ReadUpdate + 188
        0x00001020:    2120         !      MOVS     r1,#0x20
        0x00001022:    1bc9        ..      SUBS     r1,r1,r7
;;;317    
;;;318    				/*if control is here, it means this is last cluster to read, for fetching all data*/
;;;319    				/*note used data length*/
;;;320    				umbDataLength = (uMonoByte)udbDataSize;
;;;321    			}
;;;322    			else {
;;;323    				/*if control is here, it means we will read few data from this cluster and rest of the data from 
;;;324    				* remaining clusters
;;;325    				*/
;;;326    				/*indicates that cluster is fully used*/
;;;327    				umbDataLength = CLUSTER_SIZE - udbOffset;
;;;328    			}
;;;329    
;;;330    			if (MEM_MODE_READ == mmMode){
;;;331    
;;;332    				DBG_FUNC("[MemoryManager] mm_ReadUpdate: Reading data of length %1 \n", umbDataLength);
;;;333    
;;;334    				/*Read cluster from memory*/
;;;335    				baseReadNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, pumbData, umbDataLength);
        0x00001024:    b2cf        ..      UXTB     r7,r1
        0x00001026:    0171        q.      LSLS     r1,r6,#5
        0x00001028:    1808        ..      ADDS     r0,r1,r0
        0x0000102a:    4911        .I      LDR      r1,[pc,#68] ; [0x1070] = 0x126e0
        0x0000102c:    1840        @.      ADDS     r0,r0,r1
        0x0000102e:    3820         8      SUBS     r0,r0,#0x20
        0x00001030:    4629        )F      MOV      r1,r5
        0x00001032:    463a        :F      MOV      r2,r7
        0x00001034:    f005fe62    ..b.    BL       baseReadNBytes ; 0x6cfc
        0x00001038:    1be4        ..      SUBS     r4,r4,r7
;;;336    			}
;;;337    			else {//MEM_MODE_UPDATE
;;;338    
;;;339    				DBG_FUNC("[MemoryManager] mm_ReadUpdate: Writing data of length %1 \n", umbDataLength);
;;;340    
;;;341    				/*write data in cluster of memory*/
;;;342    				baseWriteNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, pumbData, umbDataLength);
;;;343    			}
;;;344    
;;;345    			/*increase data pointer*/
;;;346    			pumbData += umbDataLength;
        0x0000103a:    19ed        ..      ADDS     r5,r5,r7
        0x0000103c:    2700        .'      MOVS     r7,#0
        0x0000103e:    e000        ..      B        0x1042 ; mm_ReadUpdate + 218
;;;347    
;;;348    			/*Reduce size as well*/
;;;349    			udbDataSize -= umbDataLength;
;;;350    
;;;351    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Remaining Size %2 \n", udbDataSize);
;;;352    
;;;353    			/*Reset to 0*/
;;;354    			udbOffset = 0x00;
;;;355    
;;;356    		}
;;;357    		else {// it means offset doesnt fall under this cluster
;;;358    
;;;359    			/*Reduce cluster size from offset as current cluster is skipped*/
;;;360    			udbOffset -= CLUSTER_SIZE;
        0x00001040:    3f20         ?      SUBS     r7,r7,#0x20
;;;361    		}
;;;362    
;;;363    		/*calculate offset of cluster header*/
;;;364    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlock - 1);
        0x00001042:    00b0        ..      LSLS     r0,r6,#2
;;;365    
;;;366    		/*Read cluster header from SMART*/
;;;367    		baseReadNBytes(ADDRESS_SMART_START + uqbClusterOffset,(puMonoByte) &chCurrHeader, sizeof(tClusterHeader));
        0x00001044:    4909        .I      LDR      r1,[pc,#36] ; [0x106c] = 0xa1fc
        0x00001046:    1840        @.      ADDS     r0,r0,r1
        0x00001048:    ae02        ..      ADD      r6,sp,#8
        0x0000104a:    2204        ."      MOVS     r2,#4
        0x0000104c:    4631        1F      MOV      r1,r6
        0x0000104e:    f005fe55    ..U.    BL       baseReadNBytes ; 0x6cfc
        0x00001052:    2000        .       MOVS     r0,#0
;;;368    
;;;369    		/*get next block index*/
;;;370    		maBlock = chCurrHeader.maNextCluster;
;;;371    
;;;372    		DBG_FUNC("[MemoryManager] mm_ReadUpdate: Fetch next cluster %2 \n", maBlock);
;;;373    
;;;374    	} while((udbDataSize)						//still there is data to Read/update
        0x00001054:    9001        ..      STR      r0,[sp,#4]
        0x00001056:    0420         .      LSLS     r0,r4,#16
        0x00001058:    d1d6        ..      BNE      0x1008 ; mm_ReadUpdate + 160
        0x0000105a:    e7c9        ..      B        0xff0 ; mm_ReadUpdate + 136
        0x0000105c:    208b        .       MOVS     r0,#0x8b
        0x0000105e:    0042        B.      LSLS     r2,r0,#1
        0x00001060:    4804        .H      LDR      r0,[pc,#16] ; [0x1074] = 0x842c
        0x00001062:    4905        .I      LDR      r1,[pc,#20] ; [0x1078] = 0x843d
        0x00001064:    f006fb44    ..D.    BL       __aeabi_assert ; 0x76f0
    $d.5
    __arm_cp.2_0
        0x00001068:    0000ffff    ....    DCD    65535
    __arm_cp.2_1
        0x0000106c:    0000a1fc    ....    DCD    41468
    __arm_cp.2_2
        0x00001070:    000126e0    .&..    DCD    75488
    __arm_cp.2_3
        0x00001074:    0000842c    ,...    DCD    33836
    __arm_cp.2_4
        0x00001078:    0000843d    =...    DCD    33853
    $t.6
    mm_Free
;;;375    			&&									//AND
;;;376    			(END_OF_CLUSTER_CHAIN != maBlock)); //havent reached the end of chain yet
;;;377    
;;;378    #ifdef FEAT_EXHAUSTEARING
;;;379    	if (MEM_MODE_UPDATE == mmMode) {
;;;380    
;;;381    		if (TRUE == bCloseTheTxn) {
;;;382    			
;;;383    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Close the transaction, Commit all changes permanent\n");
;;;384    			
;;;385    			/*commit the txn started in the beginning of function*/
;;;386    			at_commitTxn();
;;;387    		}
;;;388    	}
;;;389    #endif
;;;390    
;;;391    	DBG_FUNC_EXIT("<<[MemoryManager] mm_ReadUpdate() returns TRUE i.e. %1\n", TRUE);
;;;392    
;;;393    	/*all data has been Read/updated assuming no data left to write as caller already ensured that*/
;;;394    	return TRUE;
;;;395    }
;;;396    
;;;397    /*
;;;398    * It frees the given allocated memory corresponding to given memory address.
;;;399    *
;;;400    * @param udbSize: Total size of memory required by requester
;;;401    *
;;;402    * @return tMemAddr index of first cluster header in allocated memory.
;;;403    */
;;;404    void mm_Free(IN_ARG tMemAddr maAllocatedAddr)
;;;405    {
        0x0000107c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000107e:    b083        ..      SUB      sp,sp,#0xc
        0x00001080:    4605        .F      MOV      r5,r0
        0x00001082:    4817        .H      LDR      r0,[pc,#92] ; [0x10e0] = 0xa002
        0x00001084:    ae02        ..      ADD      r6,sp,#8
        0x00001086:    2202        ."      MOVS     r2,#2
        0x00001088:    4631        1F      MOV      r1,r6
        0x0000108a:    f005fe37    ..7.    BL       baseReadNBytes ; 0x6cfc
;;; Core/MemoryManager/source\MemoryManager.c
        0x0000108e:    4c15        .L      LDR      r4,[pc,#84] ; [0x10e4] = 0xffff
        0x00001090:    42a5        .B      CMP      r5,r4
        0x00001092:    d022        ".      BEQ      0x10da ; mm_Free + 94
        0x00001094:    8830        0.      LDRH     r0,[r6,#0]
        0x00001096:    9000        ..      STR      r0,[sp,#0]
        0x00001098:    00a8        ..      LSLS     r0,r5,#2
        0x0000109a:    4a13        .J      LDR      r2,[pc,#76] ; [0x10e8] = 0xa1fc
        0x0000109c:    1886        ..      ADDS     r6,r0,r2
        0x0000109e:    ad01        ..      ADD      r5,sp,#4
        0x000010a0:    2704        .'      MOVS     r7,#4
        0x000010a2:    4630        0F      MOV      r0,r6
        0x000010a4:    4629        )F      MOV      r1,r5
        0x000010a6:    463a        :F      MOV      r2,r7
        0x000010a8:    f005fe28    ..(.    BL       baseReadNBytes ; 0x6cfc
        0x000010ac:    20ff        .       MOVS     r0,#0xff
;;;1      #include "MemoryManager.h"
;;;2      
;;;3      /*
;;;4      * SMART- SIM Memory Allocation Root Table (like FAT)
;;;5      * Disk Memory (Chunks of cluster)
;;;6      */
;;;7      
;;;8      /*
;;;9      * It finds first free cluster header after traversing SMART
;;;10     *
;;;11     * @param maLastReturnedCluster, Last free cluster returned, this param is passed to avoid re-traversing
;;;12     *					the whole table
;;;13     * @return tMemAddr, first free cluster header in SMART
;;;14     */
;;;15     static tMemAddr mm_getFreeCluster(IN_ARG tMemAddr maLastReturnedCluster) {
;;;16     
;;;17     	uDiByte				udbClusterOffset; 
;;;18     	uDiByte				udbNoOfClustersProcessed = 0x00;
;;;19     	tMemAddr			maBlockIndex; //contains SMART index
;;;20     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc() \n");
;;;23     
;;;24     	/*check if no memory available*/
;;;25     	if (NO_FREE_CLUSTER == maLastReturnedCluster)
;;;26     	{
;;;27     		DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;28     		return NO_FREE_MEMORY;
;;;29     	}
;;;30     
;;;31     	/*Starts traversing from given Cluster no.*/
;;;32     	maBlockIndex = maLastReturnedCluster;
;;;33     
;;;34     	do
;;;35     	{
;;;36     		/*calculate offset of cluster header*/
;;;37     		udbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
;;;38     
;;;39     		/*Read back cluster in SMART*/
;;;40     		baseReadNBytes(ADDRESS_SMART_START + udbClusterOffset, (puMonoByte) &chCurrFreeHeader, sizeof(tClusterHeader));
;;;41     
;;;42     		/*check if its free*/
;;;43     		if (chCurrFreeHeader.umbBusy != CLUSTER_BUSY) {
;;;44     
;;;45     			/*return free cluster index*/
;;;46     			DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns %2\n", maBlockIndex);
;;;47     			return maBlockIndex;
;;;48     		}
;;;49     		if (NO_OF_CLUSTERS == maBlockIndex) {
;;;50     
;;;51     			/*reset to first cluster for further traversing*/
;;;52     			maBlockIndex = SMART_START_INDEX;
;;;53     		}
;;;54     		else {
;;;55     
;;;56     			/*next cluster*/
;;;57     			maBlockIndex++;
;;;58     		}
;;;59     
;;;60     		/*increment the total no. of clusters processed so far*/
;;;61     		udbNoOfClustersProcessed++;
;;;62     
;;;63     	} while (NO_OF_CLUSTERS != udbNoOfClustersProcessed); //If all clusters are processed
;;;64     
;;;65     	/*if control is here, it means no free cluster*/
;;;66     	DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_CLUSTER %2\n", NO_FREE_CLUSTER);
;;;67     	return NO_FREE_CLUSTER;
;;;68     
;;;69     }
;;;70     /*
;;;71     * It allocates the Cluster header and memory Clusters to the requester as per required size.
;;;72     * If there are no. of clusters, it connects them by making chain.
;;;73     * 
;;;74     * @param udbSize: Total size of memory required by requester
;;;75     * 
;;;76     * @return tMemAddr index of first cluster header in allocated memory.
;;;77     */
;;;78     tMemAddr mm_alloc(IN_ARG uDiByte udbSize, IN_ARG uMonoByte umbDefaultByte)
;;;79     {
;;;80     #ifdef FEAT_EXHAUSTEARING	
;;;81     	boolean 			bCloseTheTxn=FALSE;
;;;82     #endif
;;;83     	uDiByte				udbNoOfClusters; //Store no. of clusters required for object
;;;84     	uDiByte				udbRemainingClusters;
;;;85     	tMemAddr			maBlockIndex = 0x00; //will contain next free mem block address
;;;86     	tMemAddr			maPrevIndex = END_OF_CLUSTER_CHAIN; //Stores index of previous cluster
;;;87     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;88     	tCluster			cClusterData = { 0x00 };
;;;89     	uQuadByte			uqbClusterOffset; //stores relative offset of cluster header in SMART
;;;90     
;;;91     	/*Check size*/
;;;92     	assert(udbSize != 0x00);
;;;93     
;;;94     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc()\n");
;;;95     
;;;96     	/*Count no. of clusters required*/
;;;97     	udbNoOfClusters = udbSize / CLUSTER_SIZE;
;;;98     
;;;99     	DBG_FUNC("[MemoryManager] mm_alloc: Requested size of memory %2 umbDefaultByte %1\n", udbSize, umbDefaultByte);
;;;100    
;;;101    	/*Check if remainder is there*/
;;;102    	if (udbSize % CLUSTER_SIZE){
;;;103    
;;;104    		/*increment cluster as there is extra data which requires 1 cluster more*/
;;;105    		udbNoOfClusters++;
;;;106    	}
;;;107    
;;;108    	DBG_FUNC("[MemoryManager] mm_alloc: No. of Clusters required %2\n", udbNoOfClusters);
;;;109    
;;;110    	/*read no. of free clusters*/
;;;111    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;112    
;;;113    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of Clusters %2\n", udbRemainingClusters);
;;;114    
;;;115    	/*Check if no. of free clusters are sufficient*/
;;;116    	if (udbNoOfClusters > udbRemainingClusters)
;;;117    	{
;;;118    		/*insufficient memory*/
;;;119    		DBG_WARN("[MemoryManager] mm_alloc: Required no. of clusters is more than remaining clusters \n");
;;;120    		DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;121    		return NO_FREE_MEMORY;
;;;122    	}
;;;123    
;;;124    	if (umbDefaultByte) { //if non-zero default byte passed
;;;125    		
;;;126    		/*Fill the all elements of clutserdata with default value*/
;;;127    		mem_set(cClusterData, umbDefaultByte, CLUSTER_SIZE);
;;;128    	}
;;;129    
;;;130    	/*remaining no of clusters*/
;;;131    	udbRemainingClusters -= udbNoOfClusters;
;;;132    
;;;133    	/*Read the next available cluster from system page*/
;;;134    	baseReadNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maBlockIndex, SIZE_OF_MEMORY_ADDRESS);
;;;135    
;;;136    #ifdef FEAT_EXHAUSTEARING
;;;137    	/*begin the transaction*/
;;;138    	if (TRUE == at_beginTxn()) { 
;;;139    
;;;140    		/*indication to close the transaction in same function*/
;;;141    		bCloseTheTxn = TRUE;
;;;142    	}
;;;143    #endif
;;;144    
;;;145    	do {
;;;146    		/*Get free cluster*/
;;;147    		maBlockIndex = mm_getFreeCluster(maBlockIndex);
;;;148    
;;;149    		/*Set busy on that cluster*/
;;;150    		chCurrFreeHeader.umbBusy = CLUSTER_BUSY;
;;;151    
;;;152    		/*Store index to previous cluster*/
;;;153    		chCurrFreeHeader.maNextCluster = maPrevIndex;
;;;154    
;;;155    		/*Check if data less than cluster size*/
;;;156    		if (udbSize < CLUSTER_SIZE) {
;;;157    
;;;158    			/*note used data length*/
;;;159    			chCurrFreeHeader.umbSize = (uMonoByte)udbSize;
;;;160    
;;;161    			/*No more clusters required*/
;;;162    			udbSize = 0x00;
;;;163    		}
;;;164    		else {
;;;165    
;;;166    			/*indicates that cluster is fully used*/
;;;167    			chCurrFreeHeader.umbSize = 0x00;
;;;168    
;;;169    			/*Remaining required size of memory*/
;;;170    			udbSize -= CLUSTER_SIZE; 
;;;171    		}
;;;172    
;;;173    		/*calculate offset of cluster header*/
;;;174    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
;;;175    
;;;176    		/*write back cluster header in SMART*/
;;;177    		baseWriteNBytes(ADDRESS_SMART_START + uqbClusterOffset, (puMonoByte)&chCurrFreeHeader, sizeof(tClusterHeader));
;;;178    
;;;179    		/*calculate offset of cluster data*/
;;;180    		uqbClusterOffset = sizeof(tCluster) * (maBlockIndex - 1);
;;;181    
;;;182    		/*write cluster in DISK area*/
;;;183    		baseWriteNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, (puMonoByte)&cClusterData, sizeof(tCluster));
;;;184    
;;;185    		/*Stores index of current cluster as previous*/
;;;186    		maPrevIndex = maBlockIndex;
;;;187    
;;;188    		DBG_FUNC("[MemoryManager] mm_alloc: Cluster %2 allocated\n", maBlockIndex);
;;;189    
;;;190    		/*decrement cluster as one already located*/
;;;191    		udbNoOfClusters--;
;;;192    
;;;193    	} while (udbNoOfClusters); //if no more clusters required
;;;194    
;;;195    	DBG_FUNC("[MemoryManager] mm_alloc: Memory data has been allocated to requestor\n");
;;;196    
;;;197    	/*search for next free cluster*/
;;;198    	maPrevIndex = mm_getFreeCluster(maBlockIndex);
;;;199    
;;;200    	DBG_FUNC("[MemoryManager] mm_alloc: Next free cluster %2\n", maPrevIndex);
;;;201    
;;;202    	/*Write the next available cluster on system page*/
;;;203    	baseWriteNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maPrevIndex, SIZE_OF_MEMORY_ADDRESS);
;;;204    
;;;205    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of clusters %2\n", udbRemainingClusters);
;;;206    
;;;207    	/*write free clusters*/
;;;208    	baseWriteNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;209    
;;;210    #ifdef FEAT_EXHAUSTEARING
;;;211    
;;;212    	if (TRUE == bCloseTheTxn) {
;;;213    		
;;;214    		/*commit the txn started in the beginning of function*/
;;;215    		at_commitTxn();
;;;216    	}
;;;217    #endif
;;;218    
;;;219    	DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns %2\n", maBlockIndex);
;;;220    
;;;221    	/*return Starting allocated cluster*/
;;;222    	return maBlockIndex;
;;;223    }
;;;224    
;;;225    /*
;;;226    * It returns the free memory in NVM
;;;227    *
;;;228    * @param udbSize: Total size of memory required by requester
;;;229    *
;;;230    * @return tMemAddr index of first cluster header in allocated memory.
;;;231    */
;;;232    uQuadByte mm_GetAvailableMemory(void) {
;;;233    	/*stores remaining no. of free clusters*/
;;;234    	uDiByte udbRemainingClusters;
;;;235    	
;;;236    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_GetAvailableMemory() \n");
;;;237    
;;;238    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Cluster size is %2\n", CLUSTER_SIZE);
;;;239    
;;;240    	/*read no. of free clusters*/
;;;241    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;242    
;;;243    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Free clusters are %2\n", udbRemainingClusters);
;;;244    
;;;245    	DBG_FUNC_EXIT("<<[MemoryManager] mm_GetAvailableMemory() returns %4\n", (udbRemainingClusters * CLUSTER_SIZE));
;;;246    
;;;247    	/*return free memory*/
;;;248    	return (udbRemainingClusters * CLUSTER_SIZE);
;;;249    }
;;;250    
;;;251    /*
;;;252    * It Read/writes the given data into present cluster chain
;;;253    *
;;;254    * @param maBlock: starting block of cluster chain
;;;255    * @param pumbData: data will be read/write from/to this array
;;;256    * @param udbOffset: offset of memory from where to start writing/reading data
;;;257    * @param udbDataSize: Length of data to read/write in memory
;;;258    * @param mmMode: Read or Write
;;;259    *
;;;260    * @return FALSE if maBlock is empty, otherwise TRUE
;;;261    * @precondition: Caller ensure Data size to update must not exceed the allocated size
;;;262    */
;;;263    boolean mm_ReadUpdate(IN_ARG		tMemAddr	maBlock,
;;;264    						INOUT_ARG	puMonoByte	pumbData, 
;;;265    						IN_ARG		uDiByte		udbOffset, 
;;;266    						IN_ARG		uDiByte		udbDataSize, 
;;;267    						IN_ARG		tMemMode	mmMode) {
;;;268    
;;;269    	uMonoByte	umbDataLength; //length of data to read/write in a cluster
;;;270    	uQuadByte	uqbClusterOffset; // stores the exact offset 
;;;271    #ifdef FEAT_EXHAUSTEARING
;;;272    	boolean bCloseTheTxn = FALSE;
;;;273    #endif
;;;274    
;;;275    	tClusterHeader chCurrHeader; //stores cluster header
;;;276    	
;;;277    	/*Check address must not be NULL*/
;;;278    	assert(pumbData != NULL);
;;;279    
;;;280    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_ReadUpdate() \n");
;;;281    
;;;282    	DBG_FUNC("[MemoryManager] mm_ReadUpdate: maBlock %2  udbOffset %2 udbDataSize %2  mmMode %1\n", maBlock, udbOffset, udbDataSize, mmMode);
;;;283    
;;;284    	/*Check if Clusterindex is not invalid one*/
;;;285    	if (EMPTY_OBJECT == maBlock)
;;;286    	{
;;;287    		/*invalid cluster/block index*/
;;;288    		DBG_FUNC_EXIT("<<[MemoryManager] mm_ReadUpdate() returns FALSE i.e. %1\n", FALSE);
;;;289    		return FALSE;
;;;290    	}
;;;291    
;;;292    #ifdef FEAT_EXHAUSTEARING
;;;293    	if (MEM_MODE_UPDATE == mmMode) {
;;;294    
;;;295    		if (TRUE == at_beginTxn()) {
;;;296    			
;;;297    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Start the transaction, as memory is going to be change\n");
;;;298    
;;;299    			/*indication to close the transaction in same function*/
;;;300    			bCloseTheTxn = TRUE;
;;;301    		}
;;;302    	}
;;;303    #endif
;;;304    
;;;305    	do {
;;;306    
;;;307    		/*check if Offset is less than Cluster size*/
;;;308    		if (udbOffset < CLUSTER_SIZE) //Read/writing can be start from current cluster
;;;309    		{
;;;310    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Offset %2 of cluster %2 \n", udbOffset, maBlock);
;;;311    
;;;312    			/*calculate offset within cluster data*/
;;;313    			uqbClusterOffset = (sizeof(tCluster) * (maBlock - 1)) + udbOffset;
;;;314    
;;;315    			/*Check if offset + data size less than cluster size*/
;;;316    			if ((udbDataSize + udbOffset) < CLUSTER_SIZE) {
;;;317    
;;;318    				/*if control is here, it means this is last cluster to read, for fetching all data*/
;;;319    				/*note used data length*/
;;;320    				umbDataLength = (uMonoByte)udbDataSize;
;;;321    			}
;;;322    			else {
;;;323    				/*if control is here, it means we will read few data from this cluster and rest of the data from 
;;;324    				* remaining clusters
;;;325    				*/
;;;326    				/*indicates that cluster is fully used*/
;;;327    				umbDataLength = CLUSTER_SIZE - udbOffset;
;;;328    			}
;;;329    
;;;330    			if (MEM_MODE_READ == mmMode){
;;;331    
;;;332    				DBG_FUNC("[MemoryManager] mm_ReadUpdate: Reading data of length %1 \n", umbDataLength);
;;;333    
;;;334    				/*Read cluster from memory*/
;;;335    				baseReadNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, pumbData, umbDataLength);
;;;336    			}
;;;337    			else {//MEM_MODE_UPDATE
;;;338    
;;;339    				DBG_FUNC("[MemoryManager] mm_ReadUpdate: Writing data of length %1 \n", umbDataLength);
;;;340    
;;;341    				/*write data in cluster of memory*/
;;;342    				baseWriteNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, pumbData, umbDataLength);
;;;343    			}
;;;344    
;;;345    			/*increase data pointer*/
;;;346    			pumbData += umbDataLength;
;;;347    
;;;348    			/*Reduce size as well*/
;;;349    			udbDataSize -= umbDataLength;
;;;350    
;;;351    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Remaining Size %2 \n", udbDataSize);
;;;352    
;;;353    			/*Reset to 0*/
;;;354    			udbOffset = 0x00;
;;;355    
;;;356    		}
;;;357    		else {// it means offset doesnt fall under this cluster
;;;358    
;;;359    			/*Reduce cluster size from offset as current cluster is skipped*/
;;;360    			udbOffset -= CLUSTER_SIZE;
;;;361    		}
;;;362    
;;;363    		/*calculate offset of cluster header*/
;;;364    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlock - 1);
;;;365    
;;;366    		/*Read cluster header from SMART*/
;;;367    		baseReadNBytes(ADDRESS_SMART_START + uqbClusterOffset,(puMonoByte) &chCurrHeader, sizeof(tClusterHeader));
;;;368    
;;;369    		/*get next block index*/
;;;370    		maBlock = chCurrHeader.maNextCluster;
;;;371    
;;;372    		DBG_FUNC("[MemoryManager] mm_ReadUpdate: Fetch next cluster %2 \n", maBlock);
;;;373    
;;;374    	} while((udbDataSize)						//still there is data to Read/update
;;;375    			&&									//AND
;;;376    			(END_OF_CLUSTER_CHAIN != maBlock)); //havent reached the end of chain yet
;;;377    
;;;378    #ifdef FEAT_EXHAUSTEARING
;;;379    	if (MEM_MODE_UPDATE == mmMode) {
;;;380    
;;;381    		if (TRUE == bCloseTheTxn) {
;;;382    			
;;;383    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Close the transaction, Commit all changes permanent\n");
;;;384    			
;;;385    			/*commit the txn started in the beginning of function*/
;;;386    			at_commitTxn();
;;;387    		}
;;;388    	}
;;;389    #endif
;;;390    
;;;391    	DBG_FUNC_EXIT("<<[MemoryManager] mm_ReadUpdate() returns TRUE i.e. %1\n", TRUE);
;;;392    
;;;393    	/*all data has been Read/updated assuming no data left to write as caller already ensured that*/
;;;394    	return TRUE;
;;;395    }
;;;396    
;;;397    /*
;;;398    * It frees the given allocated memory corresponding to given memory address.
;;;399    *
;;;400    * @param udbSize: Total size of memory required by requester
;;;401    *
;;;402    * @return tMemAddr index of first cluster header in allocated memory.
;;;403    */
;;;404    void mm_Free(IN_ARG tMemAddr maAllocatedAddr)
;;;405    {
;;;406    	uDiByte			udbRemainingClusters; //Free clusters
;;;407    	uDiByte			udbBackup;
;;;408    	uQuadByte		uqbClusterOffset;	//stores offset to cluster header
;;;409    	tClusterHeader	chCurrHeader;		//Cluster header
;;;410    
;;;411    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_Free() \n");
;;;412    
;;;413    	/*read no. of free clusters*/
;;;414    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte)&udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;415    
;;;416    	/*Backup no. of free clusters*/
;;;417    	udbBackup = udbRemainingClusters;
;;;418    
;;;419    	DBG_FUNC("[MemoryManager] mm_Free: So far no. of free clusters are '%2' \n", udbRemainingClusters);
;;;420    
;;;421    	while (END_OF_CLUSTER_CHAIN != maAllocatedAddr) {
;;;422    
;;;423    		/*calculate offset of cluster header*/
;;;424    		uqbClusterOffset = sizeof(tClusterHeader) * (maAllocatedAddr - 1);
;;;425    
;;;426    		/*Read cluster header from SMART*/
;;;427    		baseReadNBytes(ADDRESS_SMART_START + uqbClusterOffset,(puMonoByte) &chCurrHeader, sizeof(tClusterHeader));
;;;428    
;;;429    		/*free the memory*/
;;;430    		chCurrHeader.umbBusy = CLUSTER_FREE;
        0x000010ae:    7028        (p      STRB     r0,[r5,#0]
;;;431    
;;;432    		DBG_FUNC("[MemoryManager] mm_Free: Releasing cluster '%2' \n", maAllocatedAddr);
;;;433    
;;;434    		/*Write back cluster header from SMART*/
;;;435    		baseWriteNBytes(ADDRESS_SMART_START + uqbClusterOffset, (puMonoByte) &chCurrHeader, sizeof(tClusterHeader));
        0x000010b0:    4630        0F      MOV      r0,r6
        0x000010b2:    4629        )F      MOV      r1,r5
        0x000010b4:    463a        :F      MOV      r2,r7
        0x000010b6:    f005fe89    ....    BL       baseWriteNBytes ; 0x6dcc
        0x000010ba:    9802        ..      LDR      r0,[sp,#8]
        0x000010bc:    1c40        @.      ADDS     r0,r0,#1
        0x000010be:    a902        ..      ADD      r1,sp,#8
        0x000010c0:    8008        ..      STRH     r0,[r1,#0]
;;;436    
;;;437    		/*get next cluster in chain*/
;;;438    		maAllocatedAddr = chCurrHeader.maNextCluster;
        0x000010c2:    886d        m.      LDRH     r5,[r5,#2]
        0x000010c4:    42a5        .B      CMP      r5,r4
        0x000010c6:    d1e7        ..      BNE      0x1098 ; mm_Free + 28
;;;439    
;;;440    		/*Increment the free clusters, as clusters are released*/
;;;441    		udbRemainingClusters++;
;;;442    
;;;443    		DBG_FUNC("[MemoryManager] mm_Free: Next cluster '%2' \n", maAllocatedAddr);
;;;444    
;;;445    	}
;;;446    
;;;447    	if (udbBackup != udbRemainingClusters) {
        0x000010c8:    b280        ..      UXTH     r0,r0
        0x000010ca:    9900        ..      LDR      r1,[sp,#0]
        0x000010cc:    4281        .B      CMP      r1,r0
        0x000010ce:    4804        .H      LDR      r0,[pc,#16] ; [0x10e0] = 0xa002
        0x000010d0:    d003        ..      BEQ      0x10da ; mm_Free + 94
        0x000010d2:    a902        ..      ADD      r1,sp,#8
        0x000010d4:    2202        ."      MOVS     r2,#2
;;;448    
;;;449    		DBG_FUNC("[MemoryManager] mm_Free: After releasing them, now total no. of  free clusters are '%2' \n", udbRemainingClusters);
;;;450    
;;;451    		/*Write no. of free clusters*/
;;;452    		baseWriteNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte)&udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
        0x000010d6:    f005fe79    ..y.    BL       baseWriteNBytes ; 0x6dcc
;;;453    	}
;;;454    	else {
;;;455    		DBG_FUNC("[MemoryManager] mm_Free: No clusters are released \n");
;;;456    	}
;;;457    
;;;458    
;;;459    	DBG_FUNC_EXIT("<<[MemoryManager] mm_Free() \n");
;;;460    
;;;461    }
        0x000010da:    b003        ..      ADD      sp,sp,#0xc
        0x000010dc:    bdf0        ..      POP      {r4-r7,pc}
        0x000010de:    46c0        .F      MOV      r8,r8
    $d.7
    __arm_cp.3_0
        0x000010e0:    0000a002    ....    DCD    40962
    __arm_cp.3_1
        0x000010e4:    0000ffff    ....    DCD    65535
    __arm_cp.3_2
        0x000010e8:    0000a1fc    ....    DCD    41468
    $t.8
    mm_cmpRam
;;;462    
;;;463    /*
;;;464    * It compares the given data (RAM) with given cluster chain
;;;465    *
;;;466    * @param maBlock: starting block of cluster chain
;;;467    * @param pumbData: data to compare
;;;468    * @param udbOffset: offset of memory from where to start comparing data
;;;469    * @param udbDataSize: Length of data to compare in memory
;;;470    *
;;;471    * @return FALSE if maBlock is empty or data doesnt match, otherwise TRUE
;;;472    * @precondition: Caller ensure Data size to compare must not exceed the allocated size
;;;473    */
;;;474    boolean mm_cmpRam(IN_ARG		tMemAddr	maBlock,
;;;475    					INOUT_ARG	puMonoByte	pumbData,
;;;476    					IN_ARG		uDiByte		udbOffset,
;;;477    					IN_ARG		uDiByte		udbDataSize) {
        0x000010ec:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000010ee:    b087        ..      SUB      sp,sp,#0x1c
        0x000010f0:    2900        .)      CMP      r1,#0
        0x000010f2:    d044        D.      BEQ      0x117e ; mm_cmpRam + 146
;;; Core/MemoryManager/source\MemoryManager.c
        0x000010f4:    461c        .F      MOV      r4,r3
        0x000010f6:    4603        .F      MOV      r3,r0
        0x000010f8:    2000        .       MOVS     r0,#0
        0x000010fa:    2b00        .+      CMP      r3,#0
        0x000010fc:    d03a        :.      BEQ      0x1174 ; mm_cmpRam + 136
        0x000010fe:    4617        .F      MOV      r7,r2
        0x00001100:    460d        .F      MOV      r5,r1
        0x00001102:    9001        ..      STR      r0,[sp,#4]
;;;1      #include "MemoryManager.h"
;;;2      
;;;3      /*
;;;4      * SMART- SIM Memory Allocation Root Table (like FAT)
;;;5      * Disk Memory (Chunks of cluster)
;;;6      */
;;;7      
;;;8      /*
;;;9      * It finds first free cluster header after traversing SMART
;;;10     *
;;;11     * @param maLastReturnedCluster, Last free cluster returned, this param is passed to avoid re-traversing
;;;12     *					the whole table
;;;13     * @return tMemAddr, first free cluster header in SMART
;;;14     */
;;;15     static tMemAddr mm_getFreeCluster(IN_ARG tMemAddr maLastReturnedCluster) {
;;;16     
;;;17     	uDiByte				udbClusterOffset; 
;;;18     	uDiByte				udbNoOfClustersProcessed = 0x00;
;;;19     	tMemAddr			maBlockIndex; //contains SMART index
;;;20     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc() \n");
;;;23     
;;;24     	/*check if no memory available*/
;;;25     	if (NO_FREE_CLUSTER == maLastReturnedCluster)
;;;26     	{
;;;27     		DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;28     		return NO_FREE_MEMORY;
;;;29     	}
;;;30     
;;;31     	/*Starts traversing from given Cluster no.*/
;;;32     	maBlockIndex = maLastReturnedCluster;
;;;33     
;;;34     	do
;;;35     	{
;;;36     		/*calculate offset of cluster header*/
;;;37     		udbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
;;;38     
;;;39     		/*Read back cluster in SMART*/
;;;40     		baseReadNBytes(ADDRESS_SMART_START + udbClusterOffset, (puMonoByte) &chCurrFreeHeader, sizeof(tClusterHeader));
;;;41     
;;;42     		/*check if its free*/
;;;43     		if (chCurrFreeHeader.umbBusy != CLUSTER_BUSY) {
;;;44     
;;;45     			/*return free cluster index*/
;;;46     			DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns %2\n", maBlockIndex);
;;;47     			return maBlockIndex;
;;;48     		}
;;;49     		if (NO_OF_CLUSTERS == maBlockIndex) {
;;;50     
;;;51     			/*reset to first cluster for further traversing*/
;;;52     			maBlockIndex = SMART_START_INDEX;
;;;53     		}
;;;54     		else {
;;;55     
;;;56     			/*next cluster*/
;;;57     			maBlockIndex++;
;;;58     		}
;;;59     
;;;60     		/*increment the total no. of clusters processed so far*/
;;;61     		udbNoOfClustersProcessed++;
;;;62     
;;;63     	} while (NO_OF_CLUSTERS != udbNoOfClustersProcessed); //If all clusters are processed
;;;64     
;;;65     	/*if control is here, it means no free cluster*/
;;;66     	DBG_FUNC_EXIT("<<[MemoryManager] mm_getFreeCluster() returns NO_FREE_CLUSTER %2\n", NO_FREE_CLUSTER);
;;;67     	return NO_FREE_CLUSTER;
;;;68     
;;;69     }
;;;70     /*
;;;71     * It allocates the Cluster header and memory Clusters to the requester as per required size.
;;;72     * If there are no. of clusters, it connects them by making chain.
;;;73     * 
;;;74     * @param udbSize: Total size of memory required by requester
;;;75     * 
;;;76     * @return tMemAddr index of first cluster header in allocated memory.
;;;77     */
;;;78     tMemAddr mm_alloc(IN_ARG uDiByte udbSize, IN_ARG uMonoByte umbDefaultByte)
;;;79     {
;;;80     #ifdef FEAT_EXHAUSTEARING	
;;;81     	boolean 			bCloseTheTxn=FALSE;
;;;82     #endif
;;;83     	uDiByte				udbNoOfClusters; //Store no. of clusters required for object
;;;84     	uDiByte				udbRemainingClusters;
;;;85     	tMemAddr			maBlockIndex = 0x00; //will contain next free mem block address
;;;86     	tMemAddr			maPrevIndex = END_OF_CLUSTER_CHAIN; //Stores index of previous cluster
;;;87     	tClusterHeader		chCurrFreeHeader;  //stores cluster header present in SMART
;;;88     	tCluster			cClusterData = { 0x00 };
;;;89     	uQuadByte			uqbClusterOffset; //stores relative offset of cluster header in SMART
;;;90     
;;;91     	/*Check size*/
;;;92     	assert(udbSize != 0x00);
;;;93     
;;;94     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_alloc()\n");
;;;95     
;;;96     	/*Count no. of clusters required*/
;;;97     	udbNoOfClusters = udbSize / CLUSTER_SIZE;
;;;98     
;;;99     	DBG_FUNC("[MemoryManager] mm_alloc: Requested size of memory %2 umbDefaultByte %1\n", udbSize, umbDefaultByte);
;;;100    
;;;101    	/*Check if remainder is there*/
;;;102    	if (udbSize % CLUSTER_SIZE){
;;;103    
;;;104    		/*increment cluster as there is extra data which requires 1 cluster more*/
;;;105    		udbNoOfClusters++;
;;;106    	}
;;;107    
;;;108    	DBG_FUNC("[MemoryManager] mm_alloc: No. of Clusters required %2\n", udbNoOfClusters);
;;;109    
;;;110    	/*read no. of free clusters*/
;;;111    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;112    
;;;113    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of Clusters %2\n", udbRemainingClusters);
;;;114    
;;;115    	/*Check if no. of free clusters are sufficient*/
;;;116    	if (udbNoOfClusters > udbRemainingClusters)
;;;117    	{
;;;118    		/*insufficient memory*/
;;;119    		DBG_WARN("[MemoryManager] mm_alloc: Required no. of clusters is more than remaining clusters \n");
;;;120    		DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns NO_FREE_MEMORY %2\n", NO_FREE_MEMORY);
;;;121    		return NO_FREE_MEMORY;
;;;122    	}
;;;123    
;;;124    	if (umbDefaultByte) { //if non-zero default byte passed
;;;125    		
;;;126    		/*Fill the all elements of clutserdata with default value*/
;;;127    		mem_set(cClusterData, umbDefaultByte, CLUSTER_SIZE);
;;;128    	}
;;;129    
;;;130    	/*remaining no of clusters*/
;;;131    	udbRemainingClusters -= udbNoOfClusters;
;;;132    
;;;133    	/*Read the next available cluster from system page*/
;;;134    	baseReadNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maBlockIndex, SIZE_OF_MEMORY_ADDRESS);
;;;135    
;;;136    #ifdef FEAT_EXHAUSTEARING
;;;137    	/*begin the transaction*/
;;;138    	if (TRUE == at_beginTxn()) { 
;;;139    
;;;140    		/*indication to close the transaction in same function*/
;;;141    		bCloseTheTxn = TRUE;
;;;142    	}
;;;143    #endif
;;;144    
;;;145    	do {
;;;146    		/*Get free cluster*/
;;;147    		maBlockIndex = mm_getFreeCluster(maBlockIndex);
;;;148    
;;;149    		/*Set busy on that cluster*/
;;;150    		chCurrFreeHeader.umbBusy = CLUSTER_BUSY;
;;;151    
;;;152    		/*Store index to previous cluster*/
;;;153    		chCurrFreeHeader.maNextCluster = maPrevIndex;
;;;154    
;;;155    		/*Check if data less than cluster size*/
;;;156    		if (udbSize < CLUSTER_SIZE) {
;;;157    
;;;158    			/*note used data length*/
;;;159    			chCurrFreeHeader.umbSize = (uMonoByte)udbSize;
;;;160    
;;;161    			/*No more clusters required*/
;;;162    			udbSize = 0x00;
;;;163    		}
;;;164    		else {
;;;165    
;;;166    			/*indicates that cluster is fully used*/
;;;167    			chCurrFreeHeader.umbSize = 0x00;
;;;168    
;;;169    			/*Remaining required size of memory*/
;;;170    			udbSize -= CLUSTER_SIZE; 
;;;171    		}
;;;172    
;;;173    		/*calculate offset of cluster header*/
;;;174    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlockIndex - 1);
;;;175    
;;;176    		/*write back cluster header in SMART*/
;;;177    		baseWriteNBytes(ADDRESS_SMART_START + uqbClusterOffset, (puMonoByte)&chCurrFreeHeader, sizeof(tClusterHeader));
;;;178    
;;;179    		/*calculate offset of cluster data*/
;;;180    		uqbClusterOffset = sizeof(tCluster) * (maBlockIndex - 1);
;;;181    
;;;182    		/*write cluster in DISK area*/
;;;183    		baseWriteNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, (puMonoByte)&cClusterData, sizeof(tCluster));
;;;184    
;;;185    		/*Stores index of current cluster as previous*/
;;;186    		maPrevIndex = maBlockIndex;
;;;187    
;;;188    		DBG_FUNC("[MemoryManager] mm_alloc: Cluster %2 allocated\n", maBlockIndex);
;;;189    
;;;190    		/*decrement cluster as one already located*/
;;;191    		udbNoOfClusters--;
;;;192    
;;;193    	} while (udbNoOfClusters); //if no more clusters required
;;;194    
;;;195    	DBG_FUNC("[MemoryManager] mm_alloc: Memory data has been allocated to requestor\n");
;;;196    
;;;197    	/*search for next free cluster*/
;;;198    	maPrevIndex = mm_getFreeCluster(maBlockIndex);
;;;199    
;;;200    	DBG_FUNC("[MemoryManager] mm_alloc: Next free cluster %2\n", maPrevIndex);
;;;201    
;;;202    	/*Write the next available cluster on system page*/
;;;203    	baseWriteNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maPrevIndex, SIZE_OF_MEMORY_ADDRESS);
;;;204    
;;;205    	DBG_FUNC("[MemoryManager] mm_alloc: Remaining No. of clusters %2\n", udbRemainingClusters);
;;;206    
;;;207    	/*write free clusters*/
;;;208    	baseWriteNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;209    
;;;210    #ifdef FEAT_EXHAUSTEARING
;;;211    
;;;212    	if (TRUE == bCloseTheTxn) {
;;;213    		
;;;214    		/*commit the txn started in the beginning of function*/
;;;215    		at_commitTxn();
;;;216    	}
;;;217    #endif
;;;218    
;;;219    	DBG_FUNC_EXIT("<<[MemoryManager] mm_alloc() returns %2\n", maBlockIndex);
;;;220    
;;;221    	/*return Starting allocated cluster*/
;;;222    	return maBlockIndex;
;;;223    }
;;;224    
;;;225    /*
;;;226    * It returns the free memory in NVM
;;;227    *
;;;228    * @param udbSize: Total size of memory required by requester
;;;229    *
;;;230    * @return tMemAddr index of first cluster header in allocated memory.
;;;231    */
;;;232    uQuadByte mm_GetAvailableMemory(void) {
;;;233    	/*stores remaining no. of free clusters*/
;;;234    	uDiByte udbRemainingClusters;
;;;235    	
;;;236    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_GetAvailableMemory() \n");
;;;237    
;;;238    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Cluster size is %2\n", CLUSTER_SIZE);
;;;239    
;;;240    	/*read no. of free clusters*/
;;;241    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte) &udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;242    
;;;243    	DBG_FUNC("[MemoryManager] mm_GetAvailableMemory: Free clusters are %2\n", udbRemainingClusters);
;;;244    
;;;245    	DBG_FUNC_EXIT("<<[MemoryManager] mm_GetAvailableMemory() returns %4\n", (udbRemainingClusters * CLUSTER_SIZE));
;;;246    
;;;247    	/*return free memory*/
;;;248    	return (udbRemainingClusters * CLUSTER_SIZE);
;;;249    }
;;;250    
;;;251    /*
;;;252    * It Read/writes the given data into present cluster chain
;;;253    *
;;;254    * @param maBlock: starting block of cluster chain
;;;255    * @param pumbData: data will be read/write from/to this array
;;;256    * @param udbOffset: offset of memory from where to start writing/reading data
;;;257    * @param udbDataSize: Length of data to read/write in memory
;;;258    * @param mmMode: Read or Write
;;;259    *
;;;260    * @return FALSE if maBlock is empty, otherwise TRUE
;;;261    * @precondition: Caller ensure Data size to update must not exceed the allocated size
;;;262    */
;;;263    boolean mm_ReadUpdate(IN_ARG		tMemAddr	maBlock,
;;;264    						INOUT_ARG	puMonoByte	pumbData, 
;;;265    						IN_ARG		uDiByte		udbOffset, 
;;;266    						IN_ARG		uDiByte		udbDataSize, 
;;;267    						IN_ARG		tMemMode	mmMode) {
;;;268    
;;;269    	uMonoByte	umbDataLength; //length of data to read/write in a cluster
;;;270    	uQuadByte	uqbClusterOffset; // stores the exact offset 
;;;271    #ifdef FEAT_EXHAUSTEARING
;;;272    	boolean bCloseTheTxn = FALSE;
;;;273    #endif
;;;274    
;;;275    	tClusterHeader chCurrHeader; //stores cluster header
;;;276    	
;;;277    	/*Check address must not be NULL*/
;;;278    	assert(pumbData != NULL);
;;;279    
;;;280    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_ReadUpdate() \n");
;;;281    
;;;282    	DBG_FUNC("[MemoryManager] mm_ReadUpdate: maBlock %2  udbOffset %2 udbDataSize %2  mmMode %1\n", maBlock, udbOffset, udbDataSize, mmMode);
;;;283    
;;;284    	/*Check if Clusterindex is not invalid one*/
;;;285    	if (EMPTY_OBJECT == maBlock)
;;;286    	{
;;;287    		/*invalid cluster/block index*/
;;;288    		DBG_FUNC_EXIT("<<[MemoryManager] mm_ReadUpdate() returns FALSE i.e. %1\n", FALSE);
;;;289    		return FALSE;
;;;290    	}
;;;291    
;;;292    #ifdef FEAT_EXHAUSTEARING
;;;293    	if (MEM_MODE_UPDATE == mmMode) {
;;;294    
;;;295    		if (TRUE == at_beginTxn()) {
;;;296    			
;;;297    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Start the transaction, as memory is going to be change\n");
;;;298    
;;;299    			/*indication to close the transaction in same function*/
;;;300    			bCloseTheTxn = TRUE;
;;;301    		}
;;;302    	}
;;;303    #endif
;;;304    
;;;305    	do {
;;;306    
;;;307    		/*check if Offset is less than Cluster size*/
;;;308    		if (udbOffset < CLUSTER_SIZE) //Read/writing can be start from current cluster
;;;309    		{
;;;310    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Offset %2 of cluster %2 \n", udbOffset, maBlock);
;;;311    
;;;312    			/*calculate offset within cluster data*/
;;;313    			uqbClusterOffset = (sizeof(tCluster) * (maBlock - 1)) + udbOffset;
;;;314    
;;;315    			/*Check if offset + data size less than cluster size*/
;;;316    			if ((udbDataSize + udbOffset) < CLUSTER_SIZE) {
;;;317    
;;;318    				/*if control is here, it means this is last cluster to read, for fetching all data*/
;;;319    				/*note used data length*/
;;;320    				umbDataLength = (uMonoByte)udbDataSize;
;;;321    			}
;;;322    			else {
;;;323    				/*if control is here, it means we will read few data from this cluster and rest of the data from 
;;;324    				* remaining clusters
;;;325    				*/
;;;326    				/*indicates that cluster is fully used*/
;;;327    				umbDataLength = CLUSTER_SIZE - udbOffset;
;;;328    			}
;;;329    
;;;330    			if (MEM_MODE_READ == mmMode){
;;;331    
;;;332    				DBG_FUNC("[MemoryManager] mm_ReadUpdate: Reading data of length %1 \n", umbDataLength);
;;;333    
;;;334    				/*Read cluster from memory*/
;;;335    				baseReadNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, pumbData, umbDataLength);
;;;336    			}
;;;337    			else {//MEM_MODE_UPDATE
;;;338    
;;;339    				DBG_FUNC("[MemoryManager] mm_ReadUpdate: Writing data of length %1 \n", umbDataLength);
;;;340    
;;;341    				/*write data in cluster of memory*/
;;;342    				baseWriteNBytes(ADDRESS_CLUSTER_START + uqbClusterOffset, pumbData, umbDataLength);
;;;343    			}
;;;344    
;;;345    			/*increase data pointer*/
;;;346    			pumbData += umbDataLength;
;;;347    
;;;348    			/*Reduce size as well*/
;;;349    			udbDataSize -= umbDataLength;
;;;350    
;;;351    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Remaining Size %2 \n", udbDataSize);
;;;352    
;;;353    			/*Reset to 0*/
;;;354    			udbOffset = 0x00;
;;;355    
;;;356    		}
;;;357    		else {// it means offset doesnt fall under this cluster
;;;358    
;;;359    			/*Reduce cluster size from offset as current cluster is skipped*/
;;;360    			udbOffset -= CLUSTER_SIZE;
;;;361    		}
;;;362    
;;;363    		/*calculate offset of cluster header*/
;;;364    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlock - 1);
;;;365    
;;;366    		/*Read cluster header from SMART*/
;;;367    		baseReadNBytes(ADDRESS_SMART_START + uqbClusterOffset,(puMonoByte) &chCurrHeader, sizeof(tClusterHeader));
;;;368    
;;;369    		/*get next block index*/
;;;370    		maBlock = chCurrHeader.maNextCluster;
;;;371    
;;;372    		DBG_FUNC("[MemoryManager] mm_ReadUpdate: Fetch next cluster %2 \n", maBlock);
;;;373    
;;;374    	} while((udbDataSize)						//still there is data to Read/update
;;;375    			&&									//AND
;;;376    			(END_OF_CLUSTER_CHAIN != maBlock)); //havent reached the end of chain yet
;;;377    
;;;378    #ifdef FEAT_EXHAUSTEARING
;;;379    	if (MEM_MODE_UPDATE == mmMode) {
;;;380    
;;;381    		if (TRUE == bCloseTheTxn) {
;;;382    			
;;;383    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Close the transaction, Commit all changes permanent\n");
;;;384    			
;;;385    			/*commit the txn started in the beginning of function*/
;;;386    			at_commitTxn();
;;;387    		}
;;;388    	}
;;;389    #endif
;;;390    
;;;391    	DBG_FUNC_EXIT("<<[MemoryManager] mm_ReadUpdate() returns TRUE i.e. %1\n", TRUE);
;;;392    
;;;393    	/*all data has been Read/updated assuming no data left to write as caller already ensured that*/
;;;394    	return TRUE;
;;;395    }
;;;396    
;;;397    /*
;;;398    * It frees the given allocated memory corresponding to given memory address.
;;;399    *
;;;400    * @param udbSize: Total size of memory required by requester
;;;401    *
;;;402    * @return tMemAddr index of first cluster header in allocated memory.
;;;403    */
;;;404    void mm_Free(IN_ARG tMemAddr maAllocatedAddr)
;;;405    {
;;;406    	uDiByte			udbRemainingClusters; //Free clusters
;;;407    	uDiByte			udbBackup;
;;;408    	uQuadByte		uqbClusterOffset;	//stores offset to cluster header
;;;409    	tClusterHeader	chCurrHeader;		//Cluster header
;;;410    
;;;411    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_Free() \n");
;;;412    
;;;413    	/*read no. of free clusters*/
;;;414    	baseReadNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte)&udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;415    
;;;416    	/*Backup no. of free clusters*/
;;;417    	udbBackup = udbRemainingClusters;
;;;418    
;;;419    	DBG_FUNC("[MemoryManager] mm_Free: So far no. of free clusters are '%2' \n", udbRemainingClusters);
;;;420    
;;;421    	while (END_OF_CLUSTER_CHAIN != maAllocatedAddr) {
;;;422    
;;;423    		/*calculate offset of cluster header*/
;;;424    		uqbClusterOffset = sizeof(tClusterHeader) * (maAllocatedAddr - 1);
;;;425    
;;;426    		/*Read cluster header from SMART*/
;;;427    		baseReadNBytes(ADDRESS_SMART_START + uqbClusterOffset,(puMonoByte) &chCurrHeader, sizeof(tClusterHeader));
;;;428    
;;;429    		/*free the memory*/
;;;430    		chCurrHeader.umbBusy = CLUSTER_FREE;
;;;431    
;;;432    		DBG_FUNC("[MemoryManager] mm_Free: Releasing cluster '%2' \n", maAllocatedAddr);
;;;433    
;;;434    		/*Write back cluster header from SMART*/
;;;435    		baseWriteNBytes(ADDRESS_SMART_START + uqbClusterOffset, (puMonoByte) &chCurrHeader, sizeof(tClusterHeader));
;;;436    
;;;437    		/*get next cluster in chain*/
;;;438    		maAllocatedAddr = chCurrHeader.maNextCluster;
;;;439    
;;;440    		/*Increment the free clusters, as clusters are released*/
;;;441    		udbRemainingClusters++;
;;;442    
;;;443    		DBG_FUNC("[MemoryManager] mm_Free: Next cluster '%2' \n", maAllocatedAddr);
;;;444    
;;;445    	}
;;;446    
;;;447    	if (udbBackup != udbRemainingClusters) {
;;;448    
;;;449    		DBG_FUNC("[MemoryManager] mm_Free: After releasing them, now total no. of  free clusters are '%2' \n", udbRemainingClusters);
;;;450    
;;;451    		/*Write no. of free clusters*/
;;;452    		baseWriteNBytes(ADDRESS_NO_OF_FREE_CLUSTERS, (puMonoByte)&udbRemainingClusters, SIZE_OF_NO_OF_CLUSTER);
;;;453    	}
;;;454    	else {
;;;455    		DBG_FUNC("[MemoryManager] mm_Free: No clusters are released \n");
;;;456    	}
;;;457    
;;;458    
;;;459    	DBG_FUNC_EXIT("<<[MemoryManager] mm_Free() \n");
;;;460    
;;;461    }
;;;462    
;;;463    /*
;;;464    * It compares the given data (RAM) with given cluster chain
;;;465    *
;;;466    * @param maBlock: starting block of cluster chain
;;;467    * @param pumbData: data to compare
;;;468    * @param udbOffset: offset of memory from where to start comparing data
;;;469    * @param udbDataSize: Length of data to compare in memory
;;;470    *
;;;471    * @return FALSE if maBlock is empty or data doesnt match, otherwise TRUE
;;;472    * @precondition: Caller ensure Data size to compare must not exceed the allocated size
;;;473    */
;;;474    boolean mm_cmpRam(IN_ARG		tMemAddr	maBlock,
;;;475    					INOUT_ARG	puMonoByte	pumbData,
;;;476    					IN_ARG		uDiByte		udbOffset,
;;;477    					IN_ARG		uDiByte		udbDataSize) {
;;;478    
;;;479    	uMonoByte	umbDataLength; //length of data to compare in a cluster
;;;480    	uMonoByte	umbIndex;
;;;481    	uQuadByte	uqbClusterOffset; // stores the exact offset 
;;;482    
;;;483    	tClusterHeader chCurrHeader; //stores cluster header
;;;484    
;;;485    	DBG_FUNC_ENTRY(">>[MemoryManager] mm_cmpRam() \n");
;;;486    
;;;487    	/*Check address must not be NULL*/
;;;488    	assert(pumbData != NULL);
;;;489    
;;;490    	DBG_FUNC("[MemoryManager] mm_cmpRam: maBlock %2  udbOffset %2 udbDataSize %2 \n", maBlock, udbOffset, udbDataSize);
;;;491    
;;;492    	/*Check if Clusterindex is not invalid one*/
;;;493    	if (EMPTY_OBJECT == maBlock)
;;;494    	{
;;;495    		/*invalid cluster/block index*/
;;;496    		DBG_WARN("[MemoryManager] mm_cmpRam: Invalid cluster\n");
;;;497    		DBG_FUNC_EXIT("<<[MemoryManager] mm_cmpRam() returns FALSE i.e. %1\n", FALSE);
;;;498    		return FALSE;
;;;499    	}
;;;500    
;;;501    	do {
;;;502    
;;;503    		/*check if Offset is less than Cluster size*/
;;;504    		if (udbOffset < CLUSTER_SIZE) //comparison can be start from current cluster
        0x00001104:    b2b8        ..      UXTH     r0,r7
        0x00001106:    281f        .(      CMP      r0,#0x1f
        0x00001108:    d824        $.      BHI      0x1154 ; mm_cmpRam + 104
;;;505    		{
;;;506    			DBG_FUNC("[MemoryManager] mm_ReadUpdate: Offset %2 of cluster %2 \n", udbOffset, maBlock);
;;;507    
;;;508    			/*calculate offset within cluster data*/
;;;509    			uqbClusterOffset = (sizeof(tCluster) * (maBlock - 1)) + udbOffset;
;;;510    
;;;511    			/*Check if offset + data size less than cluster size*/
;;;512    			if ((udbDataSize + udbOffset) < CLUSTER_SIZE) {
        0x0000110a:    b2a1        ..      UXTH     r1,r4
        0x0000110c:    180a        ..      ADDS     r2,r1,r0
        0x0000110e:    2a20         *      CMP      r2,#0x20
        0x00001110:    d301        ..      BCC      0x1116 ; mm_cmpRam + 42
        0x00001112:    2120         !      MOVS     r1,#0x20
        0x00001114:    1a09        ..      SUBS     r1,r1,r0
        0x00001116:    b2ca        ..      UXTB     r2,r1
;;;513    
;;;514    				/*if control is here, it means this is last cluster to read, for fetching all data*/
;;;515    				/*note used data length*/
;;;516    				umbDataLength = (uMonoByte)udbDataSize;
;;;517    			}
;;;518    			else {
;;;519    				/*if control is here, it means we will read few data from this cluster and rest of the data from
;;;520    				* remaining clusters
;;;521    				*/
;;;522    				/*indicates that cluster is fully used*/
;;;523    				umbDataLength = CLUSTER_SIZE - udbOffset;
;;;524    			}
;;;525    
;;;526    			DBG_FUNC("[MemoryManager] mm_cmpRam: Comparing data of length %1\n", umbDataLength);
;;;527    
;;;528    			umbIndex = 0x00;
;;;529    			while (umbIndex < umbDataLength) { // read till the end of cluster or for remianing data length
        0x00001118:    2a00        .*      CMP      r2,#0
        0x0000111a:    d018        ..      BEQ      0x114e ; mm_cmpRam + 98
        0x0000111c:    9405        ..      STR      r4,[sp,#0x14]
        0x0000111e:    9304        ..      STR      r3,[sp,#0x10]
        0x00001120:    0159        Y.      LSLS     r1,r3,#5
        0x00001122:    1808        ..      ADDS     r0,r1,r0
        0x00001124:    4919        .I      LDR      r1,[pc,#100] ; [0x118c] = 0x126c0
        0x00001126:    1847        G.      ADDS     r7,r0,r1
        0x00001128:    18a8        ..      ADDS     r0,r5,r2
        0x0000112a:    9002        ..      STR      r0,[sp,#8]
        0x0000112c:    9203        ..      STR      r2,[sp,#0xc]
        0x0000112e:    4254        TB      RSBS     r4,r2,#0
        0x00001130:    782e        .x      LDRB     r6,[r5,#0]
        0x00001132:    4638        8F      MOV      r0,r7
        0x00001134:    f005fdb0    ....    BL       baseReadOneByte ; 0x6c98
        0x00001138:    4286        .B      CMP      r6,r0
        0x0000113a:    d11d        ..      BNE      0x1178 ; mm_cmpRam + 140
        0x0000113c:    1c60        `.      ADDS     r0,r4,#1
        0x0000113e:    1c7f        ..      ADDS     r7,r7,#1
        0x00001140:    1c6d        m.      ADDS     r5,r5,#1
        0x00001142:    42a0        .B      CMP      r0,r4
        0x00001144:    4604        .F      MOV      r4,r0
        0x00001146:    d2f3        ..      BCS      0x1130 ; mm_cmpRam + 68
        0x00001148:    9d02        ..      LDR      r5,[sp,#8]
        0x0000114a:    ac03        ..      ADD      r4,sp,#0xc
        0x0000114c:    cc1c        ..      LDM      r4,{r2-r4}
;;;530    
;;;531    				if (*pumbData != baseReadOneByte(ADDRESS_CLUSTER_START + uqbClusterOffset + umbIndex)) { // compare bytes of memory data and array
;;;532    
;;;533    					/*it doesnt match throw error*/
;;;534    					DBG_WARN("[MemoryManager] mm_cmpRam: Invalid cluster\n");
;;;535    					DBG_FUNC_EXIT("<<[MemoryManager] mm_cmpRam() returns FALSE i.e. %1\n", FALSE);
;;;536    					return FALSE;
;;;537    				}
;;;538    
;;;539    				/*Increment next length of array*/
;;;540    				pumbData++;
;;;541    				umbIndex++;
;;;542    			}
;;;543    
;;;544    			/*Reduce size as well*/
;;;545    			udbDataSize -= umbDataLength;
        0x0000114e:    1aa4        ..      SUBS     r4,r4,r2
        0x00001150:    2700        .'      MOVS     r7,#0
        0x00001152:    e000        ..      B        0x1156 ; mm_cmpRam + 106
;;;546    
;;;547    			DBG_FUNC("[MemoryManager] mm_cmpRam: Remaining Size %2 \n", udbDataSize);
;;;548    
;;;549    			/*Reset to 0*/
;;;550    			udbOffset = 0x00;
;;;551    
;;;552    		}
;;;553    		else {// it means offset doesnt fall under this cluster
;;;554    
;;;555    			/*Reduce cluster size from offset as current cluster is skipped*/
;;;556    			udbOffset -= CLUSTER_SIZE;
        0x00001154:    3f20         ?      SUBS     r7,r7,#0x20
;;;557    		}
;;;558    
;;;559    		/*calculate offset of cluster header*/
;;;560    		uqbClusterOffset = sizeof(tClusterHeader) * (maBlock - 1);
        0x00001156:    0098        ..      LSLS     r0,r3,#2
;;;561    
;;;562    		/*Read cluster header from SMART*/
;;;563    		baseReadNBytes(ADDRESS_SMART_START + uqbClusterOffset, (puMonoByte)&chCurrHeader, sizeof(tClusterHeader));
        0x00001158:    490d        .I      LDR      r1,[pc,#52] ; [0x1190] = 0xa1fc
        0x0000115a:    1840        @.      ADDS     r0,r0,r1
        0x0000115c:    ae06        ..      ADD      r6,sp,#0x18
        0x0000115e:    2204        ."      MOVS     r2,#4
        0x00001160:    4631        1F      MOV      r1,r6
        0x00001162:    f005fdcb    ....    BL       baseReadNBytes ; 0x6cfc
        0x00001166:    20ff        .       MOVS     r0,#0xff
;;;564    
;;;565    		/*get next block index*/
;;;566    		maBlock = chCurrHeader.maNextCluster;
;;;567    
;;;568    		DBG_FUNC("[MemoryManager] mm_cmpRam: Fetch next cluster %2 \n", maBlock);
;;;569    
;;;570    	} while ((udbDataSize)					//still there is data to compare
        0x00001168:    0421        !.      LSLS     r1,r4,#16
        0x0000116a:    d003        ..      BEQ      0x1174 ; mm_cmpRam + 136
        0x0000116c:    8873        s.      LDRH     r3,[r6,#2]
        0x0000116e:    4909        .I      LDR      r1,[pc,#36] ; [0x1194] = 0xffff
        0x00001170:    428b        .B      CMP      r3,r1
        0x00001172:    d1c7        ..      BNE      0x1104 ; mm_cmpRam + 24
;;;571    		&&									//AND
;;;572    		(END_OF_CLUSTER_CHAIN != maBlock)); //havent reached the end of chain yet
;;;573    
;;;574    	DBG_FUNC_EXIT("<<[MemoryManager] mm_cmpRam() returns TRUE i.e. %1\n", TRUE);
;;;575    
;;;576    	/*all data has been succesffully compared and are equal*/
;;;577    	return TRUE;
;;;578    }
        0x00001174:    b007        ..      ADD      sp,sp,#0x1c
        0x00001176:    bdf0        ..      POP      {r4-r7,pc}
        0x00001178:    9801        ..      LDR      r0,[sp,#4]
        0x0000117a:    b007        ..      ADD      sp,sp,#0x1c
        0x0000117c:    bdf0        ..      POP      {r4-r7,pc}
        0x0000117e:    203d        =       MOVS     r0,#0x3d
        0x00001180:    00c2        ..      LSLS     r2,r0,#3
        0x00001182:    4805        .H      LDR      r0,[pc,#20] ; [0x1198] = 0x842c
        0x00001184:    4905        .I      LDR      r1,[pc,#20] ; [0x119c] = 0x843d
        0x00001186:    f006fab3    ....    BL       __aeabi_assert ; 0x76f0
        0x0000118a:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.4_0
        0x0000118c:    000126c0    .&..    DCD    75456
    __arm_cp.4_1
        0x00001190:    0000a1fc    ....    DCD    41468
    __arm_cp.4_2
        0x00001194:    0000ffff    ....    DCD    65535
    __arm_cp.4_3
        0x00001198:    0000842c    ,...    DCD    33836
    __arm_cp.4_4
        0x0000119c:    0000843d    =...    DCD    33853
    $t.10
    printMemoryConfig
;;;579    /*
;;;580    * It prints the Memory related information
;;;581    */
;;;582    void printMemoryConfig(void) {
;;;583    	DBG_HEAD("Parameter                          : Values\n");
;;;584    	DBG_WARN("ADDRESS_ERASE_EEPROM_START         : %4\n", ADDRESS_ERASE_EEPROM_START);
;;;585    	DBG_WARN("ADDRESS_SYSTEM_AREA_START          : %4\n", ADDRESS_SYSTEM_AREA_START);
;;;586    	DBG_WARN("ADDRESS_DISK_MEMORY_START          : %4\n", ADDRESS_DISK_MEMORY_START);
;;;587    	DBG_WARN("ADDRESS_DISK_MEMORY_END            : %4\n", ADDRESS_DISK_MEMORY_END);
;;;588    	DBG_WARN("ADDRESS_SMART_START                : %4\n", ADDRESS_SMART_START);
;;;589    	DBG_WARN("ADDRESS_SMART_END                  : %4\n", ADDRESS_SMART_END);
;;;590    	DBG_WARN("ADDRESS_CLUSTER_START              : %4\n", ADDRESS_CLUSTER_START);
;;;591    	DBG_WARN("ADDRESS_CLUSTER_END                : %4\n", ADDRESS_CLUSTER_END);
;;;592    }
        0x000011a0:    4770        pG      BX       lr
        0x000011a2:    0000        ..      MOVS     r0,r0
    mm_makeUdiByte
;;; Core/MemoryManager/source\Utilities.c
;;;13     	assert(pumbSource != NULL);
        0x000011a4:    2800        .(      CMP      r0,#0
        0x000011a6:    d006        ..      BEQ      0x11b6 ; mm_makeUdiByte + 18
;;;14     
;;;15     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_makeUdiByte() \n");
;;;16     
;;;17     	/*Return uDiByte word: AA,BB : 0xAABB*/
;;;18     	DBG_FUNC_EXIT("<<[MemoryManager] mm_makeUdiByte() \n");
;;;19     	return ((uDiByte)(((uDiByte)(pumbSource[umbIndex] << 8)) | (pumbSource[umbIndex + 1])));
        0x000011a8:    1842        B.      ADDS     r2,r0,r1
        0x000011aa:    7852        Rx      LDRB     r2,[r2,#1]
        0x000011ac:    5c40        @\      LDRB     r0,[r0,r1]
        0x000011ae:    0200        ..      LSLS     r0,r0,#8
        0x000011b0:    1880        ..      ADDS     r0,r0,r2
        0x000011b2:    b280        ..      UXTH     r0,r0
        0x000011b4:    4770        pG      BX       lr
        0x000011b6:    a002        ..      ADR      r0,{pc}+0xa ; 0x11c0
        0x000011b8:    4906        .I      LDR      r1,[pc,#24] ; [0x11d4] = 0x8478
        0x000011ba:    220d        ."      MOVS     r2,#0xd
        0x000011bc:    f006fa98    ....    BL       __aeabi_assert ; 0x76f0
    $d.1
        0x000011c0:    626d7570    pumb    DCD    1651340656
        0x000011c4:    72756f53    Sour    DCD    1920298835
        0x000011c8:    21206563    ce !    DCD    555771235
        0x000011cc:    554e203d    = NU    DCD    1431183421
        0x000011d0:    00004c4c    LL..    DCD    19532
    __arm_cp.0_1
        0x000011d4:    00008478    x...    DCD    33912
    $t.2
    mm_storeUdiByte
;;;20     }
;;;21     
;;;22     /*
;;;23     * store half word data into array elements
;;;24     *
;;;25     * @param: pumbDest Destination Array
;;;26     * @param: umbIndex Index where elements to store
;;;27     * @param: udbWord	: Half word to store
;;;28     * 
;;;29     * @return umbIndex + 4
;;;30     */
;;;31     uMonoByte mm_storeUdiByte(OUT_ARG puMonoByte pumbDest, IN_ARG uMonoByte umbIndex, IN_ARG uDiByte udbWord) {
;;;32     
;;;33     	/*Ensure dest cant be null*/
;;;34     	assert(pumbDest != NULL);
        0x000011d8:    2800        .(      CMP      r0,#0
        0x000011da:    d007        ..      BEQ      0x11ec ; mm_storeUdiByte + 20
;;;35     
;;;36     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_storeUdiByte() \n");
;;;37     
;;;38     	pumbDest[umbIndex++] = (uMonoByte)SHIFT_RIGHT_BY_N_BITS(udbWord, 0x08);
        0x000011dc:    0a13        ..      LSRS     r3,r2,#8
        0x000011de:    5443        CT      STRB     r3,[r0,r1]
        0x000011e0:    1c4b        K.      ADDS     r3,r1,#1
;;;39     	pumbDest[umbIndex++] = (uMonoByte)udbWord;
        0x000011e2:    b2db        ..      UXTB     r3,r3
        0x000011e4:    54c2        .T      STRB     r2,[r0,r3]
        0x000011e6:    1c88        ..      ADDS     r0,r1,#2
;;;40     
;;;41     	/*Return uDiByte word: AA,BB : 0xAABB*/
;;;42     	DBG_FUNC_EXIT("<<[MemoryManager] mm_storeUdiByte() returns %1\n", umbIndex);
;;;43     	return umbIndex;
        0x000011e8:    b2c0        ..      UXTB     r0,r0
        0x000011ea:    4770        pG      BX       lr
        0x000011ec:    4802        .H      LDR      r0,[pc,#8] ; [0x11f8] = 0x8467
        0x000011ee:    4903        .I      LDR      r1,[pc,#12] ; [0x11fc] = 0x8478
        0x000011f0:    2222        ""      MOVS     r2,#0x22
        0x000011f2:    f006fa7d    ..}.    BL       __aeabi_assert ; 0x76f0
        0x000011f6:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x000011f8:    00008467    g...    DCD    33895
    __arm_cp.1_1
        0x000011fc:    00008478    x...    DCD    33912
    $t.4
    mm_storeWord
;;;44     }
;;;45     
;;;46     /*
;;;47     * store word data into array elements
;;;48     *
;;;49     * @param: pumbDest Destination Array
;;;50     * @param: umbIndex Index where elements to store
;;;51     * @param: word data
;;;52     * 
;;;53     * @return umbIndex + 2
;;;54     */
;;;55     uMonoByte mm_storeWord(OUT_ARG puMonoByte pumbDest, IN_ARG uMonoByte umbIndex, IN_ARG uQuadByte uqbWord) {
        0x00001200:    b510        ..      PUSH     {r4,lr}
;;;56     
;;;57     	/*Ensure dest cant be null*/
;;;58     	assert(pumbDest != NULL);
        0x00001202:    2800        .(      CMP      r0,#0
        0x00001204:    d00f        ..      BEQ      0x1226 ; mm_storeWord + 38
;;;59     
;;;60     	DBG_FUNC_ENTRY(">>[MemoryManager] mm_storeWord() \n");
;;;61     
;;;62     	pumbDest[umbIndex++] = (uMonoByte)SHIFT_RIGHT_BY_N_BITS(uqbWord, 0x18);
        0x00001206:    0e13        ..      LSRS     r3,r2,#24
        0x00001208:    5443        CT      STRB     r3,[r0,r1]
        0x0000120a:    0c13        ..      LSRS     r3,r2,#16
        0x0000120c:    1c4c        L.      ADDS     r4,r1,#1
;;;63     	pumbDest[umbIndex++] = (uMonoByte)SHIFT_RIGHT_BY_N_BITS(uqbWord, 0x10);
        0x0000120e:    b2e4        ..      UXTB     r4,r4
        0x00001210:    5503        .U      STRB     r3,[r0,r4]
        0x00001212:    0a13        ..      LSRS     r3,r2,#8
        0x00001214:    1c8c        ..      ADDS     r4,r1,#2
;;;64     	pumbDest[umbIndex++] = (uMonoByte)SHIFT_RIGHT_BY_N_BITS(uqbWord, 0x08);
        0x00001216:    b2e4        ..      UXTB     r4,r4
        0x00001218:    5503        .U      STRB     r3,[r0,r4]
        0x0000121a:    1ccb        ..      ADDS     r3,r1,#3
;;;65     	pumbDest[umbIndex++] = (uMonoByte)uqbWord;
        0x0000121c:    b2db        ..      UXTB     r3,r3
        0x0000121e:    54c2        .T      STRB     r2,[r0,r3]
        0x00001220:    1d08        ..      ADDS     r0,r1,#4
;;;66     
;;;67     	/*Return uDiByte word: AA,BB : 0xAABB*/
;;;68     	DBG_FUNC_EXIT("<<[MemoryManager] mm_storeUdiByte() returns %1\n", umbIndex);
;;;69     	return umbIndex;
        0x00001222:    b2c0        ..      UXTB     r0,r0
        0x00001224:    bd10        ..      POP      {r4,pc}
        0x00001226:    4802        .H      LDR      r0,[pc,#8] ; [0x1230] = 0x8467
        0x00001228:    4902        .I      LDR      r1,[pc,#8] ; [0x1234] = 0x8478
        0x0000122a:    223a        :"      MOVS     r2,#0x3a
        0x0000122c:    f006fa60    ..`.    BL       __aeabi_assert ; 0x76f0
    $d.5
    __arm_cp.2_0
        0x00001230:    00008467    g...    DCD    33895
    __arm_cp.2_1
        0x00001234:    00008478    x...    DCD    33912
    $t.0
    oasis_SetCardState
;;; Core/OasisCommands/source\oasis_GenericCommands.c
;;;10     void oasis_SetCardState(void) {
        0x00001238:    b580        ..      PUSH     {r7,lr}
;;;11     
;;;12     	DBG_FUNC_ENTRY(">>[OASIS_COMMANDS] oasis_SetCardState()\n");
;;;13     
;;;14     	if( (0x00 != P1_BYTE)  // P1 is not zero
        0x0000123a:    4808        .H      LDR      r0,[pc,#32] ; [0x125c] = 0x2000023e
        0x0000123c:    7881        .x      LDRB     r1,[r0,#2]
;;;15     		||					//OR
        0x0000123e:    2900        .)      CMP      r1,#0
        0x00001240:    d107        ..      BNE      0x1252 ; oasis_SetCardState + 26
;;;16     		((STATE_INITIALIZED != P2_BYTE) && (STATE_SECURED != P2_BYTE))){ // P2 is neither STATE_INITIALIZED nor STATE_SECURED
        0x00001242:    78c0        .x      LDRB     r0,[r0,#3]
        0x00001244:    2108        .!      MOVS     r1,#8
        0x00001246:    4301        .C      ORRS     r1,r1,r0
        0x00001248:    290f        .)      CMP      r1,#0xf
        0x0000124a:    d102        ..      BNE      0x1252 ; oasis_SetCardState + 26
        0x0000124c:    f002fc68    ..h.    BL       _7186_4_changeCardState ; 0x3b20
        0x00001250:    bd80        ..      POP      {r7,pc}
;;;17     		/*P1 is incorrect must be '00'*/
;;;18     		DBG_ERR("[OASIS_COMMANDS] oasis_SetCardState: Wrong P1-P2\n");
;;;19     		DBG_FUNC_EXIT("<<[OASIS_COMMANDS] oasis_SetCardState() \n");
;;;20     		THROW(EXCEP_WRONG_P1_P2);
        0x00001252:    4803        .H      LDR      r0,[pc,#12] ; [0x1260] = 0x20000648
        0x00001254:    2106        .!      MOVS     r1,#6
        0x00001256:    f006fbe6    ....    BL       longjmp ; 0x7a26
        0x0000125a:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x0000125c:    2000023e    >..     DCD    536871486
    __arm_cp.0_1
        0x00001260:    20000648    H..     DCD    536872520
    $t.2
    oasis_getMemoryConfig
;;;21     	}
;;;22     	
;;;23     	DBG_FUNC("[OASIS_COMMANDS] oasis_SetCardState: New state would be %1\n", P2_BYTE);
;;;24     
;;;25     	/*Change Card state*/
;;;26     	_7186_4_changeCardState(P2_BYTE);
;;;27     
;;;28     	DBG_FUNC_EXIT("<<[OASIS_COMMANDS] oasis_SetCardState()\n");
;;;29     }
;;;30     
;;;31     /*
;;;32     * It extract the Memory related information
;;;33     */
;;;34     /*
;;;35     	{//DBGCODE
;;;36     		extern uMonoByte umbDBG[];
;;;37     		extern uMonoByte	umbDbgLen;
;;;38     		mm_storeUdiByte(umbDBG,umbDbgLen,fhaFile);
;;;39     	}
;;;40     */
;;;41     /*DBGCODE*/
;;;42     uMonoByte umbDBG[0x80];
;;;43     uMonoByte	umbDbgLen = 0x00;
;;;44     void oasis_getMemoryConfig(void) {
        0x00001264:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00001266:    b081        ..      SUB      sp,sp,#4
;;;45     	
;;;46     	if(P3_BYTE != (0x20 + TOTAL_SYSTEM_DATA_LEN + umbDbgLen)){
        0x00001268:    482b        +H      LDR      r0,[pc,#172] ; [0x1318] = 0x2000081c
        0x0000126a:    7800        .x      LDRB     r0,[r0,#0]
        0x0000126c:    3027        '0      ADDS     r0,r0,#0x27
        0x0000126e:    4d2b        +M      LDR      r5,[pc,#172] ; [0x131c] = 0x2000023e
        0x00001270:    7929        )y      LDRB     r1,[r5,#4]
        0x00001272:    4288        .B      CMP      r0,r1
        0x00001274:    d14b        K.      BNE      0x130e ; oasis_getMemoryConfig + 170
;;;47     		THROW2(EXCEP_WRONG_P3, (0x20 + TOTAL_SYSTEM_DATA_LEN + umbDbgLen));
;;;48     	}
;;;49     	mm_storeWord(COMMAND_RESPONSE_DATA,0x00,ADDRESS_ERASE_EEPROM_START);
        0x00001276:    1d6e        n.      ADDS     r6,r5,#5
        0x00001278:    2001        .       MOVS     r0,#1
        0x0000127a:    0242        B.      LSLS     r2,r0,#9
        0x0000127c:    2100        .!      MOVS     r1,#0
        0x0000127e:    9100        ..      STR      r1,[sp,#0]
        0x00001280:    4630        0F      MOV      r0,r6
        0x00001282:    f7ffffbd    ....    BL       mm_storeWord ; 0x1200
        0x00001286:    2005        .       MOVS     r0,#5
        0x00001288:    0347        G.      LSLS     r7,r0,#13
        0x0000128a:    2104        .!      MOVS     r1,#4
;;;50     	mm_storeWord(COMMAND_RESPONSE_DATA,0x04,ADDRESS_SYSTEM_AREA_START);
        0x0000128c:    4630        0F      MOV      r0,r6
        0x0000128e:    463a        :F      MOV      r2,r7
        0x00001290:    f7ffffb6    ....    BL       mm_storeWord ; 0x1200
        0x00001294:    2051        Q       MOVS     r0,#0x51
        0x00001296:    0244        D.      LSLS     r4,r0,#9
        0x00001298:    2108        .!      MOVS     r1,#8
;;;51     	mm_storeWord(COMMAND_RESPONSE_DATA,0x08,ADDRESS_DISK_MEMORY_START);
        0x0000129a:    4630        0F      MOV      r0,r6
        0x0000129c:    4622        "F      MOV      r2,r4
        0x0000129e:    f7ffffaf    ....    BL       mm_storeWord ; 0x1200
        0x000012a2:    4a20         J      LDR      r2,[pc,#128] ; [0x1324] = 0x54ddf
;;;52     	mm_storeWord(COMMAND_RESPONSE_DATA,0x0C,ADDRESS_DISK_MEMORY_END);
        0x000012a4:    3220         2      ADDS     r2,r2,#0x20
        0x000012a6:    210c        .!      MOVS     r1,#0xc
        0x000012a8:    4630        0F      MOV      r0,r6
        0x000012aa:    f7ffffa9    ....    BL       mm_storeWord ; 0x1200
        0x000012ae:    2110        .!      MOVS     r1,#0x10
;;;53     	mm_storeWord(COMMAND_RESPONSE_DATA,0x10,ADDRESS_SMART_START);
        0x000012b0:    4630        0F      MOV      r0,r6
        0x000012b2:    4622        "F      MOV      r2,r4
        0x000012b4:    f7ffffa4    ....    BL       mm_storeWord ; 0x1200
        0x000012b8:    2114        .!      MOVS     r1,#0x14
        0x000012ba:    4c1b        .L      LDR      r4,[pc,#108] ; [0x1328] = 0x126df
;;;54     	mm_storeWord(COMMAND_RESPONSE_DATA,0x14,ADDRESS_SMART_END);
        0x000012bc:    4630        0F      MOV      r0,r6
        0x000012be:    4622        "F      MOV      r2,r4
        0x000012c0:    f7ffff9e    ....    BL       mm_storeWord ; 0x1200
;;;55     	mm_storeWord(COMMAND_RESPONSE_DATA,0x18,ADDRESS_CLUSTER_START);
        0x000012c4:    1c62        b.      ADDS     r2,r4,#1
        0x000012c6:    2118        .!      MOVS     r1,#0x18
        0x000012c8:    4630        0F      MOV      r0,r6
        0x000012ca:    f7ffff99    ....    BL       mm_storeWord ; 0x1200
        0x000012ce:    211c        .!      MOVS     r1,#0x1c
;;;56     	mm_storeWord(COMMAND_RESPONSE_DATA,0x1C,ADDRESS_CLUSTER_END);
        0x000012d0:    4630        0F      MOV      r0,r6
        0x000012d2:    4a14        .J      LDR      r2,[pc,#80] ; [0x1324] = 0x54ddf
        0x000012d4:    f7ffff94    ....    BL       mm_storeWord ; 0x1200
;;;57     	/*Read all elements of system page data in one write*/
;;;58     	baseReadNBytes(ADDRESS_NEXT_FREE_CLUSTER, (COMMAND_RESPONSE_DATA + 0x20), TOTAL_SYSTEM_DATA_LEN);
        0x000012d8:    4629        )F      MOV      r1,r5
        0x000012da:    3125        %1      ADDS     r1,r1,#0x25
        0x000012dc:    2207        ."      MOVS     r2,#7
        0x000012de:    4638        8F      MOV      r0,r7
        0x000012e0:    f005fd0c    ....    BL       baseReadNBytes ; 0x6cfc
        0x000012e4:    4e0c        .N      LDR      r6,[pc,#48] ; [0x1318] = 0x2000081c
;;;59     	mem_cpy(COMMAND_RESPONSE_DATA+0x27, umbDBG, umbDbgLen);
        0x000012e6:    7832        2x      LDRB     r2,[r6,#0]
        0x000012e8:    352c        ,5      ADDS     r5,r5,#0x2c
        0x000012ea:    4c10        .L      LDR      r4,[pc,#64] ; [0x132c] = 0x2000079c
        0x000012ec:    4628        (F      MOV      r0,r5
        0x000012ee:    4621        !F      MOV      r1,r4
        0x000012f0:    f7fffb65    ..e.    BL       mem_cpyFwd ; 0x9be
;;;60     	mem_set(umbDBG, 0x00, umbDbgLen);
        0x000012f4:    7832        2x      LDRB     r2,[r6,#0]
        0x000012f6:    4620         F      MOV      r0,r4
        0x000012f8:    9c00        ..      LDR      r4,[sp,#0]
        0x000012fa:    4621        !F      MOV      r1,r4
        0x000012fc:    f7fffc2a    ..*.    BL       mem_set ; 0xb54
;;;61     	gudbOutputLen = 0x27 + umbDbgLen;
        0x00001300:    7830        0x      LDRB     r0,[r6,#0]
        0x00001302:    7034        4p      STRB     r4,[r6,#0]
        0x00001304:    3027        '0      ADDS     r0,r0,#0x27
        0x00001306:    490a        .I      LDR      r1,[pc,#40] ; [0x1330] = 0x2000023c
        0x00001308:    8008        ..      STRH     r0,[r1,#0]
;;;62     	umbDbgLen=0x00;
;;;63     }
        0x0000130a:    b001        ..      ADD      sp,sp,#4
        0x0000130c:    bdf0        ..      POP      {r4-r7,pc}
        0x0000130e:    7128        (q      STRB     r0,[r5,#4]
        0x00001310:    4803        .H      LDR      r0,[pc,#12] ; [0x1320] = 0x20000648
        0x00001312:    2107        .!      MOVS     r1,#7
        0x00001314:    f006fb87    ....    BL       longjmp ; 0x7a26
    $d.3
    __arm_cp.1_0
        0x00001318:    2000081c    ...     DCD    536872988
    __arm_cp.1_1
        0x0000131c:    2000023e    >..     DCD    536871486
    __arm_cp.1_2
        0x00001320:    20000648    H..     DCD    536872520
    __arm_cp.1_3
        0x00001324:    00054ddf    .M..    DCD    347615
    __arm_cp.1_4
        0x00001328:    000126df    .&..    DCD    75487
    __arm_cp.1_5
        0x0000132c:    2000079c    ...     DCD    536872860
    __arm_cp.1_6
        0x00001330:    2000023c    <..     DCD    536871484
    $t.4
    oasis_switchToBL
;;;64     
;;;65     /*
;;;66     * It returns to bootloader state
;;;67     */
;;;68     void oasis_switchToBL(void) {
        0x00001334:    b580        ..      PUSH     {r7,lr}
;;;69     	
;;;70     	if(P1_BYTE|P2_BYTE){
        0x00001336:    48eb        .H      LDR      r0,[pc,#940] ; [0x16e4] = 0x2000023e
        0x00001338:    7881        .x      LDRB     r1,[r0,#2]
        0x0000133a:    78c2        .x      LDRB     r2,[r0,#3]
        0x0000133c:    430a        .C      ORRS     r2,r2,r1
        0x0000133e:    d10e        ..      BNE      0x135e ; oasis_switchToBL + 42
        0x00001340:    7901        .y      LDRB     r1,[r0,#4]
        0x00001342:    2910        .)      CMP      r1,#0x10
        0x00001344:    d10f        ..      BNE      0x1366 ; oasis_switchToBL + 50
        0x00001346:    1d40        @.      ADDS     r0,r0,#5
        0x00001348:    490e        .I      LDR      r1,[pc,#56] ; [0x1384] = 0x7de0
        0x0000134a:    2210        ."      MOVS     r2,#0x10
        0x0000134c:    f7fffb8d    ....    BL       mem_cmp ; 0xa6a
        0x00001350:    2800        .(      CMP      r0,#0
        0x00001352:    d10e        ..      BNE      0x1372 ; oasis_switchToBL + 62
        0x00001354:    f7fff9ce    ....    BL       ReturnToBL ; 0x6f4
        0x00001358:    2800        .(      CMP      r0,#0
        0x0000135a:    d10e        ..      BNE      0x137a ; oasis_switchToBL + 70
        0x0000135c:    bd80        ..      POP      {r7,pc}
;;;71     		THROW(EXCEP_WRONG_P1_P2);
        0x0000135e:    48e2        .H      LDR      r0,[pc,#904] ; [0x16e8] = 0x20000648
        0x00001360:    2106        .!      MOVS     r1,#6
        0x00001362:    f006fb60    ..`.    BL       longjmp ; 0x7a26
        0x00001366:    2110        .!      MOVS     r1,#0x10
;;;72     	}
;;;73     
;;;74     	/*Check if Pin length is valid*/
;;;75     	if (PIN_CARD_ISSUER_LENGTH != P3_BYTE) {
;;;76     
;;;77     		/*Return status words 6710*/
;;;78     		THROW2(EXCEP_WRONG_P3, PIN_CARD_ISSUER_LENGTH);
        0x00001368:    7101        .q      STRB     r1,[r0,#4]
        0x0000136a:    48df        .H      LDR      r0,[pc,#892] ; [0x16e8] = 0x20000648
        0x0000136c:    2107        .!      MOVS     r1,#7
        0x0000136e:    f006fb5a    ..Z.    BL       longjmp ; 0x7a26
;;;79     	}
;;;80     
;;;81     
;;;82     	/*Verify security PIN*/
;;;83     	if (EQUAL != mem_cmp(COMMAND_DATA, CARD_ISSUER_PIN, PIN_CARD_ISSUER_LENGTH)) {
;;;84     
;;;85     		THROW(EXCEP_SECURITY_NOT_SATISFIED);
        0x00001372:    48dd        .H      LDR      r0,[pc,#884] ; [0x16e8] = 0x20000648
        0x00001374:    2111        .!      MOVS     r1,#0x11
        0x00001376:    f006fb56    ..V.    BL       longjmp ; 0x7a26
;;;86     	}
;;;87     
;;;88     	
;;;89     #ifndef WIN32
;;;90     	/*It switches to bootloader*/
;;;91     	if(switchToBootLoader()){
;;;92     		THROW(EXCEP_TECHNICAL_PROBLEM);
        0x0000137a:    48db        .H      LDR      r0,[pc,#876] ; [0x16e8] = 0x20000648
        0x0000137c:    2117        .!      MOVS     r1,#0x17
        0x0000137e:    f006fb52    ..R.    BL       longjmp ; 0x7a26
        0x00001382:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_2
        0x00001384:    00007de0    .}..    DCD    32224
    $t.0
    osInit_osInit
;;; Core/OS_Init/source\OSinit.c
;;;9      void osInit_osInit(void) {
        0x00001388:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000138a:    b087        ..      SUB      sp,sp,#0x1c
        0x0000138c:    ad06        ..      ADD      r5,sp,#0x18
        0x0000138e:    2000        .       MOVS     r0,#0
;;;10     	/*will contain next free mem block address*/
;;;11     	tMemAddr			maFreeClusterAddr=0x00;
        0x00001390:    8028        (.      STRH     r0,[r5,#0]
        0x00001392:    a902        ..      ADD      r1,sp,#8
;;;12     	tFileHeaderAddr		fhaDf;
;;;13     	tFileHeaderAddr		fhaFile;
;;;14     	tFileLCSI			flState;
;;;15     	uMonoByte umbSystemPage[TOTAL_SYSTEM_DATA_LEN] = { 0x00 }; //array will be updated on System page if Card is loaded first time
        0x00001394:    7188        .q      STRB     r0,[r1,#6]
        0x00001396:    8088        ..      STRH     r0,[r1,#4]
        0x00001398:    9002        ..      STR      r0,[sp,#8]
;;;16     
;;;17     	DBG_FUNC_ENTRY(">>[OSinit] osInit_osInit() \n");
;;;18     
;;;19     	/*Memory initalization and recovery after reset*/
;;;20     	baseNvmInit();
        0x0000139a:    f005fc5e    ..^.    BL       at_osInit ; 0x6c5a
        0x0000139e:    2005        .       MOVS     r0,#5
        0x000013a0:    0344        D.      LSLS     r4,r0,#13
        0x000013a2:    2202        ."      MOVS     r2,#2
;;;21     
;;;22     	/*Read the next available cluster from system page*/
;;;23     	baseReadNBytes(ADDRESS_NEXT_FREE_CLUSTER, (puMonoByte) &maFreeClusterAddr, SIZE_OF_MEMORY_ADDRESS);
        0x000013a4:    4620         F      MOV      r0,r4
        0x000013a6:    4629        )F      MOV      r1,r5
        0x000013a8:    f005fca8    ....    BL       baseReadNBytes ; 0x6cfc
;;;24     
;;;25     	/*check if its null*/
;;;26     	if ((tMemAddr)UNINITIALIZED_ADDR == maFreeClusterAddr)
        0x000013ac:    8828        (.      LDRH     r0,[r5,#0]
        0x000013ae:    4943        CI      LDR      r1,[pc,#268] ; [0x14bc] = 0xffff
        0x000013b0:    4288        .B      CMP      r0,r1
        0x000013b2:    d118        ..      BNE      0x13e6 ; osInit_osInit + 94
        0x000013b4:    ae06        ..      ADD      r6,sp,#0x18
        0x000013b6:    2001        .       MOVS     r0,#1
;;;27     	{
;;;28     		DBG_FUNC("[OSinit] osInit_osInit: First time OS loaded, so re-initializing System Page\n");
;;;29     
;;;30     		/*first time this function is called. hence reset addresses*/
;;;31     		maFreeClusterAddr = SMART_START_INDEX;
        0x000013b8:    9001        ..      STR      r0,[sp,#4]
        0x000013ba:    8030        0.      STRH     r0,[r6,#0]
        0x000013bc:    ad02        ..      ADD      r5,sp,#8
        0x000013be:    2702        .'      MOVS     r7,#2
;;;32     
;;;33     		DBG_FUNC("[OSinit] osInit_osInit: Initial value of Next free cluster %2\n", maFreeClusterAddr);
;;;34     
;;;35     		/*copy address of first cluster*/
;;;36     		mem_cpy(umbSystemPage + OFFSET_NEXT_FREE_CLUSTER, (puMonoByte) &maFreeClusterAddr, SIZE_OF_NO_OF_CLUSTER); // using mem_cpy to make it endian independent
        0x000013c0:    4628        (F      MOV      r0,r5
        0x000013c2:    4631        1F      MOV      r1,r6
        0x000013c4:    463a        :F      MOV      r2,r7
        0x000013c6:    f7fffafa    ....    BL       mem_cpyFwd ; 0x9be
        0x000013ca:    483d        =H      LDR      r0,[pc,#244] ; [0x14c0] = 0x2138
;;;37     
;;;38     		/*As this is first time card loaded free clusters are equal to total no. of clusters*/
;;;39     		maFreeClusterAddr = (tMemAddr)NO_OF_CLUSTERS;
        0x000013cc:    8030        0.      STRH     r0,[r6,#0]
;;;40     
;;;41     		DBG_FUNC("[OSinit] osInit_osInit: Initial value of No. of free clusters %2\n", maFreeClusterAddr);
;;;42     
;;;43     		/*copying free no. of clusters*/
;;;44     		mem_cpy(umbSystemPage + OFFSET_NO_OF_FREE_CLUSTERS, (puMonoByte) &maFreeClusterAddr, SIZE_OF_MEMORY_ADDRESS); // using mem_cpy to make it endian independent
        0x000013ce:    1ca8        ..      ADDS     r0,r5,#2
        0x000013d0:    4631        1F      MOV      r1,r6
        0x000013d2:    463a        :F      MOV      r2,r7
        0x000013d4:    f7fffaf3    ....    BL       mem_cpyFwd ; 0x9be
;;;45     
;;;46     		/*As this first time OS is called, Card state will be OP_READY*/
;;;47     		umbSystemPage[OFFSET_CARD_STATE] = (uMonoByte)STATE_OP_READY;
        0x000013d8:    9801        ..      LDR      r0,[sp,#4]
        0x000013da:    71a8        .q      STRB     r0,[r5,#6]
        0x000013dc:    2207        ."      MOVS     r2,#7
;;;48     
;;;49     		DBG_FUNC("[OSinit] osInit_osInit: Initial Master file address %2\n", EMPTY_OBJECT);
;;;50     		
;;;51     		/*Update all elements of system page data in one write*/
;;;52     		baseWriteNBytes(ADDRESS_NEXT_FREE_CLUSTER, umbSystemPage, TOTAL_SYSTEM_DATA_LEN);
        0x000013de:    4620         F      MOV      r0,r4
        0x000013e0:    4629        )F      MOV      r1,r5
        0x000013e2:    f005fcf3    ....    BL       baseWriteNBytes ; 0x6dcc
;;;53     		
;;;54     #ifdef _DEBUG
;;;55     		printMemoryConfig();
;;;56     #endif // _DEBUG
;;;57     
;;;58     
;;;59     	}
;;;60     	
;;;61     	/*Set Basic Logical Channel contexts*/
;;;62     	ccContexts[BASIC_LOGICAL_CHANNEL].fhaCurrentDf = _7816_4_getMfAddress();
        0x000013e6:    f001fde5    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x000013ea:    4e36        6N      LDR      r6,[pc,#216] ; [0x14c4] = 0x2000020a
        0x000013ec:    80f0        ..      STRH     r0,[r6,#6]
;;;63     
;;;64     	//TODO check in NUTS code if we can do it in OS_init()
;;;65     	if (STATE_INITIALIZED < _7186_4_getCardState()) { // If card is in secured state
        0x000013ee:    f002fb87    ....    BL       _7186_4_getCardState ; 0x3b00
        0x000013f2:    2808        .(      CMP      r0,#8
        0x000013f4:    d355        U.      BCC      0x14a2 ; osInit_osInit + 282
;;;66     
;;;67     		/*Search DFgsm under MF*/
;;;68     		_7816_4_ifFileExists(FID_TELECOM, ccContexts[BASIC_LOGICAL_CHANNEL].fhaCurrentDf, MODE_FIND_FID, &fhaDf);
        0x000013f6:    88f1        ..      LDRH     r1,[r6,#6]
        0x000013f8:    4c33        3L      LDR      r4,[pc,#204] ; [0x14c8] = 0x7f10
        0x000013fa:    2500        .%      MOVS     r5,#0
        0x000013fc:    af05        ..      ADD      r7,sp,#0x14
        0x000013fe:    4620         F      MOV      r0,r4
        0x00001400:    462a        *F      MOV      r2,r5
        0x00001402:    463b        ;F      MOV      r3,r7
        0x00001404:    f001fe96    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;69     
;;;70     		/*Search EFadn under Telecom*/
;;;71     		_7816_4_ifFileExists(FID_ADN, fhaDf, MODE_FIND_FID, &fhaFile);
        0x00001408:    8839        9.      LDRH     r1,[r7,#0]
        0x0000140a:    4830        0H      LDR      r0,[pc,#192] ; [0x14cc] = 0x6f07
        0x0000140c:    3033        30      ADDS     r0,r0,#0x33
        0x0000140e:    ae04        ..      ADD      r6,sp,#0x10
        0x00001410:    462a        *F      MOV      r2,r5
        0x00001412:    4633        3F      MOV      r3,r6
        0x00001414:    f001fe8e    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;72     
;;;73     		/*get life cycle status*/
;;;74     		flState = _7816_4_getLifeCycleStatus(fhaFile);
        0x00001418:    8830        0.      LDRH     r0,[r6,#0]
        0x0000141a:    f002f8ff    ....    BL       _7816_4_getLifeCycleStatus ; 0x361c
        0x0000141e:    9001        ..      STR      r0,[sp,#4]
;;;75     
;;;76     		/*Search DFgsm under MF*/
;;;77     		_7816_4_ifFileExists(FID_GSM, ccContexts[BASIC_LOGICAL_CHANNEL].fhaCurrentDf, MODE_FIND_FID, &fhaDf);
        0x00001420:    4828        (H      LDR      r0,[pc,#160] ; [0x14c4] = 0x2000020a
        0x00001422:    88c1        ..      LDRH     r1,[r0,#6]
        0x00001424:    3410        .4      ADDS     r4,r4,#0x10
        0x00001426:    4620         F      MOV      r0,r4
        0x00001428:    462a        *F      MOV      r2,r5
        0x0000142a:    463b        ;F      MOV      r3,r7
        0x0000142c:    f001fe82    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;78     
;;;79     		/*Search EFsst under GSM*/
;;;80     		_7816_4_ifFileExists(FID_SST, fhaDf, MODE_FIND_FID, &fhaFile);
        0x00001430:    8839        9.      LDRH     r1,[r7,#0]
        0x00001432:    4826        &H      LDR      r0,[pc,#152] ; [0x14cc] = 0x6f07
        0x00001434:    3031        10      ADDS     r0,r0,#0x31
        0x00001436:    462a        *F      MOV      r2,r5
        0x00001438:    4633        3F      MOV      r3,r6
        0x0000143a:    f001fe7b    ..{.    BL       _7816_4_ifFileExists ; 0x3134
;;;81     
;;;82     		/*check if EFsst is present, only then FDN-BDN procedure to be followed*/
;;;83     		if (NO_FILE_PRESENT != fhaFile) {
        0x0000143e:    8830        0.      LDRH     r0,[r6,#0]
        0x00001440:    4e20         N      LDR      r6,[pc,#128] ; [0x14c4] = 0x2000020a
        0x00001442:    2800        .(      CMP      r0,#0
        0x00001444:    d02d        -.      BEQ      0x14a2 ; osInit_osInit + 282
;;;84     
;;;85     			/*read first byte which contains service n'3 */
;;;86     			_7816_4_readUpdateFile(fhaFile, umbSystemPage, OFFSET_START, 0x01, ACC_MODE_FILE_READ);
        0x00001446:    9500        ..      STR      r5,[sp,#0]
        0x00001448:    ac02        ..      ADD      r4,sp,#8
        0x0000144a:    2301        .#      MOVS     r3,#1
        0x0000144c:    4621        !F      MOV      r1,r4
        0x0000144e:    462a        *F      MOV      r2,r5
        0x00001450:    f001ff4c    ..L.    BL       _7816_4_readUpdateFile ; 0x32ec
;;;87     
;;;88     			/*Check if FDN is enabled or nor, Refer Figure-C.6 of 3GPP 51.011*/
;;;89     			if (
;;;90     				(SERVICE_FDN_ACTIVATED == (umbSystemPage[0x00] & MASK_SERVICE_FDN)) // FDN allocated and Activated
        0x00001454:    7820         x      LDRB     r0,[r4,#0]
        0x00001456:    2130        0!      MOVS     r1,#0x30
        0x00001458:    4001        .@      ANDS     r1,r1,r0
;;;91     				&&																//AND
        0x0000145a:    2930        0)      CMP      r1,#0x30
        0x0000145c:    d121        !.      BNE      0x14a2 ; osInit_osInit + 282
        0x0000145e:    210c        .!      MOVS     r1,#0xc
;;;92     				(
;;;93     					(SERVICE_ADN_ACTIVATED != (umbSystemPage[0x00] & MASK_SERVICE_ADN)) // !(ADN allocated and Activated)
        0x00001460:    4008        .@      ANDS     r0,r0,r1
;;;94     					||																	// OR
        0x00001462:    280c        .(      CMP      r0,#0xc
        0x00001464:    d102        ..      BNE      0x146c ; osInit_osInit + 228
        0x00001466:    9801        ..      LDR      r0,[sp,#4]
        0x00001468:    2804        .(      CMP      r0,#4
        0x0000146a:    d11a        ..      BNE      0x14a2 ; osInit_osInit + 282
        0x0000146c:    af05        ..      ADD      r7,sp,#0x14
;;;95     					(flState == LCSI_DEACTIVATED)										// ADN is deactivated/invalidated
;;;96     					)
;;;97     				) {
;;;98     
;;;99     				/*Search EF under GSM*/
;;;100    				_7816_4_ifFileExists(FID_IMSI, fhaDf, MODE_FIND_FID, &fhaFile);
        0x0000146e:    8839        9.      LDRH     r1,[r7,#0]
        0x00001470:    2200        ."      MOVS     r2,#0
        0x00001472:    9201        ..      STR      r2,[sp,#4]
        0x00001474:    ac04        ..      ADD      r4,sp,#0x10
        0x00001476:    4d15        .M      LDR      r5,[pc,#84] ; [0x14cc] = 0x6f07
        0x00001478:    4628        (F      MOV      r0,r5
        0x0000147a:    4623        #F      MOV      r3,r4
        0x0000147c:    f001fe5a    ..Z.    BL       _7816_4_ifFileExists ; 0x3134
;;;101    
;;;102    				/*Deactivate the file as per FDN procedure*/
;;;103    				_7816_4_setLifeCycleStatus(fhaFile, LCSI_DEACTIVATED);
        0x00001480:    8820         .      LDRH     r0,[r4,#0]
        0x00001482:    2604        .&      MOVS     r6,#4
        0x00001484:    4631        1F      MOV      r1,r6
        0x00001486:    f002f8a3    ....    BL       _7816_4_setLifeCycleStatus ; 0x35d0
;;;104    
;;;105    				/*Search EFloci under GSM*/
;;;106    				_7816_4_ifFileExists(FID_LOCI, fhaDf, MODE_FIND_FID, &fhaFile);
        0x0000148a:    8839        9.      LDRH     r1,[r7,#0]
        0x0000148c:    3577        w5      ADDS     r5,r5,#0x77
        0x0000148e:    4628        (F      MOV      r0,r5
        0x00001490:    9a01        ..      LDR      r2,[sp,#4]
        0x00001492:    4623        #F      MOV      r3,r4
        0x00001494:    f001fe4e    ..N.    BL       _7816_4_ifFileExists ; 0x3134
;;;107    
;;;108    				/*Deactivate the file as per FDN procedure*/
;;;109    				_7816_4_setLifeCycleStatus(fhaFile, LCSI_DEACTIVATED);
        0x00001498:    8820         .      LDRH     r0,[r4,#0]
        0x0000149a:    4631        1F      MOV      r1,r6
        0x0000149c:    4e09        .N      LDR      r6,[pc,#36] ; [0x14c4] = 0x2000020a
        0x0000149e:    f002f897    ....    BL       _7816_4_setLifeCycleStatus ; 0x35d0
;;;110    			}
;;;111    		}
;;;112    	}
;;;113    	/*check whether MF is created or not*/
;;;114    	if (ccContexts[BASIC_LOGICAL_CHANNEL].fhaCurrentDf != NO_FILE_PRESENT)
        0x000014a2:    88f0        ..      LDRH     r0,[r6,#6]
        0x000014a4:    2800        .(      CMP      r0,#0
        0x000014a6:    d006        ..      BEQ      0x14b6 ; osInit_osInit + 302
;;;115    	{
;;;116    		/*Prepare Select command's response for DF*/
;;;117    		gudbOutputLen = _51011_prepareFileResponse(ccContexts[BASIC_LOGICAL_CHANNEL].fhaCurrentDf, FILE_IS_DF, COMMAND_RESPONSE_DATA);
        0x000014a8:    49f2        .I      LDR      r1,[pc,#968] ; [0x1874] = 0x2000023e
        0x000014aa:    1d4a        J.      ADDS     r2,r1,#5
        0x000014ac:    2102        .!      MOVS     r1,#2
        0x000014ae:    f005f817    ....    BL       _51011_prepareFileResponse ; 0x64e0
        0x000014b2:    49f3        .I      LDR      r1,[pc,#972] ; [0x1880] = 0x2000023c
        0x000014b4:    8008        ..      STRH     r0,[r1,#0]
;;;118    	}
;;;119    	DBG_FUNC_EXIT("<<[OSinit] osInit_osInit() \n");
;;;120    }
        0x000014b6:    b007        ..      ADD      sp,sp,#0x1c
        0x000014b8:    bdf0        ..      POP      {r4-r7,pc}
        0x000014ba:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x000014bc:    0000ffff    ....    DCD    65535
    __arm_cp.0_1
        0x000014c0:    00002138    8!..    DCD    8504
    __arm_cp.0_2
        0x000014c4:    2000020a    ...     DCD    536871434
    __arm_cp.0_3
        0x000014c8:    00007f10    ....    DCD    32528
    __arm_cp.0_4
        0x000014cc:    00006f07    .o..    DCD    28423
    $t.0
    _102221_terminalProfile
;;; Core/102_221/source\CatCommands.c
;;;6      void _102221_terminalProfile(void) {
        0x000014d0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000014d2:    b087        ..      SUB      sp,sp,#0x1c
;;;7      
;;;8      	tFileHeaderAddr   fhaFile;
;;;9      	tFileHeader		  fhFile;
;;;10     
;;;11     	DBG_FUNC_ENTRY(">>[102221] _102221_terminalProfile() \n");
;;;12     
;;;13     	if (P1_BYTE || P2_BYTE) {
        0x000014d4:    4f1d        .O      LDR      r7,[pc,#116] ; [0x154c] = 0x2000023e
        0x000014d6:    78b8        .x      LDRB     r0,[r7,#2]
        0x000014d8:    2800        .(      CMP      r0,#0
        0x000014da:    d133        3.      BNE      0x1544 ; _102221_terminalProfile + 116
        0x000014dc:    78f8        .x      LDRB     r0,[r7,#3]
        0x000014de:    2800        .(      CMP      r0,#0
        0x000014e0:    d130        0.      BNE      0x1544 ; _102221_terminalProfile + 116
;;;14     		/*Parameters are incorrect must be '0000'*/
;;;15     		DBG_ERR("[102221] _102221_terminalProfile: Wrong P1-P2\n");
;;;16     		DBG_FUNC_EXIT("<<[102221] _102221_terminalProfile() \n");
;;;17     		THROW(EXCEP_WRONG_P1_P2);
;;;18     	}
;;;19     	/*get memory reference of Admin use DF*/
;;;20     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, &fhaFile);
        0x000014e2:    f001fd67    ..g.    BL       _7816_4_getMfAddress ; 0x2fb4
        0x000014e6:    4601        .F      MOV      r1,r0
        0x000014e8:    481a        .H      LDR      r0,[pc,#104] ; [0x1554] = 0x7f49
        0x000014ea:    2400        .$      MOVS     r4,#0
        0x000014ec:    ad06        ..      ADD      r5,sp,#0x18
        0x000014ee:    4622        "F      MOV      r2,r4
        0x000014f0:    462b        +F      MOV      r3,r5
        0x000014f2:    f001fe1f    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;21     
;;;22     	/*get memory reference of Terminal profile ef*/
;;;23     	_7816_4_ifFileExists(FID_PROP_TERMINAL_PROFILE, fhaFile, MODE_FIND_FID, &fhaFile);
        0x000014f6:    8829        ).      LDRH     r1,[r5,#0]
        0x000014f8:    4817        .H      LDR      r0,[pc,#92] ; [0x1558] = 0x6f17
        0x000014fa:    4622        "F      MOV      r2,r4
        0x000014fc:    462b        +F      MOV      r3,r5
        0x000014fe:    f001fe19    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;24     
;;;25     	/*Read file header*/
;;;26     	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00001502:    8828        (.      LDRH     r0,[r5,#0]
        0x00001504:    9400        ..      STR      r4,[sp,#0]
        0x00001506:    ad01        ..      ADD      r5,sp,#4
        0x00001508:    2314        .#      MOVS     r3,#0x14
        0x0000150a:    4629        )F      MOV      r1,r5
        0x0000150c:    4622        "F      MOV      r2,r4
        0x0000150e:    f7fffd2b    ..+.    BL       mm_ReadUpdate ; 0xf68
;;;27     
;;;28     	DBG_FUNC("[102221] _102221_terminalProfile(): comparing prop file %1 with command data\n", fhFile.udbFileId);
;;;29     
;;;30     	/*Copy the data in local array*/
;;;31     	mem_cpy(gumbWorkingBuffer, COMMAND_DATA, P3_BYTE);
        0x00001512:    793a        :y      LDRB     r2,[r7,#4]
        0x00001514:    1d79        y.      ADDS     r1,r7,#5
        0x00001516:    4e11        .N      LDR      r6,[pc,#68] ; [0x155c] = 0x20000544
        0x00001518:    4630        0F      MOV      r0,r6
        0x0000151a:    f7fffa50    ..P.    BL       mem_cpyFwd ; 0x9be
;;;32     
;;;33     	/*Compare command data with data of prop file terminal profile*/
;;;34     	if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, gumbWorkingBuffer, OFFSET_START, P3_BYTE)) {
        0x0000151e:    793b        ;y      LDRB     r3,[r7,#4]
        0x00001520:    89a8        ..      LDRH     r0,[r5,#0xc]
        0x00001522:    4631        1F      MOV      r1,r6
        0x00001524:    4622        "F      MOV      r2,r4
        0x00001526:    f7fffde1    ....    BL       mm_cmpRam ; 0x10ec
        0x0000152a:    28ff        .(      CMP      r0,#0xff
        0x0000152c:    d008        ..      BEQ      0x1540 ; _102221_terminalProfile + 112
;;;35     
;;;36     		DBG_FUNC("[102221] _102221_terminalProfile: Data found inside the prop file terminal profile is same as data recieve in cmd\n");
;;;37     		}
;;;38     	
;;;39     	else{
;;;40     		DBG_FUNC("[102221] _102221_terminalProfile: data recieve in command is different from data stored in prop file terminal profile \n");
;;;41     		/*update prop file terminal profile*/
;;;42     		_7816_4_readUpdateFile(fhaFile, gumbWorkingBuffer, OFFSET_START, P3_BYTE, ACC_MODE_FILE_UPDATE);
        0x0000152e:    793b        ;y      LDRB     r3,[r7,#4]
        0x00001530:    a806        ..      ADD      r0,sp,#0x18
        0x00001532:    8800        ..      LDRH     r0,[r0,#0]
        0x00001534:    2101        .!      MOVS     r1,#1
        0x00001536:    9100        ..      STR      r1,[sp,#0]
        0x00001538:    4908        .I      LDR      r1,[pc,#32] ; [0x155c] = 0x20000544
        0x0000153a:    2200        ."      MOVS     r2,#0
        0x0000153c:    f001fed6    ....    BL       _7816_4_readUpdateFile ; 0x32ec
;;;43     	}
;;;44     
;;;45     	
;;;46     	DBG_FUNC_EXIT("<<[102221] _102221_terminalProfile() \n");
;;;47     
;;;48     }
        0x00001540:    b007        ..      ADD      sp,sp,#0x1c
        0x00001542:    bdf0        ..      POP      {r4-r7,pc}
        0x00001544:    4802        .H      LDR      r0,[pc,#8] ; [0x1550] = 0x20000648
        0x00001546:    2106        .!      MOVS     r1,#6
        0x00001548:    f006fa6d    ..m.    BL       longjmp ; 0x7a26
    $d.1
    __arm_cp.0_0
        0x0000154c:    2000023e    >..     DCD    536871486
    __arm_cp.0_1
        0x00001550:    20000648    H..     DCD    536872520
    __arm_cp.0_2
        0x00001554:    00007f49    I...    DCD    32585
    __arm_cp.0_3
        0x00001558:    00006f17    .o..    DCD    28439
    __arm_cp.0_4
        0x0000155c:    20000544    D..     DCD    536872260
    $t.2
    _102221_terminalResponse
;;;49     
;;;50     
;;;51     
;;;52     
;;;53     /*
;;;54     * It implements the Terminal Response command
;;;55     */
;;;56     void _102221_terminalResponse(void) {
;;;57     
;;;58     	//TODO  CAT commands
;;;59     }
        0x00001560:    4770        pG      BX       lr
        0x00001562:    46c0        .F      MOV      r8,r8
    _102221_envelope
;;;60     
;;;61     /*
;;;62     * It implements the Envelope command
;;;63     */
;;;64     void _102221_envelope(void) {
        0x00001564:    b580        ..      PUSH     {r7,lr}
;;;65     
;;;66     	//TODO  CAT commands
;;;67     	DBG_FUNC_ENTRY(">>[102221] _102221_envelope() \n");
;;;68     
;;;69     	if (P1_BYTE || P2_BYTE) {
        0x00001566:    4807        .H      LDR      r0,[pc,#28] ; [0x1584] = 0x2000023e
        0x00001568:    7881        .x      LDRB     r1,[r0,#2]
        0x0000156a:    2900        .)      CMP      r1,#0
        0x0000156c:    d106        ..      BNE      0x157c ; _102221_envelope + 24
        0x0000156e:    78c1        .x      LDRB     r1,[r0,#3]
        0x00001570:    2900        .)      CMP      r1,#0
        0x00001572:    d103        ..      BNE      0x157c ; _102221_envelope + 24
        0x00001574:    1d40        @.      ADDS     r0,r0,#5
        0x00001576:    f004fe8b    ....    BL       _31111_Envelope ; 0x6290
        0x0000157a:    bd80        ..      POP      {r7,pc}
;;;70     		/*Parameters are incorrect must be '0000'*/
;;;71     		DBG_ERR("[102221] _102221_envelope: Wrong P1-P2\n");
;;;72     		DBG_FUNC_EXIT("<<[102221] _102221_envelope() \n");
;;;73     		THROW(EXCEP_WRONG_P1_P2);
        0x0000157c:    4802        .H      LDR      r0,[pc,#8] ; [0x1588] = 0x20000648
        0x0000157e:    2106        .!      MOVS     r1,#6
        0x00001580:    f006fa51    ..Q.    BL       longjmp ; 0x7a26
    $d.3
    __arm_cp.2_0
        0x00001584:    2000023e    >..     DCD    536871486
    __arm_cp.2_1
        0x00001588:    20000648    H..     DCD    536872520
    $t.4
    _102221_fetch
;;;74     	}
;;;75     
;;;76     	/*Command will be dispatched to USIM Envelope handler*/
;;;77     	DBG_FUNC("[102221] _102221_envelope: Command is dispatched to uSIM Envelope handler \n");
;;;78     	_31111_Envelope(COMMAND_DATA);
;;;79     
;;;80     	DBG_FUNC_EXIT("<<[102221] _102221_envelope() \n");
;;;81     }
;;;82     
;;;83     /*
;;;84     * It implements the Fetch command
;;;85     */
;;;86     void _102221_fetch(void) {
;;;87     
;;;88     	
;;;89     	DBG_FUNC_ENTRY(">>[102221] _102221_fetch() \n");
;;;90     
;;;91     	if (P1_BYTE || P2_BYTE) {
        0x0000158c:    48b9        .H      LDR      r0,[pc,#740] ; [0x1874] = 0x2000023e
        0x0000158e:    7881        .x      LDRB     r1,[r0,#2]
;;; Core/102_221/source\CatCommands.c (91)
        0x00001590:    2900        .)      CMP      r1,#0
        0x00001592:    d103        ..      BNE      0x159c ; _102221_fetch + 16
        0x00001594:    78c0        .x      LDRB     r0,[r0,#3]
        0x00001596:    2800        .(      CMP      r0,#0
        0x00001598:    d100        ..      BNE      0x159c ; _102221_fetch + 16
        0x0000159a:    4770        pG      BX       lr
;;;92     		/*Parameters are incorrect must be '0000'*/
;;;93     		DBG_ERR("[102221] _102221_fetch: Wrong P1-P2\n");
;;;94     		DBG_FUNC_EXIT("<<[102221] _102221_fetch() \n");
;;;95     		THROW(EXCEP_WRONG_P1_P2);
        0x0000159c:    48b7        .H      LDR      r0,[pc,#732] ; [0x187c] = 0x20000648
        0x0000159e:    2106        .!      MOVS     r1,#6
        0x000015a0:    f006fa41    ..A.    BL       longjmp ; 0x7a26
    _102221_verifyAccessCondition
        0x000015a4:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x000015a6:    460d        .F      MOV      r5,r1
        0x000015a8:    4604        .F      MOV      r4,r0
        0x000015aa:    f002faa9    ....    BL       _7186_4_getCardState ; 0x3b00
        0x000015ae:    280f        .(      CMP      r0,#0xf
        0x000015b0:    d201        ..      BCS      0x15b6 ; _102221_verifyAccessCondition + 18
;;; Core/102_221/source\FileHandlingCommands.c
        0x000015b2:    2000        .       MOVS     r0,#0
        0x000015b4:    bdb0        ..      POP      {r4,r5,r7,pc}
;;;1      #include "102_221.h"
;;;2      
;;;3      /*
;;;4      * Macro defines
;;;5      */
;;;6      #define MAX_CMD_LENGTH_FOR_INCREASE										(0x7f)
;;;7      
;;;8      #define SEARCH_INDEX_OF_OFFSET_OR_VALUE									(0x01)
;;;9      #define SEARCH_INDEX_OF_INDICATION										(0x00)
;;;10     #define LENGTH_SEARCH_INDICATION										(0x02)
;;;11     
;;;12     /*
;;;13     * It verifies the security condition for given operation on given file
;;;14     * 
;;;15     * @param amOperationMode: Read/Update/Increase/Invalidate/Deactivate 
;;;16     * @param fhaFile: File header address of target file
;;;17     */
;;;18      tAccessResult  _102221_verifyAccessCondition(IN_ARG tAccessMode amOperation, IN_ARG tFileHeaderAddr fhaFile) {
;;;19     
;;;20     	uMonoByte		umbStatus = ACC_NOT_VERIFIED;
;;;21     	DBG_FUNC_ENTRY(">>[102_221] _102221_verifyAccessCondition()\n");
;;;22     
;;;23     	if (STATE_SECURED > _7186_4_getCardState()) { // If card is in Production state: OP_READY and INITIALIZED
;;;24     
;;;25     		/*Card is in personalization state*/
;;;26     		DBG_FUNC("[102_221] _102221_verifyAccessCondition: Card in Production state\n");
;;;27     		DBG_FUNC_EXIT("<<[102_221] _102221_verifyAccessCondition() returns ACC_VERIFIED %1\n", ACC_VERIFIED);
;;;28     		return ACC_VERIFIED;
;;;29     	}
;;;30     	
;;;31     	DBG_FUNC("[102_221] _102221_verifyAccessCondition: Card in Secured state\n");
;;;32     
;;;33     	DBG_FUNC("[102_221] _102221_verifyAccessCondition: Extract security condition\n");
;;;34     
;;;35     	/*get security condition i.e. PIN_** */
;;;36     	umbStatus = _7816_4_getSecurityCondition(fhaFile, amOperation);
        0x000015b6:    4628        (F      MOV      r0,r5
        0x000015b8:    4621        !F      MOV      r1,r4
        0x000015ba:    f002faf3    ....    BL       _7816_4_getSecurityCondition ; 0x3ba4
;;;37     
;;;38     	if (PIN_NEVER != umbStatus) { // if security condition is not NEVER
        0x000015be:    28ff        .(      CMP      r0,#0xff
        0x000015c0:    d002        ..      BEQ      0x15c8 ; _102221_verifyAccessCondition + 36
;;;39     		umbStatus = _7816_4_isKeyRefVerified(umbStatus);
        0x000015c2:    f002fe6f    ..o.    BL       _7816_4_isKeyRefVerified ; 0x42a4
;;;40     	}
;;;41     	else { // if security condition is never
;;;42     		DBG_FUNC("[102_221] _102221_verifyAccessCondition: Security condition is never\n");
;;;43     		umbStatus = ACC_NOT_VERIFIED;
;;;44     	}
;;;45     
;;;46     	DBG_FUNC_EXIT("<<[102_221] _102221_verifyAccessCondition() returns %1\n", umbStatus);
;;;47     	return umbStatus;
;;;48     }
        0x000015c6:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x000015c8:    2001        .       MOVS     r0,#1
        0x000015ca:    bdb0        ..      POP      {r4,r5,r7,pc}
    _102221_readUpdateBinary
;;;49     /*
;;;50     * It implements the UICC Read Binary and Update Binary command as per ETSI 102 221
;;;51     * 
;;;52     */
;;;53     void _102221_readUpdateBinary(void) {
        0x000015cc:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000015ce:    b083        ..      SUB      sp,sp,#0xc
        0x000015d0:    a802        ..      ADD      r0,sp,#8
        0x000015d2:    2100        .!      MOVS     r1,#0
;;;54     
;;;55     	uMonoByte		umbSfi;
;;;56     	tAccessMode		amOperation = ACC_MODE_FILE_READ;
;;;57     	tFileHeaderAddr	fhaFile = NO_FILE_PRESENT;
        0x000015d4:    8001        ..      STRH     r1,[r0,#0]
;;;58     	uDiByte			udbOffset;
;;;59     	uDiByte			udbRequestedSize;
;;;60     
;;;61     	DBG_FUNC_ENTRY(">>[102_221] _102221_readUpdateBinary() \n");
;;;62     
;;;63     	DBG_FUNC("[102_221] _102221_readUpdateBinary: P1-P2 validation \n");
;;;64     
;;;65     	/*P1-P2 validation*/
;;;66     	if (P1_VALID_OFFSET == (P1_BYTE & MASK_BIT(8))){
        0x000015d6:    4d43        CM      LDR      r5,[pc,#268] ; [0x16e4] = 0x2000023e
        0x000015d8:    78a8        .x      LDRB     r0,[r5,#2]
        0x000015da:    0601        ..      LSLS     r1,r0,#24
        0x000015dc:    d40a        ..      BMI      0x15f4 ; _102221_readUpdateBinary + 40
;;;67     		 
;;;68     		DBG_FUNC("[102_221] _102221_readUpdateBinary: P1-P2 both work as offset\n");
;;;69     
;;;70     		/*P1+p2 work as offset*/
;;;71     		udbOffset = mm_makeUdiByte(&P1_BYTE, 0x00);
        0x000015de:    1ca8        ..      ADDS     r0,r5,#2
        0x000015e0:    2100        .!      MOVS     r1,#0
        0x000015e2:    f7fffddf    ....    BL       mm_makeUdiByte ; 0x11a4
        0x000015e6:    4604        .F      MOV      r4,r0
;;;72     
;;;73     		/*use current file for intended operation*/
;;;74     		fhaFile = pccCurrentChannel->fhaCurrentEf;
        0x000015e8:    4840        @H      LDR      r0,[pc,#256] ; [0x16ec] = 0x200006e8
        0x000015ea:    6800        .h      LDR      r0,[r0,#0]
        0x000015ec:    8900        ..      LDRH     r0,[r0,#8]
        0x000015ee:    a902        ..      ADD      r1,sp,#8
        0x000015f0:    8008        ..      STRH     r0,[r1,#0]
        0x000015f2:    e00f        ..      B        0x1614 ; _102221_readUpdateBinary + 72
        0x000015f4:    21e0        .!      MOVS     r1,#0xe0
;;;75     
;;;76     		DBG_FUNC("[102_221] _102221_readUpdateBinary: Check if File selected or not\n");
;;;77     	}
;;;78     	else if (P1_VALID_SFI == (P1_BYTE & MASK_VALID_SFI)) {
        0x000015f6:    4001        .@      ANDS     r1,r1,r0
        0x000015f8:    2980        .)      CMP      r1,#0x80
        0x000015fa:    d16e        n.      BNE      0x16da ; _102221_readUpdateBinary + 270
        0x000015fc:    211f        .!      MOVS     r1,#0x1f
;;;79     		
;;;80     		DBG_FUNC("[102_221] _102221_readUpdateBinary: P1 is SFI and P2 work as offset\n");
;;;81     
;;;82     		/*p1 contains SFI*/
;;;83     		umbSfi = P1_BYTE & MASK_SFI;
;;;84     
;;;85     		DBG_FUNC("[102_221] _102221_readUpdateBinary: Check if SFI exists or not\n");
;;;86     
;;;87     		/*search for given SFI under current directory*/
;;;88     		_7816_4_ifFileExists(umbSfi, pccCurrentChannel->fhaCurrentDf, MODE_FIND_SFID, &fhaFile);
        0x000015fe:    4008        .@      ANDS     r0,r0,r1
        0x00001600:    493a        :I      LDR      r1,[pc,#232] ; [0x16ec] = 0x200006e8
        0x00001602:    6809        .h      LDR      r1,[r1,#0]
        0x00001604:    88c9        ..      LDRH     r1,[r1,#6]
        0x00001606:    2201        ."      MOVS     r2,#1
        0x00001608:    ac02        ..      ADD      r4,sp,#8
        0x0000160a:    4623        #F      MOV      r3,r4
        0x0000160c:    f001fd92    ....    BL       _7816_4_ifFileExists ; 0x3134
        0x00001610:    8820         .      LDRH     r0,[r4,#0]
;;;89     
;;;90     		/*P2 only contains offset*/
;;;91     		udbOffset = P2_BYTE;
        0x00001612:    78ec        .x      LDRB     r4,[r5,#3]
;;;92     
;;;93     	}
;;;94     	else { // Incorrect P1 value
;;;95     
;;;96     		/*Invalid P1-p2*/
;;;97     		DBG_ERR("[102_221] _102221_readUpdateBinary: Invalid P1 value '%1'\n", P1_BYTE);
;;;98     		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;99     		THROW(EXCEP_INCORRECT_DATAFIELD);
;;;100    	}
;;;101    
;;;102    	if (NO_FILE_PRESENT == fhaFile) { // if no file found with matched SFI
        0x00001614:    2800        .(      CMP      r0,#0
        0x00001616:    d041        A.      BEQ      0x169c ; _102221_readUpdateBinary + 208
;;;103    
;;;104    		/*Command not allowed, as no EF selected*/
;;;105    		DBG_ERR("[102_221] _102221_readUpdateBinary: No file exists or selected\n");
;;;106    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;107    		THROW(EXCEP_NO_FILE_SELECTED);
;;;108    	}
;;;109    
;;;110    	if (!(IS(TF, _7816_4_getFileDescriptor(fhaFile)))) // if its not transparent file
        0x00001618:    f001ff0c    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x0000161c:    2187        .!      MOVS     r1,#0x87
        0x0000161e:    4001        .@      ANDS     r1,r1,r0
        0x00001620:    2901        .)      CMP      r1,#1
        0x00001622:    d13f        ?.      BNE      0x16a4 ; _102221_readUpdateBinary + 216
        0x00001624:    a802        ..      ADD      r0,sp,#8
;;;111    	{
;;;112    		/*Invalid type of file, it must be transparent*/
;;;113    		DBG_ERR("[102_221] _102221_readUpdateBinary: Invalid file type: File is record structured\n");
;;;114    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;115    		THROW(EXCEP_INVALID_FILE_TYPE);
;;;116    	}
;;;117    
;;;118    	if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(fhaFile)) { // check if its deactivated
        0x00001626:    8800        ..      LDRH     r0,[r0,#0]
        0x00001628:    f001fff8    ....    BL       _7816_4_getLifeCycleStatus ; 0x361c
        0x0000162c:    2804        .(      CMP      r0,#4
        0x0000162e:    d03d        =.      BEQ      0x16ac ; _102221_readUpdateBinary + 224
;;;119    
;;;120    		DBG_WARN("[102_221] _102221_readUpdateBinary: File is deactivated\n");
;;;121    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;122    		THROW(EXCEP_REFERENCED_DATA_INVALIDATED);
;;;123    	}
;;;124    
;;;125    	if (INS_UPDATE_BINARY == INS_BYTE) { // check if its Update Binary command
        0x00001630:    7868        hx      LDRB     r0,[r5,#1]
        0x00001632:    38d6        .8      SUBS     r0,r0,#0xd6
        0x00001634:    4246        FB      RSBS     r6,r0,#0
        0x00001636:    4146        FA      ADCS     r6,r6,r0
;;;126    
;;;127    		DBG_FUNC("[102_221] _102221_readUpdateBinary: Its update operation\n");
;;;128    		/*Mode will be Update*/
;;;129    		amOperation = ACC_MODE_FILE_UPDATE;
;;;130    	}
;;;131    	else {
;;;132    		DBG_FUNC("[102_221] _102221_readUpdateBinary: Its Read operation\n");
;;;133    	}
;;;134    
;;;135    	if (0x00 == P3_BYTE) { // if P3 = 0x00 it means send response of 256 bytes
        0x00001638:    792d        -y      LDRB     r5,[r5,#4]
        0x0000163a:    2d00        .-      CMP      r5,#0
        0x0000163c:    d101        ..      BNE      0x1642 ; _102221_readUpdateBinary + 118
        0x0000163e:    2001        .       MOVS     r0,#1
        0x00001640:    0205        ..      LSLS     r5,r0,#8
        0x00001642:    a802        ..      ADD      r0,sp,#8
;;;136    		
;;;137    		DBG_FUNC("[102_221] _102221_readUpdateBinary: P3 is '00' hence it will be considered as 256 bytes\n");
;;;138    
;;;139    		/*If control is here it means command received is Read Binary, because Update Command on p3 00
;;;140    		* has already been handled in command router*/
;;;141    		/* Max response length in case p3 = 00 is 256 bytes as per ETSI 102221 Rel 15 Clause 10.1.6	*/
;;;142    		udbRequestedSize = MAX_RESPONSE_LEN;
;;;143    	}
;;;144    	else {//If p3 is non zero
;;;145    
;;;146    		/*copy p3 as it is*/
;;;147    		udbRequestedSize = P3_BYTE;
;;;148    	}
;;;149    	if (udbOffset >= _7816_4_getFileSize(fhaFile)) { //wrong parameter if the offset size is greater then the filesize
        0x00001644:    8800        ..      LDRH     r0,[r0,#0]
        0x00001646:    f001ff3b    ..;.    BL       _7816_4_getFileSize ; 0x34c0
        0x0000164a:    4284        .B      CMP      r4,r0
        0x0000164c:    d232        2.      BCS      0x16b4 ; _102221_readUpdateBinary + 232
        0x0000164e:    9401        ..      STR      r4,[sp,#4]
;;;150    		/*Invalid offset*/
;;;151    		DBG_ERR("[102_221] _102221_readUpdateBinary: Offset cannot be more than the file data limit/boundaries\n");
;;;152    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;153    		THROW(EXCEP_WRONG_P1_P2); 
;;;154    	}
;;;155    
;;;156    	/*Check if offset and requested size together are beyond file data*/
;;;157    	if ((udbOffset + udbRequestedSize) > _7816_4_getFileSize(fhaFile)) {
        0x00001650:    192c        ,.      ADDS     r4,r5,r4
        0x00001652:    af02        ..      ADD      r7,sp,#8
        0x00001654:    8838        8.      LDRH     r0,[r7,#0]
        0x00001656:    f001ff33    ..3.    BL       _7816_4_getFileSize ; 0x34c0
        0x0000165a:    883f        ?.      LDRH     r7,[r7,#0]
        0x0000165c:    4284        .B      CMP      r4,r0
        0x0000165e:    d82d        -.      BHI      0x16bc ; _102221_readUpdateBinary + 240
        0x00001660:    f002fa4e    ..N.    BL       _7186_4_getCardState ; 0x3b00
        0x00001664:    280f        .(      CMP      r0,#0xf
        0x00001666:    d309        ..      BCC      0x167c ; _102221_readUpdateBinary + 176
        0x00001668:    4638        8F      MOV      r0,r7
        0x0000166a:    4631        1F      MOV      r1,r6
        0x0000166c:    f002fa9a    ....    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x00001670:    28ff        .(      CMP      r0,#0xff
        0x00001672:    d02e        ..      BEQ      0x16d2 ; _102221_readUpdateBinary + 262
        0x00001674:    f002fe16    ....    BL       _7816_4_isKeyRefVerified ; 0x42a4
;;;158    
;;;159    		/*Invalid offset or P3*/
;;;160    		DBG_ERR("[102_221] _102221_readUpdateBinary: Offset and Requested length might be beyond the File data limit/boundaries\n");
;;;161    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;162    		THROW2(EXCEP_WRONG_P3, (_7816_4_getFileSize(fhaFile) - udbOffset) ); 
;;;163    	}
;;;164    	
;;;165    	DBG_FUNC("[102_221] _102221_readUpdateBinary: Checking access condition of File for given operation\n");
;;;166    
;;;167    	/*Check security condition*/
;;;168    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(amOperation, fhaFile))
        0x00001678:    2801        .(      CMP      r0,#1
        0x0000167a:    d02a        *.      BEQ      0x16d2 ; _102221_readUpdateBinary + 262
        0x0000167c:    a802        ..      ADD      r0,sp,#8
;;;169    	{
;;;170    		/*Security Condition not satisfied*/
;;;171    		DBG_ERR("[102_221] _102221_readUpdateBinary: Security conditions not satisfied\n");
;;;172    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;173    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;174    	}
;;;175    
;;;176    	/*Read/update file*/
;;;177    	_7816_4_readUpdateFile(fhaFile, COMMAND_RESPONSE_DATA, udbOffset, udbRequestedSize, amOperation);
        0x0000167e:    8800        ..      LDRH     r0,[r0,#0]
        0x00001680:    9600        ..      STR      r6,[sp,#0]
        0x00001682:    4c18        .L      LDR      r4,[pc,#96] ; [0x16e4] = 0x2000023e
        0x00001684:    1d61        a.      ADDS     r1,r4,#5
        0x00001686:    9a01        ..      LDR      r2,[sp,#4]
        0x00001688:    462b        +F      MOV      r3,r5
        0x0000168a:    f001fe2f    ../.    BL       _7816_4_readUpdateFile ; 0x32ec
;;;178    
;;;179    	if (INS_READ_BINARY == INS_BYTE) { // check if its Read Binary command
        0x0000168e:    7860        `x      LDRB     r0,[r4,#1]
        0x00001690:    28b0        .(      CMP      r0,#0xb0
        0x00001692:    d101        ..      BNE      0x1698 ; _102221_readUpdateBinary + 204
;;;180    		
;;;181    		DBG_FUNC("[102_221] _102221_readUpdateBinary: Setting response lenght '%2'\n", udbRequestedSize);
;;;182    
;;;183    		/*Set response length*/
;;;184    		gudbOutputLen = udbRequestedSize;
        0x00001694:    4816        .H      LDR      r0,[pc,#88] ; [0x16f0] = 0x2000023c
        0x00001696:    8005        ..      STRH     r5,[r0,#0]
;;;185    	}
;;;186    
;;;187    	DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;188    }
        0x00001698:    b003        ..      ADD      sp,sp,#0xc
        0x0000169a:    bdf0        ..      POP      {r4-r7,pc}
        0x0000169c:    4812        .H      LDR      r0,[pc,#72] ; [0x16e8] = 0x20000648
        0x0000169e:    210e        .!      MOVS     r1,#0xe
        0x000016a0:    f006f9c1    ....    BL       longjmp ; 0x7a26
        0x000016a4:    4810        .H      LDR      r0,[pc,#64] ; [0x16e8] = 0x20000648
        0x000016a6:    210f        .!      MOVS     r1,#0xf
        0x000016a8:    f006f9bd    ....    BL       longjmp ; 0x7a26
        0x000016ac:    480e        .H      LDR      r0,[pc,#56] ; [0x16e8] = 0x20000648
        0x000016ae:    2116        .!      MOVS     r1,#0x16
        0x000016b0:    f006f9b9    ....    BL       longjmp ; 0x7a26
        0x000016b4:    480c        .H      LDR      r0,[pc,#48] ; [0x16e8] = 0x20000648
        0x000016b6:    2106        .!      MOVS     r1,#6
        0x000016b8:    f006f9b5    ....    BL       longjmp ; 0x7a26
        0x000016bc:    4638        8F      MOV      r0,r7
        0x000016be:    f001feff    ....    BL       _7816_4_getFileSize ; 0x34c0
        0x000016c2:    9901        ..      LDR      r1,[sp,#4]
        0x000016c4:    1a40        @.      SUBS     r0,r0,r1
        0x000016c6:    4907        .I      LDR      r1,[pc,#28] ; [0x16e4] = 0x2000023e
        0x000016c8:    7108        .q      STRB     r0,[r1,#4]
        0x000016ca:    4807        .H      LDR      r0,[pc,#28] ; [0x16e8] = 0x20000648
        0x000016cc:    2107        .!      MOVS     r1,#7
        0x000016ce:    f006f9aa    ....    BL       longjmp ; 0x7a26
        0x000016d2:    4805        .H      LDR      r0,[pc,#20] ; [0x16e8] = 0x20000648
        0x000016d4:    2111        .!      MOVS     r1,#0x11
        0x000016d6:    f006f9a6    ....    BL       longjmp ; 0x7a26
        0x000016da:    4803        .H      LDR      r0,[pc,#12] ; [0x16e8] = 0x20000648
        0x000016dc:    2108        .!      MOVS     r1,#8
        0x000016de:    f006f9a2    ....    BL       longjmp ; 0x7a26
        0x000016e2:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.1_0
        0x000016e4:    2000023e    >..     DCD    536871486
    __arm_cp.1_1
        0x000016e8:    20000648    H..     DCD    536872520
    __arm_cp.1_2
        0x000016ec:    200006e8    ...     DCD    536872680
    __arm_cp.1_3
        0x000016f0:    2000023c    <..     DCD    536871484
    $t.2
    _102221_readUpdateRecord
;;;189    
;;;190    /*
;;;191    * It implements the UICC Read Record and Update Record command as per ETSI 102 221
;;;192    *
;;;193    */
;;;194    void _102221_readUpdateRecord(void) {
        0x000016f4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000016f6:    b083        ..      SUB      sp,sp,#0xc
;;;195    
;;;196    	uMonoByte		umbMode = SHIFT_RIGHT_BY_N_BITS((P2_BYTE & MASK_FILE_SELECTION),0x03);
        0x000016f8:    4d5e        ^M      LDR      r5,[pc,#376] ; [0x1874] = 0x2000023e
        0x000016fa:    78e8        .x      LDRB     r0,[r5,#3]
        0x000016fc:    08c0        ..      LSRS     r0,r0,#3
;;;197    	uMonoByte		umbRecLength;
;;;198    	uMonoByte		umbTemp;
;;;199    	uMonoByte		umbNoOfRecords;
;;;200    	uMonoByte		umbRecordNo;
;;;201    	tAccessMode		amMode = ACC_MODE_FILE_READ;
;;;202    	tFileHeaderAddr fhaFile;
;;;203    	
;;;204    	DBG_FUNC_ENTRY(">>[102_221] _102221_readUpdateRecord() \n");
;;;205    
;;;206    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking file selection mode from P2\n");
;;;207    
;;;208    	if (0x00 == umbMode) { // Currently selected EF
        0x000016fe:    d057        W.      BEQ      0x17b0 ; _102221_readUpdateRecord + 188
;;;209    
;;;210    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Command targetting currrently selected file\n");
;;;211    
;;;212    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Check if EF selected or not\n");
;;;213    		/*Set current file as target file*/
;;;214    		fhaFile = pccCurrentChannel->fhaCurrentEf;
;;;215    	}
;;;216    	else if (umbMode < 0x1F) {// range of SFI 01-30
        0x00001700:    281f        .(      CMP      r0,#0x1f
        0x00001702:    d100        ..      BNE      0x1706 ; _102221_readUpdateRecord + 18
        0x00001704:    e09c        ..      B        0x1840 ; _102221_readUpdateRecord + 332
;;;217    
;;;218    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Command targetting SFI present in P2\n");
;;;219    
;;;220    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking if SFI exists or not\n");
;;;221    
;;;222    		/*search for given SFI under current directory*/
;;;223    		_7816_4_ifFileExists(umbMode, pccCurrentChannel->fhaCurrentDf, MODE_FIND_SFID, &fhaFile);
        0x00001706:    495c        \I      LDR      r1,[pc,#368] ; [0x1878] = 0x200006e8
        0x00001708:    6809        .h      LDR      r1,[r1,#0]
        0x0000170a:    88c9        ..      LDRH     r1,[r1,#6]
        0x0000170c:    2201        ."      MOVS     r2,#1
        0x0000170e:    ac02        ..      ADD      r4,sp,#8
        0x00001710:    4623        #F      MOV      r3,r4
        0x00001712:    f001fd0f    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;224    
;;;225    	}
;;;226    	else { //invalid P2 value
;;;227    
;;;228    		DBG_ERR("[102_221] _102221_readUpdateRecord: Invalid P2 '%1'\n", P2_BYTE);
;;;229    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;230    		THROW(EXCEP_WRONG_P1_P2);
;;;231    	}
;;;232    
;;;233    	if (NO_FILE_PRESENT == fhaFile) { //If no file is there
        0x00001716:    8820         .      LDRH     r0,[r4,#0]
        0x00001718:    2800        .(      CMP      r0,#0
        0x0000171a:    d050        P.      BEQ      0x17be ; _102221_readUpdateRecord + 202
;;;234    
;;;235    		/*No file selected*/
;;;236    		DBG_ERR("[102_221] _102221_readUpdateRecord: No EF selected\n");
;;;237    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;238    		THROW(EXCEP_NO_FILE_SELECTED);
;;;239    	}
;;;240    
;;;241    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking Mode of operation \n");
;;;242    
;;;243    	/*Read/update operation mode*/
;;;244    	umbMode = P2_BYTE & MASK_OP_MODE;
        0x0000171c:    78e9        .x      LDRB     r1,[r5,#3]
        0x0000171e:    2707        .'      MOVS     r7,#7
        0x00001720:    400f        .@      ANDS     r7,r7,r1
;;;245    
;;;246    	if ((MODE_NEXT_RECORD > umbMode) || (umbMode > MODE_ABSOLUTE_RECORD)) { // invalid mode
        0x00001722:    1f79        y.      SUBS     r1,r7,#5
        0x00001724:    2203        ."      MOVS     r2,#3
        0x00001726:    43d2        .C      MVNS     r2,r2
        0x00001728:    4291        .B      CMP      r1,r2
        0x0000172a:    d800        ..      BHI      0x172e ; _102221_readUpdateRecord + 58
        0x0000172c:    e088        ..      B        0x1840 ; _102221_readUpdateRecord + 332
;;;247    
;;;248    		/*Wrong p1 p2*/
;;;249    		DBG_ERR("[102_221] _102221_readUpdateRecord: Invalid P2 '%1'\n", P2_BYTE);
;;;250    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;251    		THROW(EXCEP_WRONG_P1_P2);
;;;252    	}
;;;253    
;;;254    	/*store file descriptor byte*/
;;;255    	umbTemp = _7816_4_getFileDescriptor(fhaFile);
        0x0000172e:    f001fe81    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x00001732:    2487        .$      MOVS     r4,#0x87
;;;256    
;;;257    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking EF type\n");
;;;258    
;;;259    	if (IS(TF, umbTemp)) { // If file is Transparent, not Linear or Cyclic 
        0x00001734:    4004        .@      ANDS     r4,r4,r0
        0x00001736:    2c01        .,      CMP      r4,#1
        0x00001738:    d100        ..      BNE      0x173c ; _102221_readUpdateRecord + 72
        0x0000173a:    e085        ..      B        0x1848 ; _102221_readUpdateRecord + 340
        0x0000173c:    a802        ..      ADD      r0,sp,#8
;;;260    
;;;261    		/*Invalid file type*/
;;;262    		DBG_ERR("[102_221] _102221_readUpdateRecord: Invalid File type, it is Transparent\n");
;;;263    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;264    		THROW(EXCEP_INVALID_FILE_TYPE);
;;;265    	}
;;;266    
;;;267    	if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(fhaFile)) { // check if its deactivated
        0x0000173e:    8800        ..      LDRH     r0,[r0,#0]
        0x00001740:    f001ff6c    ..l.    BL       _7816_4_getLifeCycleStatus ; 0x361c
        0x00001744:    2804        .(      CMP      r0,#4
        0x00001746:    d100        ..      BNE      0x174a ; _102221_readUpdateRecord + 86
        0x00001748:    e082        ..      B        0x1850 ; _102221_readUpdateRecord + 348
        0x0000174a:    a802        ..      ADD      r0,sp,#8
;;;268    
;;;269    		DBG_WARN("[102_221] _102221_readUpdateRecord: File is deactivated\n");
;;;270    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;271    		THROW(EXCEP_REFERENCED_DATA_INVALIDATED);
;;;272    	}
;;;273    	
;;;274    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Its record file\n");
;;;275    
;;;276    	/*Save if its Cyclic*/
;;;277    	umbTemp = IS(CF, umbTemp);
;;;278    
;;;279    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking P3\n");
;;;280    
;;;281    	/*get record length*/
;;;282    	umbRecLength = _7816_4_getRecordLength(fhaFile);
        0x0000174c:    8800        ..      LDRH     r0,[r0,#0]
        0x0000174e:    f001fed1    ....    BL       _7816_4_getRecordLength ; 0x34f4
;;;283    
;;;284    	if (P3_BYTE != umbRecLength){ // if p3 is not equals to File's record length
        0x00001752:    7929        )y      LDRB     r1,[r5,#4]
        0x00001754:    9000        ..      STR      r0,[sp,#0]
        0x00001756:    4281        .B      CMP      r1,r0
        0x00001758:    d17e        ~.      BNE      0x1858 ; _102221_readUpdateRecord + 356
;;;285    
;;;286    		/*Invalid P3*/
;;;287    		DBG_ERR("[102_221] _102221_readUpdateRecord: P3 '%1' is not equal to Record length '%1'\n", P3_BYTE, umbRecLength);
;;;288    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;289    		THROW2(EXCEP_WRONG_P3,umbRecLength);
;;;290    	}
;;;291    
;;;292    	if (INS_BYTE == INS_UPDATE_RECORD) { // If command is Update Record
        0x0000175a:    7869        ix      LDRB     r1,[r5,#1]
        0x0000175c:    4608        .F      MOV      r0,r1
        0x0000175e:    38dc        .8      SUBS     r0,r0,#0xdc
        0x00001760:    4245        EB      RSBS     r5,r0,#0
        0x00001762:    4145        EA      ADCS     r5,r5,r0
;;;293    
;;;294    		/*Access operation is Update*/
;;;295    		amMode = ACC_MODE_FILE_UPDATE;
;;;296    
;;;297    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Its update operation\n");
;;;298    	}
;;;299    	else {
;;;300    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Its Read operation\n");
;;;301    	}
;;;302    
;;;303    	if(	(umbTemp)							// Cyclic file
;;;304    		&&									// AND
        0x00001764:    2c06        .,      CMP      r4,#6
        0x00001766:    d103        ..      BNE      0x1770 ; _102221_readUpdateRecord + 124
        0x00001768:    29dc        .)      CMP      r1,#0xdc
        0x0000176a:    d101        ..      BNE      0x1770 ; _102221_readUpdateRecord + 124
        0x0000176c:    2f03        ./      CMP      r7,#3
        0x0000176e:    d167        g.      BNE      0x1840 ; _102221_readUpdateRecord + 332
        0x00001770:    9101        ..      STR      r1,[sp,#4]
        0x00001772:    a802        ..      ADD      r0,sp,#8
;;;305    		(ACC_MODE_FILE_UPDATE == amMode)	// Update Record
;;;306    		&&									// AND
;;;307    		(MODE_PREVIOUS_RECORD != umbMode)){ //If its not Previous mode
;;;308    		
;;;309    		/*Cyclic file can only be updated in previous mode*/
;;;310    		DBG_ERR("[102_221] _102221_readUpdateRecord: Cyclic file can only be updated in Previous mode\n");
;;;311    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;312    		THROW(EXCEP_WRONG_P1_P2);
;;;313    	}
;;;314    
;;;315    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Check security conditions\n");
;;;316    
;;;317    	/*Check security condition*/
;;;318    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(amMode, fhaFile))
        0x00001774:    8806        ..      LDRH     r6,[r0,#0]
        0x00001776:    f002f9c3    ....    BL       _7186_4_getCardState ; 0x3b00
        0x0000177a:    280f        .(      CMP      r0,#0xf
        0x0000177c:    d309        ..      BCC      0x1792 ; _102221_readUpdateRecord + 158
        0x0000177e:    4630        0F      MOV      r0,r6
        0x00001780:    4629        )F      MOV      r1,r5
        0x00001782:    f002fa0f    ....    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x00001786:    28ff        .(      CMP      r0,#0xff
        0x00001788:    d06c        l.      BEQ      0x1864 ; _102221_readUpdateRecord + 368
        0x0000178a:    f002fd8b    ....    BL       _7816_4_isKeyRefVerified ; 0x42a4
        0x0000178e:    2801        .(      CMP      r0,#1
        0x00001790:    d068        h.      BEQ      0x1864 ; _102221_readUpdateRecord + 368
        0x00001792:    a802        ..      ADD      r0,sp,#8
;;;319    	{
;;;320    		/*Security Condition not satisfied*/
;;;321    		DBG_ERR("[102_221] _102221_readUpdateRecord: Security Condition not satisfied\n");
;;;322    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;323    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;324    	}
;;;325    
;;;326    	/*Get No. of records*/
;;;327    	umbNoOfRecords = _7816_4_getNoOfRecords(fhaFile);
        0x00001794:    8800        ..      LDRH     r0,[r0,#0]
        0x00001796:    f001fec7    ....    BL       _7816_4_getNoOfRecords ; 0x3528
;;;328    
;;;329    	if (MODE_ABSOLUTE_RECORD == umbMode) { // Read/update absolute/current record
        0x0000179a:    2f02        ./      CMP      r7,#2
        0x0000179c:    d013        ..      BEQ      0x17c6 ; _102221_readUpdateRecord + 210
        0x0000179e:    2f04        ./      CMP      r7,#4
        0x000017a0:    4b34        4K      LDR      r3,[pc,#208] ; [0x1874] = 0x2000023e
        0x000017a2:    d11c        ..      BNE      0x17de ; _102221_readUpdateRecord + 234
;;;330    
;;;331    		if (MODE_CURRENT_RECORD == P1_BYTE) { // Read/update current record
        0x000017a4:    789a        .x      LDRB     r2,[r3,#2]
        0x000017a6:    2a00        .*      CMP      r2,#0
        0x000017a8:    d024        $.      BEQ      0x17f4 ; _102221_readUpdateRecord + 256
;;;332    
;;;333    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Current record\n");
;;;334    
;;;335    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) { // Record pointer is undefined
;;;336    				
;;;337    				DBG_ERR("[102_221] _102221_readUpdateRecord: Record cannot be undefined in current mode\n");
;;;338    				DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;339    
;;;340    				THROW(EXCEP_RECORD_NOT_FOUND);
;;;341    			}
;;;342    
;;;343    			/*Store record no*/
;;;344    			umbRecordNo = pccCurrentChannel->umbCurrentRecPtr;
;;;345    
;;;346    		}
;;;347    		else if(umbNoOfRecords < P1_BYTE) { // record no. in command is incorrect
        0x000017aa:    4290        .B      CMP      r0,r2
        0x000017ac:    d227        '.      BCS      0x17fe ; _102221_readUpdateRecord + 266
        0x000017ae:    e05d        ].      B        0x186c ; _102221_readUpdateRecord + 376
        0x000017b0:    4831        1H      LDR      r0,[pc,#196] ; [0x1878] = 0x200006e8
        0x000017b2:    6800        .h      LDR      r0,[r0,#0]
        0x000017b4:    8900        ..      LDRH     r0,[r0,#8]
        0x000017b6:    a902        ..      ADD      r1,sp,#8
        0x000017b8:    8008        ..      STRH     r0,[r1,#0]
        0x000017ba:    2800        .(      CMP      r0,#0
        0x000017bc:    d1ae        ..      BNE      0x171c ; _102221_readUpdateRecord + 40
        0x000017be:    482f        /H      LDR      r0,[pc,#188] ; [0x187c] = 0x20000648
        0x000017c0:    210e        .!      MOVS     r1,#0xe
        0x000017c2:    f006f930    ..0.    BL       longjmp ; 0x7a26
;;;348    
;;;349    			DBG_ERR("[102_221] _102221_readUpdateRecord: Record no. '%1' is more than total no. of records '%1'\n", P1_BYTE, umbNoOfRecords);
;;;350    			DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;351    			THROW(EXCEP_RECORD_NOT_FOUND);
;;;352    		}
;;;353    		else {
;;;354    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Absolute record\n");
;;;355    
;;;356    			/*Store record no*/
;;;357    			umbRecordNo = P1_BYTE;
;;;358    		}
;;;359    
;;;360    		/*Read/Update record*/
;;;361    		_7816_4_readUpdateRecordFile(fhaFile, COMMAND_RESPONSE_DATA, umbRecordNo, amMode);
;;;362    	}
;;;363    	else { // Next/previous
;;;364    		if (MODE_NEXT_RECORD == umbMode) { // Read/Update  Next record
;;;365    
;;;366    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Next record\n");
;;;367    
;;;368    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) { // Record is undefined
        0x000017c6:    492c        ,I      LDR      r1,[pc,#176] ; [0x1878] = 0x200006e8
        0x000017c8:    6809        .h      LDR      r1,[r1,#0]
        0x000017ca:    7809        .x      LDRB     r1,[r1,#0]
        0x000017cc:    2201        ."      MOVS     r2,#1
        0x000017ce:    2900        .)      CMP      r1,#0
        0x000017d0:    4b28        (K      LDR      r3,[pc,#160] ; [0x1874] = 0x2000023e
        0x000017d2:    d023        #.      BEQ      0x181c ; _102221_readUpdateRecord + 296
;;;369    				/*Record no.*/
;;;370    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Record undefined, so operation will be done on first record\n");
;;;371    				umbRecordNo = RECORD_FIRST;
;;;372    			}
;;;373    			else if (pccCurrentChannel->umbCurrentRecPtr == umbNoOfRecords) {
        0x000017d4:    4281        .B      CMP      r1,r0
        0x000017d6:    d120         .      BNE      0x181a ; _102221_readUpdateRecord + 294
;;;374    
;;;375    				if (umbTemp) { //Cyclic file
        0x000017d8:    2c06        .,      CMP      r4,#6
        0x000017da:    d01f        ..      BEQ      0x181c ; _102221_readUpdateRecord + 296
        0x000017dc:    e046        F.      B        0x186c ; _102221_readUpdateRecord + 376
;;;376    
;;;377    					DBG_FUNC("[102_221] _102221_readUpdateRecord: Cyclic File: Record pointer is set on Last record, so operation will be done on first record\n");
;;;378    					/*in cyclic file last record logically connected to first record, hence next record is first*/
;;;379    					umbRecordNo = RECORD_FIRST;
;;;380    				}
;;;381    				else {// Linear file
;;;382    					DBG_ERR("[102_221] _102221_readUpdateRecord: Linear fixed: It cannot proceed to next record, because Record pointer is at the last record\n");
;;;383    					DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;384    					THROW(EXCEP_RECORD_NOT_FOUND);
;;;385    				}
;;;386    			}
;;;387    			else {
;;;388    				/*Increment Record no*/
;;;389    				umbRecordNo = pccCurrentChannel->umbCurrentRecPtr + 1;
;;;390    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Next record to current record i.e. '%1'\n", umbRecordNo);
;;;391    			}
;;;392    
;;;393    		}
;;;394    		else { //Read/update previous record
;;;395    
;;;396    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Previous record\n");
;;;397    
;;;398    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) {
        0x000017de:    4926        &I      LDR      r1,[pc,#152] ; [0x1878] = 0x200006e8
        0x000017e0:    6809        .h      LDR      r1,[r1,#0]
        0x000017e2:    7809        .x      LDRB     r1,[r1,#0]
        0x000017e4:    2900        .)      CMP      r1,#0
        0x000017e6:    d014        ..      BEQ      0x1812 ; _102221_readUpdateRecord + 286
        0x000017e8:    2901        .)      CMP      r1,#1
        0x000017ea:    d114        ..      BNE      0x1816 ; _102221_readUpdateRecord + 290
;;;399    
;;;400    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Record is undefined, so operation will be done Last record\n");
;;;401    				/*Set last Record no.*/
;;;402    				umbRecordNo = umbNoOfRecords;
;;;403    			}
;;;404    			else if (pccCurrentChannel->umbCurrentRecPtr == RECORD_FIRST) {
;;;405    
;;;406    				if (umbTemp) {//cyclic
        0x000017ec:    2c06        .,      CMP      r4,#6
        0x000017ee:    4602        .F      MOV      r2,r0
        0x000017f0:    d014        ..      BEQ      0x181c ; _102221_readUpdateRecord + 296
        0x000017f2:    e03b        ;.      B        0x186c ; _102221_readUpdateRecord + 376
        0x000017f4:    4820         H      LDR      r0,[pc,#128] ; [0x1878] = 0x200006e8
        0x000017f6:    6800        .h      LDR      r0,[r0,#0]
        0x000017f8:    7802        .x      LDRB     r2,[r0,#0]
        0x000017fa:    2a00        .*      CMP      r2,#0
        0x000017fc:    d036        6.      BEQ      0x186c ; _102221_readUpdateRecord + 376
        0x000017fe:    a802        ..      ADD      r0,sp,#8
        0x00001800:    8800        ..      LDRH     r0,[r0,#0]
        0x00001802:    1d59        Y.      ADDS     r1,r3,#5
        0x00001804:    462b        +F      MOV      r3,r5
        0x00001806:    f001fcf1    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;407    
;;;408    					DBG_FUNC("[102_221] _102221_readUpdateRecord: Cyclic File: Record pointer is at first record, so operation will be done on Last record\n");
;;;409    					/*in cyclic file first record logically connected to last record, hence previous record is last*/
;;;410    					umbRecordNo = umbNoOfRecords;
;;;411    				}
;;;412    				else { //Linear
;;;413    					DBG_ERR("[102_221] _102221_readUpdateRecord: Linear Fixed: It cannot proceed to previous record, because Record pointer is at the first record\n");
;;;414    					DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;415    					THROW(EXCEP_RECORD_NOT_FOUND);
;;;416    				}
;;;417    			}
;;;418    			else {
;;;419    
;;;420    				/*Decrement Record no*/
;;;421    				umbRecordNo = pccCurrentChannel->umbCurrentRecPtr - 1;
;;;422    
;;;423    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Previous record to current one i.e. '%1'\n", umbRecordNo);
;;;424    			}
;;;425    		}
;;;426    
;;;427    		/*Read/update file and save last*/
;;;428    		pccCurrentChannel->umbCurrentRecPtr = _7816_4_readUpdateRecordFile(fhaFile, COMMAND_RESPONSE_DATA, umbRecordNo, amMode);
;;;429    
;;;430    	}
;;;431    
;;;432    	if (ACC_MODE_FILE_READ == amMode) { //Check if its read operation
        0x0000180a:    9801        ..      LDR      r0,[sp,#4]
        0x0000180c:    28dc        .(      CMP      r0,#0xdc
        0x0000180e:    d015        ..      BEQ      0x183c ; _102221_readUpdateRecord + 328
        0x00001810:    e011        ..      B        0x1836 ; _102221_readUpdateRecord + 322
        0x00001812:    4602        .F      MOV      r2,r0
        0x00001814:    e002        ..      B        0x181c ; _102221_readUpdateRecord + 296
        0x00001816:    1e4a        J.      SUBS     r2,r1,#1
        0x00001818:    e000        ..      B        0x181c ; _102221_readUpdateRecord + 296
        0x0000181a:    1c4a        J.      ADDS     r2,r1,#1
        0x0000181c:    a802        ..      ADD      r0,sp,#8
        0x0000181e:    8800        ..      LDRH     r0,[r0,#0]
        0x00001820:    1d59        Y.      ADDS     r1,r3,#5
        0x00001822:    b2d2        ..      UXTB     r2,r2
        0x00001824:    462b        +F      MOV      r3,r5
        0x00001826:    f001fce1    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
        0x0000182a:    4913        .I      LDR      r1,[pc,#76] ; [0x1878] = 0x200006e8
        0x0000182c:    6809        .h      LDR      r1,[r1,#0]
        0x0000182e:    7008        .p      STRB     r0,[r1,#0]
        0x00001830:    9801        ..      LDR      r0,[sp,#4]
        0x00001832:    28dc        .(      CMP      r0,#0xdc
        0x00001834:    d002        ..      BEQ      0x183c ; _102221_readUpdateRecord + 328
;;;433    
;;;434    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Set Luicc i.e. Prepared response length '%1'\n", umbRecLength);
;;;435    		/*set luicc i.e. prepared response length*/
;;;436    		gudbOutputLen = umbRecLength;
        0x00001836:    4812        .H      LDR      r0,[pc,#72] ; [0x1880] = 0x2000023c
        0x00001838:    9900        ..      LDR      r1,[sp,#0]
        0x0000183a:    8001        ..      STRH     r1,[r0,#0]
;;;437    	}
;;;438    
;;;439    
;;;440    	DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;441    }
        0x0000183c:    b003        ..      ADD      sp,sp,#0xc
        0x0000183e:    bdf0        ..      POP      {r4-r7,pc}
        0x00001840:    480e        .H      LDR      r0,[pc,#56] ; [0x187c] = 0x20000648
        0x00001842:    2106        .!      MOVS     r1,#6
        0x00001844:    f006f8ef    ....    BL       longjmp ; 0x7a26
        0x00001848:    480c        .H      LDR      r0,[pc,#48] ; [0x187c] = 0x20000648
        0x0000184a:    210f        .!      MOVS     r1,#0xf
        0x0000184c:    f006f8eb    ....    BL       longjmp ; 0x7a26
        0x00001850:    480a        .H      LDR      r0,[pc,#40] ; [0x187c] = 0x20000648
        0x00001852:    2116        .!      MOVS     r1,#0x16
        0x00001854:    f006f8e7    ....    BL       longjmp ; 0x7a26
        0x00001858:    9800        ..      LDR      r0,[sp,#0]
        0x0000185a:    7128        (q      STRB     r0,[r5,#4]
        0x0000185c:    4807        .H      LDR      r0,[pc,#28] ; [0x187c] = 0x20000648
        0x0000185e:    2107        .!      MOVS     r1,#7
        0x00001860:    f006f8e1    ....    BL       longjmp ; 0x7a26
        0x00001864:    4805        .H      LDR      r0,[pc,#20] ; [0x187c] = 0x20000648
        0x00001866:    2111        .!      MOVS     r1,#0x11
        0x00001868:    f006f8dd    ....    BL       longjmp ; 0x7a26
        0x0000186c:    4803        .H      LDR      r0,[pc,#12] ; [0x187c] = 0x20000648
        0x0000186e:    2112        .!      MOVS     r1,#0x12
        0x00001870:    f006f8d9    ....    BL       longjmp ; 0x7a26
    $d.3
    __arm_cp.2_0
        0x00001874:    2000023e    >..     DCD    536871486
    __arm_cp.2_1
        0x00001878:    200006e8    ...     DCD    536872680
    __arm_cp.2_2
        0x0000187c:    20000648    H..     DCD    536872520
    __arm_cp.2_3
        0x00001880:    2000023c    <..     DCD    536871484
    $t.4
    _102221_deactivateActivateFile
;;;442    
;;;443    /*
;;;444    * It implements the UICC Deactivate and Activate command as per ETSI 102 221
;;;445    *
;;;446    */
;;;447    void _102221_deactivateActivateFile(void) {
        0x00001884:    b570        p.      PUSH     {r4-r6,lr}
        0x00001886:    b082        ..      SUB      sp,sp,#8
;;;448    
;;;449    	tFileHeaderAddr fhaFile;
;;;450    	tFileLCSI		flState;
;;;451    	tAccessMode		amMode;
;;;452    	
;;;453    	
;;;454    	DBG_FUNC_ENTRY(">>[102_221] _102221_deactivateActivateFile() \n");
;;;455    
;;;456    	/*Validation of P2*/
;;;457    	if (P2_BYTE != 0x00)
        0x00001888:    4e44        DN      LDR      r6,[pc,#272] ; [0x199c] = 0x2000023e
        0x0000188a:    78f0        .x      LDRB     r0,[r6,#3]
        0x0000188c:    2800        .(      CMP      r0,#0
        0x0000188e:    d174        t.      BNE      0x197a ; _102221_deactivateActivateFile + 246
;;;458    	{
;;;459    		/*P2 must be 00*/
;;;460    		DBG_ERR("[102_221] _102221_deactivateActivateFile: Invalid value of P2 \n");
;;;461    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;462    		THROW(EXCEP_WRONG_P1_P2);
;;;463    	}
;;;464    
;;;465    	/*Validation of P1*/
;;;466    	if (P1_SELECT_BY_FILE_ID == P1_BYTE)
        0x00001890:    78b0        .x      LDRB     r0,[r6,#2]
        0x00001892:    4601        .F      MOV      r1,r0
        0x00001894:    3908        .9      SUBS     r1,r1,#8
        0x00001896:    2902        .)      CMP      r1,#2
        0x00001898:    d20b        ..      BCS      0x18b2 ; _102221_deactivateActivateFile + 46
        0x0000189a:    7932        2y      LDRB     r2,[r6,#4]
        0x0000189c:    2a00        .*      CMP      r2,#0
        0x0000189e:    d074        t.      BEQ      0x198a ; _102221_deactivateActivateFile + 262
        0x000018a0:    2101        .!      MOVS     r1,#1
        0x000018a2:    4011        .@      ANDS     r1,r1,r2
        0x000018a4:    d171        q.      BNE      0x198a ; _102221_deactivateActivateFile + 262
        0x000018a6:    2808        .(      CMP      r0,#8
        0x000018a8:    d119        ..      BNE      0x18de ; _102221_deactivateActivateFile + 90
        0x000018aa:    f001fb83    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x000018ae:    7932        2y      LDRB     r2,[r6,#4]
        0x000018b0:    e018        ..      B        0x18e4 ; _102221_deactivateActivateFile + 96
        0x000018b2:    2800        .(      CMP      r0,#0
        0x000018b4:    d15d        ].      BNE      0x1972 ; _102221_deactivateActivateFile + 238
;;;467    	{
;;;468    
;;;469    		if (LENGTH_FILE_ID == P3_BYTE) {
        0x000018b6:    7930        0y      LDRB     r0,[r6,#4]
        0x000018b8:    2800        .(      CMP      r0,#0
        0x000018ba:    d04f        O.      BEQ      0x195c ; _102221_deactivateActivateFile + 216
        0x000018bc:    2802        .(      CMP      r0,#2
        0x000018be:    d164        d.      BNE      0x198a ; _102221_deactivateActivateFile + 262
;;;470    
;;;471    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Target file is in Command data\n");
;;;472    			
;;;473    			/*Search File ID give in command data*/
;;;474    			_7816_4_ifFileExists(mm_makeUdiByte(COMMAND_DATA, 0x00), pccCurrentChannel->fhaCurrentDf, MODE_FIND_FID, &fhaFile);
        0x000018c0:    1d70        p.      ADDS     r0,r6,#5
        0x000018c2:    2400        .$      MOVS     r4,#0
        0x000018c4:    4621        !F      MOV      r1,r4
        0x000018c6:    f7fffc6d    ..m.    BL       mm_makeUdiByte ; 0x11a4
        0x000018ca:    4936        6I      LDR      r1,[pc,#216] ; [0x19a4] = 0x200006e8
        0x000018cc:    6809        .h      LDR      r1,[r1,#0]
        0x000018ce:    88c9        ..      LDRH     r1,[r1,#6]
        0x000018d0:    ad01        ..      ADD      r5,sp,#4
        0x000018d2:    4622        "F      MOV      r2,r4
        0x000018d4:    462b        +F      MOV      r3,r5
        0x000018d6:    f001fc2d    ..-.    BL       _7816_4_ifFileExists ; 0x3134
        0x000018da:    8828        (.      LDRH     r0,[r5,#0]
        0x000018dc:    e007        ..      B        0x18ee ; _102221_deactivateActivateFile + 106
;;;475    		}
;;;476    		else if (0x00 == P3_BYTE) {
;;;477    
;;;478    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Target file is Currently selected\n");
;;;479    			fhaFile = pccCurrentChannel->fhaCurrentEf;
;;;480    
;;;481    			if (NO_FILE_PRESENT == fhaFile) { // no file
;;;482    											  /*EF needs to be selected*/
;;;483    				DBG_ERR("[102_221] _102221_deactivateActivateFile: EF not selected \n");
;;;484    				DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;485    				THROW(EXCEP_NO_FILE_SELECTED);
;;;486    			}
;;;487    		}
;;;488    		else { // P3 other than 00 or 02
;;;489    			
;;;490    			/*Wrong P3*/
;;;491    			DBG_ERR("[102_221] _102221_deactivateActivateFile: Invalid P3\n");
;;;492    			DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;493    			THROW(EXCEP_WRONG_P3);
;;;494    		}
;;;495    		
;;;496    	}
;;;497    	/*Validation of P1*/
;;;498    	/*if P1 is 08 or 09*/
;;;499    	else if (	(P1_BYTE == P1_SELECT_BY_PATH_MF)
;;;500    				||
;;;501    				(P1_BYTE == P1_SELECT_BY_PATH_CURRENT_DF))
;;;502    	{
;;;503    		/*P3 byte would not be 00 in case of select by path*/
;;;504    
;;;505    		if ((0x00 == P3_BYTE)
;;;506    			||
;;;507    			(0x00 != (P3_BYTE % LENGTH_FILE_ID)))
;;;508    		{
;;;509    			DBG_ERR("[102_221] _102221_deactivateActivateFile: Invalid P3\n");
;;;510    			DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;511    			THROW(EXCEP_WRONG_P3);
;;;512    		}
;;;513    
;;;514    		DBG_FUNC("[102_221] _102221_deactivateActivateFile: Valid path length\n");
;;;515    		//Try to Select File Id, Select By path
;;;516    		if (P1_BYTE == P1_SELECT_BY_PATH_MF)
;;;517    		{
;;;518    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Selecting requested file from MF 3F00\n");
;;;519    			/*Current DF would be MF*/
;;;520    			fhaFile = _102221_selectByPath(_7816_4_getMfAddress(), COMMAND_DATA, P3_BYTE);
;;;521    		}
;;;522    		else
;;;523    		{
;;;524    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Selecting requested file from currently selected DF\n");
;;;525    			/* Select the fileID from currently selected DF*/
;;;526    			fhaFile = _102221_selectByPath(pccCurrentChannel->fhaCurrentDf, COMMAND_DATA, P3_BYTE);
        0x000018de:    4831        1H      LDR      r0,[pc,#196] ; [0x19a4] = 0x200006e8
        0x000018e0:    6800        .h      LDR      r0,[r0,#0]
        0x000018e2:    88c0        ..      LDRH     r0,[r0,#6]
        0x000018e4:    1d71        q.      ADDS     r1,r6,#5
        0x000018e6:    f000fc67    ..g.    BL       _102221_selectByPath ; 0x21b8
        0x000018ea:    a901        ..      ADD      r1,sp,#4
        0x000018ec:    8008        ..      STRH     r0,[r1,#0]
;;;527    		}
;;;528    
;;;529    
;;;530    	}
;;;531    	if (NO_FILE_PRESENT == fhaFile) { // no file
        0x000018ee:    2800        .(      CMP      r0,#0
        0x000018f0:    d03f        ?.      BEQ      0x1972 ; _102221_deactivateActivateFile + 238
;;;532    									  /*File doesnt exist under current DF*/
;;;533    		DBG_ERR("[102_221] _102221_deactivateActivateFile: File not found \n");
;;;534    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;535    		THROW(EXCEP_FILE_NOT_FOUND);
;;;536    	}
;;;537    	//check if the file is DF//
;;;538    	/*if MF or DF is selected for activation or deactivation Send errors*/
;;;539    	 else if (IS(DF, _7816_4_getFileDescriptor(fhaFile))) 
        0x000018f2:    f001fd9f    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x000018f6:    21bf        .!      MOVS     r1,#0xbf
        0x000018f8:    4001        .@      ANDS     r1,r1,r0
        0x000018fa:    2938        8)      CMP      r1,#0x38
        0x000018fc:    d035        5.      BEQ      0x196a ; _102221_deactivateActivateFile + 230
;;;540    	 { 
;;;541    		DBG_ERR("[102_221] _102221_deactivateActivateFile: EF needs to be selected/targeted to Deactivate or Activate \n");
;;;542    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;543    		THROW(EXCEP_NO_FILE_SELECTED);
;;;544    	}
;;;545    	
;;;546    
;;;547    	if (INS_BYTE == INS_DEACTIVATE_FILE) { // Deactivate file command
        0x000018fe:    7870        px      LDRB     r0,[r6,#1]
        0x00001900:    2804        .(      CMP      r0,#4
        0x00001902:    d108        ..      BNE      0x1916 ; _102221_deactivateActivateFile + 146
        0x00001904:    a801        ..      ADD      r0,sp,#4
;;;548    
;;;549    		DBG_FUNC("[102_221] _102221_deactivateActivateFile: Command for deactivating the file\n");
;;;550    
;;;551    		/*Store Deactivate related info. for further operation*/
;;;552    		flState = LCSI_DEACTIVATED;
;;;553    		amMode = ACC_MODE_FILE_DEACTIVATE;
;;;554    
;;;555    		if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(fhaFile)) { // check if its already deactivated
        0x00001906:    8800        ..      LDRH     r0,[r0,#0]
        0x00001908:    f001fe88    ....    BL       _7816_4_getLifeCycleStatus ; 0x361c
        0x0000190c:    2804        .(      CMP      r0,#4
        0x0000190e:    d040        @.      BEQ      0x1992 ; _102221_deactivateActivateFile + 270
        0x00001910:    2503        .%      MOVS     r5,#3
        0x00001912:    2404        .$      MOVS     r4,#4
        0x00001914:    e001        ..      B        0x191a ; _102221_deactivateActivateFile + 150
        0x00001916:    2504        .%      MOVS     r5,#4
        0x00001918:    2405        .$      MOVS     r4,#5
        0x0000191a:    a801        ..      ADD      r0,sp,#4
;;;556    
;;;557    			DBG_WARN("[102_221] _102221_deactivateActivateFile: File is already in deactivated state\n");
;;;558    			DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;559    			THROW(EXCEP_FILE_ALREADY_DEACTIVATED); 
;;;560    		}
;;;561    	}
;;;562    	else { //Activate file command
;;;563    
;;;564    		DBG_FUNC("[102_221] _102221_deactivateActivateFile: Command for Activating the file\n");
;;;565    
;;;566    		/*Store Activate related info. for further operation*/
;;;567    		flState = LCSI_ACTIVATED;
;;;568    		amMode = ACC_MODE_FILE_ACTIVATE;
;;;569    	}
;;;570    
;;;571    	/*Check for security conditions*/
;;;572    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(amMode,fhaFile)) {
        0x0000191c:    8806        ..      LDRH     r6,[r0,#0]
        0x0000191e:    f002f8ef    ....    BL       _7186_4_getCardState ; 0x3b00
        0x00001922:    280f        .(      CMP      r0,#0xf
        0x00001924:    d309        ..      BCC      0x193a ; _102221_deactivateActivateFile + 182
        0x00001926:    4630        0F      MOV      r0,r6
        0x00001928:    4629        )F      MOV      r1,r5
        0x0000192a:    f002f93b    ..;.    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x0000192e:    28ff        .(      CMP      r0,#0xff
        0x00001930:    d027        '.      BEQ      0x1982 ; _102221_deactivateActivateFile + 254
        0x00001932:    f002fcb7    ....    BL       _7816_4_isKeyRefVerified ; 0x42a4
        0x00001936:    2801        .(      CMP      r0,#1
        0x00001938:    d023        #.      BEQ      0x1982 ; _102221_deactivateActivateFile + 254
        0x0000193a:    ad01        ..      ADD      r5,sp,#4
;;;573    		/*Security Condition not satisfied*/
;;;574    		DBG_ERR("[102_221] _102221_deactivateActivateFile: Security Condition not satisfied\n");
;;;575    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;576    		THROW(EXCEP_SECURITY_NOT_SATISFIED); // Security conditions not verified
;;;577    	}
;;;578    
;;;579    	/*Set life cycle status*/
;;;580    	_7816_4_setLifeCycleStatus(fhaFile, flState);
        0x0000193c:    8828        (.      LDRH     r0,[r5,#0]
        0x0000193e:    4621        !F      MOV      r1,r4
        0x00001940:    f001fe46    ..F.    BL       _7816_4_setLifeCycleStatus ; 0x35d0
;;;581    
;;;582    	/*set file as currently selected*/
;;;583    	pccCurrentChannel->fhaCurrentEf = fhaFile;
        0x00001944:    4c17        .L      LDR      r4,[pc,#92] ; [0x19a4] = 0x200006e8
        0x00001946:    6821        !h      LDR      r1,[r4,#0]
        0x00001948:    8828        (.      LDRH     r0,[r5,#0]
        0x0000194a:    8108        ..      STRH     r0,[r1,#8]
;;;584    
;;;585    	/*Set selected file's parent as current DF*/
;;;586    	pccCurrentChannel->fhaCurrentDf = _7816_4_getParentFile(fhaFile);
        0x0000194c:    f002f8a4    ....    BL       _7816_4_getParentFile ; 0x3a98
        0x00001950:    6821        !h      LDR      r1,[r4,#0]
        0x00001952:    80c8        ..      STRH     r0,[r1,#6]
        0x00001954:    2000        .       MOVS     r0,#0
;;;587    
;;;588    	/*Reset the record pointer*/
;;;589    	pccCurrentChannel->umbCurrentRecPtr = RECORD_UNDEFINED;
        0x00001956:    7008        .p      STRB     r0,[r1,#0]
;;;590    	
;;;591    	DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;592    }
        0x00001958:    b002        ..      ADD      sp,sp,#8
        0x0000195a:    bd70        p.      POP      {r4-r6,pc}
        0x0000195c:    4811        .H      LDR      r0,[pc,#68] ; [0x19a4] = 0x200006e8
        0x0000195e:    6800        .h      LDR      r0,[r0,#0]
        0x00001960:    8900        ..      LDRH     r0,[r0,#8]
        0x00001962:    a901        ..      ADD      r1,sp,#4
        0x00001964:    8008        ..      STRH     r0,[r1,#0]
        0x00001966:    2800        .(      CMP      r0,#0
        0x00001968:    d1c3        ..      BNE      0x18f2 ; _102221_deactivateActivateFile + 110
        0x0000196a:    480d        .H      LDR      r0,[pc,#52] ; [0x19a0] = 0x20000648
        0x0000196c:    210e        .!      MOVS     r1,#0xe
        0x0000196e:    f006f85a    ..Z.    BL       longjmp ; 0x7a26
        0x00001972:    480b        .H      LDR      r0,[pc,#44] ; [0x19a0] = 0x20000648
        0x00001974:    210d        .!      MOVS     r1,#0xd
        0x00001976:    f006f856    ..V.    BL       longjmp ; 0x7a26
        0x0000197a:    4809        .H      LDR      r0,[pc,#36] ; [0x19a0] = 0x20000648
        0x0000197c:    2106        .!      MOVS     r1,#6
        0x0000197e:    f006f852    ..R.    BL       longjmp ; 0x7a26
        0x00001982:    4807        .H      LDR      r0,[pc,#28] ; [0x19a0] = 0x20000648
        0x00001984:    2111        .!      MOVS     r1,#0x11
        0x00001986:    f006f84e    ..N.    BL       longjmp ; 0x7a26
        0x0000198a:    4805        .H      LDR      r0,[pc,#20] ; [0x19a0] = 0x20000648
        0x0000198c:    2107        .!      MOVS     r1,#7
        0x0000198e:    f006f84a    ..J.    BL       longjmp ; 0x7a26
        0x00001992:    4803        .H      LDR      r0,[pc,#12] ; [0x19a0] = 0x20000648
        0x00001994:    2113        .!      MOVS     r1,#0x13
        0x00001996:    f006f846    ..F.    BL       longjmp ; 0x7a26
        0x0000199a:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.3_0
        0x0000199c:    2000023e    >..     DCD    536871486
    __arm_cp.3_1
        0x000019a0:    20000648    H..     DCD    536872520
    __arm_cp.3_2
        0x000019a4:    200006e8    ...     DCD    536872680
    $t.6
    _102221_increase
;;;593    /*
;;;594    * It implements the Increase command as per ETSI 102 221
;;;595    *
;;;596    */
;;;597    void _102221_increase(void) {
        0x000019a8:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000019aa:    b087        ..      SUB      sp,sp,#0x1c
        0x000019ac:    4fb2        .O      LDR      r7,[pc,#712] ; [0x1c78] = 0x2000023e
        0x000019ae:    78f8        .x      LDRB     r0,[r7,#3]
        0x000019b0:    2800        .(      CMP      r0,#0
        0x000019b2:    d000        ..      BEQ      0x19b6 ; _102221_increase + 14
        0x000019b4:    e14a        J.      B        0x1c4c ; _102221_increase + 676
;;; Core/102_221/source\FileHandlingCommands.c
        0x000019b6:    2004        .       MOVS     r0,#4
;;;1      #include "102_221.h"
;;;2      
;;;3      /*
;;;4      * Macro defines
;;;5      */
;;;6      #define MAX_CMD_LENGTH_FOR_INCREASE										(0x7f)
;;;7      
;;;8      #define SEARCH_INDEX_OF_OFFSET_OR_VALUE									(0x01)
;;;9      #define SEARCH_INDEX_OF_INDICATION										(0x00)
;;;10     #define LENGTH_SEARCH_INDICATION										(0x02)
;;;11     
;;;12     /*
;;;13     * It verifies the security condition for given operation on given file
;;;14     * 
;;;15     * @param amOperationMode: Read/Update/Increase/Invalidate/Deactivate 
;;;16     * @param fhaFile: File header address of target file
;;;17     */
;;;18      tAccessResult  _102221_verifyAccessCondition(IN_ARG tAccessMode amOperation, IN_ARG tFileHeaderAddr fhaFile) {
;;;19     
;;;20     	uMonoByte		umbStatus = ACC_NOT_VERIFIED;
;;;21     	DBG_FUNC_ENTRY(">>[102_221] _102221_verifyAccessCondition()\n");
;;;22     
;;;23     	if (STATE_SECURED > _7186_4_getCardState()) { // If card is in Production state: OP_READY and INITIALIZED
;;;24     
;;;25     		/*Card is in personalization state*/
;;;26     		DBG_FUNC("[102_221] _102221_verifyAccessCondition: Card in Production state\n");
;;;27     		DBG_FUNC_EXIT("<<[102_221] _102221_verifyAccessCondition() returns ACC_VERIFIED %1\n", ACC_VERIFIED);
;;;28     		return ACC_VERIFIED;
;;;29     	}
;;;30     	
;;;31     	DBG_FUNC("[102_221] _102221_verifyAccessCondition: Card in Secured state\n");
;;;32     
;;;33     	DBG_FUNC("[102_221] _102221_verifyAccessCondition: Extract security condition\n");
;;;34     
;;;35     	/*get security condition i.e. PIN_** */
;;;36     	umbStatus = _7816_4_getSecurityCondition(fhaFile, amOperation);
;;;37     
;;;38     	if (PIN_NEVER != umbStatus) { // if security condition is not NEVER
;;;39     		umbStatus = _7816_4_isKeyRefVerified(umbStatus);
;;;40     	}
;;;41     	else { // if security condition is never
;;;42     		DBG_FUNC("[102_221] _102221_verifyAccessCondition: Security condition is never\n");
;;;43     		umbStatus = ACC_NOT_VERIFIED;
;;;44     	}
;;;45     
;;;46     	DBG_FUNC_EXIT("<<[102_221] _102221_verifyAccessCondition() returns %1\n", umbStatus);
;;;47     	return umbStatus;
;;;48     }
;;;49     /*
;;;50     * It implements the UICC Read Binary and Update Binary command as per ETSI 102 221
;;;51     * 
;;;52     */
;;;53     void _102221_readUpdateBinary(void) {
;;;54     
;;;55     	uMonoByte		umbSfi;
;;;56     	tAccessMode		amOperation = ACC_MODE_FILE_READ;
;;;57     	tFileHeaderAddr	fhaFile = NO_FILE_PRESENT;
;;;58     	uDiByte			udbOffset;
;;;59     	uDiByte			udbRequestedSize;
;;;60     
;;;61     	DBG_FUNC_ENTRY(">>[102_221] _102221_readUpdateBinary() \n");
;;;62     
;;;63     	DBG_FUNC("[102_221] _102221_readUpdateBinary: P1-P2 validation \n");
;;;64     
;;;65     	/*P1-P2 validation*/
;;;66     	if (P1_VALID_OFFSET == (P1_BYTE & MASK_BIT(8))){
;;;67     		 
;;;68     		DBG_FUNC("[102_221] _102221_readUpdateBinary: P1-P2 both work as offset\n");
;;;69     
;;;70     		/*P1+p2 work as offset*/
;;;71     		udbOffset = mm_makeUdiByte(&P1_BYTE, 0x00);
;;;72     
;;;73     		/*use current file for intended operation*/
;;;74     		fhaFile = pccCurrentChannel->fhaCurrentEf;
;;;75     
;;;76     		DBG_FUNC("[102_221] _102221_readUpdateBinary: Check if File selected or not\n");
;;;77     	}
;;;78     	else if (P1_VALID_SFI == (P1_BYTE & MASK_VALID_SFI)) {
;;;79     		
;;;80     		DBG_FUNC("[102_221] _102221_readUpdateBinary: P1 is SFI and P2 work as offset\n");
;;;81     
;;;82     		/*p1 contains SFI*/
;;;83     		umbSfi = P1_BYTE & MASK_SFI;
;;;84     
;;;85     		DBG_FUNC("[102_221] _102221_readUpdateBinary: Check if SFI exists or not\n");
;;;86     
;;;87     		/*search for given SFI under current directory*/
;;;88     		_7816_4_ifFileExists(umbSfi, pccCurrentChannel->fhaCurrentDf, MODE_FIND_SFID, &fhaFile);
;;;89     
;;;90     		/*P2 only contains offset*/
;;;91     		udbOffset = P2_BYTE;
;;;92     
;;;93     	}
;;;94     	else { // Incorrect P1 value
;;;95     
;;;96     		/*Invalid P1-p2*/
;;;97     		DBG_ERR("[102_221] _102221_readUpdateBinary: Invalid P1 value '%1'\n", P1_BYTE);
;;;98     		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;99     		THROW(EXCEP_INCORRECT_DATAFIELD);
;;;100    	}
;;;101    
;;;102    	if (NO_FILE_PRESENT == fhaFile) { // if no file found with matched SFI
;;;103    
;;;104    		/*Command not allowed, as no EF selected*/
;;;105    		DBG_ERR("[102_221] _102221_readUpdateBinary: No file exists or selected\n");
;;;106    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;107    		THROW(EXCEP_NO_FILE_SELECTED);
;;;108    	}
;;;109    
;;;110    	if (!(IS(TF, _7816_4_getFileDescriptor(fhaFile)))) // if its not transparent file
;;;111    	{
;;;112    		/*Invalid type of file, it must be transparent*/
;;;113    		DBG_ERR("[102_221] _102221_readUpdateBinary: Invalid file type: File is record structured\n");
;;;114    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;115    		THROW(EXCEP_INVALID_FILE_TYPE);
;;;116    	}
;;;117    
;;;118    	if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(fhaFile)) { // check if its deactivated
;;;119    
;;;120    		DBG_WARN("[102_221] _102221_readUpdateBinary: File is deactivated\n");
;;;121    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;122    		THROW(EXCEP_REFERENCED_DATA_INVALIDATED);
;;;123    	}
;;;124    
;;;125    	if (INS_UPDATE_BINARY == INS_BYTE) { // check if its Update Binary command
;;;126    
;;;127    		DBG_FUNC("[102_221] _102221_readUpdateBinary: Its update operation\n");
;;;128    		/*Mode will be Update*/
;;;129    		amOperation = ACC_MODE_FILE_UPDATE;
;;;130    	}
;;;131    	else {
;;;132    		DBG_FUNC("[102_221] _102221_readUpdateBinary: Its Read operation\n");
;;;133    	}
;;;134    
;;;135    	if (0x00 == P3_BYTE) { // if P3 = 0x00 it means send response of 256 bytes
;;;136    		
;;;137    		DBG_FUNC("[102_221] _102221_readUpdateBinary: P3 is '00' hence it will be considered as 256 bytes\n");
;;;138    
;;;139    		/*If control is here it means command received is Read Binary, because Update Command on p3 00
;;;140    		* has already been handled in command router*/
;;;141    		/* Max response length in case p3 = 00 is 256 bytes as per ETSI 102221 Rel 15 Clause 10.1.6	*/
;;;142    		udbRequestedSize = MAX_RESPONSE_LEN;
;;;143    	}
;;;144    	else {//If p3 is non zero
;;;145    
;;;146    		/*copy p3 as it is*/
;;;147    		udbRequestedSize = P3_BYTE;
;;;148    	}
;;;149    	if (udbOffset >= _7816_4_getFileSize(fhaFile)) { //wrong parameter if the offset size is greater then the filesize
;;;150    		/*Invalid offset*/
;;;151    		DBG_ERR("[102_221] _102221_readUpdateBinary: Offset cannot be more than the file data limit/boundaries\n");
;;;152    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;153    		THROW(EXCEP_WRONG_P1_P2); 
;;;154    	}
;;;155    
;;;156    	/*Check if offset and requested size together are beyond file data*/
;;;157    	if ((udbOffset + udbRequestedSize) > _7816_4_getFileSize(fhaFile)) {
;;;158    
;;;159    		/*Invalid offset or P3*/
;;;160    		DBG_ERR("[102_221] _102221_readUpdateBinary: Offset and Requested length might be beyond the File data limit/boundaries\n");
;;;161    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;162    		THROW2(EXCEP_WRONG_P3, (_7816_4_getFileSize(fhaFile) - udbOffset) ); 
;;;163    	}
;;;164    	
;;;165    	DBG_FUNC("[102_221] _102221_readUpdateBinary: Checking access condition of File for given operation\n");
;;;166    
;;;167    	/*Check security condition*/
;;;168    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(amOperation, fhaFile))
;;;169    	{
;;;170    		/*Security Condition not satisfied*/
;;;171    		DBG_ERR("[102_221] _102221_readUpdateBinary: Security conditions not satisfied\n");
;;;172    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;173    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;174    	}
;;;175    
;;;176    	/*Read/update file*/
;;;177    	_7816_4_readUpdateFile(fhaFile, COMMAND_RESPONSE_DATA, udbOffset, udbRequestedSize, amOperation);
;;;178    
;;;179    	if (INS_READ_BINARY == INS_BYTE) { // check if its Read Binary command
;;;180    		
;;;181    		DBG_FUNC("[102_221] _102221_readUpdateBinary: Setting response lenght '%2'\n", udbRequestedSize);
;;;182    
;;;183    		/*Set response length*/
;;;184    		gudbOutputLen = udbRequestedSize;
;;;185    	}
;;;186    
;;;187    	DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateBinary() \n");
;;;188    }
;;;189    
;;;190    /*
;;;191    * It implements the UICC Read Record and Update Record command as per ETSI 102 221
;;;192    *
;;;193    */
;;;194    void _102221_readUpdateRecord(void) {
;;;195    
;;;196    	uMonoByte		umbMode = SHIFT_RIGHT_BY_N_BITS((P2_BYTE & MASK_FILE_SELECTION),0x03);
;;;197    	uMonoByte		umbRecLength;
;;;198    	uMonoByte		umbTemp;
;;;199    	uMonoByte		umbNoOfRecords;
;;;200    	uMonoByte		umbRecordNo;
;;;201    	tAccessMode		amMode = ACC_MODE_FILE_READ;
;;;202    	tFileHeaderAddr fhaFile;
;;;203    	
;;;204    	DBG_FUNC_ENTRY(">>[102_221] _102221_readUpdateRecord() \n");
;;;205    
;;;206    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking file selection mode from P2\n");
;;;207    
;;;208    	if (0x00 == umbMode) { // Currently selected EF
;;;209    
;;;210    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Command targetting currrently selected file\n");
;;;211    
;;;212    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Check if EF selected or not\n");
;;;213    		/*Set current file as target file*/
;;;214    		fhaFile = pccCurrentChannel->fhaCurrentEf;
;;;215    	}
;;;216    	else if (umbMode < 0x1F) {// range of SFI 01-30
;;;217    
;;;218    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Command targetting SFI present in P2\n");
;;;219    
;;;220    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking if SFI exists or not\n");
;;;221    
;;;222    		/*search for given SFI under current directory*/
;;;223    		_7816_4_ifFileExists(umbMode, pccCurrentChannel->fhaCurrentDf, MODE_FIND_SFID, &fhaFile);
;;;224    
;;;225    	}
;;;226    	else { //invalid P2 value
;;;227    
;;;228    		DBG_ERR("[102_221] _102221_readUpdateRecord: Invalid P2 '%1'\n", P2_BYTE);
;;;229    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;230    		THROW(EXCEP_WRONG_P1_P2);
;;;231    	}
;;;232    
;;;233    	if (NO_FILE_PRESENT == fhaFile) { //If no file is there
;;;234    
;;;235    		/*No file selected*/
;;;236    		DBG_ERR("[102_221] _102221_readUpdateRecord: No EF selected\n");
;;;237    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;238    		THROW(EXCEP_NO_FILE_SELECTED);
;;;239    	}
;;;240    
;;;241    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking Mode of operation \n");
;;;242    
;;;243    	/*Read/update operation mode*/
;;;244    	umbMode = P2_BYTE & MASK_OP_MODE;
;;;245    
;;;246    	if ((MODE_NEXT_RECORD > umbMode) || (umbMode > MODE_ABSOLUTE_RECORD)) { // invalid mode
;;;247    
;;;248    		/*Wrong p1 p2*/
;;;249    		DBG_ERR("[102_221] _102221_readUpdateRecord: Invalid P2 '%1'\n", P2_BYTE);
;;;250    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;251    		THROW(EXCEP_WRONG_P1_P2);
;;;252    	}
;;;253    
;;;254    	/*store file descriptor byte*/
;;;255    	umbTemp = _7816_4_getFileDescriptor(fhaFile);
;;;256    
;;;257    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking EF type\n");
;;;258    
;;;259    	if (IS(TF, umbTemp)) { // If file is Transparent, not Linear or Cyclic 
;;;260    
;;;261    		/*Invalid file type*/
;;;262    		DBG_ERR("[102_221] _102221_readUpdateRecord: Invalid File type, it is Transparent\n");
;;;263    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;264    		THROW(EXCEP_INVALID_FILE_TYPE);
;;;265    	}
;;;266    
;;;267    	if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(fhaFile)) { // check if its deactivated
;;;268    
;;;269    		DBG_WARN("[102_221] _102221_readUpdateRecord: File is deactivated\n");
;;;270    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;271    		THROW(EXCEP_REFERENCED_DATA_INVALIDATED);
;;;272    	}
;;;273    	
;;;274    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Its record file\n");
;;;275    
;;;276    	/*Save if its Cyclic*/
;;;277    	umbTemp = IS(CF, umbTemp);
;;;278    
;;;279    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Checking P3\n");
;;;280    
;;;281    	/*get record length*/
;;;282    	umbRecLength = _7816_4_getRecordLength(fhaFile);
;;;283    
;;;284    	if (P3_BYTE != umbRecLength){ // if p3 is not equals to File's record length
;;;285    
;;;286    		/*Invalid P3*/
;;;287    		DBG_ERR("[102_221] _102221_readUpdateRecord: P3 '%1' is not equal to Record length '%1'\n", P3_BYTE, umbRecLength);
;;;288    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;289    		THROW2(EXCEP_WRONG_P3,umbRecLength);
;;;290    	}
;;;291    
;;;292    	if (INS_BYTE == INS_UPDATE_RECORD) { // If command is Update Record
;;;293    
;;;294    		/*Access operation is Update*/
;;;295    		amMode = ACC_MODE_FILE_UPDATE;
;;;296    
;;;297    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Its update operation\n");
;;;298    	}
;;;299    	else {
;;;300    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Its Read operation\n");
;;;301    	}
;;;302    
;;;303    	if(	(umbTemp)							// Cyclic file
;;;304    		&&									// AND
;;;305    		(ACC_MODE_FILE_UPDATE == amMode)	// Update Record
;;;306    		&&									// AND
;;;307    		(MODE_PREVIOUS_RECORD != umbMode)){ //If its not Previous mode
;;;308    		
;;;309    		/*Cyclic file can only be updated in previous mode*/
;;;310    		DBG_ERR("[102_221] _102221_readUpdateRecord: Cyclic file can only be updated in Previous mode\n");
;;;311    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;312    		THROW(EXCEP_WRONG_P1_P2);
;;;313    	}
;;;314    
;;;315    	DBG_FUNC("[102_221] _102221_readUpdateRecord: Check security conditions\n");
;;;316    
;;;317    	/*Check security condition*/
;;;318    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(amMode, fhaFile))
;;;319    	{
;;;320    		/*Security Condition not satisfied*/
;;;321    		DBG_ERR("[102_221] _102221_readUpdateRecord: Security Condition not satisfied\n");
;;;322    		DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;323    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;324    	}
;;;325    
;;;326    	/*Get No. of records*/
;;;327    	umbNoOfRecords = _7816_4_getNoOfRecords(fhaFile);
;;;328    
;;;329    	if (MODE_ABSOLUTE_RECORD == umbMode) { // Read/update absolute/current record
;;;330    
;;;331    		if (MODE_CURRENT_RECORD == P1_BYTE) { // Read/update current record
;;;332    
;;;333    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Current record\n");
;;;334    
;;;335    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) { // Record pointer is undefined
;;;336    				
;;;337    				DBG_ERR("[102_221] _102221_readUpdateRecord: Record cannot be undefined in current mode\n");
;;;338    				DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;339    
;;;340    				THROW(EXCEP_RECORD_NOT_FOUND);
;;;341    			}
;;;342    
;;;343    			/*Store record no*/
;;;344    			umbRecordNo = pccCurrentChannel->umbCurrentRecPtr;
;;;345    
;;;346    		}
;;;347    		else if(umbNoOfRecords < P1_BYTE) { // record no. in command is incorrect
;;;348    
;;;349    			DBG_ERR("[102_221] _102221_readUpdateRecord: Record no. '%1' is more than total no. of records '%1'\n", P1_BYTE, umbNoOfRecords);
;;;350    			DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;351    			THROW(EXCEP_RECORD_NOT_FOUND);
;;;352    		}
;;;353    		else {
;;;354    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Absolute record\n");
;;;355    
;;;356    			/*Store record no*/
;;;357    			umbRecordNo = P1_BYTE;
;;;358    		}
;;;359    
;;;360    		/*Read/Update record*/
;;;361    		_7816_4_readUpdateRecordFile(fhaFile, COMMAND_RESPONSE_DATA, umbRecordNo, amMode);
;;;362    	}
;;;363    	else { // Next/previous
;;;364    		if (MODE_NEXT_RECORD == umbMode) { // Read/Update  Next record
;;;365    
;;;366    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Next record\n");
;;;367    
;;;368    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) { // Record is undefined
;;;369    				/*Record no.*/
;;;370    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Record undefined, so operation will be done on first record\n");
;;;371    				umbRecordNo = RECORD_FIRST;
;;;372    			}
;;;373    			else if (pccCurrentChannel->umbCurrentRecPtr == umbNoOfRecords) {
;;;374    
;;;375    				if (umbTemp) { //Cyclic file
;;;376    
;;;377    					DBG_FUNC("[102_221] _102221_readUpdateRecord: Cyclic File: Record pointer is set on Last record, so operation will be done on first record\n");
;;;378    					/*in cyclic file last record logically connected to first record, hence next record is first*/
;;;379    					umbRecordNo = RECORD_FIRST;
;;;380    				}
;;;381    				else {// Linear file
;;;382    					DBG_ERR("[102_221] _102221_readUpdateRecord: Linear fixed: It cannot proceed to next record, because Record pointer is at the last record\n");
;;;383    					DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;384    					THROW(EXCEP_RECORD_NOT_FOUND);
;;;385    				}
;;;386    			}
;;;387    			else {
;;;388    				/*Increment Record no*/
;;;389    				umbRecordNo = pccCurrentChannel->umbCurrentRecPtr + 1;
;;;390    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Next record to current record i.e. '%1'\n", umbRecordNo);
;;;391    			}
;;;392    
;;;393    		}
;;;394    		else { //Read/update previous record
;;;395    
;;;396    			DBG_FUNC("[102_221] _102221_readUpdateRecord: Mode is Previous record\n");
;;;397    
;;;398    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) {
;;;399    
;;;400    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Record is undefined, so operation will be done Last record\n");
;;;401    				/*Set last Record no.*/
;;;402    				umbRecordNo = umbNoOfRecords;
;;;403    			}
;;;404    			else if (pccCurrentChannel->umbCurrentRecPtr == RECORD_FIRST) {
;;;405    
;;;406    				if (umbTemp) {//cyclic
;;;407    
;;;408    					DBG_FUNC("[102_221] _102221_readUpdateRecord: Cyclic File: Record pointer is at first record, so operation will be done on Last record\n");
;;;409    					/*in cyclic file first record logically connected to last record, hence previous record is last*/
;;;410    					umbRecordNo = umbNoOfRecords;
;;;411    				}
;;;412    				else { //Linear
;;;413    					DBG_ERR("[102_221] _102221_readUpdateRecord: Linear Fixed: It cannot proceed to previous record, because Record pointer is at the first record\n");
;;;414    					DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;415    					THROW(EXCEP_RECORD_NOT_FOUND);
;;;416    				}
;;;417    			}
;;;418    			else {
;;;419    
;;;420    				/*Decrement Record no*/
;;;421    				umbRecordNo = pccCurrentChannel->umbCurrentRecPtr - 1;
;;;422    
;;;423    				DBG_FUNC("[102_221] _102221_readUpdateRecord: Previous record to current one i.e. '%1'\n", umbRecordNo);
;;;424    			}
;;;425    		}
;;;426    
;;;427    		/*Read/update file and save last*/
;;;428    		pccCurrentChannel->umbCurrentRecPtr = _7816_4_readUpdateRecordFile(fhaFile, COMMAND_RESPONSE_DATA, umbRecordNo, amMode);
;;;429    
;;;430    	}
;;;431    
;;;432    	if (ACC_MODE_FILE_READ == amMode) { //Check if its read operation
;;;433    
;;;434    		DBG_FUNC("[102_221] _102221_readUpdateRecord: Set Luicc i.e. Prepared response length '%1'\n", umbRecLength);
;;;435    		/*set luicc i.e. prepared response length*/
;;;436    		gudbOutputLen = umbRecLength;
;;;437    	}
;;;438    
;;;439    
;;;440    	DBG_FUNC_EXIT("<<[102_221] _102221_readUpdateRecord() \n");
;;;441    }
;;;442    
;;;443    /*
;;;444    * It implements the UICC Deactivate and Activate command as per ETSI 102 221
;;;445    *
;;;446    */
;;;447    void _102221_deactivateActivateFile(void) {
;;;448    
;;;449    	tFileHeaderAddr fhaFile;
;;;450    	tFileLCSI		flState;
;;;451    	tAccessMode		amMode;
;;;452    	
;;;453    	
;;;454    	DBG_FUNC_ENTRY(">>[102_221] _102221_deactivateActivateFile() \n");
;;;455    
;;;456    	/*Validation of P2*/
;;;457    	if (P2_BYTE != 0x00)
;;;458    	{
;;;459    		/*P2 must be 00*/
;;;460    		DBG_ERR("[102_221] _102221_deactivateActivateFile: Invalid value of P2 \n");
;;;461    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;462    		THROW(EXCEP_WRONG_P1_P2);
;;;463    	}
;;;464    
;;;465    	/*Validation of P1*/
;;;466    	if (P1_SELECT_BY_FILE_ID == P1_BYTE)
;;;467    	{
;;;468    
;;;469    		if (LENGTH_FILE_ID == P3_BYTE) {
;;;470    
;;;471    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Target file is in Command data\n");
;;;472    			
;;;473    			/*Search File ID give in command data*/
;;;474    			_7816_4_ifFileExists(mm_makeUdiByte(COMMAND_DATA, 0x00), pccCurrentChannel->fhaCurrentDf, MODE_FIND_FID, &fhaFile);
;;;475    		}
;;;476    		else if (0x00 == P3_BYTE) {
;;;477    
;;;478    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Target file is Currently selected\n");
;;;479    			fhaFile = pccCurrentChannel->fhaCurrentEf;
;;;480    
;;;481    			if (NO_FILE_PRESENT == fhaFile) { // no file
;;;482    											  /*EF needs to be selected*/
;;;483    				DBG_ERR("[102_221] _102221_deactivateActivateFile: EF not selected \n");
;;;484    				DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;485    				THROW(EXCEP_NO_FILE_SELECTED);
;;;486    			}
;;;487    		}
;;;488    		else { // P3 other than 00 or 02
;;;489    			
;;;490    			/*Wrong P3*/
;;;491    			DBG_ERR("[102_221] _102221_deactivateActivateFile: Invalid P3\n");
;;;492    			DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;493    			THROW(EXCEP_WRONG_P3);
;;;494    		}
;;;495    		
;;;496    	}
;;;497    	/*Validation of P1*/
;;;498    	/*if P1 is 08 or 09*/
;;;499    	else if (	(P1_BYTE == P1_SELECT_BY_PATH_MF)
;;;500    				||
;;;501    				(P1_BYTE == P1_SELECT_BY_PATH_CURRENT_DF))
;;;502    	{
;;;503    		/*P3 byte would not be 00 in case of select by path*/
;;;504    
;;;505    		if ((0x00 == P3_BYTE)
;;;506    			||
;;;507    			(0x00 != (P3_BYTE % LENGTH_FILE_ID)))
;;;508    		{
;;;509    			DBG_ERR("[102_221] _102221_deactivateActivateFile: Invalid P3\n");
;;;510    			DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;511    			THROW(EXCEP_WRONG_P3);
;;;512    		}
;;;513    
;;;514    		DBG_FUNC("[102_221] _102221_deactivateActivateFile: Valid path length\n");
;;;515    		//Try to Select File Id, Select By path
;;;516    		if (P1_BYTE == P1_SELECT_BY_PATH_MF)
;;;517    		{
;;;518    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Selecting requested file from MF 3F00\n");
;;;519    			/*Current DF would be MF*/
;;;520    			fhaFile = _102221_selectByPath(_7816_4_getMfAddress(), COMMAND_DATA, P3_BYTE);
;;;521    		}
;;;522    		else
;;;523    		{
;;;524    			DBG_FUNC("[102_221] _102221_deactivateActivateFile: Selecting requested file from currently selected DF\n");
;;;525    			/* Select the fileID from currently selected DF*/
;;;526    			fhaFile = _102221_selectByPath(pccCurrentChannel->fhaCurrentDf, COMMAND_DATA, P3_BYTE);
;;;527    		}
;;;528    
;;;529    
;;;530    	}
;;;531    	if (NO_FILE_PRESENT == fhaFile) { // no file
;;;532    									  /*File doesnt exist under current DF*/
;;;533    		DBG_ERR("[102_221] _102221_deactivateActivateFile: File not found \n");
;;;534    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;535    		THROW(EXCEP_FILE_NOT_FOUND);
;;;536    	}
;;;537    	//check if the file is DF//
;;;538    	/*if MF or DF is selected for activation or deactivation Send errors*/
;;;539    	 else if (IS(DF, _7816_4_getFileDescriptor(fhaFile))) 
;;;540    	 { 
;;;541    		DBG_ERR("[102_221] _102221_deactivateActivateFile: EF needs to be selected/targeted to Deactivate or Activate \n");
;;;542    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;543    		THROW(EXCEP_NO_FILE_SELECTED);
;;;544    	}
;;;545    	
;;;546    
;;;547    	if (INS_BYTE == INS_DEACTIVATE_FILE) { // Deactivate file command
;;;548    
;;;549    		DBG_FUNC("[102_221] _102221_deactivateActivateFile: Command for deactivating the file\n");
;;;550    
;;;551    		/*Store Deactivate related info. for further operation*/
;;;552    		flState = LCSI_DEACTIVATED;
;;;553    		amMode = ACC_MODE_FILE_DEACTIVATE;
;;;554    
;;;555    		if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(fhaFile)) { // check if its already deactivated
;;;556    
;;;557    			DBG_WARN("[102_221] _102221_deactivateActivateFile: File is already in deactivated state\n");
;;;558    			DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;559    			THROW(EXCEP_FILE_ALREADY_DEACTIVATED); 
;;;560    		}
;;;561    	}
;;;562    	else { //Activate file command
;;;563    
;;;564    		DBG_FUNC("[102_221] _102221_deactivateActivateFile: Command for Activating the file\n");
;;;565    
;;;566    		/*Store Activate related info. for further operation*/
;;;567    		flState = LCSI_ACTIVATED;
;;;568    		amMode = ACC_MODE_FILE_ACTIVATE;
;;;569    	}
;;;570    
;;;571    	/*Check for security conditions*/
;;;572    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(amMode,fhaFile)) {
;;;573    		/*Security Condition not satisfied*/
;;;574    		DBG_ERR("[102_221] _102221_deactivateActivateFile: Security Condition not satisfied\n");
;;;575    		DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;576    		THROW(EXCEP_SECURITY_NOT_SATISFIED); // Security conditions not verified
;;;577    	}
;;;578    
;;;579    	/*Set life cycle status*/
;;;580    	_7816_4_setLifeCycleStatus(fhaFile, flState);
;;;581    
;;;582    	/*set file as currently selected*/
;;;583    	pccCurrentChannel->fhaCurrentEf = fhaFile;
;;;584    
;;;585    	/*Set selected file's parent as current DF*/
;;;586    	pccCurrentChannel->fhaCurrentDf = _7816_4_getParentFile(fhaFile);
;;;587    
;;;588    	/*Reset the record pointer*/
;;;589    	pccCurrentChannel->umbCurrentRecPtr = RECORD_UNDEFINED;
;;;590    	
;;;591    	DBG_FUNC_EXIT("<<[102_221] _102221_deactivateActivateFile() \n");
;;;592    }
;;;593    /*
;;;594    * It implements the Increase command as per ETSI 102 221
;;;595    *
;;;596    */
;;;597    void _102221_increase(void) {
;;;598    
;;;599    	uMonoByte			umbSfi = P1_BYTE & MASK_SFI;
;;;600    	uMonoByte			umbRecLength;
;;;601    	uMonoByte			umbIndex;
;;;602    	uMonoByte			umbMinValue;
;;;603    	uDiByte				udbResult = 0;
;;;604    	tFileHeaderAddr		fhaFile;
;;;605    
;;;606    	DBG_FUNC_ENTRY(">>[102_221] _102221_increase() \n");
;;;607    
;;;608    	if (0x00 != P2_BYTE) { // invalid P2 value
;;;609    
;;;610    		DBG_ERR("[102_221] _102221_increase: Invalid P1\n");
;;;611    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;612    		THROW(EXCEP_WRONG_P1_P2);
;;;613    	}
;;;614    
;;;615    	if (P3_BYTE > MAX_CMD_LENGTH_FOR_INCREASE) { // check maximum allowed value of p3
        0x000019b8:    5638        8V      LDRSB    r0,[r7,r0]
        0x000019ba:    2800        .(      CMP      r0,#0
        0x000019bc:    d500        ..      BPL      0x19c0 ; _102221_increase + 24
        0x000019be:    e149        I.      B        0x1c54 ; _102221_increase + 684
;;;616    
;;;617    		DBG_ERR("[102_221] _102221_increase: 00 < P3 < 128 \n");
;;;618    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;619    		THROW2(EXCEP_WRONG_P3, 0x00);
;;;620    	}
;;;621    	if (0x00 == P1_BYTE) { // Currently selected EF
        0x000019c0:    78b8        .x      LDRB     r0,[r7,#2]
        0x000019c2:    2800        .(      CMP      r0,#0
        0x000019c4:    d070        p.      BEQ      0x1aa8 ; _102221_increase + 256
        0x000019c6:    21e0        .!      MOVS     r1,#0xe0
;;;622    
;;;623    		DBG_FUNC("[102_221] _102221_increase: Command targetting currrently selected file\n");
;;;624    
;;;625    		DBG_FUNC("[102_221] _102221_increase: Check if EF selected or not\n");
;;;626    
;;;627    		/*Set current file as target file*/
;;;628    		fhaFile = pccCurrentChannel->fhaCurrentEf;
;;;629    	}
;;;630    	else if (P1_VALID_SFI == (P1_BYTE & MASK_VALID_SFI)) { //If its for SFI
        0x000019c8:    4001        .@      ANDS     r1,r1,r0
        0x000019ca:    2980        .)      CMP      r1,#0x80
        0x000019cc:    d000        ..      BEQ      0x19d0 ; _102221_increase + 40
        0x000019ce:    e13d        =.      B        0x1c4c ; _102221_increase + 676
        0x000019d0:    211f        .!      MOVS     r1,#0x1f
;;;631    
;;;632    		DBG_FUNC("[102_221] _102221_increase: Command targetting SFI present in P1\n");
;;;633    
;;;634    		DBG_FUNC("[102_221] _102221_increase: Checking if SFI exists or not\n");
;;;635    
;;;636    		/*search for given SFI under current directory*/
;;;637    		_7816_4_ifFileExists((P1_BYTE & MASK_SFI), pccCurrentChannel->fhaCurrentDf, MODE_FIND_SFID, &fhaFile);
        0x000019d2:    4008        .@      ANDS     r0,r0,r1
        0x000019d4:    49aa        .I      LDR      r1,[pc,#680] ; [0x1c80] = 0x200006e8
        0x000019d6:    6809        .h      LDR      r1,[r1,#0]
        0x000019d8:    88c9        ..      LDRH     r1,[r1,#6]
        0x000019da:    2201        ."      MOVS     r2,#1
        0x000019dc:    ac06        ..      ADD      r4,sp,#0x18
        0x000019de:    4623        #F      MOV      r3,r4
        0x000019e0:    f001fba8    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;638    
;;;639    	}
;;;640    	else { // invalid P1 value RFU values
;;;641    		DBG_ERR("[102_221] _102221_increase: Invalid P1\n");
;;;642    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;643    		THROW(EXCEP_WRONG_P1_P2);
;;;644    	}
;;;645    
;;;646    	if (NO_FILE_PRESENT == fhaFile) { // if no file found neither Currently selected nor SFI 
        0x000019e4:    8820         .      LDRH     r0,[r4,#0]
        0x000019e6:    2800        .(      CMP      r0,#0
        0x000019e8:    d065        e.      BEQ      0x1ab6 ; _102221_increase + 270
;;;647    
;;;648    		/*Command not allowed, as no EF selected*/
;;;649    		DBG_ERR("[102_221] _102221_increase: No file exists or selected\n");
;;;650    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;651    		THROW(EXCEP_NO_FILE_SELECTED);
;;;652    	}
;;;653    
;;;654    	/*Get record length of file*/
;;;655    	umbRecLength = _7816_4_getRecordLength(fhaFile);
        0x000019ea:    f001fd83    ....    BL       _7816_4_getRecordLength ; 0x34f4
        0x000019ee:    4604        .F      MOV      r4,r0
        0x000019f0:    a806        ..      ADD      r0,sp,#0x18
;;;656    
;;;657    	if (!IS(CF, _7816_4_getFileDescriptor(fhaFile)) // if its not Cyclic file 
        0x000019f2:    8800        ..      LDRH     r0,[r0,#0]
        0x000019f4:    f001fd1e    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x000019f8:    2187        .!      MOVS     r1,#0x87
        0x000019fa:    4001        .@      ANDS     r1,r1,r0
;;;658    		||							// OR
        0x000019fc:    2906        .)      CMP      r1,#6
        0x000019fe:    d000        ..      BEQ      0x1a02 ; _102221_increase + 90
        0x00001a00:    e12e        ..      B        0x1c60 ; _102221_increase + 696
        0x00001a02:    b260        `.      SXTB     r0,r4
        0x00001a04:    2800        .(      CMP      r0,#0
        0x00001a06:    d500        ..      BPL      0x1a0a ; _102221_increase + 98
        0x00001a08:    e12a        *.      B        0x1c60 ; _102221_increase + 696
        0x00001a0a:    a806        ..      ADD      r0,sp,#0x18
;;;659    		(umbRecLength > 0x7F)) {  //Record length is restricted to 127 bytes
;;;660    
;;;661    		/*Command is allowed only on cyclic file*/
;;;662    		DBG_ERR("[102_221] _102221_increase: File is not Cyclic\n");
;;;663    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;664    		THROW(EXCEP_INVALID_FILE_TYPE);
;;;665    	}
;;;666    
;;;667    	if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(fhaFile)) { // check if its deactivated
        0x00001a0c:    8800        ..      LDRH     r0,[r0,#0]
        0x00001a0e:    f001fe05    ....    BL       _7816_4_getLifeCycleStatus ; 0x361c
        0x00001a12:    2804        .(      CMP      r0,#4
        0x00001a14:    d100        ..      BNE      0x1a18 ; _102221_increase + 112
        0x00001a16:    e127        '.      B        0x1c68 ; _102221_increase + 704
        0x00001a18:    a806        ..      ADD      r0,sp,#0x18
;;;668    
;;;669    		DBG_WARN("[102_221] _102221_increase: File is deactivated\n");
;;;670    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;671    		THROW(EXCEP_REFERENCED_DATA_INVALIDATED);
;;;672    	}
;;;673    
;;;674    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(ACC_MODE_FILE_INCREASE, fhaFile)) { // check if security conditions are verified
        0x00001a1a:    8805        ..      LDRH     r5,[r0,#0]
        0x00001a1c:    f002f870    ..p.    BL       _7186_4_getCardState ; 0x3b00
        0x00001a20:    280f        .(      CMP      r0,#0xf
        0x00001a22:    d30b        ..      BCC      0x1a3c ; _102221_increase + 148
        0x00001a24:    2102        .!      MOVS     r1,#2
        0x00001a26:    4628        (F      MOV      r0,r5
        0x00001a28:    f002f8bc    ....    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x00001a2c:    28ff        .(      CMP      r0,#0xff
        0x00001a2e:    d100        ..      BNE      0x1a32 ; _102221_increase + 138
        0x00001a30:    e11e        ..      B        0x1c70 ; _102221_increase + 712
        0x00001a32:    f002fc37    ..7.    BL       _7816_4_isKeyRefVerified ; 0x42a4
        0x00001a36:    2801        .(      CMP      r0,#1
        0x00001a38:    d100        ..      BNE      0x1a3c ; _102221_increase + 148
        0x00001a3a:    e119        ..      B        0x1c70 ; _102221_increase + 712
;;;675    
;;;676    		/*Command is allowed only on cyclic file*/
;;;677    		DBG_ERR("[102_221] _102221_increase: Security conditions not satisfied\n");
;;;678    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;679    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;680    	}
;;;681    
;;;682    	if (P3_BYTE > umbRecLength) { // if command data is more than Record length
        0x00001a3c:    793a        :y      LDRB     r2,[r7,#4]
        0x00001a3e:    4294        .B      CMP      r4,r2
        0x00001a40:    d22e        ..      BCS      0x1aa0 ; _102221_increase + 248
        0x00001a42:    1b10        ..      SUBS     r0,r2,r4
        0x00001a44:    4626        &F      MOV      r6,r4
;;;683    
;;;684    		/*If length of incoming command data i.e. value to add is more than record length
;;;685    		* Now we have two possibilities:
;;;686    		* 1. All preceding bytes of Command data are zero which leads to valid result value
;;;687    		* 2. One of the preceding bytes of command data is non zero it definitely leads to more than max value
;;;688    		*/
;;;689    		for (umbIndex = 0x00; umbIndex < (P3_BYTE - umbRecLength); umbIndex++) {
        0x00001a46:    2801        .(      CMP      r0,#1
        0x00001a48:    db39        9.      BLT      0x1abe ; _102221_increase + 278
        0x00001a4a:    2300        .#      MOVS     r3,#0
        0x00001a4c:    4619        .F      MOV      r1,r3
;;;690    
;;;691    			/*if there is any byte non-zero*/
;;;692    			if (COMMAND_DATA[umbIndex] != 0x00) {
        0x00001a4e:    18fb        ..      ADDS     r3,r7,r3
        0x00001a50:    795b        [y      LDRB     r3,[r3,#5]
        0x00001a52:    2b00        .+      CMP      r3,#0
        0x00001a54:    d000        ..      BEQ      0x1a58 ; _102221_increase + 176
        0x00001a56:    e0f5        ..      B        0x1c44 ; _102221_increase + 668
        0x00001a58:    2301        .#      MOVS     r3,#1
        0x00001a5a:    430b        .C      ORRS     r3,r3,r1
        0x00001a5c:    b2db        ..      UXTB     r3,r3
        0x00001a5e:    2500        .%      MOVS     r5,#0
        0x00001a60:    4298        .B      CMP      r0,r3
        0x00001a62:    dd2d        -.      BLE      0x1ac0 ; _102221_increase + 280
        0x00001a64:    18fb        ..      ADDS     r3,r7,r3
        0x00001a66:    795b        [y      LDRB     r3,[r3,#5]
        0x00001a68:    2b00        .+      CMP      r3,#0
        0x00001a6a:    d000        ..      BEQ      0x1a6e ; _102221_increase + 198
        0x00001a6c:    e0ea        ..      B        0x1c44 ; _102221_increase + 668
        0x00001a6e:    2302        .#      MOVS     r3,#2
        0x00001a70:    430b        .C      ORRS     r3,r3,r1
        0x00001a72:    b2db        ..      UXTB     r3,r3
        0x00001a74:    4298        .B      CMP      r0,r3
        0x00001a76:    dd23        #.      BLE      0x1ac0 ; _102221_increase + 280
        0x00001a78:    18fb        ..      ADDS     r3,r7,r3
        0x00001a7a:    795b        [y      LDRB     r3,[r3,#5]
        0x00001a7c:    2b00        .+      CMP      r3,#0
        0x00001a7e:    d000        ..      BEQ      0x1a82 ; _102221_increase + 218
        0x00001a80:    e0e0        ..      B        0x1c44 ; _102221_increase + 668
        0x00001a82:    2303        .#      MOVS     r3,#3
        0x00001a84:    430b        .C      ORRS     r3,r3,r1
        0x00001a86:    b2db        ..      UXTB     r3,r3
        0x00001a88:    4298        .B      CMP      r0,r3
        0x00001a8a:    dd19        ..      BLE      0x1ac0 ; _102221_increase + 280
        0x00001a8c:    18fb        ..      ADDS     r3,r7,r3
        0x00001a8e:    795b        [y      LDRB     r3,[r3,#5]
        0x00001a90:    2b00        .+      CMP      r3,#0
        0x00001a92:    d000        ..      BEQ      0x1a96 ; _102221_increase + 238
        0x00001a94:    e0d6        ..      B        0x1c44 ; _102221_increase + 668
        0x00001a96:    1d09        ..      ADDS     r1,r1,#4
        0x00001a98:    b2cb        ..      UXTB     r3,r1
        0x00001a9a:    4298        .B      CMP      r0,r3
        0x00001a9c:    dcd7        ..      BGT      0x1a4e ; _102221_increase + 166
        0x00001a9e:    e00f        ..      B        0x1ac0 ; _102221_increase + 280
        0x00001aa0:    4626        &F      MOV      r6,r4
;;;693    
;;;694    				DBG_ERR("[102_221] _102221_increase: Result value will exceed the maximum value of record\n");
;;;695    				DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;696    
;;;697    				THROW(EXCEP_MAX_VALUE_REACHED);
;;;698    			}
;;;699    		}
;;;700    
;;;701    		/*Condition of adding incoming data values with record*/
;;;702    		umbMinValue = 0x00;
;;;703    	}
;;;704    	else {
;;;705    
;;;706    		/*Condition of adding incoming data values with record*/
;;;707    		umbMinValue = umbRecLength - P3_BYTE;
        0x00001aa2:    1aa0        ..      SUBS     r0,r4,r2
        0x00001aa4:    b2c5        ..      UXTB     r5,r0
        0x00001aa6:    e00b        ..      B        0x1ac0 ; _102221_increase + 280
        0x00001aa8:    4875        uH      LDR      r0,[pc,#468] ; [0x1c80] = 0x200006e8
        0x00001aaa:    6800        .h      LDR      r0,[r0,#0]
        0x00001aac:    8900        ..      LDRH     r0,[r0,#8]
        0x00001aae:    a906        ..      ADD      r1,sp,#0x18
        0x00001ab0:    8008        ..      STRH     r0,[r1,#0]
        0x00001ab2:    2800        .(      CMP      r0,#0
        0x00001ab4:    d199        ..      BNE      0x19ea ; _102221_increase + 66
        0x00001ab6:    4871        qH      LDR      r0,[pc,#452] ; [0x1c7c] = 0x20000648
        0x00001ab8:    210e        .!      MOVS     r1,#0xe
        0x00001aba:    f005ffb4    ....    BL       longjmp ; 0x7a26
        0x00001abe:    2500        .%      MOVS     r5,#0
;;;708    	}
;;;709    
;;;710    	DBG_FUNC("[102_221] _102221_increase: Value to add:\n");
;;;711    
;;;712    	DBG_PRINT_ARRAY(COMMAND_RESPONSE_DATA, P3_BYTE);
;;;713    
;;;714    	/*Move command data after length "umbRecLength"*/
;;;715    	mem_cpyBwd(COMMAND_RESPONSE_DATA + umbRecLength, COMMAND_DATA, P3_BYTE);
        0x00001ac0:    1d7c        |.      ADDS     r4,r7,#5
        0x00001ac2:    4637        7F      MOV      r7,r6
        0x00001ac4:    19a0        ..      ADDS     r0,r4,r6
        0x00001ac6:    4621        !F      MOV      r1,r4
        0x00001ac8:    f7feffa4    ....    BL       mem_cpyBwd ; 0xa14
        0x00001acc:    a806        ..      ADD      r0,sp,#0x18
;;;716    
;;;717    	/*Reading the Record in Response array, storing it from beginning*/
;;;718    	_7816_4_readUpdateRecordFile(fhaFile, COMMAND_RESPONSE_DATA, RECORD_FIRST, ACC_MODE_FILE_READ);
        0x00001ace:    8800        ..      LDRH     r0,[r0,#0]
        0x00001ad0:    2201        ."      MOVS     r2,#1
        0x00001ad2:    2600        .&      MOVS     r6,#0
        0x00001ad4:    9403        ..      STR      r4,[sp,#0xc]
        0x00001ad6:    4621        !F      MOV      r1,r4
        0x00001ad8:    463c        <F      MOV      r4,r7
        0x00001ada:    4f67        gO      LDR      r7,[pc,#412] ; [0x1c78] = 0x2000023e
        0x00001adc:    4633        3F      MOV      r3,r6
        0x00001ade:    f001fb85    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;719    
;;;720    	DBG_FUNC("[102_221] _102221_increase: Last updated/increased Record Data before adding:\n");
;;;721    
;;;722    	DBG_PRINT_ARRAY(COMMAND_RESPONSE_DATA, umbRecLength);
;;;723    
;;;724    	/*Arithmetic addition of incoming data on oldest record*/
;;;725    	for (umbIndex = umbRecLength - 0x01; umbIndex != 0xFF; umbIndex--) {
        0x00001ae2:    2c00        .,      CMP      r4,#0
        0x00001ae4:    d100        ..      BNE      0x1ae8 ; _102221_increase + 320
        0x00001ae6:    e0a0        ..      B        0x1c2a ; _102221_increase + 642
        0x00001ae8:    2103        .!      MOVS     r1,#3
        0x00001aea:    4021        !@      ANDS     r1,r1,r4
        0x00001aec:    1e60        `.      SUBS     r0,r4,#1
        0x00001aee:    2803        .(      CMP      r0,#3
        0x00001af0:    9102        ..      STR      r1,[sp,#8]
        0x00001af2:    d203        ..      BCS      0x1afc ; _102221_increase + 340
        0x00001af4:    4620         F      MOV      r0,r4
        0x00001af6:    2900        .)      CMP      r1,#0
        0x00001af8:    d152        R.      BNE      0x1ba0 ; _102221_increase + 504
        0x00001afa:    e093        ..      B        0x1c24 ; _102221_increase + 636
        0x00001afc:    1939        9.      ADDS     r1,r7,r4
        0x00001afe:    20fc        .       MOVS     r0,#0xfc
        0x00001b00:    4020         @      ANDS     r0,r0,r4
        0x00001b02:    4240        @B      RSBS     r0,r0,#0
        0x00001b04:    9005        ..      STR      r0,[sp,#0x14]
        0x00001b06:    9401        ..      STR      r4,[sp,#4]
        0x00001b08:    1ea0        ..      SUBS     r0,r4,#2
        0x00001b0a:    9004        ..      STR      r0,[sp,#0x10]
        0x00001b0c:    2300        .#      MOVS     r3,#0
        0x00001b0e:    461e        .F      MOV      r6,r3
        0x00001b10:    e006        ..      B        0x1b20 ; _102221_increase + 376
        0x00001b12:    18b7        ..      ADDS     r7,r6,r2
        0x00001b14:    7067        gp      STRB     r7,[r4,#1]
        0x00001b16:    1f1b        ..      SUBS     r3,r3,#4
        0x00001b18:    0a3e        >.      LSRS     r6,r7,#8
        0x00001b1a:    9805        ..      LDR      r0,[sp,#0x14]
        0x00001b1c:    4298        .B      CMP      r0,r3
        0x00001b1e:    d03a        :.      BEQ      0x1b96 ; _102221_increase + 494
        0x00001b20:    18cc        ..      ADDS     r4,r1,r3
        0x00001b22:    7922        "y      LDRB     r2,[r4,#4]
;;;726    
;;;727    		if (umbIndex >= umbMinValue) {
        0x00001b24:    9804        ..      LDR      r0,[sp,#0x10]
        0x00001b26:    18c7        ..      ADDS     r7,r0,r3
        0x00001b28:    1c78        x.      ADDS     r0,r7,#1
        0x00001b2a:    4285        .B      CMP      r5,r0
        0x00001b2c:    d901        ..      BLS      0x1b32 ; _102221_increase + 394
        0x00001b2e:    18b6        ..      ADDS     r6,r6,r2
        0x00001b30:    e006        ..      B        0x1b40 ; _102221_increase + 408
        0x00001b32:    18b0        ..      ADDS     r0,r6,r2
        0x00001b34:    4a50        PJ      LDR      r2,[pc,#320] ; [0x1c78] = 0x2000023e
        0x00001b36:    7912        .y      LDRB     r2,[r2,#4]
        0x00001b38:    188a        ..      ADDS     r2,r1,r2
        0x00001b3a:    18d2        ..      ADDS     r2,r2,r3
        0x00001b3c:    7912        .y      LDRB     r2,[r2,#4]
        0x00001b3e:    1886        ..      ADDS     r6,r0,r2
        0x00001b40:    7126        &q      STRB     r6,[r4,#4]
        0x00001b42:    78e2        .x      LDRB     r2,[r4,#3]
        0x00001b44:    0a36        6.      LSRS     r6,r6,#8
        0x00001b46:    42bd        .B      CMP      r5,r7
        0x00001b48:    d901        ..      BLS      0x1b4e ; _102221_increase + 422
        0x00001b4a:    18b6        ..      ADDS     r6,r6,r2
        0x00001b4c:    e006        ..      B        0x1b5c ; _102221_increase + 436
        0x00001b4e:    18b0        ..      ADDS     r0,r6,r2
        0x00001b50:    4a49        IJ      LDR      r2,[pc,#292] ; [0x1c78] = 0x2000023e
        0x00001b52:    7912        .y      LDRB     r2,[r2,#4]
        0x00001b54:    188a        ..      ADDS     r2,r1,r2
        0x00001b56:    18d2        ..      ADDS     r2,r2,r3
        0x00001b58:    78d2        .x      LDRB     r2,[r2,#3]
        0x00001b5a:    1886        ..      ADDS     r6,r0,r2
        0x00001b5c:    70e6        .p      STRB     r6,[r4,#3]
        0x00001b5e:    78a2        .x      LDRB     r2,[r4,#2]
        0x00001b60:    1e78        x.      SUBS     r0,r7,#1
        0x00001b62:    0a36        6.      LSRS     r6,r6,#8
        0x00001b64:    4285        .B      CMP      r5,r0
        0x00001b66:    d901        ..      BLS      0x1b6c ; _102221_increase + 452
        0x00001b68:    18b6        ..      ADDS     r6,r6,r2
        0x00001b6a:    e006        ..      B        0x1b7a ; _102221_increase + 466
        0x00001b6c:    18b0        ..      ADDS     r0,r6,r2
        0x00001b6e:    4a42        BJ      LDR      r2,[pc,#264] ; [0x1c78] = 0x2000023e
        0x00001b70:    7912        .y      LDRB     r2,[r2,#4]
        0x00001b72:    188a        ..      ADDS     r2,r1,r2
        0x00001b74:    18d2        ..      ADDS     r2,r2,r3
        0x00001b76:    7892        .x      LDRB     r2,[r2,#2]
        0x00001b78:    1886        ..      ADDS     r6,r0,r2
        0x00001b7a:    70a6        .p      STRB     r6,[r4,#2]
        0x00001b7c:    7862        bx      LDRB     r2,[r4,#1]
        0x00001b7e:    1eb8        ..      SUBS     r0,r7,#2
        0x00001b80:    0a36        6.      LSRS     r6,r6,#8
        0x00001b82:    4285        .B      CMP      r5,r0
        0x00001b84:    d8c5        ..      BHI      0x1b12 ; _102221_increase + 362
;;;728    
;;;729    			/*add corresponding elements of Record and incoming data*/
;;;730    			udbResult += COMMAND_RESPONSE_DATA[umbIndex] + COMMAND_RESPONSE_DATA[P3_BYTE + umbIndex];
        0x00001b86:    18b0        ..      ADDS     r0,r6,r2
        0x00001b88:    4a3b        ;J      LDR      r2,[pc,#236] ; [0x1c78] = 0x2000023e
        0x00001b8a:    7912        .y      LDRB     r2,[r2,#4]
        0x00001b8c:    188a        ..      ADDS     r2,r1,r2
        0x00001b8e:    18d2        ..      ADDS     r2,r2,r3
        0x00001b90:    7852        Rx      LDRB     r2,[r2,#1]
        0x00001b92:    1887        ..      ADDS     r7,r0,r2
        0x00001b94:    e7be        ..      B        0x1b14 ; _102221_increase + 364
        0x00001b96:    9c01        ..      LDR      r4,[sp,#4]
        0x00001b98:    18e0        ..      ADDS     r0,r4,r3
        0x00001b9a:    9902        ..      LDR      r1,[sp,#8]
        0x00001b9c:    2900        .)      CMP      r1,#0
        0x00001b9e:    d041        A.      BEQ      0x1c24 ; _102221_increase + 636
        0x00001ba0:    1e42        B.      SUBS     r2,r0,#1
        0x00001ba2:    4f35        5O      LDR      r7,[pc,#212] ; [0x1c78] = 0x2000023e
        0x00001ba4:    18b9        ..      ADDS     r1,r7,r2
        0x00001ba6:    794b        Ky      LDRB     r3,[r1,#5]
        0x00001ba8:    4295        .B      CMP      r5,r2
        0x00001baa:    d905        ..      BLS      0x1bb8 ; _102221_increase + 528
;;;731    		}
;;;732    		else {
;;;733    
;;;734    			/*just add carry with remaining data of record*/
;;;735    			udbResult += COMMAND_RESPONSE_DATA[umbIndex] ;
        0x00001bac:    18f7        ..      ADDS     r7,r6,r3
;;;736    		}
;;;737    
;;;738    		/*store result value*/
;;;739    		COMMAND_RESPONSE_DATA[umbIndex] = (uMonoByte)udbResult;
        0x00001bae:    714f        Oq      STRB     r7,[r1,#5]
        0x00001bb0:    9902        ..      LDR      r1,[sp,#8]
        0x00001bb2:    2901        .)      CMP      r1,#1
        0x00001bb4:    d10c        ..      BNE      0x1bd0 ; _102221_increase + 552
        0x00001bb6:    e035        5.      B        0x1c24 ; _102221_increase + 636
        0x00001bb8:    18f3        ..      ADDS     r3,r6,r3
        0x00001bba:    4626        &F      MOV      r6,r4
        0x00001bbc:    793c        <y      LDRB     r4,[r7,#4]
        0x00001bbe:    1912        ..      ADDS     r2,r2,r4
        0x00001bc0:    4634        4F      MOV      r4,r6
        0x00001bc2:    18ba        ..      ADDS     r2,r7,r2
        0x00001bc4:    7952        Ry      LDRB     r2,[r2,#5]
        0x00001bc6:    189f        ..      ADDS     r7,r3,r2
        0x00001bc8:    714f        Oq      STRB     r7,[r1,#5]
        0x00001bca:    9902        ..      LDR      r1,[sp,#8]
        0x00001bcc:    2901        .)      CMP      r1,#1
        0x00001bce:    d029        ).      BEQ      0x1c24 ; _102221_increase + 636
        0x00001bd0:    9401        ..      STR      r4,[sp,#4]
        0x00001bd2:    0a3a        :.      LSRS     r2,r7,#8
        0x00001bd4:    1e83        ..      SUBS     r3,r0,#2
        0x00001bd6:    4e28        (N      LDR      r6,[pc,#160] ; [0x1c78] = 0x2000023e
        0x00001bd8:    18f1        ..      ADDS     r1,r6,r3
        0x00001bda:    794c        Ly      LDRB     r4,[r1,#5]
        0x00001bdc:    429d        .B      CMP      r5,r3
        0x00001bde:    d90d        ..      BLS      0x1bfc ; _102221_increase + 596
        0x00001be0:    1917        ..      ADDS     r7,r2,r4
        0x00001be2:    714f        Oq      STRB     r7,[r1,#5]
        0x00001be4:    9902        ..      LDR      r1,[sp,#8]
        0x00001be6:    2902        .)      CMP      r1,#2
        0x00001be8:    d012        ..      BEQ      0x1c10 ; _102221_increase + 616
        0x00001bea:    0a39        9.      LSRS     r1,r7,#8
        0x00001bec:    1ec2        ..      SUBS     r2,r0,#3
        0x00001bee:    4c22        "L      LDR      r4,[pc,#136] ; [0x1c78] = 0x2000023e
        0x00001bf0:    18a0        ..      ADDS     r0,r4,r2
        0x00001bf2:    7943        Cy      LDRB     r3,[r0,#5]
        0x00001bf4:    4295        .B      CMP      r5,r2
        0x00001bf6:    d90d        ..      BLS      0x1c14 ; _102221_increase + 620
        0x00001bf8:    18cf        ..      ADDS     r7,r1,r3
        0x00001bfa:    e011        ..      B        0x1c20 ; _102221_increase + 632
        0x00001bfc:    1912        ..      ADDS     r2,r2,r4
        0x00001bfe:    7934        4y      LDRB     r4,[r6,#4]
        0x00001c00:    191b        ..      ADDS     r3,r3,r4
        0x00001c02:    18f3        ..      ADDS     r3,r6,r3
        0x00001c04:    795b        [y      LDRB     r3,[r3,#5]
        0x00001c06:    18d7        ..      ADDS     r7,r2,r3
        0x00001c08:    714f        Oq      STRB     r7,[r1,#5]
        0x00001c0a:    9902        ..      LDR      r1,[sp,#8]
        0x00001c0c:    2902        .)      CMP      r1,#2
        0x00001c0e:    d1ec        ..      BNE      0x1bea ; _102221_increase + 578
        0x00001c10:    9c01        ..      LDR      r4,[sp,#4]
        0x00001c12:    e007        ..      B        0x1c24 ; _102221_increase + 636
        0x00001c14:    18c9        ..      ADDS     r1,r1,r3
        0x00001c16:    7923        #y      LDRB     r3,[r4,#4]
        0x00001c18:    18d2        ..      ADDS     r2,r2,r3
        0x00001c1a:    18a2        ..      ADDS     r2,r4,r2
        0x00001c1c:    7952        Ry      LDRB     r2,[r2,#5]
        0x00001c1e:    188f        ..      ADDS     r7,r1,r2
        0x00001c20:    9c01        ..      LDR      r4,[sp,#4]
        0x00001c22:    7147        Gq      STRB     r7,[r0,#5]
;;;740    
;;;741    		/*Store carry (if any)*/
;;;742    		udbResult = SHIFT_RIGHT_BY_N_BITS(udbResult, 8); 
;;;743    	}
;;;744    
;;;745    	if (udbResult) { // if still there is a carry
        0x00001c24:    0a38        8.      LSRS     r0,r7,#8
        0x00001c26:    4f14        .O      LDR      r7,[pc,#80] ; [0x1c78] = 0x2000023e
        0x00001c28:    d10c        ..      BNE      0x1c44 ; _102221_increase + 668
        0x00001c2a:    a806        ..      ADD      r0,sp,#0x18
;;;746    
;;;747    		/*result value is more than max allowed*/
;;;748    		DBG_ERR("[102_221] _102221_increase: Result value will exceed the maximum value of record\n");
;;;749    		DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;750    
;;;751    		THROW(EXCEP_MAX_VALUE_REACHED);
;;;752    	}
;;;753    	DBG_FUNC("[102_221] _102221_increase: Result value after increasing the record:\n");
;;;754    
;;;755    	DBG_PRINT_ARRAY(COMMAND_RESPONSE_DATA, umbRecLength);
;;;756    
;;;757    	DBG_FUNC("[102_221] _102221_increase: Update the result value of record in Cyclic file\n");
;;;758    
;;;759    	/*updating the result record data in cyclic file*/
;;;760    	_7816_4_readUpdateRecordFile(fhaFile, COMMAND_RESPONSE_DATA, RECORD_FIRST, ACC_MODE_FILE_UPDATE);
        0x00001c2c:    8800        ..      LDRH     r0,[r0,#0]
        0x00001c2e:    2201        ."      MOVS     r2,#1
        0x00001c30:    9903        ..      LDR      r1,[sp,#0xc]
        0x00001c32:    4613        .F      MOV      r3,r2
        0x00001c34:    f001fada    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;761    
;;;762    	/*Response length*/
;;;763    	gudbOutputLen = P3_BYTE + umbRecLength;
        0x00001c38:    7938        8y      LDRB     r0,[r7,#4]
        0x00001c3a:    1900        ..      ADDS     r0,r0,r4
        0x00001c3c:    4911        .I      LDR      r1,[pc,#68] ; [0x1c84] = 0x2000023c
        0x00001c3e:    8008        ..      STRH     r0,[r1,#0]
;;;764    
;;;765    	DBG_FUNC_EXIT("<<[102_221] _102221_increase() \n");
;;;766    }
        0x00001c40:    b007        ..      ADD      sp,sp,#0x1c
        0x00001c42:    bdf0        ..      POP      {r4-r7,pc}
        0x00001c44:    480d        .H      LDR      r0,[pc,#52] ; [0x1c7c] = 0x20000648
        0x00001c46:    2114        .!      MOVS     r1,#0x14
        0x00001c48:    f005feed    ....    BL       longjmp ; 0x7a26
        0x00001c4c:    480b        .H      LDR      r0,[pc,#44] ; [0x1c7c] = 0x20000648
        0x00001c4e:    2106        .!      MOVS     r1,#6
        0x00001c50:    f005fee9    ....    BL       longjmp ; 0x7a26
        0x00001c54:    2000        .       MOVS     r0,#0
        0x00001c56:    7138        8q      STRB     r0,[r7,#4]
        0x00001c58:    4808        .H      LDR      r0,[pc,#32] ; [0x1c7c] = 0x20000648
        0x00001c5a:    2107        .!      MOVS     r1,#7
        0x00001c5c:    f005fee3    ....    BL       longjmp ; 0x7a26
        0x00001c60:    4806        .H      LDR      r0,[pc,#24] ; [0x1c7c] = 0x20000648
        0x00001c62:    210f        .!      MOVS     r1,#0xf
        0x00001c64:    f005fedf    ....    BL       longjmp ; 0x7a26
        0x00001c68:    4804        .H      LDR      r0,[pc,#16] ; [0x1c7c] = 0x20000648
        0x00001c6a:    2116        .!      MOVS     r1,#0x16
        0x00001c6c:    f005fedb    ....    BL       longjmp ; 0x7a26
        0x00001c70:    4802        .H      LDR      r0,[pc,#8] ; [0x1c7c] = 0x20000648
        0x00001c72:    2111        .!      MOVS     r1,#0x11
        0x00001c74:    f005fed7    ....    BL       longjmp ; 0x7a26
    $d.7
    __arm_cp.4_0
        0x00001c78:    2000023e    >..     DCD    536871486
    __arm_cp.4_1
        0x00001c7c:    20000648    H..     DCD    536872520
    __arm_cp.4_2
        0x00001c80:    200006e8    ...     DCD    536872680
    __arm_cp.4_3
        0x00001c84:    2000023c    <..     DCD    536871484
    $t.8
    _102221_search
;;;767    
;;;768    /*
;;;769    * It implements the Search command as per ETSI 102 221
;;;770    */
;;;771    void _102221_search(void) {
        0x00001c88:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00001c8a:    b08b        ..      SUB      sp,sp,#0x2c
;;;772    	tSearchMode		umbSearchMode;
;;;773    	uMonoByte		umbMode;
;;;774    	uMonoByte		umbRecordNo = P1_BYTE; //'record number to start' or '00'
        0x00001c8c:    4dde        .M      LDR      r5,[pc,#888] ; [0x2008] = 0x2000023e
        0x00001c8e:    78af        .x      LDRB     r7,[r5,#2]
;;;775    	uMonoByte		umbRecLength;
;;;776    	uMonoByte		umbNoOfRecords;
;;;777    	uMonoByte		umbTypeOfEnhanced;
;;;778    	tFileHeaderAddr fhaFile;
;;;779    
;;;780    	DBG_FUNC_ENTRY(">>[102_221] _102221_search() \n");
;;;781    
;;;782    	umbMode = SHIFT_RIGHT_BY_N_BITS((P2_BYTE), 0x03); //first 5 bits of P2
        0x00001c90:    78ee        .x      LDRB     r6,[r5,#3]
        0x00001c92:    08f0        ..      LSRS     r0,r6,#3
;;;783    
;;;784    	if (0x00 == umbMode) { // Currently selected EF 
        0x00001c94:    9709        ..      STR      r7,[sp,#0x24]
        0x00001c96:    d010        ..      BEQ      0x1cba ; _102221_search + 50
        0x00001c98:    281f        .(      CMP      r0,#0x1f
        0x00001c9a:    d100        ..      BNE      0x1c9e ; _102221_search + 22
        0x00001c9c:    e0ea        ..      B        0x1e74 ; _102221_search + 492
        0x00001c9e:    49dd        .I      LDR      r1,[pc,#884] ; [0x2014] = 0x200006e8
        0x00001ca0:    6809        .h      LDR      r1,[r1,#0]
        0x00001ca2:    88c9        ..      LDRH     r1,[r1,#6]
        0x00001ca4:    2201        ."      MOVS     r2,#1
        0x00001ca6:    ac0a        ..      ADD      r4,sp,#0x28
        0x00001ca8:    4623        #F      MOV      r3,r4
        0x00001caa:    f001fa43    ..C.    BL       _7816_4_ifFileExists ; 0x3134
        0x00001cae:    8820         .      LDRH     r0,[r4,#0]
        0x00001cb0:    2800        .(      CMP      r0,#0
        0x00001cb2:    d100        ..      BNE      0x1cb6 ; _102221_search + 46
        0x00001cb4:    e0f1        ..      B        0x1e9a ; _102221_search + 530
        0x00001cb6:    78ee        .x      LDRB     r6,[r5,#3]
        0x00001cb8:    e007        ..      B        0x1cca ; _102221_search + 66
;;;785    
;;;786    		DBG_FUNC("[102_221] _102221_search: Command targetting currrently selected file\n");
;;;787    
;;;788    		/*Set current file as target file*/
;;;789    		fhaFile = pccCurrentChannel->fhaCurrentEf;
        0x00001cba:    48d6        .H      LDR      r0,[pc,#856] ; [0x2014] = 0x200006e8
        0x00001cbc:    6800        .h      LDR      r0,[r0,#0]
        0x00001cbe:    8900        ..      LDRH     r0,[r0,#8]
        0x00001cc0:    a90a        ..      ADD      r1,sp,#0x28
        0x00001cc2:    8008        ..      STRH     r0,[r1,#0]
;;;790    
;;;791    		if (NO_FILE_PRESENT == fhaFile) {
        0x00001cc4:    2800        .(      CMP      r0,#0
        0x00001cc6:    d100        ..      BNE      0x1cca ; _102221_search + 66
        0x00001cc8:    e0f1        ..      B        0x1eae ; _102221_search + 550
        0x00001cca:    2406        .$      MOVS     r4,#6
        0x00001ccc:    4637        7F      MOV      r7,r6
        0x00001cce:    4027        '@      ANDS     r7,r7,r4
        0x00001cd0:    2107        .!      MOVS     r1,#7
;;;792    
;;;793    			/*Command not allowed, as no EF selected*/
;;;794    			DBG_ERR("[102_221] _102221_search: Command not allowed, as no EF selected\n");
;;;795    			DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;796    
;;;797    			THROW(EXCEP_NO_FILE_SELECTED);
;;;798    		}
;;;799    	}
;;;800    	else if (umbMode < 0x1F) {// Range of SFI 01-30
;;;801    
;;;802    		DBG_FUNC("[102_221] _102221_search: Command targetting SFI present in P2\n");
;;;803    
;;;804    		/*Search for given SFI under current directory*/
;;;805    		_7816_4_ifFileExists(umbMode, pccCurrentChannel->fhaCurrentDf, MODE_FIND_SFID, &fhaFile);
;;;806    
;;;807    		if (NO_FILE_PRESENT == fhaFile) {
;;;808    
;;;809    			/*Command not allowed, as file not found*/
;;;810    			DBG_ERR("[102_221] _102221_search: Command not allowed, as File not found\n");
;;;811    			DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;812    
;;;813    			THROW(EXCEP_FILE_NOT_FOUND);
;;;814    		}
;;;815    	}
;;;816    	else { //Invalid first 5 bits of P2
;;;817    
;;;818    		DBG_ERR("[102_221] _102221_search: Invalid P2 '%1'\n", P2_BYTE);
;;;819    		DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;820    		THROW(EXCEP_WRONG_P1_P2);
;;;821    	}
;;;822    
;;;823    	/*last 3 bits of P2 for mode*/
;;;824    	umbMode = P2_BYTE & MASK_OP_MODE;
        0x00001cd2:    400e        .@      ANDS     r6,r6,r1
;;;825    
;;;826    	if ((umbMode != SEARCH_FORWARD_MODE)
;;;827    		&&
        0x00001cd4:    2f04        ./      CMP      r7,#4
        0x00001cd6:    d002        ..      BEQ      0x1cde ; _102221_search + 86
        0x00001cd8:    2e06        ..      CMP      r6,#6
        0x00001cda:    d000        ..      BEQ      0x1cde ; _102221_search + 86
        0x00001cdc:    e0ca        ..      B        0x1e74 ; _102221_search + 492
        0x00001cde:    9106        ..      STR      r1,[sp,#0x18]
;;;828    		(umbMode != SEARCH_BACKWARD_MODE)
;;;829    		&&
;;;830    		(umbMode != SEARCH_ENHANCED_MODE)) {
;;;831    		//Invalid last 3 bits of P2
;;;832    
;;;833    		DBG_ERR("[102_221] _102221_search: Invalid P2 '%1'\n", P2_BYTE);
;;;834    		DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;835    		THROW(EXCEP_WRONG_P1_P2);
;;;836    	}
;;;837    
;;;838    	if ((IS(TF, _7816_4_getFileDescriptor(fhaFile)))) { // if file is not linear fixed or cyclic
        0x00001ce0:    f001fba8    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x00001ce4:    2187        .!      MOVS     r1,#0x87
        0x00001ce6:    4008        .@      ANDS     r0,r0,r1
        0x00001ce8:    2801        .(      CMP      r0,#1
        0x00001cea:    d100        ..      BNE      0x1cee ; _102221_search + 102
        0x00001cec:    e0c6        ..      B        0x1e7c ; _102221_search + 500
        0x00001cee:    9405        ..      STR      r4,[sp,#0x14]
        0x00001cf0:    9104        ..      STR      r1,[sp,#0x10]
        0x00001cf2:    a80a        ..      ADD      r0,sp,#0x28
;;;839    
;;;840    		/*Throw Error as target file is not linear fixed or cyclic*/
;;;841    		DBG_ERR("[102_221] _102221_search: File is neither linear fixed nor cyclic\n");
;;;842    		DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;843    
;;;844    		THROW(EXCEP_INVALID_FILE_TYPE);
;;;845    	}
;;;846    
;;;847    	/*Checking the security condition of the file*/
;;;848    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(ACC_MODE_FILE_READ, fhaFile)) {
        0x00001cf4:    8804        ..      LDRH     r4,[r0,#0]
        0x00001cf6:    f001ff03    ....    BL       _7186_4_getCardState ; 0x3b00
        0x00001cfa:    280f        .(      CMP      r0,#0xf
        0x00001cfc:    d30b        ..      BCC      0x1d16 ; _102221_search + 142
        0x00001cfe:    2100        .!      MOVS     r1,#0
        0x00001d00:    4620         F      MOV      r0,r4
        0x00001d02:    f001ff4f    ..O.    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x00001d06:    28ff        .(      CMP      r0,#0xff
        0x00001d08:    d100        ..      BNE      0x1d0c ; _102221_search + 132
        0x00001d0a:    e0bb        ..      B        0x1e84 ; _102221_search + 508
        0x00001d0c:    f002faca    ....    BL       _7816_4_isKeyRefVerified ; 0x42a4
        0x00001d10:    2801        .(      CMP      r0,#1
        0x00001d12:    d100        ..      BNE      0x1d16 ; _102221_search + 142
        0x00001d14:    e0b6        ..      B        0x1e84 ; _102221_search + 508
        0x00001d16:    ac0a        ..      ADD      r4,sp,#0x28
;;;849    
;;;850    		/*throw Error as the secutiry condition of target file is not verified*/
;;;851    		DBG_ERR("[102_221] _102221_search: Security conditions not satisfied \n");
;;;852    		DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;853    
;;;854    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;855    	}
;;;856    
;;;857    	/*get total no. of records of the file*/
;;;858    	umbNoOfRecords = _7816_4_getNoOfRecords(fhaFile);
        0x00001d18:    8820         .      LDRH     r0,[r4,#0]
        0x00001d1a:    f001fc05    ....    BL       _7816_4_getNoOfRecords ; 0x3528
        0x00001d1e:    9007        ..      STR      r0,[sp,#0x1c]
;;;859    
;;;860    	/*get the length of records of the file*/
;;;861    	umbRecLength = _7816_4_getRecordLength(fhaFile);
        0x00001d20:    8820         .      LDRH     r0,[r4,#0]
        0x00001d22:    f001fbe7    ....    BL       _7816_4_getRecordLength ; 0x34f4
        0x00001d26:    4604        .F      MOV      r4,r0
        0x00001d28:    4db7        .M      LDR      r5,[pc,#732] ; [0x2008] = 0x2000023e
;;;862    
;;;863    	/*Copy the pattern in local array*/
;;;864    	mem_cpy(gumbWorkingBuffer, COMMAND_DATA, P3_BYTE);
        0x00001d2a:    792a        *y      LDRB     r2,[r5,#4]
        0x00001d2c:    1d69        i.      ADDS     r1,r5,#5
        0x00001d2e:    4862        bH      LDR      r0,[pc,#392] ; [0x1eb8] = 0x20000544
        0x00001d30:    9108        ..      STR      r1,[sp,#0x20]
        0x00001d32:    f7fefe44    ..D.    BL       mem_cpyFwd ; 0x9be
;;;865    
;;;866    	if ((umbMode == SEARCH_FORWARD_MODE) || (umbMode == SEARCH_BACKWARD_MODE)) 
        0x00001d36:    2f04        ./      CMP      r7,#4
        0x00001d38:    d108        ..      BNE      0x1d4c ; _102221_search + 196
;;;867    	{
;;;868    		/*Simple search mode : forward(04) or backward(05)  starting from record indicated in P1*/
;;;869    
;;;870    		if (MODE_CURRENT_RECORD == P1_BYTE) { //Search current record
        0x00001d3a:    78a8        .x      LDRB     r0,[r5,#2]
        0x00001d3c:    2800        .(      CMP      r0,#0
        0x00001d3e:    4629        )F      MOV      r1,r5
        0x00001d40:    9d09        ..      LDR      r5,[sp,#0x24]
        0x00001d42:    d03d        =.      BEQ      0x1dc0 ; _102221_search + 312
;;;871    
;;;872    			DBG_FUNC("[102_221] _102221_search: Search Mode is Current record\n");
;;;873    
;;;874    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) { // Record pointer is undefined
;;;875    
;;;876    				DBG_ERR("[102_221] _102221_search: Record cannot be undefined in current mode\n");
;;;877    				DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;878    
;;;879    				THROW(EXCEP_RECORD_NOT_FOUND);
;;;880    			}
;;;881    			/*Store record no*/
;;;882    			umbRecordNo = pccCurrentChannel->umbCurrentRecPtr;
;;;883    		}
;;;884    		else if (P1_BYTE > umbNoOfRecords) {
        0x00001d44:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x00001d46:    4290        .B      CMP      r0,r2
        0x00001d48:    d93f        ?.      BLS      0x1dca ; _102221_search + 322
        0x00001d4a:    e06d        m.      B        0x1e28 ; _102221_search + 416
;;;885    
;;;886    			DBG_FUNC("[102_221] _102221_search: Search Mode is Indication of record number in P1\n");
;;;887    
;;;888    			/*P1 is not a valid record number for given EF*/
;;;889    			DBG_ERR("[102_221] _102221_search: Wrong P1, must be an existing record number\n");
;;;890    			DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;891    
;;;892    			THROW(EXCEP_RECORD_NOT_FOUND);
;;;893    		}
;;;894    
;;;895    		if (P3_BYTE > umbRecLength) {
;;;896    			/*Wrong P3*/
;;;897    			DBG_ERR("[102_221] _102221_search: Wrong P3, must not be greater than record length \n");
;;;898    			DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;899    
;;;900    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;901    		}
;;;902    
;;;903    		if (umbMode == SEARCH_FORWARD_MODE) {
;;;904    
;;;905    			/*Simple search with forward mode*/
;;;906    			DBG_FUNC("[102_221] _102221_search: SIMPLE FORWARD SEARCH \n");
;;;907    			umbSearchMode = SEARCH_RECORD_FORWARD;
;;;908    		}
;;;909    		else {
;;;910    
;;;911    			/*Simple search with backward mode*/
;;;912    			DBG_FUNC("[102_221] _102221_search: SIMPLE BACKWARD SEARCH \n");
;;;913    			umbSearchMode = SEARCH_RECORD_BACKWARD;
;;;914    		}	
;;;915    
;;;916    		DBG_FUNC("[102_221] _102221_search: Searching from record %1\n", umbRecordNo);
;;;917    		umbRecordNo = _7816_4_SearchRecordFile(fhaFile, gumbWorkingBuffer, P3_BYTE, umbSearchMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, OFFSET_START, COMMAND_RESPONSE_DATA);
;;;918    	
;;;919    	}	//simple search checks end
;;;920    
;;;921    	else {
;;;922    		/*Enhanced search record*/
;;;923    		/*All Enhanced search modes*/
;;;924    		DBG_FUNC("[102_221] _102221_search: ENHANCED SEARCH RECORD\n");
;;;925    
;;;926    		if ((COMMAND_DATA[SEARCH_INDEX_OF_INDICATION] & 0xF4) != 0x04) { //Incorrect input in first byte of search indication
        0x00001d4c:    796f        oy      LDRB     r7,[r5,#5]
        0x00001d4e:    20f4        .       MOVS     r0,#0xf4
        0x00001d50:    4038        8@      ANDS     r0,r0,r7
        0x00001d52:    2804        .(      CMP      r0,#4
        0x00001d54:    9e09        ..      LDR      r6,[sp,#0x24]
        0x00001d56:    d15e        ^.      BNE      0x1e16 ; _102221_search + 398
;;;927    
;;;928    			DBG_ERR("[102_221] _102221_search: Incorrect Data in First Byte of search indication \n");
;;;929    			DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;930    
;;;931    			THROW(EXCEP_INCORRECT_DATAFIELD);
;;;932    		}
;;;933    
;;;934    		//first 5 bits of search indication's first byte to find type of enhanced search (offset or value)
;;;935    		umbTypeOfEnhanced = SHIFT_RIGHT_BY_N_BITS(COMMAND_DATA[SEARCH_INDEX_OF_INDICATION], 0x03);
;;;936    
;;;937    		if ((P3_BYTE <= LENGTH_SEARCH_INDICATION)
        0x00001d58:    7928        (y      LDRB     r0,[r5,#4]
        0x00001d5a:    2803        .(      CMP      r0,#3
        0x00001d5c:    d200        ..      BCS      0x1d60 ; _102221_search + 216
        0x00001d5e:    e095        ..      B        0x1e8c ; _102221_search + 516
        0x00001d60:    1e80        ..      SUBS     r0,r0,#2
        0x00001d62:    42a0        .B      CMP      r0,r4
        0x00001d64:    d900        ..      BLS      0x1d68 ; _102221_search + 224
        0x00001d66:    e091        ..      B        0x1e8c ; _102221_search + 516
;;;938    			||
;;;939    			((P3_BYTE - LENGTH_SEARCH_INDICATION)  > umbRecLength) ) {
;;;940    			/*Wrong P3*/
;;;941    			DBG_ERR("[102_221] _102221_search: Wrong P3 \n");
;;;942    			DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;943    
;;;944    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;945    		}
;;;946    
;;;947    		/*Copy the pattern from '3rd byte of command data' in local array*/
;;;948    		mem_cpy(gumbWorkingBuffer, (COMMAND_DATA + LENGTH_SEARCH_INDICATION), (P3_BYTE - LENGTH_SEARCH_INDICATION));
        0x00001d68:    1de9        ..      ADDS     r1,r5,#7
        0x00001d6a:    b282        ..      UXTH     r2,r0
        0x00001d6c:    4852        RH      LDR      r0,[pc,#328] ; [0x1eb8] = 0x20000544
        0x00001d6e:    f7fefe26    ..&.    BL       mem_cpyFwd ; 0x9be
;;;949    
;;;950    		/*search mode from last 3 bits of search indication's first byte*/
;;;951    		umbMode = COMMAND_DATA[SEARCH_INDEX_OF_INDICATION] & MASK_OP_MODE;
        0x00001d72:    7968        hy      LDRB     r0,[r5,#5]
        0x00001d74:    9906        ..      LDR      r1,[sp,#0x18]
        0x00001d76:    4001        .@      ANDS     r1,r1,r0
        0x00001d78:    9a05        ..      LDR      r2,[sp,#0x14]
;;;952    
;;;953    		if ((umbMode == SEARCH_FORWARD_MODE) || (umbMode == SEARCH_BACKWARD_MODE)) {
        0x00001d7a:    4002        .@      ANDS     r2,r2,r0
        0x00001d7c:    2a04        .*      CMP      r2,#4
        0x00001d7e:    d107        ..      BNE      0x1d90 ; _102221_search + 264
        0x00001d80:    78a8        .x      LDRB     r0,[r5,#2]
;;;954    
;;;955    			umbSearchMode = umbMode - SEARCH_FORWARD_MODE;
        0x00001d82:    1f0d        ..      SUBS     r5,r1,#4
;;;956    
;;;957    			if (MODE_CURRENT_RECORD == P1_BYTE) { //Search current record
        0x00001d84:    2800        .(      CMP      r0,#0
        0x00001d86:    d04a        J.      BEQ      0x1e1e ; _102221_search + 406
;;;958    
;;;959    				DBG_FUNC("[102_221] _102221_search: Search Mode is Current record\n");
;;;960    
;;;961    				if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) { // Record pointer is undefined
;;;962    
;;;963    					DBG_ERR("[102_221] _102221_search: Record cannot be undefined in current mode\n");
;;;964    					DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;965    
;;;966    					THROW(EXCEP_RECORD_NOT_FOUND);
;;;967    				}
;;;968    				/*Store record no*/
;;;969    				umbRecordNo = pccCurrentChannel->umbCurrentRecPtr;
;;;970    			}
;;;971    			else if (P1_BYTE > umbNoOfRecords) {
        0x00001d88:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00001d8a:    4288        .B      CMP      r0,r1
        0x00001d8c:    d955        U.      BLS      0x1e3a ; _102221_search + 434
        0x00001d8e:    e04b        K.      B        0x1e28 ; _102221_search + 416
        0x00001d90:    78a8        .x      LDRB     r0,[r5,#2]
;;;972    
;;;973    				DBG_FUNC("[102_221] _102221_search: Search Mode is Indication of record number in P1\n");
;;;974    
;;;975    				/*P1 is not a valid record number for given EF*/
;;;976    				DBG_ERR("[102_221] _102221_search: Wrong P1, must be an existing record number\n");
;;;977    				DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;978    
;;;979    				THROW(EXCEP_RECORD_NOT_FOUND);
;;;980    			}
;;;981    		}
;;;982    		else if (umbMode == SEARCH_FORWARD_FROM_NEXT_MODE) {
        0x00001d92:    2906        .)      CMP      r1,#6
        0x00001d94:    d12c        ,.      BNE      0x1df0 ; _102221_search + 360
;;;983    
;;;984    			DBG_FUNC("[102_221] _102221_search: FORWARD ENHANCED SEARCH FROM NEXT RECORD\n");
;;;985    			umbSearchMode = SEARCH_RECORD_FORWARD;
;;;986    
;;;987    			if(P1_BYTE != 0x00) { //P1 should be 00 for 'forward search from next record' mode
        0x00001d96:    2800        .(      CMP      r0,#0
        0x00001d98:    d16c        l.      BNE      0x1e74 ; _102221_search + 492
;;;988     
;;;989    				DBG_ERR("[102_221] _102221_search: Invalid P1 '%1', must be '00' for Forward Next mode\n", P1_BYTE);
;;;990    				DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;991    				THROW(EXCEP_WRONG_P1_P2);
;;;992    			}
;;;993    
;;;994    			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) { // Record is undefined
        0x00001d9a:    489e        .H      LDR      r0,[pc,#632] ; [0x2014] = 0x200006e8
        0x00001d9c:    6800        .h      LDR      r0,[r0,#0]
        0x00001d9e:    7800        .x      LDRB     r0,[r0,#0]
        0x00001da0:    2500        .%      MOVS     r5,#0
        0x00001da2:    2601        .&      MOVS     r6,#1
        0x00001da4:    2800        .(      CMP      r0,#0
        0x00001da6:    d048        H.      BEQ      0x1e3a ; _102221_search + 434
;;;995    				/*Record no.*/
;;;996    				DBG_FUNC("[102_221] _102221_search: Record is undefined, so search operation will start from first record\n");
;;;997    				umbRecordNo = RECORD_FIRST;
;;;998    			}
;;;999    			else if (pccCurrentChannel->umbCurrentRecPtr == umbNoOfRecords) {
        0x00001da8:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00001daa:    4288        .B      CMP      r0,r1
        0x00001dac:    d144        D.      BNE      0x1e38 ; _102221_search + 432
        0x00001dae:    a80a        ..      ADD      r0,sp,#0x28
;;;1000   
;;;1001   				if ((IS(CF, _7816_4_getFileDescriptor(fhaFile)))) { //Cyclic file
        0x00001db0:    8800        ..      LDRH     r0,[r0,#0]
        0x00001db2:    f001fb3f    ..?.    BL       _7816_4_getFileDescriptor ; 0x3434
        0x00001db6:    9904        ..      LDR      r1,[sp,#0x10]
        0x00001db8:    4008        .@      ANDS     r0,r0,r1
        0x00001dba:    2806        .(      CMP      r0,#6
        0x00001dbc:    d03d        =.      BEQ      0x1e3a ; _102221_search + 434
        0x00001dbe:    e02a        *.      B        0x1e16 ; _102221_search + 398
        0x00001dc0:    4894        .H      LDR      r0,[pc,#592] ; [0x2014] = 0x200006e8
        0x00001dc2:    6800        .h      LDR      r0,[r0,#0]
        0x00001dc4:    7805        .x      LDRB     r5,[r0,#0]
        0x00001dc6:    2d00        .-      CMP      r5,#0
        0x00001dc8:    d02e        ..      BEQ      0x1e28 ; _102221_search + 416
        0x00001dca:    790a        .y      LDRB     r2,[r1,#4]
        0x00001dcc:    42a2        .B      CMP      r2,r4
        0x00001dce:    d868        h.      BHI      0x1ea2 ; _102221_search + 538
        0x00001dd0:    a80a        ..      ADD      r0,sp,#0x28
        0x00001dd2:    8800        ..      LDRH     r0,[r0,#0]
        0x00001dd4:    2100        .!      MOVS     r1,#0
        0x00001dd6:    2301        .#      MOVS     r3,#1
        0x00001dd8:    9300        ..      STR      r3,[sp,#0]
        0x00001dda:    9501        ..      STR      r5,[sp,#4]
        0x00001ddc:    9102        ..      STR      r1,[sp,#8]
        0x00001dde:    9908        ..      LDR      r1,[sp,#0x20]
        0x00001de0:    9103        ..      STR      r1,[sp,#0xc]
        0x00001de2:    1f33        3.      SUBS     r3,r6,#4
        0x00001de4:    1e59        Y.      SUBS     r1,r3,#1
        0x00001de6:    418b        .A      SBCS     r3,r3,r1
        0x00001de8:    4933        3I      LDR      r1,[pc,#204] ; [0x1eb8] = 0x20000544
        0x00001dea:    f001fc2f    ../.    BL       _7816_4_SearchRecordFile ; 0x364c
        0x00001dee:    e036        6.      B        0x1e5e ; _102221_search + 470
;;;1002   
;;;1003   					DBG_FUNC("[102_221] _102221_search: Cyclic File: Record pointer is set on Last record, so operation will be done on first record\n");
;;;1004   					/*in cyclic file last record logically connected to first record, hence next record is first*/
;;;1005   					umbRecordNo = RECORD_FIRST;
;;;1006   				}
;;;1007   				else {// Linear file
;;;1008   					DBG_ERR("[102_221] _102221_search: Incorrect Data in First Byte of search indication \n");
;;;1009   					DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;1010   
;;;1011   					THROW(EXCEP_INCORRECT_DATAFIELD);
;;;1012   				}
;;;1013   			}
;;;1014   			else {
;;;1015   				/*Increment Record no*/
;;;1016   				umbRecordNo = pccCurrentChannel->umbCurrentRecPtr + 0x01;
;;;1017   				DBG_FUNC("[102_221] _102221_search: Next record to current record i.e. '%1'\n", umbRecordNo);
;;;1018   			}
;;;1019   		}
;;;1020   
;;;1021   		else if (umbMode == SEARCH_BACKWARD_FROM_PREVIOUS_MODE) {
;;;1022   
;;;1023   			DBG_FUNC("[102_221] _102221_search: BACKWARD ENHANCED SEARCH FROM PREVIOUS RECORD\n");
;;;1024   			umbSearchMode = SEARCH_RECORD_BACKWARD;
;;;1025   
;;;1026   			if (P1_BYTE != 0x00) { //P1 should be 00 for 'backward search from previous record' mode
        0x00001df0:    2800        .(      CMP      r0,#0
        0x00001df2:    d13f        ?.      BNE      0x1e74 ; _102221_search + 492
;;;1027   
;;;1028   				DBG_ERR("[102_221] _102221_search: Invalid P1 '%1', must be '00' for Backward Previous mode\n", P1_BYTE);
;;;1029   				DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;1030   				THROW(EXCEP_WRONG_P1_P2);
;;;1031   			}
;;;1032   
;;;1033   			if (pccCurrentChannel->umbCurrentRecPtr == RECORD_UNDEFINED) {
        0x00001df4:    4887        .H      LDR      r0,[pc,#540] ; [0x2014] = 0x200006e8
        0x00001df6:    6800        .h      LDR      r0,[r0,#0]
        0x00001df8:    7800        .x      LDRB     r0,[r0,#0]
        0x00001dfa:    2501        .%      MOVS     r5,#1
        0x00001dfc:    2800        .(      CMP      r0,#0
        0x00001dfe:    d017        ..      BEQ      0x1e30 ; _102221_search + 424
        0x00001e00:    2801        .(      CMP      r0,#1
        0x00001e02:    d117        ..      BNE      0x1e34 ; _102221_search + 428
        0x00001e04:    a80a        ..      ADD      r0,sp,#0x28
;;;1034   
;;;1035   				DBG_FUNC("[102_221] _102221_search: Record is undefined, so search operation will start from Last record\n");
;;;1036   				/*Set last Record no.*/
;;;1037   				umbRecordNo = umbNoOfRecords;
;;;1038   			}
;;;1039   			else if (pccCurrentChannel->umbCurrentRecPtr == RECORD_FIRST) {
;;;1040   
;;;1041   				if ((IS(CF, _7816_4_getFileDescriptor(fhaFile)))) {//cyclic
        0x00001e06:    8800        ..      LDRH     r0,[r0,#0]
        0x00001e08:    f001fb14    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x00001e0c:    9904        ..      LDR      r1,[sp,#0x10]
        0x00001e0e:    4008        .@      ANDS     r0,r0,r1
        0x00001e10:    2806        .(      CMP      r0,#6
        0x00001e12:    9e07        ..      LDR      r6,[sp,#0x1c]
        0x00001e14:    d011        ..      BEQ      0x1e3a ; _102221_search + 434
        0x00001e16:    487e        ~H      LDR      r0,[pc,#504] ; [0x2010] = 0x20000648
        0x00001e18:    2108        .!      MOVS     r1,#8
        0x00001e1a:    f005fe04    ....    BL       longjmp ; 0x7a26
        0x00001e1e:    487d        }H      LDR      r0,[pc,#500] ; [0x2014] = 0x200006e8
        0x00001e20:    6800        .h      LDR      r0,[r0,#0]
        0x00001e22:    7806        .x      LDRB     r6,[r0,#0]
        0x00001e24:    2e00        ..      CMP      r6,#0
        0x00001e26:    d108        ..      BNE      0x1e3a ; _102221_search + 434
        0x00001e28:    4879        yH      LDR      r0,[pc,#484] ; [0x2010] = 0x20000648
        0x00001e2a:    2112        .!      MOVS     r1,#0x12
        0x00001e2c:    f005fdfb    ....    BL       longjmp ; 0x7a26
        0x00001e30:    9e07        ..      LDR      r6,[sp,#0x1c]
        0x00001e32:    e002        ..      B        0x1e3a ; _102221_search + 434
;;;1042   
;;;1043   					DBG_FUNC("[102_221] _102221_search: Cyclic File: Record pointer is at first record, so operation will be done on Last record\n");
;;;1044   					/*in cyclic file first record logically connected to last record, hence previous record is last*/
;;;1045   					umbRecordNo = umbNoOfRecords;
;;;1046   				}
;;;1047   				else { //Linear
;;;1048   					DBG_ERR("[102_221] _102221_search: Linear Fixed: It cannot proceed to previous record, because Record pointer is at the first record\n");
;;;1049   					DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;1050   					THROW(EXCEP_INCORRECT_DATAFIELD);
;;;1051   				}
;;;1052   			}
;;;1053   			else {
;;;1054   
;;;1055   				/*Decrement Record no*/
;;;1056   				umbRecordNo = pccCurrentChannel->umbCurrentRecPtr - 0x01;
        0x00001e34:    1e46        F.      SUBS     r6,r0,#1
        0x00001e36:    e000        ..      B        0x1e3a ; _102221_search + 434
        0x00001e38:    1c46        F.      ADDS     r6,r0,#1
        0x00001e3a:    08f9        ..      LSRS     r1,r7,#3
        0x00001e3c:    a80a        ..      ADD      r0,sp,#0x28
;;;1057   
;;;1058   				DBG_FUNC("[102_221] _102221_search: Previous record to current one i.e. '%1'\n", umbRecordNo);
;;;1059   			}
;;;1060   		}
;;;1061   
;;;1062   		DBG_FUNC("[102_221] _102221_search: Searching from record %1\n", umbRecordNo);
;;;1063   
;;;1064   		umbRecordNo = _7816_4_EnhancedSearchRecordFile(fhaFile, gumbWorkingBuffer, P3_BYTE - LENGTH_SEARCH_INDICATION, umbSearchMode, umbTypeOfEnhanced, umbRecordNo, COMMAND_DATA[SEARCH_INDEX_OF_OFFSET_OR_VALUE], COMMAND_RESPONSE_DATA);
        0x00001e3e:    8800        ..      LDRH     r0,[r0,#0]
        0x00001e40:    4b71        qK      LDR      r3,[pc,#452] ; [0x2008] = 0x2000023e
        0x00001e42:    791a        .y      LDRB     r2,[r3,#4]
        0x00001e44:    799b        .y      LDRB     r3,[r3,#6]
        0x00001e46:    b2f6        ..      UXTB     r6,r6
        0x00001e48:    9100        ..      STR      r1,[sp,#0]
        0x00001e4a:    9601        ..      STR      r6,[sp,#4]
        0x00001e4c:    9302        ..      STR      r3,[sp,#8]
        0x00001e4e:    9908        ..      LDR      r1,[sp,#0x20]
        0x00001e50:    9103        ..      STR      r1,[sp,#0xc]
        0x00001e52:    b2eb        ..      UXTB     r3,r5
        0x00001e54:    1e91        ..      SUBS     r1,r2,#2
        0x00001e56:    b2ca        ..      UXTB     r2,r1
        0x00001e58:    4917        .I      LDR      r1,[pc,#92] ; [0x1eb8] = 0x20000544
        0x00001e5a:    f001fd35    ..5.    BL       _7816_4_EnhancedSearchRecordFile ; 0x38c8
;;;1065   	}
;;;1066   
;;;1067   	if (umbRecordNo) { // if records are found in searching
        0x00001e5e:    2800        .(      CMP      r0,#0
        0x00001e60:    d017        ..      BEQ      0x1e92 ; _102221_search + 522
        0x00001e62:    496a        jI      LDR      r1,[pc,#424] ; [0x200c] = 0x2000023c
        0x00001e64:    8008        ..      STRH     r0,[r1,#0]
;;;1068   
;;;1069   		DBG_FUNC("[102_221] _102221_search: Pattern is found \n");
;;;1070   
;;;1071   		pccCurrentChannel->umbCurrentRecPtr = COMMAND_RESPONSE_DATA[0x00];
        0x00001e66:    4868        hH      LDR      r0,[pc,#416] ; [0x2008] = 0x2000023e
        0x00001e68:    7940        @y      LDRB     r0,[r0,#5]
        0x00001e6a:    49f8        .I      LDR      r1,[pc,#992] ; [0x224c] = 0x200006e8
        0x00001e6c:    6809        .h      LDR      r1,[r1,#0]
        0x00001e6e:    7008        .p      STRB     r0,[r1,#0]
;;;1072   		gudbOutputLen = umbRecordNo;
;;;1073   	}
;;;1074   	else { //Pattern not found
;;;1075   		
;;;1076   		DBG_ERR("[102_221] _102221_search: Pattern is not found \n");
;;;1077   		DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;1078   		THROW(EXCEP_PATTERN_NOT_FOUND);
;;;1079   	}
;;;1080   
;;;1081   	DBG_FUNC_EXIT("<<[102_221] _102221_search() \n");
;;;1082   }
        0x00001e70:    b00b        ..      ADD      sp,sp,#0x2c
        0x00001e72:    bdf0        ..      POP      {r4-r7,pc}
        0x00001e74:    4866        fH      LDR      r0,[pc,#408] ; [0x2010] = 0x20000648
        0x00001e76:    2106        .!      MOVS     r1,#6
        0x00001e78:    f005fdd5    ....    BL       longjmp ; 0x7a26
        0x00001e7c:    4864        dH      LDR      r0,[pc,#400] ; [0x2010] = 0x20000648
        0x00001e7e:    210f        .!      MOVS     r1,#0xf
        0x00001e80:    f005fdd1    ....    BL       longjmp ; 0x7a26
        0x00001e84:    4862        bH      LDR      r0,[pc,#392] ; [0x2010] = 0x20000648
        0x00001e86:    2111        .!      MOVS     r1,#0x11
        0x00001e88:    f005fdcd    ....    BL       longjmp ; 0x7a26
        0x00001e8c:    2000        .       MOVS     r0,#0
        0x00001e8e:    7128        (q      STRB     r0,[r5,#4]
        0x00001e90:    e009        ..      B        0x1ea6 ; _102221_search + 542
        0x00001e92:    485f        _H      LDR      r0,[pc,#380] ; [0x2010] = 0x20000648
        0x00001e94:    2115        .!      MOVS     r1,#0x15
        0x00001e96:    f005fdc6    ....    BL       longjmp ; 0x7a26
        0x00001e9a:    485d        ]H      LDR      r0,[pc,#372] ; [0x2010] = 0x20000648
        0x00001e9c:    210d        .!      MOVS     r1,#0xd
        0x00001e9e:    f005fdc2    ....    BL       longjmp ; 0x7a26
        0x00001ea2:    2000        .       MOVS     r0,#0
        0x00001ea4:    7108        .q      STRB     r0,[r1,#4]
        0x00001ea6:    485a        ZH      LDR      r0,[pc,#360] ; [0x2010] = 0x20000648
        0x00001ea8:    2107        .!      MOVS     r1,#7
        0x00001eaa:    f005fdbc    ....    BL       longjmp ; 0x7a26
        0x00001eae:    4858        XH      LDR      r0,[pc,#352] ; [0x2010] = 0x20000648
        0x00001eb0:    210e        .!      MOVS     r1,#0xe
        0x00001eb2:    f005fdb8    ....    BL       longjmp ; 0x7a26
        0x00001eb6:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.5_3
        0x00001eb8:    20000544    D..     DCD    536872260
    $t.0
    _102221_getPSTDO
;;; Core/102_221/source\GenericCommands.c
;;;33     uMonoByte _102221_getPSTDO(tPinData pdPstdo, puMonoByte pumbResponse) {
        0x00001ebc:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00001ebe:    b083        ..      SUB      sp,sp,#0xc
        0x00001ec0:    9002        ..      STR      r0,[sp,#8]
        0x00001ec2:    2501        .%      MOVS     r5,#1
        0x00001ec4:    70cd        .p      STRB     r5,[r1,#3]
        0x00001ec6:    2090        .       MOVS     r0,#0x90
        0x00001ec8:    7088        .p      STRB     r0,[r1,#2]
        0x00001eca:    20c6        .       MOVS     r0,#0xc6
        0x00001ecc:    9101        ..      STR      r1,[sp,#4]
        0x00001ece:    7008        .p      STRB     r0,[r1,#0]
        0x00001ed0:    2705        .'      MOVS     r7,#5
        0x00001ed2:    2600        .&      MOVS     r6,#0
;;; Core/102_221/source\GenericCommands.c
        0x00001ed4:    9600        ..      STR      r6,[sp,#0]
        0x00001ed6:    4633        3F      MOV      r3,r6
        0x00001ed8:    e002        ..      B        0x1ee0 ; _102221_getPSTDO + 36
        0x00001eda:    4623        #F      MOV      r3,r4
;;;1      #include "102_221.h"
;;;2      
;;;3      /*
;;;4      * Macros
;;;5      */
;;;6      #define P1_CLOSE_CHANNEL											(0x80)
;;;7      #define P1_OPEN_CHANNEL												(0x00)
;;;8      #define P1_IS_INVALID												(0x7F)
;;;9      #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN					(0x01)
;;;10     #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_CLOSE					(0x00)
;;;11     #define MAX_LOGICAL_CHANNEL_NUMBER									(0x13)
;;;12     #define P1_STATUS_APP_TERMINATION_INITIATED							(0x02)
;;;13     #define	P2_STATUS_RETURN_NO_DATA									(0x0C)
;;;14     #define P2_STATUS_RETURN_DF_NAME_TLV								(0x01)
;;;15     #define P2_STATUS_RETURN_FCP_TLV									(0x00)
;;;16     #define LENGTH_PS_DO												(0x01)				
;;;17     #define LENGTH_TAG_KEY_REFERENCE									(0x01)	
;;;18     #define PIN_ENABLE_STATUS											(0x00)
;;;19     #define LENGTH_FIX													(0x00)
;;;20     #define INDEX_TAG_PIN_STATUS_TEMP_DO								(0x00)
;;;21     #define INDEX_LENGTH_PSTDO											(0x01)
;;;22     #define INDEX_TAG_SECURITY_SCDO_ALWAYS								(0x02)
;;;23     #define INDEX_LENGTH_PS												(0x03)
;;;24     #define INDEX_PIN_ENABLE_STATUS										(0x04)
;;;25     
;;;26     #define LENGTH_FCP_PROP_TLV											(0x0E)
;;;27     /*Definition the function for FCP Response PIN Status Template(PS_DO)
;;;28     @param pdPstdo: It's the identify the set pin of current DF
;;;29     @pumbResponse: It's prepare the FCP Response
;;;30     */
;;;31     /*In this Code Pin counter limit 8, So We Only 8 Pin Set in Perticular DF*/
;;;32     
;;;33     uMonoByte _102221_getPSTDO(tPinData pdPstdo, puMonoByte pumbResponse) {
;;;34     	uMonoByte	umbIndex = LENGTH_FIX;
;;;35     	uMonoByte	umbIndexId = LENGTH_FIX;
;;;36     	uMonoByte	umPinCount = LENGTH_FIX;
;;;37     	uMonoByte	umDoStatus = LENGTH_FIX;
;;;38     
;;;39     	DBG_FUNC_ENTRY(">>[102221]_102221_getPSTDO() \n");
;;;40     
;;;41     	/*Set Tag PIN status template DO */
;;;42     	pumbResponse[INDEX_TAG_PIN_STATUS_TEMP_DO] = TAG_PIN_STATUS_TEMP_DO;
;;;43     	/*Set Tag Security Do Always & Tag Length*/
;;;44     	pumbResponse[INDEX_TAG_SECURITY_SCDO_ALWAYS] = TAG_SECURITY_SCDO_ALWAYS;
;;;45     	pumbResponse[INDEX_LENGTH_PS] = LENGTH_PS_DO;
;;;46     
;;;47     	umbIndexId = 0x05;
;;;48     	/*In First 2 Bytes Pin Check 01-08, 81-88*/
;;;49     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
        0x00001edc:    2e0e        ..      CMP      r6,#0xe
        0x00001ede:    d021        !.      BEQ      0x1f24 ; _102221_getPSTDO + 104
;;;50     		if (pdPstdo & (0x01 << umbIndex)) {
        0x00001ee0:    9802        ..      LDR      r0,[sp,#8]
        0x00001ee2:    40f0        .@      LSRS     r0,r0,r6
        0x00001ee4:    07c0        ..      LSLS     r0,r0,#31
        0x00001ee6:    d01a        ..      BEQ      0x1f1e ; _102221_getPSTDO + 98
;;;51     
;;;52     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;53     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
        0x00001ee8:    b2f8        ..      UXTB     r0,r7
        0x00001eea:    2183        .!      MOVS     r1,#0x83
        0x00001eec:    9c01        ..      LDR      r4,[sp,#4]
        0x00001eee:    5421        !T      STRB     r1,[r4,r0]
        0x00001ef0:    1c78        x.      ADDS     r0,r7,#1
;;;54     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
        0x00001ef2:    b2c0        ..      UXTB     r0,r0
        0x00001ef4:    5425        %T      STRB     r5,[r4,r0]
        0x00001ef6:    1c76        v.      ADDS     r6,r6,#1
        0x00001ef8:    1cb8        ..      ADDS     r0,r7,#2
;;;55     			pumbResponse[umbIndexId++] = PIN_APP_1 + umbIndex;
        0x00001efa:    b2c0        ..      UXTB     r0,r0
        0x00001efc:    5426        &T      STRB     r6,[r4,r0]
        0x00001efe:    1c5c        \.      ADDS     r4,r3,#1
        0x00001f00:    1cff        ..      ADDS     r7,r7,#3
;;;56     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;57     			umPinCount++;
;;;58     			/*Check Pin Status, If Pin is Enable*/
;;;59     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_APP_1 + umbIndex))) {
        0x00001f02:    b2f0        ..      UXTB     r0,r6
        0x00001f04:    f002f8f8    ....    BL       _7816_4_isPinActive ; 0x40f8
        0x00001f08:    2800        .(      CMP      r0,#0
        0x00001f0a:    d1e6        ..      BNE      0x1eda ; _102221_getPSTDO + 30
;;;60     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;61     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
        0x00001f0c:    b2e0        ..      UXTB     r0,r4
        0x00001f0e:    2108        .!      MOVS     r1,#8
        0x00001f10:    1a08        ..      SUBS     r0,r1,r0
        0x00001f12:    4629        )F      MOV      r1,r5
        0x00001f14:    4081        .@      LSLS     r1,r1,r0
        0x00001f16:    9800        ..      LDR      r0,[sp,#0]
        0x00001f18:    4308        .C      ORRS     r0,r0,r1
        0x00001f1a:    9000        ..      STR      r0,[sp,#0]
        0x00001f1c:    e7dd        ..      B        0x1eda ; _102221_getPSTDO + 30
        0x00001f1e:    1c76        v.      ADDS     r6,r6,#1
        0x00001f20:    2e0e        ..      CMP      r6,#0xe
        0x00001f22:    d1dd        ..      BNE      0x1ee0 ; _102221_getPSTDO + 36
        0x00001f24:    2600        .&      MOVS     r6,#0
        0x00001f26:    e003        ..      B        0x1f30 ; _102221_getPSTDO + 116
        0x00001f28:    4623        #F      MOV      r3,r4
;;;62     			}
;;;63     
;;;64     		}
;;;65     	}
;;;66     	/*In Last 2 Bytes Pin Check 0A-0E and 8A-8E*/
;;;67     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
        0x00001f2a:    1c76        v.      ADDS     r6,r6,#1
        0x00001f2c:    2e0e        ..      CMP      r6,#0xe
        0x00001f2e:    d01f        ..      BEQ      0x1f70 ; _102221_getPSTDO + 180
;;;68     		if (pdPstdo & (0x010000 << umbIndex)) {
        0x00001f30:    9802        ..      LDR      r0,[sp,#8]
        0x00001f32:    40f0        .@      LSRS     r0,r0,r6
        0x00001f34:    03c0        ..      LSLS     r0,r0,#15
        0x00001f36:    d5f8        ..      BPL      0x1f2a ; _102221_getPSTDO + 110
;;;69     
;;;70     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;71     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
        0x00001f38:    b2f8        ..      UXTB     r0,r7
        0x00001f3a:    2183        .!      MOVS     r1,#0x83
        0x00001f3c:    9c01        ..      LDR      r4,[sp,#4]
        0x00001f3e:    5421        !T      STRB     r1,[r4,r0]
        0x00001f40:    1c78        x.      ADDS     r0,r7,#1
;;;72     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
        0x00001f42:    b2c0        ..      UXTB     r0,r0
        0x00001f44:    5425        %T      STRB     r5,[r4,r0]
        0x00001f46:    4630        0F      MOV      r0,r6
        0x00001f48:    387f        .8      SUBS     r0,r0,#0x7f
        0x00001f4a:    1cb9        ..      ADDS     r1,r7,#2
;;;73     			pumbResponse[umbIndexId++] = PIN_SECOND_APP_1 + umbIndex;
        0x00001f4c:    b2c9        ..      UXTB     r1,r1
        0x00001f4e:    5460        `T      STRB     r0,[r4,r1]
        0x00001f50:    1c5c        \.      ADDS     r4,r3,#1
        0x00001f52:    1cff        ..      ADDS     r7,r7,#3
;;;74     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;75     			umPinCount++;
;;;76     			/*Check Pin Status, If Pin is Enable*/
;;;77     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_SECOND_APP_1 + umbIndex))) {
        0x00001f54:    b2c0        ..      UXTB     r0,r0
        0x00001f56:    f002f8cf    ....    BL       _7816_4_isPinActive ; 0x40f8
        0x00001f5a:    2800        .(      CMP      r0,#0
        0x00001f5c:    d1e4        ..      BNE      0x1f28 ; _102221_getPSTDO + 108
;;;78     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;79     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
        0x00001f5e:    b2e0        ..      UXTB     r0,r4
        0x00001f60:    2108        .!      MOVS     r1,#8
        0x00001f62:    1a08        ..      SUBS     r0,r1,r0
        0x00001f64:    4629        )F      MOV      r1,r5
        0x00001f66:    4081        .@      LSLS     r1,r1,r0
        0x00001f68:    9800        ..      LDR      r0,[sp,#0]
        0x00001f6a:    4308        .C      ORRS     r0,r0,r1
        0x00001f6c:    9000        ..      STR      r0,[sp,#0]
        0x00001f6e:    e7db        ..      B        0x1f28 ; _102221_getPSTDO + 108
;;;80     			}
;;;81     
;;;82     		}
;;;83     	}
;;;84     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Status '%2' \n", umDoStatus);
;;;85     	/*Set DoStatus */
;;;86     	pumbResponse[INDEX_PIN_ENABLE_STATUS] = umDoStatus;
        0x00001f70:    9800        ..      LDR      r0,[sp,#0]
        0x00001f72:    9901        ..      LDR      r1,[sp,#4]
        0x00001f74:    7108        .q      STRB     r0,[r1,#4]
;;;87     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Length \n");
;;;88     	/*Set DoTag Length */
;;;89     	pumbResponse[INDEX_LENGTH_PSTDO] = umbIndexId - 0x02;
        0x00001f76:    1eb8        ..      SUBS     r0,r7,#2
        0x00001f78:    7048        Hp      STRB     r0,[r1,#1]
;;;90     	DBG_FUNC_EXIT("<<[102221]_102221_getPSTDO() \n");
;;;91     	return umbIndexId;
        0x00001f7a:    b2f8        ..      UXTB     r0,r7
        0x00001f7c:    b003        ..      ADD      sp,sp,#0xc
        0x00001f7e:    bdf0        ..      POP      {r4-r7,pc}
    _102221_status
;;;92     
;;;93     }
;;;94     /*
;;;95     * UICC Status Command
;;;96     */
;;;97     
;;;98     //enum {
;;;99     	//FILE_IS_MF = 0x01,
;;;100    	//FILE_IS_DF = 0x02,
;;;101    	//FILE_IS_EF = 0x04
;;;102    //}tFileType;
;;;103    
;;;104    
;;;105    void _102221_status(void) {
        0x00001f80:    b510        ..      PUSH     {r4,lr}
;;;106    
;;;107    	uMonoByte preparedLen = 0x00;
;;;108    
;;;109    	DBG_FUNC_ENTRY(">>[102_221] _102221_status() \n");
;;;110    	
;;;111    	if (P1_BYTE > P1_STATUS_APP_TERMINATION_INITIATED) { 
        0x00001f82:    4c21        !L      LDR      r4,[pc,#132] ; [0x2008] = 0x2000023e
        0x00001f84:    78a0        .x      LDRB     r0,[r4,#2]
        0x00001f86:    2803        .(      CMP      r0,#3
        0x00001f88:    d234        4.      BCS      0x1ff4 ; _102221_status + 116
;;;112    		//P1 must either be 01 02 or 00
;;;113    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;114    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;115    		THROW(EXCEP_WRONG_P1_P2);
;;;116    	}
;;;117    
;;;118    	//check if the value of P1 is valid or not
;;;119    	DBG_FUNC(">>[102_221] _102221_status: P1 is valid\n");
;;;120    
;;;121    	if (P2_BYTE == P2_STATUS_RETURN_FCP_TLV) {
        0x00001f8a:    78e0        .x      LDRB     r0,[r4,#3]
        0x00001f8c:    2800        .(      CMP      r0,#0
        0x00001f8e:    d017        ..      BEQ      0x1fc0 ; _102221_status + 64
        0x00001f90:    2801        .(      CMP      r0,#1
        0x00001f92:    d126        &.      BNE      0x1fe2 ; _102221_status + 98
;;;122    		// Prepare FCP tlv of current DF
;;;123    		DBG_FUNC(">>[102_221] _102221_status: Return FCP template of current DF\n");
;;;124    		gudbOutputLen = _102221_prepareFCPResponseForFile(pccCurrentChannel->fhaCurrentDf, RESPONSE_BUFF); //getting the prepared FCP response
;;;125    		preparedLen = (uMonoByte)gudbOutputLen;
;;;126    		//fcp Response 
;;;127    		if (P3_BYTE != preparedLen) {
;;;128    			gudbOutputLen = 0x00;
;;;129    		}
;;;130    
;;;131    	}
;;;132    	else if (P2_BYTE == P2_STATUS_RETURN_DF_NAME_TLV) { // if p2 is to check TLV_OBJ of current selected Application
;;;133    
;;;134    		DBG_FUNC(">>[102_221] _102221_status: Return DF Name TLV of current ADF\n");
;;;135    
;;;136    		if (pccCurrentChannel->fhaCurrentAdf == NO_FILE_PRESENT) {
        0x00001f94:    481f        .H      LDR      r0,[pc,#124] ; [0x2014] = 0x200006e8
        0x00001f96:    6800        .h      LDR      r0,[r0,#0]
        0x00001f98:    8940        @.      LDRH     r0,[r0,#0xa]
        0x00001f9a:    2800        .(      CMP      r0,#0
        0x00001f9c:    d02a        *.      BEQ      0x1ff4 ; _102221_status + 116
        0x00001f9e:    2184        .!      MOVS     r1,#0x84
;;;137    
;;;138    			//to check AID DF NAME TLV P2 must be 01
;;;139    			DBG_ERR("[102_221] _102221_status: No Application selected\n");
;;;140    			DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;141    			THROW(EXCEP_WRONG_P1_P2);
;;;142    		}
;;;143    
;;;144    		DBG_FUNC(">>[102_221] _102221_status: Preparing DF Name TLV of current ADF\n");
;;;145    
;;;146    		//setting the first index as the Tag for DF
;;;147    		RESPONSE_BUFF[0] = TAG_DF_NAME;
        0x00001fa0:    7161        aq      STRB     r1,[r4,#5]
;;;148    
;;;149    		//getting the prepared response from index 1
;;;150    		_7816_4_getAidOfAdf(pccCurrentChannel->fhaCurrentAdf, &RESPONSE_BUFF[1]);
        0x00001fa2:    1da1        ..      ADDS     r1,r4,#6
        0x00001fa4:    f001ff82    ....    BL       _7816_4_getAidOfAdf ; 0x3eac
;;;151    
;;;152    		gudbOutputLen = RESPONSE_BUFF[1] + 2;
        0x00001fa8:    79a0        .y      LDRB     r0,[r4,#6]
        0x00001faa:    1c83        ..      ADDS     r3,r0,#2
        0x00001fac:    4a17        .J      LDR      r2,[pc,#92] ; [0x200c] = 0x2000023c
        0x00001fae:    8013        ..      STRH     r3,[r2,#0]
        0x00001fb0:    7921        !y      LDRB     r1,[r4,#4]
;;;153    		preparedLen =(uMonoByte) gudbOutputLen;
        0x00001fb2:    b2d8        ..      UXTB     r0,r3
;;;154    			if (P3_BYTE != gudbOutputLen) {
        0x00001fb4:    428b        .B      CMP      r3,r1
        0x00001fb6:    d011        ..      BEQ      0x1fdc ; _102221_status + 92
        0x00001fb8:    7120         q      STRB     r0,[r4,#4]
        0x00001fba:    2000        .       MOVS     r0,#0
;;;155    				
;;;156    				gudbOutputLen = 0x00;
        0x00001fbc:    8010        ..      STRH     r0,[r2,#0]
        0x00001fbe:    e01e        ..      B        0x1ffe ; _102221_status + 126
        0x00001fc0:    4814        .H      LDR      r0,[pc,#80] ; [0x2014] = 0x200006e8
        0x00001fc2:    6800        .h      LDR      r0,[r0,#0]
        0x00001fc4:    88c0        ..      LDRH     r0,[r0,#6]
        0x00001fc6:    1d61        a.      ADDS     r1,r4,#5
        0x00001fc8:    f000f826    ..&.    BL       _102221_prepareFCPResponseForFile ; 0x2018
        0x00001fcc:    7921        !y      LDRB     r1,[r4,#4]
        0x00001fce:    4281        .B      CMP      r1,r0
        0x00001fd0:    d101        ..      BNE      0x1fd6 ; _102221_status + 86
        0x00001fd2:    460a        .F      MOV      r2,r1
        0x00001fd4:    e000        ..      B        0x1fd8 ; _102221_status + 88
        0x00001fd6:    2200        ."      MOVS     r2,#0
        0x00001fd8:    4b0c        .K      LDR      r3,[pc,#48] ; [0x200c] = 0x2000023c
        0x00001fda:    801a        ..      STRH     r2,[r3,#0]
;;;157    
;;;158    				DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;159    				DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;160    				
;;;161    				/*raise exception of Wrong P3*/
;;;162    				THROW2(EXCEP_WRONG_P3, preparedLen);
;;;163    		}
;;;164    	}
;;;165    	else if (P2_BYTE == P2_STATUS_RETURN_NO_DATA)
;;;166    	{	
;;;167    		DBG_FUNC(">>[102_221] _102221_status: No response to return\n");
;;;168    		gudbOutputLen = 0x00;
;;;169    		THROW(EXCEP_NORMAL_ENDING);
;;;170    	}
;;;171    	else {
;;;172    		//p2 must either be 00 , 01 or 0C
;;;173    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;174    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;175    		THROW(EXCEP_WRONG_P1_P2);
;;;176    	}
;;;177    
;;;178    	if (P3_BYTE != preparedLen) {
        0x00001fdc:    4281        .B      CMP      r1,r0
        0x00001fde:    d10d        ..      BNE      0x1ffc ; _102221_status + 124
;;;179    
;;;180    		DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;181    
;;;182    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;183    		/*raise exception of Wrong P3*/
;;;184    		THROW2(EXCEP_WRONG_P3,preparedLen);
;;;185    	}
;;;186    
;;;187    	DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;188    }
        0x00001fe0:    bd10        ..      POP      {r4,pc}
        0x00001fe2:    280c        .(      CMP      r0,#0xc
        0x00001fe4:    d106        ..      BNE      0x1ff4 ; _102221_status + 116
        0x00001fe6:    4809        .H      LDR      r0,[pc,#36] ; [0x200c] = 0x2000023c
        0x00001fe8:    2100        .!      MOVS     r1,#0
        0x00001fea:    8001        ..      STRH     r1,[r0,#0]
        0x00001fec:    4808        .H      LDR      r0,[pc,#32] ; [0x2010] = 0x20000648
        0x00001fee:    2103        .!      MOVS     r1,#3
        0x00001ff0:    f005fd19    ....    BL       longjmp ; 0x7a26
        0x00001ff4:    4806        .H      LDR      r0,[pc,#24] ; [0x2010] = 0x20000648
        0x00001ff6:    2106        .!      MOVS     r1,#6
        0x00001ff8:    f005fd15    ....    BL       longjmp ; 0x7a26
        0x00001ffc:    7120         q      STRB     r0,[r4,#4]
        0x00001ffe:    4804        .H      LDR      r0,[pc,#16] ; [0x2010] = 0x20000648
        0x00002000:    2107        .!      MOVS     r1,#7
        0x00002002:    f005fd10    ....    BL       longjmp ; 0x7a26
        0x00002006:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.1_0
        0x00002008:    2000023e    >..     DCD    536871486
    __arm_cp.1_1
        0x0000200c:    2000023c    <..     DCD    536871484
    __arm_cp.1_2
        0x00002010:    20000648    H..     DCD    536872520
    __arm_cp.1_3
        0x00002014:    200006e8    ...     DCD    536872680
    $t.2
    _102221_prepareFCPResponseForFile
;;;189    
;;;190    /*Definition the function selectByPath
;;;191    * @param parentDf: It's the address of Current directory file
;;;192    @param pumbPath: It's the Current Directory File Id
;;;193    @param umbPathLength: It's Length of File Id
;;;194    */
;;;195    
;;;196    tFileHeaderAddr _102221_selectByPath(tFileHeaderAddr parentDf, puMonoByte pumbPath, uMonoByte umbPathLength) {
;;;197    	/*Variables declaration/definition*/
;;;198    	uMonoByte	umbIndex;
;;;199    	uDiByte		udbFileId;
;;;200    
;;;201    	DBG_FUNC_ENTRY(">>_102221_selectByPath\n"); 
;;;202    
;;;203    	//Try to Select File Id, Select By Path
;;;204    	for (umbIndex = 0x00; umbIndex < umbPathLength; umbIndex  += LENGTH_FILE_ID) {
;;;205    
;;;206    		//Get Next File ID threw mm_makeUdiByte() function			
;;;207    		udbFileId = mm_makeUdiByte(pumbPath, umbIndex);
;;;208    
;;;209    		DBG_FUNC("[102_221]_102221_selectByPath:Get File Id '%2' \n", udbFileId);
;;;210    
;;;211    		if ((0x00 == umbIndex) && (FID_CURRENT_ADF == udbFileId) && (parentDf == _7816_4_getMfAddress())) { // Check if its Reserved ADF file ID
;;;212    
;;;213    			DBG_FUNC("[102_221]_102221_selectByPath: Requesting Current ADF using Reserved ADF file id 7FFF\n");
;;;214    
;;;215    			/*store current ADF even if its not set*/
;;;216    			parentDf = pccCurrentChannel->fhaCurrentAdf;
;;;217    
;;;218    			DBG_FUNC("[102_221]_102221_selectByPath: Current ADF '%2'\n", parentDf);
;;;219    
;;;220    		}
;;;221    		else {
;;;222    			DBG_FUNC("[102_221] _102221_selectByPath: Searching given File ID '%2' under Current DF\n", udbFileId);
;;;223    
;;;224    			/*Check given File ID under current DF*/
;;;225    			_7816_4_ifFileExists(udbFileId, parentDf, MODE_FIND_FID, &parentDf);
;;;226    
;;;227    		}
;;;228    
;;;229    		if (
;;;230    				(NO_FILE_PRESENT == parentDf) //File not found
;;;231    				||								//OR
;;;232    				(!(IS(DF, _7816_4_getFileDescriptor(parentDf)))) //Selected file is an EF
;;;233    			) {
;;;234    			DBG_FUNC("[102_221] _102221_selectByPath: File ID '%2' not found under Current DF\n", udbFileId);
;;;235    			break;
;;;236    		}
;;;237    	}
;;;238    
;;;239    	if (umbIndex < (umbPathLength - LENGTH_FILE_ID)) {
;;;240    		/*An EF found in the middle of given path
;;;241    		* or
;;;242    		* File not found*/
;;;243    		return NO_FILE_PRESENT;
;;;244    	}// if (umbIndex < (umbPathLength - LENGTH_FILE_ID))
;;;245    
;;;246    	DBG_FUNC_EXIT("<<[102_221] _102221_selectByPath() \n");
;;;247    
;;;248    	return parentDf;
;;;249    }
;;;250    
;;;251    /*Definition the function selectByFileId
;;;252    * @param fhaFile: Current directory file
;;;253    */
;;;254    tFileHeaderAddr _102221_selectByFileId(tFileHeaderAddr fhaFile, uDiByte udbFileID) {
;;;255    	/*Variables declaration/definition*/
;;;256    	tFileHeader			fhFile;
;;;257    	tFileHeaderAddr	fhaRequestedFile = fhaFile; // Default initalized with current directory
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>_102221_selectByFileId\n");
;;;260    
;;;261    	if (udbFileID == FID_MF) //if its MF
;;;262    	{
;;;263    		DBG_FUNC("[102_221] _102221_selectByFileId: Requesting MF 3F00\n");
;;;264    		/*Set MF as current DF*/
;;;265    		fhaRequestedFile = _7816_4_getMfAddress();
;;;266    	}
;;;267    	else if (FID_CURRENT_ADF == udbFileID) { // Check if its Reserved ADF file ID
;;;268    
;;;269    		DBG_FUNC("[102_221] _102221_selectByFileId: Requesting Current ADF using Reserved ADF file id 7FFF\n");
;;;270    
;;;271    		/*If application is selected fhaRequestedFile contains its address otherwise NO_FILE_PRESENT*/
;;;272    		/*Set ADF as current DF*/
;;;273    		fhaRequestedFile = pccCurrentChannel->fhaCurrentAdf;
;;;274    
;;;275    	}
;;;276    	/*Check the File ID of current DF with incoming File id*/
;;;277    	else if (udbFileID != _7816_4_getFileId(fhaFile))  {
;;;278    		
;;;279    		DBG_FUNC("[102_221] _102221_selectByFileId: Search given File ID '%2' under Current DF\n", udbFileID);
;;;280    
;;;281    		/*Check given File ID under current DF*/
;;;282    		_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaRequestedFile);
;;;283    
;;;284    		if (NO_FILE_PRESENT == fhaRequestedFile) { //File not found
;;;285    
;;;286    			DBG_FUNC("[102_221] _102221_selectByFileId: File ID '%2' not found under Current DF\n", udbFileID);
;;;287    
;;;288    			/*read header of current DF*/
;;;289    			_7816_4_getFileHeader(fhaFile, &fhFile);
;;;290    
;;;291    			/*fetch the parent of current DF*/
;;;292    			fhaFile = fhFile.fhaParent;
;;;293    			
;;;294    			/*Check if there is a parent, or current directory is root one*/
;;;295    			if (fhaFile != NO_FILE_PRESENT) {
;;;296    
;;;297    				DBG_FUNC("[102_221] _102221_selectByFileId: Check if parent of current directory is given file\n");
;;;298    
;;;299    				/*Check File ID of Current DF's parent */
;;;300    				if (udbFileID == _7816_4_getFileId(fhaFile)) {
;;;301    
;;;302    					DBG_FUNC("[102_221] _102221_selectByFileId: Parent of current DF is the requested file\n");
;;;303    
;;;304    					/*return parent file*/
;;;305    					fhaRequestedFile = fhaFile;
;;;306    				}
;;;307    				else { //any DF which is an immediate child of the parent of the current DF
;;;308    
;;;309    					DBG_FUNC("[102_221] _102221_selectByFileId: Its not even parent of current DF\n");
;;;310    					DBG_FUNC("[102_221] _102221_selectByFileId: Search same file Id '%2' under parent of Current DF\n", udbFileID);
;;;311    
;;;312    					/*search same file in parent of current DF*/
;;;313    					_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaRequestedFile);
;;;314    
;;;315    
;;;316    					if ((NO_FILE_PRESENT != fhaRequestedFile) // File found
;;;317    						&&								//AND
;;;318    						(!(IS(DF, _7816_4_getFileDescriptor(fhaRequestedFile))))) {	// if its EF
;;;319    
;;;320    						/*raise exception of file not found*/
;;;321    						DBG_ERR("[102_221] _102221_selectByFileId: File id '%2' not found \n", udbFileID);
;;;322    						fhaRequestedFile = NO_FILE_PRESENT;
;;;323    					}
;;;324    				}
;;;325    			}
;;;326    
;;;327    		}
;;;328    	}
;;;329    
;;;330    	DBG_FUNC("[102_221] _102221_selectByFileId: File ID '%2' found\n", udbFileID);
;;;331    	DBG_FUNC_EXIT("<<[102_221]_102221_selectByFileId() \n");
;;;332    	return fhaRequestedFile;
;;;333    }
;;;334    
;;;335    
;;;336    /*
;;;337    * UICC select command
;;;338    */
;;;339    
;;;340    void _102221_select(void) {
;;;341    
;;;342    	/*Variables declaration/definition*/
;;;343    	uDiByte			udbFileID;
;;;344    	tFileHeaderAddr fhaFile;
;;;345    	tFileHeader		fhFile;
;;;346    	DBG_FUNC_ENTRY(">>[102_221] _102221_select()\n");
;;;347    
;;;348    	/*get fileID from command data*/
;;;349    	udbFileID = mm_makeUdiByte(COMMAND_DATA, 0x00);
;;;350    
;;;351    	/*get Current DF*/
;;;352    	fhaFile = pccCurrentChannel->fhaCurrentDf;
;;;353    
;;;354    	/*validation of P2 byte*/
;;;355    	if (P2_BYTE_VALIDATION_PARAMETER != (MASK_P2_BYTE & P2_BYTE))
;;;356    	{
;;;357    		DBG_ERR("[102_221] _102221_select : Invalid P2 Byte \n");
;;;358    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;359    		/*raise exception of Wrong P2*/
;;;360    		THROW(EXCEP_WRONG_P1_P2);
;;;361    	}
;;;362    
;;;363    	/*Select a File by Different Methods*/
;;;364    	switch (P1_BYTE)
;;;365    	{
;;;366    	case P1_SELECT_BY_FILE_ID:
;;;367    		if (P3_BYTE == LENGTH_FILE_ID) {
;;;368    			/* Select the ID by _102221_selectByFileId*/
;;;369    			fhaFile = _102221_selectByFileId(fhaFile, udbFileID);
;;;370    		}
;;;371    		else
;;;372    		{
;;;373    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;374    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;375    			/*raise exception of Wrong P3*/
;;;376    			THROW2(EXCEP_WRONG_P3, LENGTH_FILE_ID);
;;;377    		}
;;;378    
;;;379    		break;
;;;380    	case P1_SELECT_BY_CHILD:
;;;381    		if (P3_BYTE == LENGTH_FILE_ID) {
;;;382    			DBG_FUNC("[102_221] _102221_select : Select child DF of the current DF.\n");
;;;383    			/*Select child DF of the current DF*/
;;;384    			_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaFile);
;;;385    
;;;386    			/*EF check*/
;;;387    			if (
;;;388    				(NO_FILE_PRESENT != fhaFile) // File found
;;;389    				&&								//AND
;;;390    				(!(IS(DF, _7816_4_getFileDescriptor(fhaFile))))
;;;391    				)
;;;392    			{	// if its EF
;;;393    				/*raise exception of file not found*/
;;;394    				DBG_ERR("[102_221]_102221_select() Found File id '%2' is a EF \n", udbFileID);
;;;395    				fhaFile = NO_FILE_PRESENT;
;;;396    			}
;;;397    		}
;;;398    		else
;;;399    		{
;;;400    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;401    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;402    			/*raise exception of Wrong P3*/
;;;403    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;404    		}
;;;405    		break;
;;;406    
;;;407    	case P1_SELECT_BY_PARENT:
;;;408    		/*p3 Bytes Depends on FCP Response*/
;;;409    		DBG_FUNC("[102_221] _102221_select : Select parent DF of the current DF.\n");
;;;410    		/* Select parent DF of the current DF */
;;;411    		fhaFile = _7816_4_getParentFile(fhaFile);
;;;412    		break;
;;;413    
;;;414    	case P1_SELECT_BY_AID:
;;;415    		DBG_FUNC("[102_221] _102221_select : P1=04 Select by AID.\n");
;;;416    
;;;417    		/*check AID length*/
;;;418    		if (
;;;419    			(P3_BYTE > LENGTH_MAX_AID)
;;;420    			||
;;;421    			(P3_BYTE < LENGTH_MIN_AID)
;;;422    			) /*P3 for SelectByAID should be valid i.e. 5-16 bytes*/
;;;423    		{
;;;424    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;425    
;;;426    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;427    
;;;428    			/*raise exception of Wrong P3*/
;;;429    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;430    		}
;;;431    
;;;432    		/*search for ADF using DF Name*/
;;;433    		_7816_4_ifAdfExists(&COMMAND_APDU[INDEX_P3], &fhaFile);
;;;434    
;;;435    		if (NO_FILE_PRESENT == fhaFile) {  // if search doesnt succeed
;;;436    			DBG_ERR("[102_221] _102221_select: File not found \n");
;;;437    			/*file is not found then*/
;;;438    			break;
;;;439    		}
;;;440    
;;;441    		DBG_FUNC("[102_221] _102221_select : Found File as Current ADF.\n");
;;;442    		/*Set the found ADF as current ADF*/
;;;443    		pccCurrentChannel->fhaCurrentAdf = fhaFile;
;;;444    		break;
;;;445    
;;;446    	case P1_SELECT_BY_PATH_MF:				//Select by path from MF
;;;447    
;;;448    		if ((P3_BYTE!=0) && (P3_BYTE % LENGTH_FILE_ID == 0)) {
;;;449    			DBG_FUNC("[102_221] _102221_select: Requesting MF 3F00\n");
;;;450    			/*Current DF would be MF*/
;;;451    			fhaFile = _102221_selectByPath(_7816_4_getMfAddress(), COMMAND_DATA, P3_BYTE);
;;;452    		}
;;;453    		else
;;;454    		{
;;;455    			/*If p3 value is not correct then*/
;;;456    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;457    			THROW(EXCEP_WRONG_P3);
;;;458    		}
;;;459    		break;
;;;460    
;;;461    	case P1_SELECT_BY_PATH_CURRENT_DF:		//Select by path from current DF 
;;;462    		if ((P3_BYTE != 0) && (P3_BYTE % LENGTH_FILE_ID == 0)) {
;;;463    			/* Store the Select file address in fhaFile using _102221_selectByPath function */
;;;464    			fhaFile = _102221_selectByPath(fhaFile, COMMAND_DATA, P3_BYTE);
;;;465    		}
;;;466    		else {
;;;467    			/*If p3 value is not correct then*/
;;;468    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;469    			THROW(EXCEP_WRONG_P3);
;;;470    		}
;;;471    		break;
;;;472    
;;;473    	default:
;;;474    		/*If p1 value is not correct then*/
;;;475    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;476    		THROW(EXCEP_WRONG_P1_P2);
;;;477    
;;;478    	}
;;;479    
;;;480    	if (NO_FILE_PRESENT == fhaFile) { // if search doesnt exceed
;;;481    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;482    		THROW(EXCEP_FILE_NOT_FOUND);
;;;483    	}
;;;484    	/*check P2_BYTE for FCP template to be returned or not*/
;;;485    	if (RETURN_FCP_TEMPLATE == (P2_BYTE & MASK_FCP_RETURN_BYTES))
;;;486    	{
;;;487    		/*get length of prepared response*/
;;;488    		gudbOutputLen =  _102221_prepareFCPResponseForFile(fhaFile, RESPONSE_BUFF);
;;;489    	}
;;;490    	
;;;491    
;;;492    	/*read header of current file*/
;;;493    	_7816_4_getFileHeader(fhaFile, &fhFile);
;;;494    
;;;495    	if (IS(DF, fhFile.umbFileDesc)) //if its DF
;;;496    	{
;;;497    		DBG_FUNC("[102_221]_102221_select() :Found File ID is a DF\n");
;;;498    
;;;499    		/*Set found file as current DF in current channel context*/
;;;500    		pccCurrentChannel->fhaCurrentDf = fhaFile;
;;;501    
;;;502    		/*And reset the current EF to undefined*/
;;;503    		pccCurrentChannel->fhaCurrentEf = NO_FILE_PRESENT;
;;;504    	}
;;;505    	else { // if its EF
;;;506    
;;;507    		DBG_FUNC("[102_221] _102221_select():Found File ID is an EF\n");
;;;508    
;;;509    		/*set found file's parent DF as current DF*/
;;;510    		pccCurrentChannel->fhaCurrentDf = fhFile.fhaParent;
;;;511    
;;;512    		/*Set current EF as presented file*/
;;;513    		pccCurrentChannel->fhaCurrentEf = fhaFile;
;;;514    	}
;;;515    
;;;516    	DBG_FUNC("[102_221]_102221_select: Reset the Record pointer\n");
;;;517    
;;;518    	/*Current Record pointer is undefined on successful selection*/
;;;519    	pccCurrentChannel->umbCurrentRecPtr = RECORD_UNDEFINED;
;;;520    
;;;521    	DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;522    }
;;;523    /*
;;;524    * It prepares length of FCP response.
;;;525    */
;;;526    //uMonoByte _102221_prepFCPforFile(tFileHeaderAddr fhaADF, puMonoByte pumbAid)
;;;527    //{
;;;528    	/*TO_DO....*/
;;;529    	//return 0;
;;;530    //}
;;;531    
;;;532    /*
;;;533    * It implements UICC Authenticate command
;;;534    */
;;;535    void _102221_authenticate(void) {
;;;536    
;;;537    	DBG_FUNC_ENTRY(">>[102_221] _102221_authenticate() \n");
;;;538    
;;;539    	DBG_FUNC_EXIT("<<[102_221] _102221_authenticate() \n");
;;;540    }
;;;541    
;;;542    /*
;;;543    * It implements UICC Manage Channel command
;;;544    */
;;;545    void _102221_manageChannel(void) {
;;;546    
;;;547    	uMonoByte umbChannelNo; //which channel to open
;;;548    
;;;549    	DBG_FUNC_ENTRY(">>[102_221] _102221_manageChannel() \n");
;;;550    
;;;551    	if ((P1_OPEN_CHANNEL == P1_BYTE) && (0x00 == P2_BYTE)) { // P1 states Open function and P2 is '00'
;;;552    
;;;553    		DBG_FUNC("[102_221] _102221_manageChannel: Request to Open a channel\n");
;;;554    
;;;555    		if (P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN != P3_BYTE) //check if p3 is not equal to expected response length
;;;556    		{
;;;557    			/*Expected length of response must be 01*/
;;;558    			DBG_ERR("[102_221] _102221_manageChannel: Le/P3 must be '01'\n");
;;;559    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;560    			THROW2(EXCEP_WRONG_P3, P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN);
;;;561    		}
;;;562    
;;;563    		if (gumbChannelsState) //Check if atleast 1 logical channel must be available
;;;564    		{
;;;565    			/*Checking availability of each logical channel*/
;;;566    			if (gumbChannelsState & MASK_LOGICAL_CHANNEL_1) {
;;;567    
;;;568    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '01'\n");
;;;569    				/*Open logical channel no. 1*/
;;;570    				umbChannelNo = 0x01;
;;;571    			}
;;;572    			else if (gumbChannelsState & MASK_LOGICAL_CHANNEL_2) {
;;;573    
;;;574    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '02'\n");
;;;575    				/*Open logical channel no. 2*/
;;;576    				umbChannelNo = 0x02;
;;;577    
;;;578    			}
;;;579    			else { //it means logical channel 3 available
;;;580    
;;;581    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '03'\n");
;;;582    				umbChannelNo = 0x03; //open logical channel no. 3
;;;583    			}
;;;584    
;;;585    			/*clear the corresponding bit*/
;;;586    			gumbChannelsState &= (uMonoByte)(~(SHIFT_LEFT_BY_N_BITS(0x01, umbChannelNo)));
;;;587    
;;;588    			/*Store channel no. in response buffer*/
;;;589    			COMMAND_RESPONSE_DATA[0x00] = umbChannelNo;
;;;590    
;;;591    			/*Set Response length*/
;;;592    			gudbOutputLen = 0x01;
;;;593    
;;;594    			/*default File would be MF*/
;;;595    			ccContexts[umbChannelNo].fhaCurrentDf = _7816_4_getMfAddress();
;;;596    
;;;597    		}
;;;598    		else {
;;;599    			/*No channel available to open*/
;;;600    			DBG_ERR("[102_221] _102221_manageChannel: All channels are already opened, so no new channels left to open\n");
;;;601    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;602    			THROW(EXCEP_FUNCTION_NOT_SUPPORTED);
;;;603    		}
;;;604    	}
;;;605    	else if ((P1_CLOSE_CHANNEL == P1_BYTE) && (P2_BYTE <= MAX_LOGICAL_CHANNEL_NUMBER)) {
;;;606    
;;;607    		if (P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_CLOSE != P3_BYTE) //check if p3 is not equal to expected response length
;;;608    		{
;;;609    			/*Expected length of response must be 01*/
;;;610    			DBG_ERR("[102_221] _102221_manageChannel: Le/P3 must be '00'\n");
;;;611    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;612    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;613    		}
;;;614    
;;;615    		if ((BASIC_LOGICAL_CHANNEL < P2_BYTE) && (P2_BYTE < 0x04)) { // Valid range for Logical channels are '01','02' and '03'
;;;616    
;;;617    			DBG_FUNC("[102_221] _102221_manageChannel: Closing the channel %1\n", P2_BYTE);
;;;618    
;;;619    			/*Set the corresponding bit of incoming logical channel*/
;;;620    			gumbChannelsState |= (uMonoByte)(SHIFT_LEFT_BY_N_BITS(0x01, P2_BYTE));
;;;621    
;;;622    			/*clear the Channel context*/
;;;623    			mem_set((puMonoByte)& ccContexts[P2_BYTE], 0x00, sizeof(tChannelContext));
;;;624    		}
;;;625    		else {
;;;626    
;;;627    			/*Closing the unsupported logical channel*/
;;;628    			DBG_ERR("[102_221] _102221_manageChannel: Wrong Logical channel in P2 as its not supported\n");
;;;629    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;630    			THROW(EXCEP_FUNCTION_NOT_SUPPORTED);
;;;631    		}
;;;632    	}
;;;633    	else {
;;;634    		/*Invalid P1 or P2*/
;;;635    		DBG_ERR("[102_221] _102221_manageChannel: Wrong P1-P2\n");
;;;636    		DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;637    		THROW(EXCEP_WRONG_P1_P2);
;;;638    	}
;;;639    
;;;640    	DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel() \n");
;;;641    }
;;;642    /*fhaFile : whose FCP response to return, DF or ADF or EF
;;;643    pumbFcpResponse : where response to be copied
;;;644    return total fcp response length
;;;645    */
;;;646    
;;;647    uMonoByte _102221_prepareFCPResponseForFile(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG puMonoByte pumbFcpResponse) {
        0x00002018:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000201a:    b089        ..      SUB      sp,sp,#0x24
        0x0000201c:    460c        .F      MOV      r4,r1
        0x0000201e:    2162        b!      MOVS     r1,#0x62
        0x00002020:    7021        !p      STRB     r1,[r4,#0]
        0x00002022:    ae04        ..      ADD      r6,sp,#0x10
        0x00002024:    9001        ..      STR      r0,[sp,#4]
        0x00002026:    4631        1F      MOV      r1,r6
        0x00002028:    f001f990    ....    BL       _7816_4_getFileHeader ; 0x334c
;;; Core/102_221/source\GenericCommands.c
        0x0000202c:    2082        .       MOVS     r0,#0x82
;;;1      #include "102_221.h"
;;;2      
;;;3      /*
;;;4      * Macros
;;;5      */
;;;6      #define P1_CLOSE_CHANNEL											(0x80)
;;;7      #define P1_OPEN_CHANNEL												(0x00)
;;;8      #define P1_IS_INVALID												(0x7F)
;;;9      #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN					(0x01)
;;;10     #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_CLOSE					(0x00)
;;;11     #define MAX_LOGICAL_CHANNEL_NUMBER									(0x13)
;;;12     #define P1_STATUS_APP_TERMINATION_INITIATED							(0x02)
;;;13     #define	P2_STATUS_RETURN_NO_DATA									(0x0C)
;;;14     #define P2_STATUS_RETURN_DF_NAME_TLV								(0x01)
;;;15     #define P2_STATUS_RETURN_FCP_TLV									(0x00)
;;;16     #define LENGTH_PS_DO												(0x01)				
;;;17     #define LENGTH_TAG_KEY_REFERENCE									(0x01)	
;;;18     #define PIN_ENABLE_STATUS											(0x00)
;;;19     #define LENGTH_FIX													(0x00)
;;;20     #define INDEX_TAG_PIN_STATUS_TEMP_DO								(0x00)
;;;21     #define INDEX_LENGTH_PSTDO											(0x01)
;;;22     #define INDEX_TAG_SECURITY_SCDO_ALWAYS								(0x02)
;;;23     #define INDEX_LENGTH_PS												(0x03)
;;;24     #define INDEX_PIN_ENABLE_STATUS										(0x04)
;;;25     
;;;26     #define LENGTH_FCP_PROP_TLV											(0x0E)
;;;27     /*Definition the function for FCP Response PIN Status Template(PS_DO)
;;;28     @param pdPstdo: It's the identify the set pin of current DF
;;;29     @pumbResponse: It's prepare the FCP Response
;;;30     */
;;;31     /*In this Code Pin counter limit 8, So We Only 8 Pin Set in Perticular DF*/
;;;32     
;;;33     uMonoByte _102221_getPSTDO(tPinData pdPstdo, puMonoByte pumbResponse) {
;;;34     	uMonoByte	umbIndex = LENGTH_FIX;
;;;35     	uMonoByte	umbIndexId = LENGTH_FIX;
;;;36     	uMonoByte	umPinCount = LENGTH_FIX;
;;;37     	uMonoByte	umDoStatus = LENGTH_FIX;
;;;38     
;;;39     	DBG_FUNC_ENTRY(">>[102221]_102221_getPSTDO() \n");
;;;40     
;;;41     	/*Set Tag PIN status template DO */
;;;42     	pumbResponse[INDEX_TAG_PIN_STATUS_TEMP_DO] = TAG_PIN_STATUS_TEMP_DO;
;;;43     	/*Set Tag Security Do Always & Tag Length*/
;;;44     	pumbResponse[INDEX_TAG_SECURITY_SCDO_ALWAYS] = TAG_SECURITY_SCDO_ALWAYS;
;;;45     	pumbResponse[INDEX_LENGTH_PS] = LENGTH_PS_DO;
;;;46     
;;;47     	umbIndexId = 0x05;
;;;48     	/*In First 2 Bytes Pin Check 01-08, 81-88*/
;;;49     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
;;;50     		if (pdPstdo & (0x01 << umbIndex)) {
;;;51     
;;;52     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;53     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
;;;54     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
;;;55     			pumbResponse[umbIndexId++] = PIN_APP_1 + umbIndex;
;;;56     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;57     			umPinCount++;
;;;58     			/*Check Pin Status, If Pin is Enable*/
;;;59     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_APP_1 + umbIndex))) {
;;;60     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;61     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
;;;62     			}
;;;63     
;;;64     		}
;;;65     	}
;;;66     	/*In Last 2 Bytes Pin Check 0A-0E and 8A-8E*/
;;;67     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
;;;68     		if (pdPstdo & (0x010000 << umbIndex)) {
;;;69     
;;;70     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;71     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
;;;72     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
;;;73     			pumbResponse[umbIndexId++] = PIN_SECOND_APP_1 + umbIndex;
;;;74     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;75     			umPinCount++;
;;;76     			/*Check Pin Status, If Pin is Enable*/
;;;77     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_SECOND_APP_1 + umbIndex))) {
;;;78     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;79     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
;;;80     			}
;;;81     
;;;82     		}
;;;83     	}
;;;84     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Status '%2' \n", umDoStatus);
;;;85     	/*Set DoStatus */
;;;86     	pumbResponse[INDEX_PIN_ENABLE_STATUS] = umDoStatus;
;;;87     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Length \n");
;;;88     	/*Set DoTag Length */
;;;89     	pumbResponse[INDEX_LENGTH_PSTDO] = umbIndexId - 0x02;
;;;90     	DBG_FUNC_EXIT("<<[102221]_102221_getPSTDO() \n");
;;;91     	return umbIndexId;
;;;92     
;;;93     }
;;;94     /*
;;;95     * UICC Status Command
;;;96     */
;;;97     
;;;98     //enum {
;;;99     	//FILE_IS_MF = 0x01,
;;;100    	//FILE_IS_DF = 0x02,
;;;101    	//FILE_IS_EF = 0x04
;;;102    //}tFileType;
;;;103    
;;;104    
;;;105    void _102221_status(void) {
;;;106    
;;;107    	uMonoByte preparedLen = 0x00;
;;;108    
;;;109    	DBG_FUNC_ENTRY(">>[102_221] _102221_status() \n");
;;;110    	
;;;111    	if (P1_BYTE > P1_STATUS_APP_TERMINATION_INITIATED) { 
;;;112    		//P1 must either be 01 02 or 00
;;;113    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;114    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;115    		THROW(EXCEP_WRONG_P1_P2);
;;;116    	}
;;;117    
;;;118    	//check if the value of P1 is valid or not
;;;119    	DBG_FUNC(">>[102_221] _102221_status: P1 is valid\n");
;;;120    
;;;121    	if (P2_BYTE == P2_STATUS_RETURN_FCP_TLV) {
;;;122    		// Prepare FCP tlv of current DF
;;;123    		DBG_FUNC(">>[102_221] _102221_status: Return FCP template of current DF\n");
;;;124    		gudbOutputLen = _102221_prepareFCPResponseForFile(pccCurrentChannel->fhaCurrentDf, RESPONSE_BUFF); //getting the prepared FCP response
;;;125    		preparedLen = (uMonoByte)gudbOutputLen;
;;;126    		//fcp Response 
;;;127    		if (P3_BYTE != preparedLen) {
;;;128    			gudbOutputLen = 0x00;
;;;129    		}
;;;130    
;;;131    	}
;;;132    	else if (P2_BYTE == P2_STATUS_RETURN_DF_NAME_TLV) { // if p2 is to check TLV_OBJ of current selected Application
;;;133    
;;;134    		DBG_FUNC(">>[102_221] _102221_status: Return DF Name TLV of current ADF\n");
;;;135    
;;;136    		if (pccCurrentChannel->fhaCurrentAdf == NO_FILE_PRESENT) {
;;;137    
;;;138    			//to check AID DF NAME TLV P2 must be 01
;;;139    			DBG_ERR("[102_221] _102221_status: No Application selected\n");
;;;140    			DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;141    			THROW(EXCEP_WRONG_P1_P2);
;;;142    		}
;;;143    
;;;144    		DBG_FUNC(">>[102_221] _102221_status: Preparing DF Name TLV of current ADF\n");
;;;145    
;;;146    		//setting the first index as the Tag for DF
;;;147    		RESPONSE_BUFF[0] = TAG_DF_NAME;
;;;148    
;;;149    		//getting the prepared response from index 1
;;;150    		_7816_4_getAidOfAdf(pccCurrentChannel->fhaCurrentAdf, &RESPONSE_BUFF[1]);
;;;151    
;;;152    		gudbOutputLen = RESPONSE_BUFF[1] + 2;
;;;153    		preparedLen =(uMonoByte) gudbOutputLen;
;;;154    			if (P3_BYTE != gudbOutputLen) {
;;;155    				
;;;156    				gudbOutputLen = 0x00;
;;;157    
;;;158    				DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;159    				DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;160    				
;;;161    				/*raise exception of Wrong P3*/
;;;162    				THROW2(EXCEP_WRONG_P3, preparedLen);
;;;163    		}
;;;164    	}
;;;165    	else if (P2_BYTE == P2_STATUS_RETURN_NO_DATA)
;;;166    	{	
;;;167    		DBG_FUNC(">>[102_221] _102221_status: No response to return\n");
;;;168    		gudbOutputLen = 0x00;
;;;169    		THROW(EXCEP_NORMAL_ENDING);
;;;170    	}
;;;171    	else {
;;;172    		//p2 must either be 00 , 01 or 0C
;;;173    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;174    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;175    		THROW(EXCEP_WRONG_P1_P2);
;;;176    	}
;;;177    
;;;178    	if (P3_BYTE != preparedLen) {
;;;179    
;;;180    		DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;181    
;;;182    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;183    		/*raise exception of Wrong P3*/
;;;184    		THROW2(EXCEP_WRONG_P3,preparedLen);
;;;185    	}
;;;186    
;;;187    	DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;188    }
;;;189    
;;;190    /*Definition the function selectByPath
;;;191    * @param parentDf: It's the address of Current directory file
;;;192    @param pumbPath: It's the Current Directory File Id
;;;193    @param umbPathLength: It's Length of File Id
;;;194    */
;;;195    
;;;196    tFileHeaderAddr _102221_selectByPath(tFileHeaderAddr parentDf, puMonoByte pumbPath, uMonoByte umbPathLength) {
;;;197    	/*Variables declaration/definition*/
;;;198    	uMonoByte	umbIndex;
;;;199    	uDiByte		udbFileId;
;;;200    
;;;201    	DBG_FUNC_ENTRY(">>_102221_selectByPath\n"); 
;;;202    
;;;203    	//Try to Select File Id, Select By Path
;;;204    	for (umbIndex = 0x00; umbIndex < umbPathLength; umbIndex  += LENGTH_FILE_ID) {
;;;205    
;;;206    		//Get Next File ID threw mm_makeUdiByte() function			
;;;207    		udbFileId = mm_makeUdiByte(pumbPath, umbIndex);
;;;208    
;;;209    		DBG_FUNC("[102_221]_102221_selectByPath:Get File Id '%2' \n", udbFileId);
;;;210    
;;;211    		if ((0x00 == umbIndex) && (FID_CURRENT_ADF == udbFileId) && (parentDf == _7816_4_getMfAddress())) { // Check if its Reserved ADF file ID
;;;212    
;;;213    			DBG_FUNC("[102_221]_102221_selectByPath: Requesting Current ADF using Reserved ADF file id 7FFF\n");
;;;214    
;;;215    			/*store current ADF even if its not set*/
;;;216    			parentDf = pccCurrentChannel->fhaCurrentAdf;
;;;217    
;;;218    			DBG_FUNC("[102_221]_102221_selectByPath: Current ADF '%2'\n", parentDf);
;;;219    
;;;220    		}
;;;221    		else {
;;;222    			DBG_FUNC("[102_221] _102221_selectByPath: Searching given File ID '%2' under Current DF\n", udbFileId);
;;;223    
;;;224    			/*Check given File ID under current DF*/
;;;225    			_7816_4_ifFileExists(udbFileId, parentDf, MODE_FIND_FID, &parentDf);
;;;226    
;;;227    		}
;;;228    
;;;229    		if (
;;;230    				(NO_FILE_PRESENT == parentDf) //File not found
;;;231    				||								//OR
;;;232    				(!(IS(DF, _7816_4_getFileDescriptor(parentDf)))) //Selected file is an EF
;;;233    			) {
;;;234    			DBG_FUNC("[102_221] _102221_selectByPath: File ID '%2' not found under Current DF\n", udbFileId);
;;;235    			break;
;;;236    		}
;;;237    	}
;;;238    
;;;239    	if (umbIndex < (umbPathLength - LENGTH_FILE_ID)) {
;;;240    		/*An EF found in the middle of given path
;;;241    		* or
;;;242    		* File not found*/
;;;243    		return NO_FILE_PRESENT;
;;;244    	}// if (umbIndex < (umbPathLength - LENGTH_FILE_ID))
;;;245    
;;;246    	DBG_FUNC_EXIT("<<[102_221] _102221_selectByPath() \n");
;;;247    
;;;248    	return parentDf;
;;;249    }
;;;250    
;;;251    /*Definition the function selectByFileId
;;;252    * @param fhaFile: Current directory file
;;;253    */
;;;254    tFileHeaderAddr _102221_selectByFileId(tFileHeaderAddr fhaFile, uDiByte udbFileID) {
;;;255    	/*Variables declaration/definition*/
;;;256    	tFileHeader			fhFile;
;;;257    	tFileHeaderAddr	fhaRequestedFile = fhaFile; // Default initalized with current directory
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>_102221_selectByFileId\n");
;;;260    
;;;261    	if (udbFileID == FID_MF) //if its MF
;;;262    	{
;;;263    		DBG_FUNC("[102_221] _102221_selectByFileId: Requesting MF 3F00\n");
;;;264    		/*Set MF as current DF*/
;;;265    		fhaRequestedFile = _7816_4_getMfAddress();
;;;266    	}
;;;267    	else if (FID_CURRENT_ADF == udbFileID) { // Check if its Reserved ADF file ID
;;;268    
;;;269    		DBG_FUNC("[102_221] _102221_selectByFileId: Requesting Current ADF using Reserved ADF file id 7FFF\n");
;;;270    
;;;271    		/*If application is selected fhaRequestedFile contains its address otherwise NO_FILE_PRESENT*/
;;;272    		/*Set ADF as current DF*/
;;;273    		fhaRequestedFile = pccCurrentChannel->fhaCurrentAdf;
;;;274    
;;;275    	}
;;;276    	/*Check the File ID of current DF with incoming File id*/
;;;277    	else if (udbFileID != _7816_4_getFileId(fhaFile))  {
;;;278    		
;;;279    		DBG_FUNC("[102_221] _102221_selectByFileId: Search given File ID '%2' under Current DF\n", udbFileID);
;;;280    
;;;281    		/*Check given File ID under current DF*/
;;;282    		_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaRequestedFile);
;;;283    
;;;284    		if (NO_FILE_PRESENT == fhaRequestedFile) { //File not found
;;;285    
;;;286    			DBG_FUNC("[102_221] _102221_selectByFileId: File ID '%2' not found under Current DF\n", udbFileID);
;;;287    
;;;288    			/*read header of current DF*/
;;;289    			_7816_4_getFileHeader(fhaFile, &fhFile);
;;;290    
;;;291    			/*fetch the parent of current DF*/
;;;292    			fhaFile = fhFile.fhaParent;
;;;293    			
;;;294    			/*Check if there is a parent, or current directory is root one*/
;;;295    			if (fhaFile != NO_FILE_PRESENT) {
;;;296    
;;;297    				DBG_FUNC("[102_221] _102221_selectByFileId: Check if parent of current directory is given file\n");
;;;298    
;;;299    				/*Check File ID of Current DF's parent */
;;;300    				if (udbFileID == _7816_4_getFileId(fhaFile)) {
;;;301    
;;;302    					DBG_FUNC("[102_221] _102221_selectByFileId: Parent of current DF is the requested file\n");
;;;303    
;;;304    					/*return parent file*/
;;;305    					fhaRequestedFile = fhaFile;
;;;306    				}
;;;307    				else { //any DF which is an immediate child of the parent of the current DF
;;;308    
;;;309    					DBG_FUNC("[102_221] _102221_selectByFileId: Its not even parent of current DF\n");
;;;310    					DBG_FUNC("[102_221] _102221_selectByFileId: Search same file Id '%2' under parent of Current DF\n", udbFileID);
;;;311    
;;;312    					/*search same file in parent of current DF*/
;;;313    					_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaRequestedFile);
;;;314    
;;;315    
;;;316    					if ((NO_FILE_PRESENT != fhaRequestedFile) // File found
;;;317    						&&								//AND
;;;318    						(!(IS(DF, _7816_4_getFileDescriptor(fhaRequestedFile))))) {	// if its EF
;;;319    
;;;320    						/*raise exception of file not found*/
;;;321    						DBG_ERR("[102_221] _102221_selectByFileId: File id '%2' not found \n", udbFileID);
;;;322    						fhaRequestedFile = NO_FILE_PRESENT;
;;;323    					}
;;;324    				}
;;;325    			}
;;;326    
;;;327    		}
;;;328    	}
;;;329    
;;;330    	DBG_FUNC("[102_221] _102221_selectByFileId: File ID '%2' found\n", udbFileID);
;;;331    	DBG_FUNC_EXIT("<<[102_221]_102221_selectByFileId() \n");
;;;332    	return fhaRequestedFile;
;;;333    }
;;;334    
;;;335    
;;;336    /*
;;;337    * UICC select command
;;;338    */
;;;339    
;;;340    void _102221_select(void) {
;;;341    
;;;342    	/*Variables declaration/definition*/
;;;343    	uDiByte			udbFileID;
;;;344    	tFileHeaderAddr fhaFile;
;;;345    	tFileHeader		fhFile;
;;;346    	DBG_FUNC_ENTRY(">>[102_221] _102221_select()\n");
;;;347    
;;;348    	/*get fileID from command data*/
;;;349    	udbFileID = mm_makeUdiByte(COMMAND_DATA, 0x00);
;;;350    
;;;351    	/*get Current DF*/
;;;352    	fhaFile = pccCurrentChannel->fhaCurrentDf;
;;;353    
;;;354    	/*validation of P2 byte*/
;;;355    	if (P2_BYTE_VALIDATION_PARAMETER != (MASK_P2_BYTE & P2_BYTE))
;;;356    	{
;;;357    		DBG_ERR("[102_221] _102221_select : Invalid P2 Byte \n");
;;;358    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;359    		/*raise exception of Wrong P2*/
;;;360    		THROW(EXCEP_WRONG_P1_P2);
;;;361    	}
;;;362    
;;;363    	/*Select a File by Different Methods*/
;;;364    	switch (P1_BYTE)
;;;365    	{
;;;366    	case P1_SELECT_BY_FILE_ID:
;;;367    		if (P3_BYTE == LENGTH_FILE_ID) {
;;;368    			/* Select the ID by _102221_selectByFileId*/
;;;369    			fhaFile = _102221_selectByFileId(fhaFile, udbFileID);
;;;370    		}
;;;371    		else
;;;372    		{
;;;373    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;374    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;375    			/*raise exception of Wrong P3*/
;;;376    			THROW2(EXCEP_WRONG_P3, LENGTH_FILE_ID);
;;;377    		}
;;;378    
;;;379    		break;
;;;380    	case P1_SELECT_BY_CHILD:
;;;381    		if (P3_BYTE == LENGTH_FILE_ID) {
;;;382    			DBG_FUNC("[102_221] _102221_select : Select child DF of the current DF.\n");
;;;383    			/*Select child DF of the current DF*/
;;;384    			_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaFile);
;;;385    
;;;386    			/*EF check*/
;;;387    			if (
;;;388    				(NO_FILE_PRESENT != fhaFile) // File found
;;;389    				&&								//AND
;;;390    				(!(IS(DF, _7816_4_getFileDescriptor(fhaFile))))
;;;391    				)
;;;392    			{	// if its EF
;;;393    				/*raise exception of file not found*/
;;;394    				DBG_ERR("[102_221]_102221_select() Found File id '%2' is a EF \n", udbFileID);
;;;395    				fhaFile = NO_FILE_PRESENT;
;;;396    			}
;;;397    		}
;;;398    		else
;;;399    		{
;;;400    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;401    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;402    			/*raise exception of Wrong P3*/
;;;403    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;404    		}
;;;405    		break;
;;;406    
;;;407    	case P1_SELECT_BY_PARENT:
;;;408    		/*p3 Bytes Depends on FCP Response*/
;;;409    		DBG_FUNC("[102_221] _102221_select : Select parent DF of the current DF.\n");
;;;410    		/* Select parent DF of the current DF */
;;;411    		fhaFile = _7816_4_getParentFile(fhaFile);
;;;412    		break;
;;;413    
;;;414    	case P1_SELECT_BY_AID:
;;;415    		DBG_FUNC("[102_221] _102221_select : P1=04 Select by AID.\n");
;;;416    
;;;417    		/*check AID length*/
;;;418    		if (
;;;419    			(P3_BYTE > LENGTH_MAX_AID)
;;;420    			||
;;;421    			(P3_BYTE < LENGTH_MIN_AID)
;;;422    			) /*P3 for SelectByAID should be valid i.e. 5-16 bytes*/
;;;423    		{
;;;424    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;425    
;;;426    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;427    
;;;428    			/*raise exception of Wrong P3*/
;;;429    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;430    		}
;;;431    
;;;432    		/*search for ADF using DF Name*/
;;;433    		_7816_4_ifAdfExists(&COMMAND_APDU[INDEX_P3], &fhaFile);
;;;434    
;;;435    		if (NO_FILE_PRESENT == fhaFile) {  // if search doesnt succeed
;;;436    			DBG_ERR("[102_221] _102221_select: File not found \n");
;;;437    			/*file is not found then*/
;;;438    			break;
;;;439    		}
;;;440    
;;;441    		DBG_FUNC("[102_221] _102221_select : Found File as Current ADF.\n");
;;;442    		/*Set the found ADF as current ADF*/
;;;443    		pccCurrentChannel->fhaCurrentAdf = fhaFile;
;;;444    		break;
;;;445    
;;;446    	case P1_SELECT_BY_PATH_MF:				//Select by path from MF
;;;447    
;;;448    		if ((P3_BYTE!=0) && (P3_BYTE % LENGTH_FILE_ID == 0)) {
;;;449    			DBG_FUNC("[102_221] _102221_select: Requesting MF 3F00\n");
;;;450    			/*Current DF would be MF*/
;;;451    			fhaFile = _102221_selectByPath(_7816_4_getMfAddress(), COMMAND_DATA, P3_BYTE);
;;;452    		}
;;;453    		else
;;;454    		{
;;;455    			/*If p3 value is not correct then*/
;;;456    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;457    			THROW(EXCEP_WRONG_P3);
;;;458    		}
;;;459    		break;
;;;460    
;;;461    	case P1_SELECT_BY_PATH_CURRENT_DF:		//Select by path from current DF 
;;;462    		if ((P3_BYTE != 0) && (P3_BYTE % LENGTH_FILE_ID == 0)) {
;;;463    			/* Store the Select file address in fhaFile using _102221_selectByPath function */
;;;464    			fhaFile = _102221_selectByPath(fhaFile, COMMAND_DATA, P3_BYTE);
;;;465    		}
;;;466    		else {
;;;467    			/*If p3 value is not correct then*/
;;;468    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;469    			THROW(EXCEP_WRONG_P3);
;;;470    		}
;;;471    		break;
;;;472    
;;;473    	default:
;;;474    		/*If p1 value is not correct then*/
;;;475    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;476    		THROW(EXCEP_WRONG_P1_P2);
;;;477    
;;;478    	}
;;;479    
;;;480    	if (NO_FILE_PRESENT == fhaFile) { // if search doesnt exceed
;;;481    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;482    		THROW(EXCEP_FILE_NOT_FOUND);
;;;483    	}
;;;484    	/*check P2_BYTE for FCP template to be returned or not*/
;;;485    	if (RETURN_FCP_TEMPLATE == (P2_BYTE & MASK_FCP_RETURN_BYTES))
;;;486    	{
;;;487    		/*get length of prepared response*/
;;;488    		gudbOutputLen =  _102221_prepareFCPResponseForFile(fhaFile, RESPONSE_BUFF);
;;;489    	}
;;;490    	
;;;491    
;;;492    	/*read header of current file*/
;;;493    	_7816_4_getFileHeader(fhaFile, &fhFile);
;;;494    
;;;495    	if (IS(DF, fhFile.umbFileDesc)) //if its DF
;;;496    	{
;;;497    		DBG_FUNC("[102_221]_102221_select() :Found File ID is a DF\n");
;;;498    
;;;499    		/*Set found file as current DF in current channel context*/
;;;500    		pccCurrentChannel->fhaCurrentDf = fhaFile;
;;;501    
;;;502    		/*And reset the current EF to undefined*/
;;;503    		pccCurrentChannel->fhaCurrentEf = NO_FILE_PRESENT;
;;;504    	}
;;;505    	else { // if its EF
;;;506    
;;;507    		DBG_FUNC("[102_221] _102221_select():Found File ID is an EF\n");
;;;508    
;;;509    		/*set found file's parent DF as current DF*/
;;;510    		pccCurrentChannel->fhaCurrentDf = fhFile.fhaParent;
;;;511    
;;;512    		/*Set current EF as presented file*/
;;;513    		pccCurrentChannel->fhaCurrentEf = fhaFile;
;;;514    	}
;;;515    
;;;516    	DBG_FUNC("[102_221]_102221_select: Reset the Record pointer\n");
;;;517    
;;;518    	/*Current Record pointer is undefined on successful selection*/
;;;519    	pccCurrentChannel->umbCurrentRecPtr = RECORD_UNDEFINED;
;;;520    
;;;521    	DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;522    }
;;;523    /*
;;;524    * It prepares length of FCP response.
;;;525    */
;;;526    //uMonoByte _102221_prepFCPforFile(tFileHeaderAddr fhaADF, puMonoByte pumbAid)
;;;527    //{
;;;528    	/*TO_DO....*/
;;;529    	//return 0;
;;;530    //}
;;;531    
;;;532    /*
;;;533    * It implements UICC Authenticate command
;;;534    */
;;;535    void _102221_authenticate(void) {
;;;536    
;;;537    	DBG_FUNC_ENTRY(">>[102_221] _102221_authenticate() \n");
;;;538    
;;;539    	DBG_FUNC_EXIT("<<[102_221] _102221_authenticate() \n");
;;;540    }
;;;541    
;;;542    /*
;;;543    * It implements UICC Manage Channel command
;;;544    */
;;;545    void _102221_manageChannel(void) {
;;;546    
;;;547    	uMonoByte umbChannelNo; //which channel to open
;;;548    
;;;549    	DBG_FUNC_ENTRY(">>[102_221] _102221_manageChannel() \n");
;;;550    
;;;551    	if ((P1_OPEN_CHANNEL == P1_BYTE) && (0x00 == P2_BYTE)) { // P1 states Open function and P2 is '00'
;;;552    
;;;553    		DBG_FUNC("[102_221] _102221_manageChannel: Request to Open a channel\n");
;;;554    
;;;555    		if (P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN != P3_BYTE) //check if p3 is not equal to expected response length
;;;556    		{
;;;557    			/*Expected length of response must be 01*/
;;;558    			DBG_ERR("[102_221] _102221_manageChannel: Le/P3 must be '01'\n");
;;;559    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;560    			THROW2(EXCEP_WRONG_P3, P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN);
;;;561    		}
;;;562    
;;;563    		if (gumbChannelsState) //Check if atleast 1 logical channel must be available
;;;564    		{
;;;565    			/*Checking availability of each logical channel*/
;;;566    			if (gumbChannelsState & MASK_LOGICAL_CHANNEL_1) {
;;;567    
;;;568    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '01'\n");
;;;569    				/*Open logical channel no. 1*/
;;;570    				umbChannelNo = 0x01;
;;;571    			}
;;;572    			else if (gumbChannelsState & MASK_LOGICAL_CHANNEL_2) {
;;;573    
;;;574    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '02'\n");
;;;575    				/*Open logical channel no. 2*/
;;;576    				umbChannelNo = 0x02;
;;;577    
;;;578    			}
;;;579    			else { //it means logical channel 3 available
;;;580    
;;;581    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '03'\n");
;;;582    				umbChannelNo = 0x03; //open logical channel no. 3
;;;583    			}
;;;584    
;;;585    			/*clear the corresponding bit*/
;;;586    			gumbChannelsState &= (uMonoByte)(~(SHIFT_LEFT_BY_N_BITS(0x01, umbChannelNo)));
;;;587    
;;;588    			/*Store channel no. in response buffer*/
;;;589    			COMMAND_RESPONSE_DATA[0x00] = umbChannelNo;
;;;590    
;;;591    			/*Set Response length*/
;;;592    			gudbOutputLen = 0x01;
;;;593    
;;;594    			/*default File would be MF*/
;;;595    			ccContexts[umbChannelNo].fhaCurrentDf = _7816_4_getMfAddress();
;;;596    
;;;597    		}
;;;598    		else {
;;;599    			/*No channel available to open*/
;;;600    			DBG_ERR("[102_221] _102221_manageChannel: All channels are already opened, so no new channels left to open\n");
;;;601    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;602    			THROW(EXCEP_FUNCTION_NOT_SUPPORTED);
;;;603    		}
;;;604    	}
;;;605    	else if ((P1_CLOSE_CHANNEL == P1_BYTE) && (P2_BYTE <= MAX_LOGICAL_CHANNEL_NUMBER)) {
;;;606    
;;;607    		if (P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_CLOSE != P3_BYTE) //check if p3 is not equal to expected response length
;;;608    		{
;;;609    			/*Expected length of response must be 01*/
;;;610    			DBG_ERR("[102_221] _102221_manageChannel: Le/P3 must be '00'\n");
;;;611    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;612    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;613    		}
;;;614    
;;;615    		if ((BASIC_LOGICAL_CHANNEL < P2_BYTE) && (P2_BYTE < 0x04)) { // Valid range for Logical channels are '01','02' and '03'
;;;616    
;;;617    			DBG_FUNC("[102_221] _102221_manageChannel: Closing the channel %1\n", P2_BYTE);
;;;618    
;;;619    			/*Set the corresponding bit of incoming logical channel*/
;;;620    			gumbChannelsState |= (uMonoByte)(SHIFT_LEFT_BY_N_BITS(0x01, P2_BYTE));
;;;621    
;;;622    			/*clear the Channel context*/
;;;623    			mem_set((puMonoByte)& ccContexts[P2_BYTE], 0x00, sizeof(tChannelContext));
;;;624    		}
;;;625    		else {
;;;626    
;;;627    			/*Closing the unsupported logical channel*/
;;;628    			DBG_ERR("[102_221] _102221_manageChannel: Wrong Logical channel in P2 as its not supported\n");
;;;629    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;630    			THROW(EXCEP_FUNCTION_NOT_SUPPORTED);
;;;631    		}
;;;632    	}
;;;633    	else {
;;;634    		/*Invalid P1 or P2*/
;;;635    		DBG_ERR("[102_221] _102221_manageChannel: Wrong P1-P2\n");
;;;636    		DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;637    		THROW(EXCEP_WRONG_P1_P2);
;;;638    	}
;;;639    
;;;640    	DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel() \n");
;;;641    }
;;;642    /*fhaFile : whose FCP response to return, DF or ADF or EF
;;;643    pumbFcpResponse : where response to be copied
;;;644    return total fcp response length
;;;645    */
;;;646    
;;;647    uMonoByte _102221_prepareFCPResponseForFile(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG puMonoByte pumbFcpResponse) {
;;;648    
;;;649    	uMonoByte			umbIndex = 0x02;
;;;650    	uDiByte				udbTemp;
;;;651    	tFileHeader			fhFile;
;;;652    
;;;653    	
;;;654    
;;;655    
;;;656    	
;;;657    	pumbFcpResponse[0] = TAG_FCP_TEMPLATE;
;;;658    
;;;659    	/*read header of file*/
;;;660    	_7816_4_getFileHeader(fhaFile, &fhFile);
;;;661    
;;;662    	DBG_FUNC_ENTRY(">>_102221_prepareFCPResponseForFile() \n");
;;;663    
;;;664    	/* TAG File Descriptor Byte 0x82  */
;;;665    	pumbFcpResponse[umbIndex++] = TAG_FILE_DESC;
        0x0000202e:    70a0        .p      STRB     r0,[r4,#2]
;;;666    
;;;667    	/* Check Type of File*/
;;;668    	if ((IS(LF, fhFile.umbFileDesc))
        0x00002030:    7870        px      LDRB     r0,[r6,#1]
        0x00002032:    2383        .#      MOVS     r3,#0x83
;;;669    		||
        0x00002034:    4601        .F      MOV      r1,r0
        0x00002036:    4019        .@      ANDS     r1,r1,r3
        0x00002038:    1d09        ..      ADDS     r1,r1,#4
        0x0000203a:    2906        .)      CMP      r1,#6
        0x0000203c:    d10d        ..      BNE      0x205a ; _102221_prepareFCPResponseForFile + 66
        0x0000203e:    2100        .!      MOVS     r1,#0
        0x00002040:    71a1        .q      STRB     r1,[r4,#6]
        0x00002042:    2121        !!      MOVS     r1,#0x21
        0x00002044:    7161        aq      STRB     r1,[r4,#5]
        0x00002046:    7120         q      STRB     r0,[r4,#4]
        0x00002048:    2005        .       MOVS     r0,#5
;;;670    		(IS(CF, fhFile.umbFileDesc))) {
;;;671    		/* Length of file descriptor byte for LF and CF */
;;;672    
;;;673    		pumbFcpResponse[umbIndex++] = 0x05;
        0x0000204a:    70e0        .p      STRB     r0,[r4,#3]
;;;674    
;;;675    		/* File descriptor byte */
;;;676    
;;;677    		pumbFcpResponse[umbIndex++] = fhFile.umbFileDesc;
;;;678    
;;;679    		/* Data Coding Byte of 1 byte */
;;;680    		
;;;681    		pumbFcpResponse[umbIndex++] = DATA_CODE_BYTE;
;;;682    
;;;683    		/* LF or CF Record Size */
;;;684    
;;;685    		pumbFcpResponse[umbIndex++] = 0x00;
;;;686    
;;;687    		pumbFcpResponse[umbIndex++] = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
        0x0000204c:    9808        ..      LDR      r0,[sp,#0x20]
        0x0000204e:    71e0        .q      STRB     r0,[r4,#7]
        0x00002050:    a804        ..      ADD      r0,sp,#0x10
;;;688    
;;;689    
;;;690    		/* LF or CF no. of records */
;;;691    
;;;692    		pumbFcpResponse[umbIndex++] = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
        0x00002052:    7bc1        .{      LDRB     r1,[r0,#0xf]
        0x00002054:    2009        .       MOVS     r0,#9
        0x00002056:    2208        ."      MOVS     r2,#8
        0x00002058:    e005        ..      B        0x2066 ; _102221_prepareFCPResponseForFile + 78
        0x0000205a:    7120         q      STRB     r0,[r4,#4]
        0x0000205c:    2002        .       MOVS     r0,#2
;;;693    
;;;694    	}
;;;695    	else {
;;;696    
;;;697    		/* Length of file descriptor byte for MF,DF and TF */
;;;698    
;;;699    		pumbFcpResponse[umbIndex++] = 0x02;
        0x0000205e:    70e0        .p      STRB     r0,[r4,#3]
        0x00002060:    2006        .       MOVS     r0,#6
        0x00002062:    2121        !!      MOVS     r1,#0x21
        0x00002064:    2205        ."      MOVS     r2,#5
        0x00002066:    54a1        .T      STRB     r1,[r4,r2]
        0x00002068:    9302        ..      STR      r3,[sp,#8]
;;;700    
;;;701    		pumbFcpResponse[umbIndex++] = fhFile.umbFileDesc;
;;;702    
;;;703    		//DCB of 1 byte
;;;704    
;;;705    		pumbFcpResponse[umbIndex++] = DATA_CODE_BYTE;
;;;706    	}
;;;707    
;;;708    	pumbFcpResponse[umbIndex++] = TAG_FILE_ID;
        0x0000206a:    5423        #T      STRB     r3,[r4,r0]
        0x0000206c:    1821        !.      ADDS     r1,r4,r0
        0x0000206e:    2202        ."      MOVS     r2,#2
        0x00002070:    9203        ..      STR      r2,[sp,#0xc]
;;;709    
;;;710    	pumbFcpResponse[umbIndex++] = LENGTH_FILE_ID;
        0x00002072:    704a        Jp      STRB     r2,[r1,#1]
        0x00002074:    ad04        ..      ADD      r5,sp,#0x10
        0x00002076:    892a        *.      LDRH     r2,[r5,#8]
        0x00002078:    1c81        ..      ADDS     r1,r0,#2
;;;711    
;;;712    	umbIndex = mm_storeUdiByte(pumbFcpResponse, umbIndex, fhFile.udbFileId);
        0x0000207a:    4620         F      MOV      r0,r4
        0x0000207c:    f7fff8ac    ....    BL       mm_storeUdiByte ; 0x11d8
        0x00002080:    4606        .F      MOV      r6,r0
;;;713    
;;;714    	if (IS(DF, fhFile.umbFileDesc)) {
        0x00002082:    7868        hx      LDRB     r0,[r5,#1]
        0x00002084:    27bf        .'      MOVS     r7,#0xbf
        0x00002086:    4038        8@      ANDS     r0,r0,r7
        0x00002088:    2838        8(      CMP      r0,#0x38
        0x0000208a:    d13b        ;.      BNE      0x2104 ; _102221_prepareFCPResponseForFile + 236
;;;715    
;;;716    		//Call getAdfAid()
;;;717    
;;;718    		if (TRUE == _7816_4_getAidOfAdf(fhaFile, (pumbFcpResponse + umbIndex + 0x01))) {
        0x0000208c:    19a0        ..      ADDS     r0,r4,r6
        0x0000208e:    1c41        A.      ADDS     r1,r0,#1
        0x00002090:    9801        ..      LDR      r0,[sp,#4]
        0x00002092:    f001ff0b    ....    BL       _7816_4_getAidOfAdf ; 0x3eac
        0x00002096:    28ff        .(      CMP      r0,#0xff
        0x00002098:    d001        ..      BEQ      0x209e ; _102221_prepareFCPResponseForFile + 134
        0x0000209a:    4635        5F      MOV      r5,r6
        0x0000209c:    e006        ..      B        0x20ac ; _102221_prepareFCPResponseForFile + 148
        0x0000209e:    2084        .       MOVS     r0,#0x84
;;;719    			pumbFcpResponse[umbIndex] = TAG_DF_NAME;
        0x000020a0:    55a0        .U      STRB     r0,[r4,r6]
        0x000020a2:    19a0        ..      ADDS     r0,r4,r6
;;;720    			umbIndex += pumbFcpResponse[umbIndex + 0x01] + 0x02;
        0x000020a4:    7840        @x      LDRB     r0,[r0,#1]
        0x000020a6:    1830        0.      ADDS     r0,r6,r0
        0x000020a8:    1c85        ..      ADDS     r5,r0,#2
;;;721    		}
;;;722    
;;;723    		//If its adf append it in fcp response after ADF tag
;;;724    
;;;725    		
;;;726    		// Pro Tag A5 data.
;;;727    
;;;728    
;;;729    		pumbFcpResponse[umbIndex++] = TAG_PROP_TLV;
        0x000020aa:    b2ee        ..      UXTB     r6,r5
        0x000020ac:    9a02        ..      LDR      r2,[sp,#8]
        0x000020ae:    20a5        .       MOVS     r0,#0xa5
        0x000020b0:    55a0        .U      STRB     r0,[r4,r6]
        0x000020b2:    1ca8        ..      ADDS     r0,r5,#2
        0x000020b4:    b2c0        ..      UXTB     r0,r0
        0x000020b6:    2180        .!      MOVS     r1,#0x80
        0x000020b8:    5421        !T      STRB     r1,[r4,r0]
        0x000020ba:    1c68        h.      ADDS     r0,r5,#1
;;;730    		pumbFcpResponse[umbIndex++] = LENGTH_TAG_PROP_TLV;
        0x000020bc:    b2c0        ..      UXTB     r0,r0
        0x000020be:    210c        .!      MOVS     r1,#0xc
        0x000020c0:    5421        !T      STRB     r1,[r4,r0]
;;;731    
;;;732    		// UICC Characterstics Tag
;;;733    		pumbFcpResponse[umbIndex++] = TAG_UICC_CHAR;
        0x000020c2:    1ce8        ..      ADDS     r0,r5,#3
;;;734    		pumbFcpResponse[umbIndex++] = LENGTH_UICC_CHAR;
        0x000020c4:    b2c0        ..      UXTB     r0,r0
        0x000020c6:    2601        .&      MOVS     r6,#1
        0x000020c8:    5426        &T      STRB     r6,[r4,r0]
        0x000020ca:    1d28        (.      ADDS     r0,r5,#4
;;;735    		pumbFcpResponse[umbIndex++] = DATA_UICC_CHAR;
        0x000020cc:    b2c0        ..      UXTB     r0,r0
        0x000020ce:    2171        q!      MOVS     r1,#0x71
        0x000020d0:    5421        !T      STRB     r1,[r4,r0]
        0x000020d2:    1d68        h.      ADDS     r0,r5,#5
;;;736    		pumbFcpResponse[umbIndex++] = TAG_AVAIL_MEM;
        0x000020d4:    b2c0        ..      UXTB     r0,r0
        0x000020d6:    5422        "T      STRB     r2,[r4,r0]
        0x000020d8:    1da8        ..      ADDS     r0,r5,#6
;;;737    		pumbFcpResponse[umbIndex++] = LENGTH_AVAVIL_MEM;
        0x000020da:    b2c0        ..      UXTB     r0,r0
        0x000020dc:    2104        .!      MOVS     r1,#4
        0x000020de:    5421        !T      STRB     r1,[r4,r0]
        0x000020e0:    f7feff34    ..4.    BL       mm_GetAvailableMemory ; 0xf4c
        0x000020e4:    4602        .F      MOV      r2,r0
        0x000020e6:    1de8        ..      ADDS     r0,r5,#7
;;;738    
;;;739    
;;;740    
;;;741    	   // Call Function to get available memory.
;;;742    		umbIndex = mm_storeWord(pumbFcpResponse, umbIndex, mm_GetAvailableMemory());
        0x000020e8:    b2c1        ..      UXTB     r1,r0
        0x000020ea:    4620         F      MOV      r0,r4
        0x000020ec:    f7fff888    ....    BL       mm_storeWord ; 0x1200
        0x000020f0:    2187        .!      MOVS     r1,#0x87
;;;743    		pumbFcpResponse[umbIndex++] = TAG_SUPPORTED_COMMMANDS;
        0x000020f2:    5421        !T      STRB     r1,[r4,r0]
        0x000020f4:    1c41        A.      ADDS     r1,r0,#1
;;;744    		pumbFcpResponse[umbIndex++] = LENGTH_SUPPORTED_COMMMANDS;
        0x000020f6:    b2c9        ..      UXTB     r1,r1
        0x000020f8:    5466        fT      STRB     r6,[r4,r1]
        0x000020fa:    1c81        ..      ADDS     r1,r0,#2
;;;745    		pumbFcpResponse[umbIndex++] = DATA_SUPPORTED_COMMMANDS;
        0x000020fc:    b2c9        ..      UXTB     r1,r1
        0x000020fe:    2200        ."      MOVS     r2,#0
        0x00002100:    5462        bT      STRB     r2,[r4,r1]
        0x00002102:    1cc6        ..      ADDS     r6,r0,#3
;;;746    
;;;747    
;;;748    	}
;;;749    
;;;750    	pumbFcpResponse[umbIndex++] = TAG_LCSI;
        0x00002104:    b2f0        ..      UXTB     r0,r6
        0x00002106:    218a        .!      MOVS     r1,#0x8a
        0x00002108:    5421        !T      STRB     r1,[r4,r0]
        0x0000210a:    1c70        p.      ADDS     r0,r6,#1
;;;751    
;;;752    	pumbFcpResponse[umbIndex++] = LENGTH_LCSI;
        0x0000210c:    b2c0        ..      UXTB     r0,r0
        0x0000210e:    2101        .!      MOVS     r1,#1
        0x00002110:    9102        ..      STR      r1,[sp,#8]
        0x00002112:    5421        !T      STRB     r1,[r4,r0]
        0x00002114:    ad04        ..      ADD      r5,sp,#0x10
        0x00002116:    78a8        .x      LDRB     r0,[r5,#2]
        0x00002118:    1cb1        ..      ADDS     r1,r6,#2
;;;753    
;;;754    	pumbFcpResponse[umbIndex++] = fhFile.flState;
        0x0000211a:    b2c9        ..      UXTB     r1,r1
        0x0000211c:    5460        `T      STRB     r0,[r4,r1]
        0x0000211e:    1cf0        ..      ADDS     r0,r6,#3
;;;755    
;;;756    	pumbFcpResponse[umbIndex++] = TAG_SEC_ATTR_REFERENCED;
        0x00002120:    b2c0        ..      UXTB     r0,r0
        0x00002122:    218b        .!      MOVS     r1,#0x8b
        0x00002124:    5421        !T      STRB     r1,[r4,r0]
        0x00002126:    1d30        0.      ADDS     r0,r6,#4
;;;757    
;;;758    	pumbFcpResponse[umbIndex++] = LENGTH_SEC_ATTR_REFERENCED;
        0x00002128:    b2c0        ..      UXTB     r0,r0
        0x0000212a:    2103        .!      MOVS     r1,#3
        0x0000212c:    5421        !T      STRB     r1,[r4,r0]
        0x0000212e:    896a        j.      LDRH     r2,[r5,#0xa]
        0x00002130:    1d70        p.      ADDS     r0,r6,#5
;;;759    
;;;760    	umbIndex = mm_storeUdiByte(pumbFcpResponse, umbIndex, fhFile.udbEFarrId);
        0x00002132:    b2c1        ..      UXTB     r1,r0
        0x00002134:    4620         F      MOV      r0,r4
        0x00002136:    f7fff84f    ..O.    BL       mm_storeUdiByte ; 0x11d8
;;;761    
;;;762    	pumbFcpResponse[umbIndex++] = fhFile.umbEFarrRec;
        0x0000213a:    9904        ..      LDR      r1,[sp,#0x10]
        0x0000213c:    5421        !T      STRB     r1,[r4,r0]
        0x0000213e:    1c46        F.      ADDS     r6,r0,#1
;;;763    
;;;764    
;;;765    	if (IS(DF, fhFile.umbFileDesc)) { //PTSDO
        0x00002140:    7869        ix      LDRB     r1,[r5,#1]
        0x00002142:    400f        .@      ANDS     r7,r7,r1
        0x00002144:    2f38        8/      CMP      r7,#0x38
        0x00002146:    d106        ..      BNE      0x2156 ; _102221_prepareFCPResponseForFile + 318
;;;766    
;;;767    		//Call getPsdo()
;;;768    
;;;769    		
;;;770    
;;;771    		umbIndex += _102221_getPSTDO(fhFile.FileSpecific.DF.pdPstdo, (pumbFcpResponse + umbIndex));
        0x00002148:    b2f0        ..      UXTB     r0,r6
        0x0000214a:    1821        !.      ADDS     r1,r4,r0
        0x0000214c:    9808        ..      LDR      r0,[sp,#0x20]
        0x0000214e:    f7fffeb5    ....    BL       _102221_getPSTDO ; 0x1ebc
        0x00002152:    1981        ..      ADDS     r1,r0,r6
;;;772    
;;;773    
;;;774    	}
        0x00002154:    e02a        *.      B        0x21ac ; _102221_prepareFCPResponseForFile + 404
;;;775    	else { // File Size
;;;776    		pumbFcpResponse[umbIndex++] = TAG_FILE_SIZE;
        0x00002156:    b2f2        ..      UXTB     r2,r6
        0x00002158:    2380        .#      MOVS     r3,#0x80
        0x0000215a:    54a3        .T      STRB     r3,[r4,r2]
        0x0000215c:    1c82        ..      ADDS     r2,r0,#2
;;;777    
;;;778    		pumbFcpResponse[umbIndex++] = LENGTH_TOTAL_FILE_SIZE;
        0x0000215e:    b2d2        ..      UXTB     r2,r2
        0x00002160:    9b03        ..      LDR      r3,[sp,#0xc]
        0x00002162:    54a3        .T      STRB     r3,[r4,r2]
        0x00002164:    2287        ."      MOVS     r2,#0x87
        0x00002166:    4011        .@      ANDS     r1,r1,r2
        0x00002168:    1cc0        ..      ADDS     r0,r0,#3
;;;779    
;;;780    		if (IS(TF, fhFile.umbFileDesc)) {
        0x0000216a:    2901        .)      CMP      r1,#1
        0x0000216c:    d102        ..      BNE      0x2174 ; _102221_prepareFCPResponseForFile + 348
        0x0000216e:    a904        ..      ADD      r1,sp,#0x10
;;;781    			udbTemp = fhFile.FileSpecific.EF.fileData.udbFileSize;
        0x00002170:    89ca        ..      LDRH     r2,[r1,#0xe]
        0x00002172:    e003        ..      B        0x217c ; _102221_prepareFCPResponseForFile + 356
        0x00002174:    a904        ..      ADD      r1,sp,#0x10
;;;782    		}
;;;783    		else {
;;;784    			udbTemp = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec * \
        0x00002176:    7bcb        .{      LDRB     r3,[r1,#0xf]
        0x00002178:    7c0a        .|      LDRB     r2,[r1,#0x10]
        0x0000217a:    435a        ZC      MULS     r2,r3,r2
;;;785    				fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;786    		}
;;;787    
;;;788    		umbIndex = mm_storeUdiByte(pumbFcpResponse, umbIndex, udbTemp);
        0x0000217c:    b2c1        ..      UXTB     r1,r0
        0x0000217e:    4620         F      MOV      r0,r4
        0x00002180:    f7fff82a    ..*.    BL       mm_storeUdiByte ; 0x11d8
        0x00002184:    2188        .!      MOVS     r1,#0x88
;;;789    
;;;790    		
;;;791    		/* SFI TAG */
;;;792    		pumbFcpResponse[umbIndex++] = TAG_SFI;
        0x00002186:    5421        !T      STRB     r1,[r4,r0]
        0x00002188:    1c81        ..      ADDS     r1,r0,#2
        0x0000218a:    1c42        B.      ADDS     r2,r0,#1
        0x0000218c:    b2d2        ..      UXTB     r2,r2
        0x0000218e:    ab04        ..      ADD      r3,sp,#0x10
;;;793    
;;;794    		if (SFI_NOT_SUPPORTED != fhFile.FileSpecific.EF.umbSfi)
        0x00002190:    7c9b        .|      LDRB     r3,[r3,#0x12]
        0x00002192:    251f        .%      MOVS     r5,#0x1f
        0x00002194:    401d        .@      ANDS     r5,r5,r3
        0x00002196:    2d1f        .-      CMP      r5,#0x1f
        0x00002198:    d102        ..      BNE      0x21a0 ; _102221_prepareFCPResponseForFile + 392
        0x0000219a:    2000        .       MOVS     r0,#0
        0x0000219c:    54a0        .T      STRB     r0,[r4,r2]
        0x0000219e:    e005        ..      B        0x21ac ; _102221_prepareFCPResponseForFile + 404
;;;795    		{
;;;796    			pumbFcpResponse[umbIndex++] = LENGTH_SFI;
        0x000021a0:    9d02        ..      LDR      r5,[sp,#8]
        0x000021a2:    54a5        .T      STRB     r5,[r4,r2]
;;;797    
;;;798                pumbFcpResponse[umbIndex++] = SHIFT_LEFT_BY_N_BITS(fhFile.FileSpecific.EF.umbSfi,3);
        0x000021a4:    b2c9        ..      UXTB     r1,r1
        0x000021a6:    00da        ..      LSLS     r2,r3,#3
        0x000021a8:    5462        bT      STRB     r2,[r4,r1]
        0x000021aa:    1cc1        ..      ADDS     r1,r0,#3
;;;799    
;;;800    
;;;801    		}
;;;802    		else {
;;;803    			/* IF SFI NOT SUPPORTED */
;;;804    			pumbFcpResponse[umbIndex++] = 0x00;
;;;805    
;;;806    		}
;;;807    	}
;;;808    
;;;809    
;;;810    	pumbFcpResponse[0x01] = umbIndex - 0x02;
        0x000021ac:    1e88        ..      SUBS     r0,r1,#2
        0x000021ae:    7060        `p      STRB     r0,[r4,#1]
;;;811    
;;;812    	return umbIndex;
        0x000021b0:    b2c8        ..      UXTB     r0,r1
        0x000021b2:    b009        ..      ADD      sp,sp,#0x24
        0x000021b4:    bdf0        ..      POP      {r4-r7,pc}
        0x000021b6:    46c0        .F      MOV      r8,r8
    _102221_selectByPath
;;; Core/102_221/source\GenericCommands.c (196)
        0x000021b8:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000021ba:    b083        ..      SUB      sp,sp,#0xc
        0x000021bc:    460e        .F      MOV      r6,r1
        0x000021be:    a902        ..      ADD      r1,sp,#8
        0x000021c0:    8008        ..      STRH     r0,[r1,#0]
        0x000021c2:    2300        .#      MOVS     r3,#0
        0x000021c4:    9201        ..      STR      r2,[sp,#4]
        0x000021c6:    2a00        .*      CMP      r2,#0
        0x000021c8:    d033        3.      BEQ      0x2232 ; _102221_selectByPath + 122
;;; Core/102_221/source\GenericCommands.c
        0x000021ca:    9300        ..      STR      r3,[sp,#0]
        0x000021cc:    2500        .%      MOVS     r5,#0
        0x000021ce:    b2ec        ..      UXTB     r4,r5
        0x000021d0:    4630        0F      MOV      r0,r6
        0x000021d2:    4621        !F      MOV      r1,r4
        0x000021d4:    f7feffe6    ....    BL       mm_makeUdiByte ; 0x11a4
        0x000021d8:    4607        .F      MOV      r7,r0
        0x000021da:    2c00        .,      CMP      r4,#0
        0x000021dc:    d110        ..      BNE      0x2200 ; _102221_selectByPath + 72
        0x000021de:    481a        .H      LDR      r0,[pc,#104] ; [0x2248] = 0x7fff
        0x000021e0:    4287        .B      CMP      r7,r0
        0x000021e2:    d10d        ..      BNE      0x2200 ; _102221_selectByPath + 72
        0x000021e4:    a802        ..      ADD      r0,sp,#8
;;;1      #include "102_221.h"
;;;2      
;;;3      /*
;;;4      * Macros
;;;5      */
;;;6      #define P1_CLOSE_CHANNEL											(0x80)
;;;7      #define P1_OPEN_CHANNEL												(0x00)
;;;8      #define P1_IS_INVALID												(0x7F)
;;;9      #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN					(0x01)
;;;10     #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_CLOSE					(0x00)
;;;11     #define MAX_LOGICAL_CHANNEL_NUMBER									(0x13)
;;;12     #define P1_STATUS_APP_TERMINATION_INITIATED							(0x02)
;;;13     #define	P2_STATUS_RETURN_NO_DATA									(0x0C)
;;;14     #define P2_STATUS_RETURN_DF_NAME_TLV								(0x01)
;;;15     #define P2_STATUS_RETURN_FCP_TLV									(0x00)
;;;16     #define LENGTH_PS_DO												(0x01)				
;;;17     #define LENGTH_TAG_KEY_REFERENCE									(0x01)	
;;;18     #define PIN_ENABLE_STATUS											(0x00)
;;;19     #define LENGTH_FIX													(0x00)
;;;20     #define INDEX_TAG_PIN_STATUS_TEMP_DO								(0x00)
;;;21     #define INDEX_LENGTH_PSTDO											(0x01)
;;;22     #define INDEX_TAG_SECURITY_SCDO_ALWAYS								(0x02)
;;;23     #define INDEX_LENGTH_PS												(0x03)
;;;24     #define INDEX_PIN_ENABLE_STATUS										(0x04)
;;;25     
;;;26     #define LENGTH_FCP_PROP_TLV											(0x0E)
;;;27     /*Definition the function for FCP Response PIN Status Template(PS_DO)
;;;28     @param pdPstdo: It's the identify the set pin of current DF
;;;29     @pumbResponse: It's prepare the FCP Response
;;;30     */
;;;31     /*In this Code Pin counter limit 8, So We Only 8 Pin Set in Perticular DF*/
;;;32     
;;;33     uMonoByte _102221_getPSTDO(tPinData pdPstdo, puMonoByte pumbResponse) {
;;;34     	uMonoByte	umbIndex = LENGTH_FIX;
;;;35     	uMonoByte	umbIndexId = LENGTH_FIX;
;;;36     	uMonoByte	umPinCount = LENGTH_FIX;
;;;37     	uMonoByte	umDoStatus = LENGTH_FIX;
;;;38     
;;;39     	DBG_FUNC_ENTRY(">>[102221]_102221_getPSTDO() \n");
;;;40     
;;;41     	/*Set Tag PIN status template DO */
;;;42     	pumbResponse[INDEX_TAG_PIN_STATUS_TEMP_DO] = TAG_PIN_STATUS_TEMP_DO;
;;;43     	/*Set Tag Security Do Always & Tag Length*/
;;;44     	pumbResponse[INDEX_TAG_SECURITY_SCDO_ALWAYS] = TAG_SECURITY_SCDO_ALWAYS;
;;;45     	pumbResponse[INDEX_LENGTH_PS] = LENGTH_PS_DO;
;;;46     
;;;47     	umbIndexId = 0x05;
;;;48     	/*In First 2 Bytes Pin Check 01-08, 81-88*/
;;;49     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
;;;50     		if (pdPstdo & (0x01 << umbIndex)) {
;;;51     
;;;52     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;53     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
;;;54     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
;;;55     			pumbResponse[umbIndexId++] = PIN_APP_1 + umbIndex;
;;;56     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;57     			umPinCount++;
;;;58     			/*Check Pin Status, If Pin is Enable*/
;;;59     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_APP_1 + umbIndex))) {
;;;60     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;61     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
;;;62     			}
;;;63     
;;;64     		}
;;;65     	}
;;;66     	/*In Last 2 Bytes Pin Check 0A-0E and 8A-8E*/
;;;67     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
;;;68     		if (pdPstdo & (0x010000 << umbIndex)) {
;;;69     
;;;70     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;71     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
;;;72     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
;;;73     			pumbResponse[umbIndexId++] = PIN_SECOND_APP_1 + umbIndex;
;;;74     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;75     			umPinCount++;
;;;76     			/*Check Pin Status, If Pin is Enable*/
;;;77     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_SECOND_APP_1 + umbIndex))) {
;;;78     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;79     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
;;;80     			}
;;;81     
;;;82     		}
;;;83     	}
;;;84     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Status '%2' \n", umDoStatus);
;;;85     	/*Set DoStatus */
;;;86     	pumbResponse[INDEX_PIN_ENABLE_STATUS] = umDoStatus;
;;;87     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Length \n");
;;;88     	/*Set DoTag Length */
;;;89     	pumbResponse[INDEX_LENGTH_PSTDO] = umbIndexId - 0x02;
;;;90     	DBG_FUNC_EXIT("<<[102221]_102221_getPSTDO() \n");
;;;91     	return umbIndexId;
;;;92     
;;;93     }
;;;94     /*
;;;95     * UICC Status Command
;;;96     */
;;;97     
;;;98     //enum {
;;;99     	//FILE_IS_MF = 0x01,
;;;100    	//FILE_IS_DF = 0x02,
;;;101    	//FILE_IS_EF = 0x04
;;;102    //}tFileType;
;;;103    
;;;104    
;;;105    void _102221_status(void) {
;;;106    
;;;107    	uMonoByte preparedLen = 0x00;
;;;108    
;;;109    	DBG_FUNC_ENTRY(">>[102_221] _102221_status() \n");
;;;110    	
;;;111    	if (P1_BYTE > P1_STATUS_APP_TERMINATION_INITIATED) { 
;;;112    		//P1 must either be 01 02 or 00
;;;113    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;114    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;115    		THROW(EXCEP_WRONG_P1_P2);
;;;116    	}
;;;117    
;;;118    	//check if the value of P1 is valid or not
;;;119    	DBG_FUNC(">>[102_221] _102221_status: P1 is valid\n");
;;;120    
;;;121    	if (P2_BYTE == P2_STATUS_RETURN_FCP_TLV) {
;;;122    		// Prepare FCP tlv of current DF
;;;123    		DBG_FUNC(">>[102_221] _102221_status: Return FCP template of current DF\n");
;;;124    		gudbOutputLen = _102221_prepareFCPResponseForFile(pccCurrentChannel->fhaCurrentDf, RESPONSE_BUFF); //getting the prepared FCP response
;;;125    		preparedLen = (uMonoByte)gudbOutputLen;
;;;126    		//fcp Response 
;;;127    		if (P3_BYTE != preparedLen) {
;;;128    			gudbOutputLen = 0x00;
;;;129    		}
;;;130    
;;;131    	}
;;;132    	else if (P2_BYTE == P2_STATUS_RETURN_DF_NAME_TLV) { // if p2 is to check TLV_OBJ of current selected Application
;;;133    
;;;134    		DBG_FUNC(">>[102_221] _102221_status: Return DF Name TLV of current ADF\n");
;;;135    
;;;136    		if (pccCurrentChannel->fhaCurrentAdf == NO_FILE_PRESENT) {
;;;137    
;;;138    			//to check AID DF NAME TLV P2 must be 01
;;;139    			DBG_ERR("[102_221] _102221_status: No Application selected\n");
;;;140    			DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;141    			THROW(EXCEP_WRONG_P1_P2);
;;;142    		}
;;;143    
;;;144    		DBG_FUNC(">>[102_221] _102221_status: Preparing DF Name TLV of current ADF\n");
;;;145    
;;;146    		//setting the first index as the Tag for DF
;;;147    		RESPONSE_BUFF[0] = TAG_DF_NAME;
;;;148    
;;;149    		//getting the prepared response from index 1
;;;150    		_7816_4_getAidOfAdf(pccCurrentChannel->fhaCurrentAdf, &RESPONSE_BUFF[1]);
;;;151    
;;;152    		gudbOutputLen = RESPONSE_BUFF[1] + 2;
;;;153    		preparedLen =(uMonoByte) gudbOutputLen;
;;;154    			if (P3_BYTE != gudbOutputLen) {
;;;155    				
;;;156    				gudbOutputLen = 0x00;
;;;157    
;;;158    				DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;159    				DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;160    				
;;;161    				/*raise exception of Wrong P3*/
;;;162    				THROW2(EXCEP_WRONG_P3, preparedLen);
;;;163    		}
;;;164    	}
;;;165    	else if (P2_BYTE == P2_STATUS_RETURN_NO_DATA)
;;;166    	{	
;;;167    		DBG_FUNC(">>[102_221] _102221_status: No response to return\n");
;;;168    		gudbOutputLen = 0x00;
;;;169    		THROW(EXCEP_NORMAL_ENDING);
;;;170    	}
;;;171    	else {
;;;172    		//p2 must either be 00 , 01 or 0C
;;;173    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;174    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;175    		THROW(EXCEP_WRONG_P1_P2);
;;;176    	}
;;;177    
;;;178    	if (P3_BYTE != preparedLen) {
;;;179    
;;;180    		DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;181    
;;;182    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;183    		/*raise exception of Wrong P3*/
;;;184    		THROW2(EXCEP_WRONG_P3,preparedLen);
;;;185    	}
;;;186    
;;;187    	DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;188    }
;;;189    
;;;190    /*Definition the function selectByPath
;;;191    * @param parentDf: It's the address of Current directory file
;;;192    @param pumbPath: It's the Current Directory File Id
;;;193    @param umbPathLength: It's Length of File Id
;;;194    */
;;;195    
;;;196    tFileHeaderAddr _102221_selectByPath(tFileHeaderAddr parentDf, puMonoByte pumbPath, uMonoByte umbPathLength) {
;;;197    	/*Variables declaration/definition*/
;;;198    	uMonoByte	umbIndex;
;;;199    	uDiByte		udbFileId;
;;;200    
;;;201    	DBG_FUNC_ENTRY(">>_102221_selectByPath\n"); 
;;;202    
;;;203    	//Try to Select File Id, Select By Path
;;;204    	for (umbIndex = 0x00; umbIndex < umbPathLength; umbIndex  += LENGTH_FILE_ID) {
;;;205    
;;;206    		//Get Next File ID threw mm_makeUdiByte() function			
;;;207    		udbFileId = mm_makeUdiByte(pumbPath, umbIndex);
;;;208    
;;;209    		DBG_FUNC("[102_221]_102221_selectByPath:Get File Id '%2' \n", udbFileId);
;;;210    
;;;211    		if ((0x00 == umbIndex) && (FID_CURRENT_ADF == udbFileId) && (parentDf == _7816_4_getMfAddress())) { // Check if its Reserved ADF file ID
        0x000021e6:    8804        ..      LDRH     r4,[r0,#0]
        0x000021e8:    f000fee4    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x000021ec:    4284        .B      CMP      r4,r0
        0x000021ee:    d107        ..      BNE      0x2200 ; _102221_selectByPath + 72
;;;212    
;;;213    			DBG_FUNC("[102_221]_102221_selectByPath: Requesting Current ADF using Reserved ADF file id 7FFF\n");
;;;214    
;;;215    			/*store current ADF even if its not set*/
;;;216    			parentDf = pccCurrentChannel->fhaCurrentAdf;
        0x000021f0:    4816        .H      LDR      r0,[pc,#88] ; [0x224c] = 0x200006e8
        0x000021f2:    6800        .h      LDR      r0,[r0,#0]
        0x000021f4:    8940        @.      LDRH     r0,[r0,#0xa]
        0x000021f6:    a902        ..      ADD      r1,sp,#8
        0x000021f8:    8008        ..      STRH     r0,[r1,#0]
        0x000021fa:    2800        .(      CMP      r0,#0
        0x000021fc:    d10a        ..      BNE      0x2214 ; _102221_selectByPath + 92
        0x000021fe:    e014        ..      B        0x222a ; _102221_selectByPath + 114
        0x00002200:    ac02        ..      ADD      r4,sp,#8
        0x00002202:    8821        !.      LDRH     r1,[r4,#0]
        0x00002204:    2200        ."      MOVS     r2,#0
        0x00002206:    4638        8F      MOV      r0,r7
        0x00002208:    4623        #F      MOV      r3,r4
        0x0000220a:    f000ff93    ....    BL       _7816_4_ifFileExists ; 0x3134
        0x0000220e:    8820         .      LDRH     r0,[r4,#0]
        0x00002210:    2800        .(      CMP      r0,#0
        0x00002212:    d00a        ..      BEQ      0x222a ; _102221_selectByPath + 114
        0x00002214:    f001f90e    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x00002218:    21bf        .!      MOVS     r1,#0xbf
        0x0000221a:    4001        .@      ANDS     r1,r1,r0
;;;217    
;;;218    			DBG_FUNC("[102_221]_102221_selectByPath: Current ADF '%2'\n", parentDf);
;;;219    
;;;220    		}
;;;221    		else {
;;;222    			DBG_FUNC("[102_221] _102221_selectByPath: Searching given File ID '%2' under Current DF\n", udbFileId);
;;;223    
;;;224    			/*Check given File ID under current DF*/
;;;225    			_7816_4_ifFileExists(udbFileId, parentDf, MODE_FIND_FID, &parentDf);
;;;226    
;;;227    		}
;;;228    
;;;229    		if (
;;;230    				(NO_FILE_PRESENT == parentDf) //File not found
        0x0000221c:    2938        8)      CMP      r1,#0x38
        0x0000221e:    d104        ..      BNE      0x222a ; _102221_selectByPath + 114
        0x00002220:    1cad        ..      ADDS     r5,r5,#2
        0x00002222:    b2e8        ..      UXTB     r0,r5
        0x00002224:    9901        ..      LDR      r1,[sp,#4]
        0x00002226:    4288        .B      CMP      r0,r1
        0x00002228:    d3d1        ..      BCC      0x21ce ; _102221_selectByPath + 22
        0x0000222a:    a802        ..      ADD      r0,sp,#8
;;;231    				||								//OR
;;;232    				(!(IS(DF, _7816_4_getFileDescriptor(parentDf)))) //Selected file is an EF
;;;233    			) {
;;;234    			DBG_FUNC("[102_221] _102221_selectByPath: File ID '%2' not found under Current DF\n", udbFileId);
;;;235    			break;
;;;236    		}
;;;237    	}
;;;238    
;;;239    	if (umbIndex < (umbPathLength - LENGTH_FILE_ID)) {
        0x0000222c:    8800        ..      LDRH     r0,[r0,#0]
        0x0000222e:    9b00        ..      LDR      r3,[sp,#0]
        0x00002230:    e000        ..      B        0x2234 ; _102221_selectByPath + 124
        0x00002232:    461d        .F      MOV      r5,r3
        0x00002234:    b2e9        ..      UXTB     r1,r5
        0x00002236:    9a01        ..      LDR      r2,[sp,#4]
        0x00002238:    1e92        ..      SUBS     r2,r2,#2
        0x0000223a:    428a        .B      CMP      r2,r1
        0x0000223c:    dc00        ..      BGT      0x2240 ; _102221_selectByPath + 136
        0x0000223e:    4603        .F      MOV      r3,r0
;;;240    		/*An EF found in the middle of given path
;;;241    		* or
;;;242    		* File not found*/
;;;243    		return NO_FILE_PRESENT;
;;;244    	}// if (umbIndex < (umbPathLength - LENGTH_FILE_ID))
;;;245    
;;;246    	DBG_FUNC_EXIT("<<[102_221] _102221_selectByPath() \n");
;;;247    
;;;248    	return parentDf;
;;;249    }
        0x00002240:    4618        .F      MOV      r0,r3
        0x00002242:    b003        ..      ADD      sp,sp,#0xc
        0x00002244:    bdf0        ..      POP      {r4-r7,pc}
        0x00002246:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.3_0
        0x00002248:    00007fff    ....    DCD    32767
    __arm_cp.3_1
        0x0000224c:    200006e8    ...     DCD    536872680
    $t.4
    _102221_selectByFileId
;;;250    
;;;251    /*Definition the function selectByFileId
;;;252    * @param fhaFile: Current directory file
;;;253    */
;;;254    tFileHeaderAddr _102221_selectByFileId(tFileHeaderAddr fhaFile, uDiByte udbFileID) {
        0x00002250:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00002252:    b087        ..      SUB      sp,sp,#0x1c
        0x00002254:    4605        .F      MOV      r5,r0
        0x00002256:    a801        ..      ADD      r0,sp,#4
        0x00002258:    8005        ..      STRH     r5,[r0,#0]
        0x0000225a:    4829        )H      LDR      r0,[pc,#164] ; [0x2300] = 0x7fff
        0x0000225c:    4281        .B      CMP      r1,r0
        0x0000225e:    d00c        ..      BEQ      0x227a ; _102221_selectByFileId + 42
;;; Core/102_221/source\GenericCommands.c
        0x00002260:    460c        .F      MOV      r4,r1
        0x00002262:    203f        ?       MOVS     r0,#0x3f
        0x00002264:    0200        ..      LSLS     r0,r0,#8
        0x00002266:    4281        .B      CMP      r1,r0
        0x00002268:    d110        ..      BNE      0x228c ; _102221_selectByFileId + 60
        0x0000226a:    f000fea3    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x0000226e:    a901        ..      ADD      r1,sp,#4
        0x00002270:    8008        ..      STRH     r0,[r1,#0]
        0x00002272:    a801        ..      ADD      r0,sp,#4
        0x00002274:    8800        ..      LDRH     r0,[r0,#0]
        0x00002276:    b007        ..      ADD      sp,sp,#0x1c
        0x00002278:    bdf0        ..      POP      {r4-r7,pc}
        0x0000227a:    4822        "H      LDR      r0,[pc,#136] ; [0x2304] = 0x200006e8
        0x0000227c:    6800        .h      LDR      r0,[r0,#0]
        0x0000227e:    8940        @.      LDRH     r0,[r0,#0xa]
        0x00002280:    a901        ..      ADD      r1,sp,#4
;;;1      #include "102_221.h"
;;;2      
;;;3      /*
;;;4      * Macros
;;;5      */
;;;6      #define P1_CLOSE_CHANNEL											(0x80)
;;;7      #define P1_OPEN_CHANNEL												(0x00)
;;;8      #define P1_IS_INVALID												(0x7F)
;;;9      #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN					(0x01)
;;;10     #define P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_CLOSE					(0x00)
;;;11     #define MAX_LOGICAL_CHANNEL_NUMBER									(0x13)
;;;12     #define P1_STATUS_APP_TERMINATION_INITIATED							(0x02)
;;;13     #define	P2_STATUS_RETURN_NO_DATA									(0x0C)
;;;14     #define P2_STATUS_RETURN_DF_NAME_TLV								(0x01)
;;;15     #define P2_STATUS_RETURN_FCP_TLV									(0x00)
;;;16     #define LENGTH_PS_DO												(0x01)				
;;;17     #define LENGTH_TAG_KEY_REFERENCE									(0x01)	
;;;18     #define PIN_ENABLE_STATUS											(0x00)
;;;19     #define LENGTH_FIX													(0x00)
;;;20     #define INDEX_TAG_PIN_STATUS_TEMP_DO								(0x00)
;;;21     #define INDEX_LENGTH_PSTDO											(0x01)
;;;22     #define INDEX_TAG_SECURITY_SCDO_ALWAYS								(0x02)
;;;23     #define INDEX_LENGTH_PS												(0x03)
;;;24     #define INDEX_PIN_ENABLE_STATUS										(0x04)
;;;25     
;;;26     #define LENGTH_FCP_PROP_TLV											(0x0E)
;;;27     /*Definition the function for FCP Response PIN Status Template(PS_DO)
;;;28     @param pdPstdo: It's the identify the set pin of current DF
;;;29     @pumbResponse: It's prepare the FCP Response
;;;30     */
;;;31     /*In this Code Pin counter limit 8, So We Only 8 Pin Set in Perticular DF*/
;;;32     
;;;33     uMonoByte _102221_getPSTDO(tPinData pdPstdo, puMonoByte pumbResponse) {
;;;34     	uMonoByte	umbIndex = LENGTH_FIX;
;;;35     	uMonoByte	umbIndexId = LENGTH_FIX;
;;;36     	uMonoByte	umPinCount = LENGTH_FIX;
;;;37     	uMonoByte	umDoStatus = LENGTH_FIX;
;;;38     
;;;39     	DBG_FUNC_ENTRY(">>[102221]_102221_getPSTDO() \n");
;;;40     
;;;41     	/*Set Tag PIN status template DO */
;;;42     	pumbResponse[INDEX_TAG_PIN_STATUS_TEMP_DO] = TAG_PIN_STATUS_TEMP_DO;
;;;43     	/*Set Tag Security Do Always & Tag Length*/
;;;44     	pumbResponse[INDEX_TAG_SECURITY_SCDO_ALWAYS] = TAG_SECURITY_SCDO_ALWAYS;
;;;45     	pumbResponse[INDEX_LENGTH_PS] = LENGTH_PS_DO;
;;;46     
;;;47     	umbIndexId = 0x05;
;;;48     	/*In First 2 Bytes Pin Check 01-08, 81-88*/
;;;49     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
;;;50     		if (pdPstdo & (0x01 << umbIndex)) {
;;;51     
;;;52     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;53     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
;;;54     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
;;;55     			pumbResponse[umbIndexId++] = PIN_APP_1 + umbIndex;
;;;56     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;57     			umPinCount++;
;;;58     			/*Check Pin Status, If Pin is Enable*/
;;;59     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_APP_1 + umbIndex))) {
;;;60     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;61     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
;;;62     			}
;;;63     
;;;64     		}
;;;65     	}
;;;66     	/*In Last 2 Bytes Pin Check 0A-0E and 8A-8E*/
;;;67     	for (umbIndex = 0; umbIndex < 14;umbIndex++) {
;;;68     		if (pdPstdo & (0x010000 << umbIndex)) {
;;;69     
;;;70     			/*Set PIN status template DO Key reference tag & Key reference length */
;;;71     			pumbResponse[umbIndexId++] = TAG_KEY_REFERENCE;
;;;72     			pumbResponse[umbIndexId++] = LENGTH_TAG_KEY_REFERENCE;
;;;73     			pumbResponse[umbIndexId++] = PIN_SECOND_APP_1 + umbIndex;
;;;74     			DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin '%2 \n", (PIN_APP_1 + umbIndex));
;;;75     			umPinCount++;
;;;76     			/*Check Pin Status, If Pin is Enable*/
;;;77     			if (PIN_ENABLE_STATUS == (_7816_4_isPinActive(PIN_SECOND_APP_1 + umbIndex))) {
;;;78     				DBG_FUNC("<<[102221]_102221_getPSTDO() Pin is Enable \n");
;;;79     				umDoStatus = umDoStatus | (0x01 << (8 - umPinCount));
;;;80     			}
;;;81     
;;;82     		}
;;;83     	}
;;;84     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Status '%2' \n", umDoStatus);
;;;85     	/*Set DoStatus */
;;;86     	pumbResponse[INDEX_PIN_ENABLE_STATUS] = umDoStatus;
;;;87     	DBG_FUNC("<<[102221]_102221_getPSTDO() Set Pin Length \n");
;;;88     	/*Set DoTag Length */
;;;89     	pumbResponse[INDEX_LENGTH_PSTDO] = umbIndexId - 0x02;
;;;90     	DBG_FUNC_EXIT("<<[102221]_102221_getPSTDO() \n");
;;;91     	return umbIndexId;
;;;92     
;;;93     }
;;;94     /*
;;;95     * UICC Status Command
;;;96     */
;;;97     
;;;98     //enum {
;;;99     	//FILE_IS_MF = 0x01,
;;;100    	//FILE_IS_DF = 0x02,
;;;101    	//FILE_IS_EF = 0x04
;;;102    //}tFileType;
;;;103    
;;;104    
;;;105    void _102221_status(void) {
;;;106    
;;;107    	uMonoByte preparedLen = 0x00;
;;;108    
;;;109    	DBG_FUNC_ENTRY(">>[102_221] _102221_status() \n");
;;;110    	
;;;111    	if (P1_BYTE > P1_STATUS_APP_TERMINATION_INITIATED) { 
;;;112    		//P1 must either be 01 02 or 00
;;;113    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;114    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;115    		THROW(EXCEP_WRONG_P1_P2);
;;;116    	}
;;;117    
;;;118    	//check if the value of P1 is valid or not
;;;119    	DBG_FUNC(">>[102_221] _102221_status: P1 is valid\n");
;;;120    
;;;121    	if (P2_BYTE == P2_STATUS_RETURN_FCP_TLV) {
;;;122    		// Prepare FCP tlv of current DF
;;;123    		DBG_FUNC(">>[102_221] _102221_status: Return FCP template of current DF\n");
;;;124    		gudbOutputLen = _102221_prepareFCPResponseForFile(pccCurrentChannel->fhaCurrentDf, RESPONSE_BUFF); //getting the prepared FCP response
;;;125    		preparedLen = (uMonoByte)gudbOutputLen;
;;;126    		//fcp Response 
;;;127    		if (P3_BYTE != preparedLen) {
;;;128    			gudbOutputLen = 0x00;
;;;129    		}
;;;130    
;;;131    	}
;;;132    	else if (P2_BYTE == P2_STATUS_RETURN_DF_NAME_TLV) { // if p2 is to check TLV_OBJ of current selected Application
;;;133    
;;;134    		DBG_FUNC(">>[102_221] _102221_status: Return DF Name TLV of current ADF\n");
;;;135    
;;;136    		if (pccCurrentChannel->fhaCurrentAdf == NO_FILE_PRESENT) {
;;;137    
;;;138    			//to check AID DF NAME TLV P2 must be 01
;;;139    			DBG_ERR("[102_221] _102221_status: No Application selected\n");
;;;140    			DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;141    			THROW(EXCEP_WRONG_P1_P2);
;;;142    		}
;;;143    
;;;144    		DBG_FUNC(">>[102_221] _102221_status: Preparing DF Name TLV of current ADF\n");
;;;145    
;;;146    		//setting the first index as the Tag for DF
;;;147    		RESPONSE_BUFF[0] = TAG_DF_NAME;
;;;148    
;;;149    		//getting the prepared response from index 1
;;;150    		_7816_4_getAidOfAdf(pccCurrentChannel->fhaCurrentAdf, &RESPONSE_BUFF[1]);
;;;151    
;;;152    		gudbOutputLen = RESPONSE_BUFF[1] + 2;
;;;153    		preparedLen =(uMonoByte) gudbOutputLen;
;;;154    			if (P3_BYTE != gudbOutputLen) {
;;;155    				
;;;156    				gudbOutputLen = 0x00;
;;;157    
;;;158    				DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;159    				DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;160    				
;;;161    				/*raise exception of Wrong P3*/
;;;162    				THROW2(EXCEP_WRONG_P3, preparedLen);
;;;163    		}
;;;164    	}
;;;165    	else if (P2_BYTE == P2_STATUS_RETURN_NO_DATA)
;;;166    	{	
;;;167    		DBG_FUNC(">>[102_221] _102221_status: No response to return\n");
;;;168    		gudbOutputLen = 0x00;
;;;169    		THROW(EXCEP_NORMAL_ENDING);
;;;170    	}
;;;171    	else {
;;;172    		//p2 must either be 00 , 01 or 0C
;;;173    		DBG_ERR("[102_221] _102221_status: Wrong P1-P2\n");
;;;174    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;175    		THROW(EXCEP_WRONG_P1_P2);
;;;176    	}
;;;177    
;;;178    	if (P3_BYTE != preparedLen) {
;;;179    
;;;180    		DBG_ERR("[102_221] _102221_status: Invalid P3 Byte as per Luicc i.e. prepared length %2\n", gudbOutputLen);
;;;181    
;;;182    		DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;183    		/*raise exception of Wrong P3*/
;;;184    		THROW2(EXCEP_WRONG_P3,preparedLen);
;;;185    	}
;;;186    
;;;187    	DBG_FUNC_EXIT("<<[102_221] _102221_status() \n");
;;;188    }
;;;189    
;;;190    /*Definition the function selectByPath
;;;191    * @param parentDf: It's the address of Current directory file
;;;192    @param pumbPath: It's the Current Directory File Id
;;;193    @param umbPathLength: It's Length of File Id
;;;194    */
;;;195    
;;;196    tFileHeaderAddr _102221_selectByPath(tFileHeaderAddr parentDf, puMonoByte pumbPath, uMonoByte umbPathLength) {
;;;197    	/*Variables declaration/definition*/
;;;198    	uMonoByte	umbIndex;
;;;199    	uDiByte		udbFileId;
;;;200    
;;;201    	DBG_FUNC_ENTRY(">>_102221_selectByPath\n"); 
;;;202    
;;;203    	//Try to Select File Id, Select By Path
;;;204    	for (umbIndex = 0x00; umbIndex < umbPathLength; umbIndex  += LENGTH_FILE_ID) {
;;;205    
;;;206    		//Get Next File ID threw mm_makeUdiByte() function			
;;;207    		udbFileId = mm_makeUdiByte(pumbPath, umbIndex);
;;;208    
;;;209    		DBG_FUNC("[102_221]_102221_selectByPath:Get File Id '%2' \n", udbFileId);
;;;210    
;;;211    		if ((0x00 == umbIndex) && (FID_CURRENT_ADF == udbFileId) && (parentDf == _7816_4_getMfAddress())) { // Check if its Reserved ADF file ID
;;;212    
;;;213    			DBG_FUNC("[102_221]_102221_selectByPath: Requesting Current ADF using Reserved ADF file id 7FFF\n");
;;;214    
;;;215    			/*store current ADF even if its not set*/
;;;216    			parentDf = pccCurrentChannel->fhaCurrentAdf;
;;;217    
;;;218    			DBG_FUNC("[102_221]_102221_selectByPath: Current ADF '%2'\n", parentDf);
;;;219    
;;;220    		}
;;;221    		else {
;;;222    			DBG_FUNC("[102_221] _102221_selectByPath: Searching given File ID '%2' under Current DF\n", udbFileId);
;;;223    
;;;224    			/*Check given File ID under current DF*/
;;;225    			_7816_4_ifFileExists(udbFileId, parentDf, MODE_FIND_FID, &parentDf);
;;;226    
;;;227    		}
;;;228    
;;;229    		if (
;;;230    				(NO_FILE_PRESENT == parentDf) //File not found
;;;231    				||								//OR
;;;232    				(!(IS(DF, _7816_4_getFileDescriptor(parentDf)))) //Selected file is an EF
;;;233    			) {
;;;234    			DBG_FUNC("[102_221] _102221_selectByPath: File ID '%2' not found under Current DF\n", udbFileId);
;;;235    			break;
;;;236    		}
;;;237    	}
;;;238    
;;;239    	if (umbIndex < (umbPathLength - LENGTH_FILE_ID)) {
;;;240    		/*An EF found in the middle of given path
;;;241    		* or
;;;242    		* File not found*/
;;;243    		return NO_FILE_PRESENT;
;;;244    	}// if (umbIndex < (umbPathLength - LENGTH_FILE_ID))
;;;245    
;;;246    	DBG_FUNC_EXIT("<<[102_221] _102221_selectByPath() \n");
;;;247    
;;;248    	return parentDf;
;;;249    }
;;;250    
;;;251    /*Definition the function selectByFileId
;;;252    * @param fhaFile: Current directory file
;;;253    */
;;;254    tFileHeaderAddr _102221_selectByFileId(tFileHeaderAddr fhaFile, uDiByte udbFileID) {
;;;255    	/*Variables declaration/definition*/
;;;256    	tFileHeader			fhFile;
;;;257    	tFileHeaderAddr	fhaRequestedFile = fhaFile; // Default initalized with current directory
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>_102221_selectByFileId\n");
;;;260    
;;;261    	if (udbFileID == FID_MF) //if its MF
;;;262    	{
;;;263    		DBG_FUNC("[102_221] _102221_selectByFileId: Requesting MF 3F00\n");
;;;264    		/*Set MF as current DF*/
;;;265    		fhaRequestedFile = _7816_4_getMfAddress();
;;;266    	}
;;;267    	else if (FID_CURRENT_ADF == udbFileID) { // Check if its Reserved ADF file ID
;;;268    
;;;269    		DBG_FUNC("[102_221] _102221_selectByFileId: Requesting Current ADF using Reserved ADF file id 7FFF\n");
;;;270    
;;;271    		/*If application is selected fhaRequestedFile contains its address otherwise NO_FILE_PRESENT*/
;;;272    		/*Set ADF as current DF*/
;;;273    		fhaRequestedFile = pccCurrentChannel->fhaCurrentAdf;
        0x00002282:    8008        ..      STRH     r0,[r1,#0]
        0x00002284:    a801        ..      ADD      r0,sp,#4
        0x00002286:    8800        ..      LDRH     r0,[r0,#0]
        0x00002288:    b007        ..      ADD      sp,sp,#0x1c
        0x0000228a:    bdf0        ..      POP      {r4-r7,pc}
;;;274    
;;;275    	}
;;;276    	/*Check the File ID of current DF with incoming File id*/
;;;277    	else if (udbFileID != _7816_4_getFileId(fhaFile))  {
        0x0000228c:    4628        (F      MOV      r0,r5
        0x0000228e:    f001f883    ....    BL       _7816_4_getFileId ; 0x3398
        0x00002292:    42a0        .B      CMP      r0,r4
        0x00002294:    d0ed        ..      BEQ      0x2272 ; _102221_selectByFileId + 34
        0x00002296:    2200        ."      MOVS     r2,#0
        0x00002298:    ae01        ..      ADD      r6,sp,#4
;;;278    		
;;;279    		DBG_FUNC("[102_221] _102221_selectByFileId: Search given File ID '%2' under Current DF\n", udbFileID);
;;;280    
;;;281    		/*Check given File ID under current DF*/
;;;282    		_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaRequestedFile);
        0x0000229a:    4620         F      MOV      r0,r4
        0x0000229c:    4629        )F      MOV      r1,r5
        0x0000229e:    4633        3F      MOV      r3,r6
        0x000022a0:    f000ff48    ..H.    BL       _7816_4_ifFileExists ; 0x3134
;;;283    
;;;284    		if (NO_FILE_PRESENT == fhaRequestedFile) { //File not found
        0x000022a4:    8830        0.      LDRH     r0,[r6,#0]
        0x000022a6:    2800        .(      CMP      r0,#0
        0x000022a8:    d1e3        ..      BNE      0x2272 ; _102221_selectByFileId + 34
        0x000022aa:    ae02        ..      ADD      r6,sp,#8
;;;285    
;;;286    			DBG_FUNC("[102_221] _102221_selectByFileId: File ID '%2' not found under Current DF\n", udbFileID);
;;;287    
;;;288    			/*read header of current DF*/
;;;289    			_7816_4_getFileHeader(fhaFile, &fhFile);
        0x000022ac:    4628        (F      MOV      r0,r5
        0x000022ae:    4631        1F      MOV      r1,r6
        0x000022b0:    f001f84c    ..L.    BL       _7816_4_getFileHeader ; 0x334c
;;;290    
;;;291    			/*fetch the parent of current DF*/
;;;292    			fhaFile = fhFile.fhaParent;
        0x000022b4:    88b6        ..      LDRH     r6,[r6,#4]
;;;293    			
;;;294    			/*Check if there is a parent, or current directory is root one*/
;;;295    			if (fhaFile != NO_FILE_PRESENT) {
        0x000022b6:    2e00        ..      CMP      r6,#0
        0x000022b8:    d0db        ..      BEQ      0x2272 ; _102221_selectByFileId + 34
;;;296    
;;;297    				DBG_FUNC("[102_221] _102221_selectByFileId: Check if parent of current directory is given file\n");
;;;298    
;;;299    				/*Check File ID of Current DF's parent */
;;;300    				if (udbFileID == _7816_4_getFileId(fhaFile)) {
        0x000022ba:    4630        0F      MOV      r0,r6
        0x000022bc:    f001f86c    ..l.    BL       _7816_4_getFileId ; 0x3398
        0x000022c0:    42a0        .B      CMP      r0,r4
        0x000022c2:    d105        ..      BNE      0x22d0 ; _102221_selectByFileId + 128
        0x000022c4:    a801        ..      ADD      r0,sp,#4
;;;301    
;;;302    					DBG_FUNC("[102_221] _102221_selectByFileId: Parent of current DF is the requested file\n");
;;;303    
;;;304    					/*return parent file*/
;;;305    					fhaRequestedFile = fhaFile;
        0x000022c6:    8006        ..      STRH     r6,[r0,#0]
        0x000022c8:    a801        ..      ADD      r0,sp,#4
;;;306    				}
;;;307    				else { //any DF which is an immediate child of the parent of the current DF
;;;308    
;;;309    					DBG_FUNC("[102_221] _102221_selectByFileId: Its not even parent of current DF\n");
;;;310    					DBG_FUNC("[102_221] _102221_selectByFileId: Search same file Id '%2' under parent of Current DF\n", udbFileID);
;;;311    
;;;312    					/*search same file in parent of current DF*/
;;;313    					_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaRequestedFile);
;;;314    
;;;315    
;;;316    					if ((NO_FILE_PRESENT != fhaRequestedFile) // File found
;;;317    						&&								//AND
;;;318    						(!(IS(DF, _7816_4_getFileDescriptor(fhaRequestedFile))))) {	// if its EF
;;;319    
;;;320    						/*raise exception of file not found*/
;;;321    						DBG_ERR("[102_221] _102221_selectByFileId: File id '%2' not found \n", udbFileID);
;;;322    						fhaRequestedFile = NO_FILE_PRESENT;
;;;323    					}
;;;324    				}
;;;325    			}
;;;326    
;;;327    		}
;;;328    	}
;;;329    
;;;330    	DBG_FUNC("[102_221] _102221_selectByFileId: File ID '%2' found\n", udbFileID);
;;;331    	DBG_FUNC_EXIT("<<[102_221]_102221_selectByFileId() \n");
;;;332    	return fhaRequestedFile;
        0x000022ca:    8800        ..      LDRH     r0,[r0,#0]
        0x000022cc:    b007        ..      ADD      sp,sp,#0x1c
        0x000022ce:    bdf0        ..      POP      {r4-r7,pc}
        0x000022d0:    2500        .%      MOVS     r5,#0
        0x000022d2:    af01        ..      ADD      r7,sp,#4
        0x000022d4:    4620         F      MOV      r0,r4
        0x000022d6:    4631        1F      MOV      r1,r6
        0x000022d8:    462a        *F      MOV      r2,r5
        0x000022da:    463b        ;F      MOV      r3,r7
        0x000022dc:    f000ff2a    ..*.    BL       _7816_4_ifFileExists ; 0x3134
        0x000022e0:    8838        8.      LDRH     r0,[r7,#0]
        0x000022e2:    2800        .(      CMP      r0,#0
        0x000022e4:    d0c5        ..      BEQ      0x2272 ; _102221_selectByFileId + 34
        0x000022e6:    f001f8a5    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x000022ea:    21bf        .!      MOVS     r1,#0xbf
        0x000022ec:    4001        .@      ANDS     r1,r1,r0
        0x000022ee:    2938        8)      CMP      r1,#0x38
        0x000022f0:    d0bf        ..      BEQ      0x2272 ; _102221_selectByFileId + 34
        0x000022f2:    a801        ..      ADD      r0,sp,#4
        0x000022f4:    8005        ..      STRH     r5,[r0,#0]
        0x000022f6:    a801        ..      ADD      r0,sp,#4
        0x000022f8:    8800        ..      LDRH     r0,[r0,#0]
        0x000022fa:    b007        ..      ADD      sp,sp,#0x1c
        0x000022fc:    bdf0        ..      POP      {r4-r7,pc}
        0x000022fe:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.4_0
        0x00002300:    00007fff    ....    DCD    32767
    __arm_cp.4_1
        0x00002304:    200006e8    ...     DCD    536872680
    $t.6
    _102221_select
;;;333    }
;;;334    
;;;335    
;;;336    /*
;;;337    * UICC select command
;;;338    */
;;;339    
;;;340    void _102221_select(void) {
        0x00002308:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000230a:    b087        ..      SUB      sp,sp,#0x1c
;;;341    
;;;342    	/*Variables declaration/definition*/
;;;343    	uDiByte			udbFileID;
;;;344    	tFileHeaderAddr fhaFile;
;;;345    	tFileHeader		fhFile;
;;;346    	DBG_FUNC_ENTRY(">>[102_221] _102221_select()\n");
;;;347    
;;;348    	/*get fileID from command data*/
;;;349    	udbFileID = mm_makeUdiByte(COMMAND_DATA, 0x00);
        0x0000230c:    4d52        RM      LDR      r5,[pc,#328] ; [0x2458] = 0x2000023e
        0x0000230e:    1d6e        n.      ADDS     r6,r5,#5
        0x00002310:    2400        .$      MOVS     r4,#0
        0x00002312:    4630        0F      MOV      r0,r6
        0x00002314:    4621        !F      MOV      r1,r4
        0x00002316:    f7feff45    ..E.    BL       mm_makeUdiByte ; 0x11a4
        0x0000231a:    4602        .F      MOV      r2,r0
;;;350    
;;;351    	/*get Current DF*/
;;;352    	fhaFile = pccCurrentChannel->fhaCurrentDf;
        0x0000231c:    4f4f        OO      LDR      r7,[pc,#316] ; [0x245c] = 0x200006e8
        0x0000231e:    6838        8h      LDR      r0,[r7,#0]
        0x00002320:    88c1        ..      LDRH     r1,[r0,#6]
        0x00002322:    a806        ..      ADD      r0,sp,#0x18
        0x00002324:    8001        ..      STRH     r1,[r0,#0]
;;;353    
;;;354    	/*validation of P2 byte*/
;;;355    	if (P2_BYTE_VALIDATION_PARAMETER != (MASK_P2_BYTE & P2_BYTE))
        0x00002326:    78e8        .x      LDRB     r0,[r5,#3]
        0x00002328:    23b7        .#      MOVS     r3,#0xb7
        0x0000232a:    4003        .@      ANDS     r3,r3,r0
        0x0000232c:    2b04        .+      CMP      r3,#4
        0x0000232e:    d000        ..      BEQ      0x2332 ; _102221_select + 42
        0x00002330:    e07f        ..      B        0x2432 ; _102221_select + 298
;;;356    	{
;;;357    		DBG_ERR("[102_221] _102221_select : Invalid P2 Byte \n");
;;;358    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;359    		/*raise exception of Wrong P2*/
;;;360    		THROW(EXCEP_WRONG_P1_P2);
;;;361    	}
;;;362    
;;;363    	/*Select a File by Different Methods*/
;;;364    	switch (P1_BYTE)
        0x00002332:    78a8        .x      LDRB     r0,[r5,#2]
        0x00002334:    2809        .(      CMP      r0,#9
        0x00002336:    d900        ..      BLS      0x233a ; _102221_select + 50
        0x00002338:    e07b        {.      B        0x2432 ; _102221_select + 298
        0x0000233a:    9600        ..      STR      r6,[sp,#0]
        0x0000233c:    4478        xD      ADD      r0,r0,pc
        0x0000233e:    7900        .y      LDRB     r0,[r0,#4]
        0x00002340:    0040        @.      LSLS     r0,r0,#1
        0x00002342:    4487        .D      ADD      pc,pc,r0
    $d.7
        0x00002344:    2d760c04    ..v-    DCD    762711044
        0x00002348:    76767631    1vvv    DCD    1987474993
        0x0000234c:    4223        #B      DCW    16931
    $t.8
;;;365    	{
;;;366    	case P1_SELECT_BY_FILE_ID:
;;;367    		if (P3_BYTE == LENGTH_FILE_ID) {
        0x0000234e:    7928        (y      LDRB     r0,[r5,#4]
        0x00002350:    2802        .(      CMP      r0,#2
        0x00002352:    d174        t.      BNE      0x243e ; _102221_select + 310
;;;368    			/* Select the ID by _102221_selectByFileId*/
;;;369    			fhaFile = _102221_selectByFileId(fhaFile, udbFileID);
        0x00002354:    4608        .F      MOV      r0,r1
        0x00002356:    4611        .F      MOV      r1,r2
        0x00002358:    f7ffff7a    ..z.    BL       _102221_selectByFileId ; 0x2250
        0x0000235c:    e03f        ?.      B        0x23de ; _102221_select + 214
;;;370    		}
;;;371    		else
;;;372    		{
;;;373    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;374    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;375    			/*raise exception of Wrong P3*/
;;;376    			THROW2(EXCEP_WRONG_P3, LENGTH_FILE_ID);
;;;377    		}
;;;378    
;;;379    		break;
;;;380    	case P1_SELECT_BY_CHILD:
;;;381    		if (P3_BYTE == LENGTH_FILE_ID) {
        0x0000235e:    7928        (y      LDRB     r0,[r5,#4]
        0x00002360:    2802        .(      CMP      r0,#2
        0x00002362:    d16a        j.      BNE      0x243a ; _102221_select + 306
        0x00002364:    2600        .&      MOVS     r6,#0
        0x00002366:    af06        ..      ADD      r7,sp,#0x18
;;;382    			DBG_FUNC("[102_221] _102221_select : Select child DF of the current DF.\n");
;;;383    			/*Select child DF of the current DF*/
;;;384    			_7816_4_ifFileExists(udbFileID, fhaFile, MODE_FIND_FID, &fhaFile);
        0x00002368:    4610        .F      MOV      r0,r2
        0x0000236a:    4632        2F      MOV      r2,r6
        0x0000236c:    463b        ;F      MOV      r3,r7
        0x0000236e:    f000fee1    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;385    
;;;386    			/*EF check*/
;;;387    			if (
;;;388    				(NO_FILE_PRESENT != fhaFile) // File found
        0x00002372:    8838        8.      LDRH     r0,[r7,#0]
        0x00002374:    2800        .(      CMP      r0,#0
        0x00002376:    4f39        9O      LDR      r7,[pc,#228] ; [0x245c] = 0x200006e8
        0x00002378:    d069        i.      BEQ      0x244e ; _102221_select + 326
        0x0000237a:    f001f85b    ..[.    BL       _7816_4_getFileDescriptor ; 0x3434
        0x0000237e:    21bf        .!      MOVS     r1,#0xbf
        0x00002380:    4001        .@      ANDS     r1,r1,r0
        0x00002382:    2938        8)      CMP      r1,#0x38
        0x00002384:    d161        a.      BNE      0x244a ; _102221_select + 322
        0x00002386:    a806        ..      ADD      r0,sp,#0x18
        0x00002388:    8800        ..      LDRH     r0,[r0,#0]
        0x0000238a:    e02a        *.      B        0x23e2 ; _102221_select + 218
        0x0000238c:    7928        (y      LDRB     r0,[r5,#4]
        0x0000238e:    2800        .(      CMP      r0,#0
        0x00002390:    d057        W.      BEQ      0x2442 ; _102221_select + 314
        0x00002392:    2101        .!      MOVS     r1,#1
        0x00002394:    4008        .@      ANDS     r0,r0,r1
        0x00002396:    d154        T.      BNE      0x2442 ; _102221_select + 314
        0x00002398:    f000fe0c    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x0000239c:    792a        *y      LDRB     r2,[r5,#4]
        0x0000239e:    e01b        ..      B        0x23d8 ; _102221_select + 208
;;;389    				&&								//AND
;;;390    				(!(IS(DF, _7816_4_getFileDescriptor(fhaFile))))
;;;391    				)
;;;392    			{	// if its EF
;;;393    				/*raise exception of file not found*/
;;;394    				DBG_ERR("[102_221]_102221_select() Found File id '%2' is a EF \n", udbFileID);
;;;395    				fhaFile = NO_FILE_PRESENT;
;;;396    			}
;;;397    		}
;;;398    		else
;;;399    		{
;;;400    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;401    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;402    			/*raise exception of Wrong P3*/
;;;403    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;404    		}
;;;405    		break;
;;;406    
;;;407    	case P1_SELECT_BY_PARENT:
;;;408    		/*p3 Bytes Depends on FCP Response*/
;;;409    		DBG_FUNC("[102_221] _102221_select : Select parent DF of the current DF.\n");
;;;410    		/* Select parent DF of the current DF */
;;;411    		fhaFile = _7816_4_getParentFile(fhaFile);
        0x000023a0:    4608        .F      MOV      r0,r1
        0x000023a2:    f001fb79    ..y.    BL       _7816_4_getParentFile ; 0x3a98
        0x000023a6:    e01a        ..      B        0x23de ; _102221_select + 214
        0x000023a8:    200c        .       MOVS     r0,#0xc
        0x000023aa:    43c0        .C      MVNS     r0,r0
;;;412    		break;
;;;413    
;;;414    	case P1_SELECT_BY_AID:
;;;415    		DBG_FUNC("[102_221] _102221_select : P1=04 Select by AID.\n");
;;;416    
;;;417    		/*check AID length*/
;;;418    		if (
;;;419    			(P3_BYTE > LENGTH_MAX_AID)
        0x000023ac:    7929        )y      LDRB     r1,[r5,#4]
;;;420    			||
        0x000023ae:    3911        .9      SUBS     r1,r1,#0x11
        0x000023b0:    4281        .B      CMP      r1,r0
        0x000023b2:    d942        B.      BLS      0x243a ; _102221_select + 306
;;;421    			(P3_BYTE < LENGTH_MIN_AID)
;;;422    			) /*P3 for SelectByAID should be valid i.e. 5-16 bytes*/
;;;423    		{
;;;424    			DBG_ERR("[102_221] _102221_select : Invalid P3 Byte \n");
;;;425    
;;;426    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;427    
;;;428    			/*raise exception of Wrong P3*/
;;;429    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;430    		}
;;;431    
;;;432    		/*search for ADF using DF Name*/
;;;433    		_7816_4_ifAdfExists(&COMMAND_APDU[INDEX_P3], &fhaFile);
        0x000023b4:    1d28        (.      ADDS     r0,r5,#4
        0x000023b6:    ae06        ..      ADD      r6,sp,#0x18
        0x000023b8:    4631        1F      MOV      r1,r6
        0x000023ba:    f000fe09    ....    BL       _7816_4_ifAdfExists ; 0x2fd0
;;;434    
;;;435    		if (NO_FILE_PRESENT == fhaFile) {  // if search doesnt succeed
        0x000023be:    8830        0.      LDRH     r0,[r6,#0]
        0x000023c0:    2800        .(      CMP      r0,#0
        0x000023c2:    d044        D.      BEQ      0x244e ; _102221_select + 326
;;;436    			DBG_ERR("[102_221] _102221_select: File not found \n");
;;;437    			/*file is not found then*/
;;;438    			break;
;;;439    		}
;;;440    
;;;441    		DBG_FUNC("[102_221] _102221_select : Found File as Current ADF.\n");
;;;442    		/*Set the found ADF as current ADF*/
;;;443    		pccCurrentChannel->fhaCurrentAdf = fhaFile;
        0x000023c4:    6839        9h      LDR      r1,[r7,#0]
        0x000023c6:    8148        H.      STRH     r0,[r1,#0xa]
        0x000023c8:    e00d        ..      B        0x23e6 ; _102221_select + 222
;;;444    		break;
;;;445    
;;;446    	case P1_SELECT_BY_PATH_MF:				//Select by path from MF
;;;447    
;;;448    		if ((P3_BYTE!=0) && (P3_BYTE % LENGTH_FILE_ID == 0)) {
;;;449    			DBG_FUNC("[102_221] _102221_select: Requesting MF 3F00\n");
;;;450    			/*Current DF would be MF*/
;;;451    			fhaFile = _102221_selectByPath(_7816_4_getMfAddress(), COMMAND_DATA, P3_BYTE);
;;;452    		}
;;;453    		else
;;;454    		{
;;;455    			/*If p3 value is not correct then*/
;;;456    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;457    			THROW(EXCEP_WRONG_P3);
;;;458    		}
;;;459    		break;
;;;460    
;;;461    	case P1_SELECT_BY_PATH_CURRENT_DF:		//Select by path from current DF 
;;;462    		if ((P3_BYTE != 0) && (P3_BYTE % LENGTH_FILE_ID == 0)) {
        0x000023ca:    792a        *y      LDRB     r2,[r5,#4]
        0x000023cc:    2a00        .*      CMP      r2,#0
        0x000023ce:    d038        8.      BEQ      0x2442 ; _102221_select + 314
        0x000023d0:    2001        .       MOVS     r0,#1
        0x000023d2:    4010        .@      ANDS     r0,r0,r2
        0x000023d4:    d135        5.      BNE      0x2442 ; _102221_select + 314
;;;463    			/* Store the Select file address in fhaFile using _102221_selectByPath function */
;;;464    			fhaFile = _102221_selectByPath(fhaFile, COMMAND_DATA, P3_BYTE);
        0x000023d6:    4608        .F      MOV      r0,r1
        0x000023d8:    4631        1F      MOV      r1,r6
        0x000023da:    f7fffeed    ....    BL       _102221_selectByPath ; 0x21b8
        0x000023de:    a906        ..      ADD      r1,sp,#0x18
        0x000023e0:    8008        ..      STRH     r0,[r1,#0]
;;;465    		}
;;;466    		else {
;;;467    			/*If p3 value is not correct then*/
;;;468    			DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;469    			THROW(EXCEP_WRONG_P3);
;;;470    		}
;;;471    		break;
;;;472    
;;;473    	default:
;;;474    		/*If p1 value is not correct then*/
;;;475    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;476    		THROW(EXCEP_WRONG_P1_P2);
;;;477    
;;;478    	}
;;;479    
;;;480    	if (NO_FILE_PRESENT == fhaFile) { // if search doesnt exceed
        0x000023e2:    2800        .(      CMP      r0,#0
        0x000023e4:    d033        3.      BEQ      0x244e ; _102221_select + 326
;;;481    		DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;482    		THROW(EXCEP_FILE_NOT_FOUND);
;;;483    	}
;;;484    	/*check P2_BYTE for FCP template to be returned or not*/
;;;485    	if (RETURN_FCP_TEMPLATE == (P2_BYTE & MASK_FCP_RETURN_BYTES))
        0x000023e6:    78e9        .x      LDRB     r1,[r5,#3]
        0x000023e8:    220c        ."      MOVS     r2,#0xc
        0x000023ea:    400a        .@      ANDS     r2,r2,r1
        0x000023ec:    2a04        .*      CMP      r2,#4
        0x000023ee:    d106        ..      BNE      0x23fe ; _102221_select + 246
;;;486    	{
;;;487    		/*get length of prepared response*/
;;;488    		gudbOutputLen =  _102221_prepareFCPResponseForFile(fhaFile, RESPONSE_BUFF);
        0x000023f0:    9900        ..      LDR      r1,[sp,#0]
        0x000023f2:    f7fffe11    ....    BL       _102221_prepareFCPResponseForFile ; 0x2018
        0x000023f6:    491b        .I      LDR      r1,[pc,#108] ; [0x2464] = 0x2000023c
        0x000023f8:    8008        ..      STRH     r0,[r1,#0]
        0x000023fa:    a806        ..      ADD      r0,sp,#0x18
;;;489    	}
;;;490    	
;;;491    
;;;492    	/*read header of current file*/
;;;493    	_7816_4_getFileHeader(fhaFile, &fhFile);
        0x000023fc:    8800        ..      LDRH     r0,[r0,#0]
        0x000023fe:    ad01        ..      ADD      r5,sp,#4
        0x00002400:    4629        )F      MOV      r1,r5
        0x00002402:    f000ffa3    ....    BL       _7816_4_getFileHeader ; 0x334c
;;;494    
;;;495    	if (IS(DF, fhFile.umbFileDesc)) //if its DF
        0x00002406:    7868        hx      LDRB     r0,[r5,#1]
        0x00002408:    21bf        .!      MOVS     r1,#0xbf
        0x0000240a:    4001        .@      ANDS     r1,r1,r0
        0x0000240c:    2938        8)      CMP      r1,#0x38
        0x0000240e:    d107        ..      BNE      0x2420 ; _102221_select + 280
;;;496    	{
;;;497    		DBG_FUNC("[102_221]_102221_select() :Found File ID is a DF\n");
;;;498    
;;;499    		/*Set found file as current DF in current channel context*/
;;;500    		pccCurrentChannel->fhaCurrentDf = fhaFile;
        0x00002410:    6838        8h      LDR      r0,[r7,#0]
        0x00002412:    9906        ..      LDR      r1,[sp,#0x18]
        0x00002414:    80c1        ..      STRH     r1,[r0,#6]
        0x00002416:    4621        !F      MOV      r1,r4
        0x00002418:    7004        .p      STRB     r4,[r0,#0]
        0x0000241a:    8101        ..      STRH     r1,[r0,#8]
        0x0000241c:    b007        ..      ADD      sp,sp,#0x1c
        0x0000241e:    bdf0        ..      POP      {r4-r7,pc}
;;;501    
;;;502    		/*And reset the current EF to undefined*/
;;;503    		pccCurrentChannel->fhaCurrentEf = NO_FILE_PRESENT;
;;;504    	}
;;;505    	else { // if its EF
;;;506    
;;;507    		DBG_FUNC("[102_221] _102221_select():Found File ID is an EF\n");
;;;508    
;;;509    		/*set found file's parent DF as current DF*/
;;;510    		pccCurrentChannel->fhaCurrentDf = fhFile.fhaParent;
        0x00002420:    6838        8h      LDR      r0,[r7,#0]
        0x00002422:    9902        ..      LDR      r1,[sp,#8]
        0x00002424:    80c1        ..      STRH     r1,[r0,#6]
        0x00002426:    a906        ..      ADD      r1,sp,#0x18
;;;511    
;;;512    		/*Set current EF as presented file*/
;;;513    		pccCurrentChannel->fhaCurrentEf = fhaFile;
        0x00002428:    8809        ..      LDRH     r1,[r1,#0]
;;;514    	}
;;;515    
;;;516    	DBG_FUNC("[102_221]_102221_select: Reset the Record pointer\n");
;;;517    
;;;518    	/*Current Record pointer is undefined on successful selection*/
;;;519    	pccCurrentChannel->umbCurrentRecPtr = RECORD_UNDEFINED;
        0x0000242a:    7004        .p      STRB     r4,[r0,#0]
        0x0000242c:    8101        ..      STRH     r1,[r0,#8]
;;;520    
;;;521    	DBG_FUNC_EXIT("<<[102_221] _102221_select() \n");
;;;522    }
        0x0000242e:    b007        ..      ADD      sp,sp,#0x1c
        0x00002430:    bdf0        ..      POP      {r4-r7,pc}
        0x00002432:    480b        .H      LDR      r0,[pc,#44] ; [0x2460] = 0x20000648
        0x00002434:    2106        .!      MOVS     r1,#6
        0x00002436:    f005faf6    ....    BL       longjmp ; 0x7a26
        0x0000243a:    712c        ,q      STRB     r4,[r5,#4]
        0x0000243c:    e001        ..      B        0x2442 ; _102221_select + 314
        0x0000243e:    2002        .       MOVS     r0,#2
        0x00002440:    7128        (q      STRB     r0,[r5,#4]
        0x00002442:    4807        .H      LDR      r0,[pc,#28] ; [0x2460] = 0x20000648
        0x00002444:    2107        .!      MOVS     r1,#7
        0x00002446:    f005faee    ....    BL       longjmp ; 0x7a26
        0x0000244a:    a806        ..      ADD      r0,sp,#0x18
        0x0000244c:    8006        ..      STRH     r6,[r0,#0]
        0x0000244e:    4804        .H      LDR      r0,[pc,#16] ; [0x2460] = 0x20000648
        0x00002450:    210d        .!      MOVS     r1,#0xd
        0x00002452:    f005fae8    ....    BL       longjmp ; 0x7a26
        0x00002456:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.5_0
        0x00002458:    2000023e    >..     DCD    536871486
    __arm_cp.5_1
        0x0000245c:    200006e8    ...     DCD    536872680
    __arm_cp.5_2
        0x00002460:    20000648    H..     DCD    536872520
    __arm_cp.5_3
        0x00002464:    2000023c    <..     DCD    536871484
    $t.10
    _102221_authenticate
;;;523    /*
;;;524    * It prepares length of FCP response.
;;;525    */
;;;526    //uMonoByte _102221_prepFCPforFile(tFileHeaderAddr fhaADF, puMonoByte pumbAid)
;;;527    //{
;;;528    	/*TO_DO....*/
;;;529    	//return 0;
;;;530    //}
;;;531    
;;;532    /*
;;;533    * It implements UICC Authenticate command
;;;534    */
;;;535    void _102221_authenticate(void) {
;;;536    
;;;537    	DBG_FUNC_ENTRY(">>[102_221] _102221_authenticate() \n");
;;;538    
;;;539    	DBG_FUNC_EXIT("<<[102_221] _102221_authenticate() \n");
;;;540    }
        0x00002468:    4770        pG      BX       lr
        0x0000246a:    46c0        .F      MOV      r8,r8
    _102221_manageChannel
;;;541    
;;;542    /*
;;;543    * It implements UICC Manage Channel command
;;;544    */
;;;545    void _102221_manageChannel(void) {
        0x0000246c:    b5b0        ..      PUSH     {r4,r5,r7,lr}
;;;546    
;;;547    	uMonoByte umbChannelNo; //which channel to open
;;;548    
;;;549    	DBG_FUNC_ENTRY(">>[102_221] _102221_manageChannel() \n");
;;;550    
;;;551    	if ((P1_OPEN_CHANNEL == P1_BYTE) && (0x00 == P2_BYTE)) { // P1 states Open function and P2 is '00'
        0x0000246e:    48e8        .H      LDR      r0,[pc,#928] ; [0x2810] = 0x2000023e
        0x00002470:    7881        .x      LDRB     r1,[r0,#2]
        0x00002472:    2980        .)      CMP      r1,#0x80
        0x00002474:    d014        ..      BEQ      0x24a0 ; _102221_manageChannel + 52
        0x00002476:    2900        .)      CMP      r1,#0
        0x00002478:    d139        9.      BNE      0x24ee ; _102221_manageChannel + 130
        0x0000247a:    78c1        .x      LDRB     r1,[r0,#3]
        0x0000247c:    2900        .)      CMP      r1,#0
        0x0000247e:    d136        6.      BNE      0x24ee ; _102221_manageChannel + 130
;;;552    
;;;553    		DBG_FUNC("[102_221] _102221_manageChannel: Request to Open a channel\n");
;;;554    
;;;555    		if (P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN != P3_BYTE) //check if p3 is not equal to expected response length
        0x00002480:    7901        .y      LDRB     r1,[r0,#4]
        0x00002482:    2901        .)      CMP      r1,#1
        0x00002484:    d13b        ;.      BNE      0x24fe ; _102221_manageChannel + 146
;;;556    		{
;;;557    			/*Expected length of response must be 01*/
;;;558    			DBG_ERR("[102_221] _102221_manageChannel: Le/P3 must be '01'\n");
;;;559    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;560    			THROW2(EXCEP_WRONG_P3, P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_OPEN);
;;;561    		}
;;;562    
;;;563    		if (gumbChannelsState) //Check if atleast 1 logical channel must be available
        0x00002486:    4922        "I      LDR      r1,[pc,#136] ; [0x2510] = 0x20000001
        0x00002488:    780a        .x      LDRB     r2,[r1,#0]
        0x0000248a:    2a00        .*      CMP      r2,#0
        0x0000248c:    d033        3.      BEQ      0x24f6 ; _102221_manageChannel + 138
        0x0000248e:    4ce1        .L      LDR      r4,[pc,#900] ; [0x2814] = 0x2000023c
        0x00002490:    2301        .#      MOVS     r3,#1
        0x00002492:    8023        #.      STRH     r3,[r4,#0]
;;;564    		{
;;;565    			/*Checking availability of each logical channel*/
;;;566    			if (gumbChannelsState & MASK_LOGICAL_CHANNEL_1) {
        0x00002494:    0754        T.      LSLS     r4,r2,#29
        0x00002496:    d51a        ..      BPL      0x24ce ; _102221_manageChannel + 98
        0x00002498:    2402        .$      MOVS     r4,#2
        0x0000249a:    0795        ..      LSLS     r5,r2,#30
        0x0000249c:    d51b        ..      BPL      0x24d6 ; _102221_manageChannel + 106
        0x0000249e:    e019        ..      B        0x24d4 ; _102221_manageChannel + 104
;;;567    
;;;568    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '01'\n");
;;;569    				/*Open logical channel no. 1*/
;;;570    				umbChannelNo = 0x01;
;;;571    			}
;;;572    			else if (gumbChannelsState & MASK_LOGICAL_CHANNEL_2) {
;;;573    
;;;574    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '02'\n");
;;;575    				/*Open logical channel no. 2*/
;;;576    				umbChannelNo = 0x02;
;;;577    
;;;578    			}
;;;579    			else { //it means logical channel 3 available
;;;580    
;;;581    				DBG_FUNC("[102_221] _102221_manageChannel: Opening channel no '03'\n");
;;;582    				umbChannelNo = 0x03; //open logical channel no. 3
;;;583    			}
;;;584    
;;;585    			/*clear the corresponding bit*/
;;;586    			gumbChannelsState &= (uMonoByte)(~(SHIFT_LEFT_BY_N_BITS(0x01, umbChannelNo)));
;;;587    
;;;588    			/*Store channel no. in response buffer*/
;;;589    			COMMAND_RESPONSE_DATA[0x00] = umbChannelNo;
;;;590    
;;;591    			/*Set Response length*/
;;;592    			gudbOutputLen = 0x01;
;;;593    
;;;594    			/*default File would be MF*/
;;;595    			ccContexts[umbChannelNo].fhaCurrentDf = _7816_4_getMfAddress();
;;;596    
;;;597    		}
;;;598    		else {
;;;599    			/*No channel available to open*/
;;;600    			DBG_ERR("[102_221] _102221_manageChannel: All channels are already opened, so no new channels left to open\n");
;;;601    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;602    			THROW(EXCEP_FUNCTION_NOT_SUPPORTED);
;;;603    		}
;;;604    	}
;;;605    	else if ((P1_CLOSE_CHANNEL == P1_BYTE) && (P2_BYTE <= MAX_LOGICAL_CHANNEL_NUMBER)) {
        0x000024a0:    78c1        .x      LDRB     r1,[r0,#3]
        0x000024a2:    2913        .)      CMP      r1,#0x13
        0x000024a4:    d823        #.      BHI      0x24ee ; _102221_manageChannel + 130
;;;606    
;;;607    		if (P3_MANAGE_CHANNEL_RESPONSE_LENGTH_FOR_CLOSE != P3_BYTE) //check if p3 is not equal to expected response length
        0x000024a6:    7902        .y      LDRB     r2,[r0,#4]
        0x000024a8:    2a00        .*      CMP      r2,#0
        0x000024aa:    d12a        *.      BNE      0x2502 ; _102221_manageChannel + 150
;;;608    		{
;;;609    			/*Expected length of response must be 01*/
;;;610    			DBG_ERR("[102_221] _102221_manageChannel: Le/P3 must be '00'\n");
;;;611    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;612    			THROW2(EXCEP_WRONG_P3, 0x00);
;;;613    		}
;;;614    
;;;615    		if ((BASIC_LOGICAL_CHANNEL < P2_BYTE) && (P2_BYTE < 0x04)) { // Valid range for Logical channels are '01','02' and '03'
        0x000024ac:    1e48        H.      SUBS     r0,r1,#1
        0x000024ae:    2802        .(      CMP      r0,#2
        0x000024b0:    d821        !.      BHI      0x24f6 ; _102221_manageChannel + 138
        0x000024b2:    2001        .       MOVS     r0,#1
;;;616    
;;;617    			DBG_FUNC("[102_221] _102221_manageChannel: Closing the channel %1\n", P2_BYTE);
;;;618    
;;;619    			/*Set the corresponding bit of incoming logical channel*/
;;;620    			gumbChannelsState |= (uMonoByte)(SHIFT_LEFT_BY_N_BITS(0x01, P2_BYTE));
        0x000024b4:    4088        .@      LSLS     r0,r0,r1
        0x000024b6:    4a16        .J      LDR      r2,[pc,#88] ; [0x2510] = 0x20000001
        0x000024b8:    7813        .x      LDRB     r3,[r2,#0]
        0x000024ba:    4303        .C      ORRS     r3,r3,r0
        0x000024bc:    7013        .p      STRB     r3,[r2,#0]
        0x000024be:    220c        ."      MOVS     r2,#0xc
;;;621    
;;;622    			/*clear the Channel context*/
;;;623    			mem_set((puMonoByte)& ccContexts[P2_BYTE], 0x00, sizeof(tChannelContext));
        0x000024c0:    4351        QC      MULS     r1,r2,r1
        0x000024c2:    4814        .H      LDR      r0,[pc,#80] ; [0x2514] = 0x2000020a
        0x000024c4:    1840        @.      ADDS     r0,r0,r1
        0x000024c6:    2100        .!      MOVS     r1,#0
        0x000024c8:    f7fefb44    ..D.    BL       mem_set ; 0xb54
        0x000024cc:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x000024ce:    2403        .$      MOVS     r4,#3
        0x000024d0:    0795        ..      LSLS     r5,r2,#30
        0x000024d2:    d500        ..      BPL      0x24d6 ; _102221_manageChannel + 106
        0x000024d4:    461c        .F      MOV      r4,r3
        0x000024d6:    7144        Dq      STRB     r4,[r0,#5]
        0x000024d8:    40a3        .@      LSLS     r3,r3,r4
        0x000024da:    439a        .C      BICS     r2,r2,r3
        0x000024dc:    700a        .p      STRB     r2,[r1,#0]
        0x000024de:    200c        .       MOVS     r0,#0xc
        0x000024e0:    4360        `C      MULS     r0,r4,r0
        0x000024e2:    490c        .I      LDR      r1,[pc,#48] ; [0x2514] = 0x2000020a
        0x000024e4:    180c        ..      ADDS     r4,r1,r0
        0x000024e6:    f000fd65    ..e.    BL       _7816_4_getMfAddress ; 0x2fb4
        0x000024ea:    80e0        ..      STRH     r0,[r4,#6]
        0x000024ec:    bdb0        ..      POP      {r4,r5,r7,pc}
;;;624    		}
;;;625    		else {
;;;626    
;;;627    			/*Closing the unsupported logical channel*/
;;;628    			DBG_ERR("[102_221] _102221_manageChannel: Wrong Logical channel in P2 as its not supported\n");
;;;629    			DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;630    			THROW(EXCEP_FUNCTION_NOT_SUPPORTED);
;;;631    		}
;;;632    	}
;;;633    	else {
;;;634    		/*Invalid P1 or P2*/
;;;635    		DBG_ERR("[102_221] _102221_manageChannel: Wrong P1-P2\n");
;;;636    		DBG_FUNC_EXIT("<<[102_221] _102221_manageChannel()\n");
;;;637    		THROW(EXCEP_WRONG_P1_P2);
        0x000024ee:    48ca        .H      LDR      r0,[pc,#808] ; [0x2818] = 0x20000648
        0x000024f0:    2106        .!      MOVS     r1,#6
        0x000024f2:    f005fa98    ....    BL       longjmp ; 0x7a26
        0x000024f6:    48c8        .H      LDR      r0,[pc,#800] ; [0x2818] = 0x20000648
        0x000024f8:    211e        .!      MOVS     r1,#0x1e
        0x000024fa:    f005fa94    ....    BL       longjmp ; 0x7a26
        0x000024fe:    2101        .!      MOVS     r1,#1
        0x00002500:    e000        ..      B        0x2504 ; _102221_manageChannel + 152
        0x00002502:    2100        .!      MOVS     r1,#0
        0x00002504:    7101        .q      STRB     r1,[r0,#4]
        0x00002506:    48c4        .H      LDR      r0,[pc,#784] ; [0x2818] = 0x20000648
        0x00002508:    2107        .!      MOVS     r1,#7
        0x0000250a:    f005fa8c    ....    BL       longjmp ; 0x7a26
        0x0000250e:    46c0        .F      MOV      r8,r8
    $d.11
    __arm_cp.7_2
        0x00002510:    20000001    ...     DCD    536870913
    __arm_cp.7_3
        0x00002514:    2000020a    ...     DCD    536871434
    $t.0
    _102221_throwStatusResponseAsPer
;;; Core/102_221/source\PinManagementCommands.c
;;;12     	if (pscVal > PIN_SC_BLOCKED) { // atleast few retries left
        0x00002518:    2804        .(      CMP      r0,#4
        0x0000251a:    d206        ..      BCS      0x252a ; _102221_throwStatusResponseAsPer + 18
        0x0000251c:    2801        .(      CMP      r0,#1
        0x0000251e:    d00b        ..      BEQ      0x2538 ; _102221_throwStatusResponseAsPer + 32
        0x00002520:    2802        .(      CMP      r0,#2
        0x00002522:    d00d        ..      BEQ      0x2540 ; _102221_throwStatusResponseAsPer + 40
        0x00002524:    2803        .(      CMP      r0,#3
        0x00002526:    d00f        ..      BEQ      0x2548 ; _102221_throwStatusResponseAsPer + 48
        0x00002528:    4770        pG      BX       lr
        0x0000252a:    1f00        ..      SUBS     r0,r0,#4
        0x0000252c:    4909        .I      LDR      r1,[pc,#36] ; [0x2554] = 0x2000023e
        0x0000252e:    7108        .q      STRB     r0,[r1,#4]
        0x00002530:    4807        .H      LDR      r0,[pc,#28] ; [0x2550] = 0x20000648
        0x00002532:    2119        .!      MOVS     r1,#0x19
        0x00002534:    f005fa77    ..w.    BL       longjmp ; 0x7a26
        0x00002538:    4805        .H      LDR      r0,[pc,#20] ; [0x2550] = 0x20000648
;;; Core/102_221/source\PinManagementCommands.c
        0x0000253a:    211c        .!      MOVS     r1,#0x1c
        0x0000253c:    f005fa73    ..s.    BL       longjmp ; 0x7a26
        0x00002540:    4803        .H      LDR      r0,[pc,#12] ; [0x2550] = 0x20000648
        0x00002542:    211b        .!      MOVS     r1,#0x1b
        0x00002544:    f005fa6f    ..o.    BL       longjmp ; 0x7a26
        0x00002548:    4801        .H      LDR      r0,[pc,#4] ; [0x2550] = 0x20000648
        0x0000254a:    211a        .!      MOVS     r1,#0x1a
        0x0000254c:    f005fa6b    ..k.    BL       longjmp ; 0x7a26
    $d.1
    __arm_cp.0_0
        0x00002550:    20000648    H..     DCD    536872520
    __arm_cp.0_1
        0x00002554:    2000023e    >..     DCD    536871486
    $t.2
    _102221_changePin
;;;1      #include"102_221.h"
;;;2      
;;;3      #define PIN_RETRY_COUNTER									(0x00)
;;;4      
;;;5      /*
;;;6      * It throws the error exception as per give Pin status code
;;;7      *
;;;8      * @param pscVal: contains status code sent by Pin functions
;;;9      */
;;;10     void _102221_throwStatusResponseAsPer(tPinStatusCode pscVal) {
;;;11     
;;;12     	if (pscVal > PIN_SC_BLOCKED) { // atleast few retries left
;;;13     		
;;;14     		THROW2(EXCEP_PIN_VERIFICATION_FAILED, pscVal - PIN_SC_NOT_VERIFIED);
;;;15     	}
;;;16     	else if (PIN_SC_BLOCKED == pscVal) { //If CHV is blocked
;;;17     
;;;18     		THROW(EXCEP_PIN_BLOCKED);
;;;19     	}
;;;20     	else if (PIN_SC_INVALID_STATE == pscVal) { //If PIN is disabled
;;;21     
;;;22     		THROW(EXCEP_CONTRADICTS_PIN_STATUS);
;;;23     	}
;;;24     	else if (PIN_SC_NOT_FOUND == pscVal) { //if no such pin found.
;;;25     
;;;26     		THROW(EXCEP_NO_PIN_INITIALIZED);
;;;27     	}
;;;28     }
;;;29     
;;;30     /*
;;;31     * It implements the Change PIN command as per ETSI 102 221
;;;32     */
;;;33     void _102221_changePin(void) {
        0x00002558:    b510        ..      PUSH     {r4,lr}
        0x0000255a:    4c1c        .L      LDR      r4,[pc,#112] ; [0x25cc] = 0x2000023e
        0x0000255c:    78a0        .x      LDRB     r0,[r4,#2]
        0x0000255e:    2800        .(      CMP      r0,#0
        0x00002560:    d117        ..      BNE      0x2592 ; _102221_changePin + 58
        0x00002562:    78e0        .x      LDRB     r0,[r4,#3]
        0x00002564:    f001fdda    ....    BL       _7816_4_isInvalidReferenceData ; 0x411c
        0x00002568:    2800        .(      CMP      r0,#0
        0x0000256a:    d112        ..      BNE      0x2592 ; _102221_changePin + 58
        0x0000256c:    7920         y      LDRB     r0,[r4,#4]
        0x0000256e:    2810        .(      CMP      r0,#0x10
        0x00002570:    d113        ..      BNE      0x259a ; _102221_changePin + 66
        0x00002572:    78e0        .x      LDRB     r0,[r4,#3]
        0x00002574:    1d62        b.      ADDS     r2,r4,#5
        0x00002576:    4623        #F      MOV      r3,r4
        0x00002578:    330d        .3      ADDS     r3,r3,#0xd
        0x0000257a:    2104        .!      MOVS     r1,#4
        0x0000257c:    f002f847    ..G.    BL       _7816_4_changeUnblockPin ; 0x460e
        0x00002580:    2804        .(      CMP      r0,#4
        0x00002582:    d210        ..      BCS      0x25a6 ; _102221_changePin + 78
        0x00002584:    2801        .(      CMP      r0,#1
        0x00002586:    d014        ..      BEQ      0x25b2 ; _102221_changePin + 90
        0x00002588:    2802        .(      CMP      r0,#2
        0x0000258a:    d016        ..      BEQ      0x25ba ; _102221_changePin + 98
        0x0000258c:    2803        .(      CMP      r0,#3
        0x0000258e:    d018        ..      BEQ      0x25c2 ; _102221_changePin + 106
        0x00002590:    bd10        ..      POP      {r4,pc}
        0x00002592:    480f        .H      LDR      r0,[pc,#60] ; [0x25d0] = 0x20000648
        0x00002594:    2106        .!      MOVS     r1,#6
        0x00002596:    f005fa46    ..F.    BL       longjmp ; 0x7a26
        0x0000259a:    2010        .       MOVS     r0,#0x10
        0x0000259c:    7120         q      STRB     r0,[r4,#4]
        0x0000259e:    480c        .H      LDR      r0,[pc,#48] ; [0x25d0] = 0x20000648
        0x000025a0:    2107        .!      MOVS     r1,#7
        0x000025a2:    f005fa40    ..@.    BL       longjmp ; 0x7a26
        0x000025a6:    1f00        ..      SUBS     r0,r0,#4
        0x000025a8:    7120         q      STRB     r0,[r4,#4]
        0x000025aa:    4809        .H      LDR      r0,[pc,#36] ; [0x25d0] = 0x20000648
        0x000025ac:    2119        .!      MOVS     r1,#0x19
        0x000025ae:    f005fa3a    ..:.    BL       longjmp ; 0x7a26
        0x000025b2:    4807        .H      LDR      r0,[pc,#28] ; [0x25d0] = 0x20000648
;;; Core/102_221/source\PinManagementCommands.c
        0x000025b4:    211c        .!      MOVS     r1,#0x1c
        0x000025b6:    f005fa36    ..6.    BL       longjmp ; 0x7a26
        0x000025ba:    4805        .H      LDR      r0,[pc,#20] ; [0x25d0] = 0x20000648
        0x000025bc:    211b        .!      MOVS     r1,#0x1b
        0x000025be:    f005fa32    ..2.    BL       longjmp ; 0x7a26
        0x000025c2:    4803        .H      LDR      r0,[pc,#12] ; [0x25d0] = 0x20000648
        0x000025c4:    211a        .!      MOVS     r1,#0x1a
        0x000025c6:    f005fa2e    ....    BL       longjmp ; 0x7a26
        0x000025ca:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x000025cc:    2000023e    >..     DCD    536871486
    __arm_cp.1_1
        0x000025d0:    20000648    H..     DCD    536872520
    $t.4
    _102221_unblockPin
;;;1      #include"102_221.h"
;;;2      
;;;3      #define PIN_RETRY_COUNTER									(0x00)
;;;4      
;;;5      /*
;;;6      * It throws the error exception as per give Pin status code
;;;7      *
;;;8      * @param pscVal: contains status code sent by Pin functions
;;;9      */
;;;10     void _102221_throwStatusResponseAsPer(tPinStatusCode pscVal) {
;;;11     
;;;12     	if (pscVal > PIN_SC_BLOCKED) { // atleast few retries left
;;;13     		
;;;14     		THROW2(EXCEP_PIN_VERIFICATION_FAILED, pscVal - PIN_SC_NOT_VERIFIED);
;;;15     	}
;;;16     	else if (PIN_SC_BLOCKED == pscVal) { //If CHV is blocked
;;;17     
;;;18     		THROW(EXCEP_PIN_BLOCKED);
;;;19     	}
;;;20     	else if (PIN_SC_INVALID_STATE == pscVal) { //If PIN is disabled
;;;21     
;;;22     		THROW(EXCEP_CONTRADICTS_PIN_STATUS);
;;;23     	}
;;;24     	else if (PIN_SC_NOT_FOUND == pscVal) { //if no such pin found.
;;;25     
;;;26     		THROW(EXCEP_NO_PIN_INITIALIZED);
;;;27     	}
;;;28     }
;;;29     
;;;30     /*
;;;31     * It implements the Change PIN command as per ETSI 102 221
;;;32     */
;;;33     void _102221_changePin(void) {
;;;34     	
;;;35     	tPinStatusCode pscReturned;
;;;36     	DBG_FUNC_ENTRY(">>[102_221] _102221_changePin() \n");
;;;37     
;;;38     	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;39     		DBG_ERR("[102_221] _102221_changePin: Invalid P1 - P2 \n");
;;;40     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;41     		THROW(EXCEP_WRONG_P1_P2);
;;;42     	}
;;;43     
;;;44     	if (P3_BYTE != LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN) {// Incorrect P3
;;;45     
;;;46     		DBG_ERR("[102_221] _102221_changePin: Invalid P3 \n");
;;;47     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;48     		THROW2(EXCEP_WRONG_P3, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;49     	}
;;;50     	pscReturned = _7816_4_changeUnblockPin(P2_BYTE, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;51     
;;;52     	DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;53     
;;;54     	_102221_throwStatusResponseAsPer(pscReturned);
;;;55     }
;;;56     
;;;57     /*
;;;58     * It implements the Unblock PIN command as per ETSI 102 221
;;;59     */
;;;60     void _102221_unblockPin(void) {
        0x000025d4:    b510        ..      PUSH     {r4,lr}
        0x000025d6:    4c1e        .L      LDR      r4,[pc,#120] ; [0x2650] = 0x2000023e
        0x000025d8:    78a0        .x      LDRB     r0,[r4,#2]
        0x000025da:    2800        .(      CMP      r0,#0
        0x000025dc:    d11b        ..      BNE      0x2616 ; _102221_unblockPin + 66
        0x000025de:    78e0        .x      LDRB     r0,[r4,#3]
        0x000025e0:    f001fd9c    ....    BL       _7816_4_isInvalidReferenceData ; 0x411c
        0x000025e4:    2800        .(      CMP      r0,#0
        0x000025e6:    d116        ..      BNE      0x2616 ; _102221_unblockPin + 66
        0x000025e8:    7920         y      LDRB     r0,[r4,#4]
        0x000025ea:    2800        .(      CMP      r0,#0
        0x000025ec:    d003        ..      BEQ      0x25f6 ; _102221_unblockPin + 34
        0x000025ee:    2810        .(      CMP      r0,#0x10
        0x000025f0:    d127        '.      BNE      0x2642 ; _102221_unblockPin + 110
        0x000025f2:    2103        .!      MOVS     r1,#3
        0x000025f4:    e000        ..      B        0x25f8 ; _102221_unblockPin + 36
        0x000025f6:    2106        .!      MOVS     r1,#6
        0x000025f8:    78e0        .x      LDRB     r0,[r4,#3]
        0x000025fa:    1d62        b.      ADDS     r2,r4,#5
        0x000025fc:    4623        #F      MOV      r3,r4
        0x000025fe:    330d        .3      ADDS     r3,r3,#0xd
        0x00002600:    f002f805    ....    BL       _7816_4_changeUnblockPin ; 0x460e
        0x00002604:    2804        .(      CMP      r0,#4
        0x00002606:    d20a        ..      BCS      0x261e ; _102221_unblockPin + 74
        0x00002608:    2801        .(      CMP      r0,#1
        0x0000260a:    d00e        ..      BEQ      0x262a ; _102221_unblockPin + 86
        0x0000260c:    2802        .(      CMP      r0,#2
        0x0000260e:    d010        ..      BEQ      0x2632 ; _102221_unblockPin + 94
        0x00002610:    2803        .(      CMP      r0,#3
        0x00002612:    d012        ..      BEQ      0x263a ; _102221_unblockPin + 102
        0x00002614:    bd10        ..      POP      {r4,pc}
        0x00002616:    480f        .H      LDR      r0,[pc,#60] ; [0x2654] = 0x20000648
        0x00002618:    2106        .!      MOVS     r1,#6
        0x0000261a:    f005fa04    ....    BL       longjmp ; 0x7a26
        0x0000261e:    1f00        ..      SUBS     r0,r0,#4
        0x00002620:    7120         q      STRB     r0,[r4,#4]
        0x00002622:    480c        .H      LDR      r0,[pc,#48] ; [0x2654] = 0x20000648
        0x00002624:    2119        .!      MOVS     r1,#0x19
        0x00002626:    f005f9fe    ....    BL       longjmp ; 0x7a26
        0x0000262a:    480a        .H      LDR      r0,[pc,#40] ; [0x2654] = 0x20000648
;;; Core/102_221/source\PinManagementCommands.c
        0x0000262c:    211c        .!      MOVS     r1,#0x1c
        0x0000262e:    f005f9fa    ....    BL       longjmp ; 0x7a26
        0x00002632:    4808        .H      LDR      r0,[pc,#32] ; [0x2654] = 0x20000648
        0x00002634:    211b        .!      MOVS     r1,#0x1b
        0x00002636:    f005f9f6    ....    BL       longjmp ; 0x7a26
        0x0000263a:    4806        .H      LDR      r0,[pc,#24] ; [0x2654] = 0x20000648
        0x0000263c:    211a        .!      MOVS     r1,#0x1a
        0x0000263e:    f005f9f2    ....    BL       longjmp ; 0x7a26
        0x00002642:    2010        .       MOVS     r0,#0x10
        0x00002644:    7120         q      STRB     r0,[r4,#4]
        0x00002646:    4803        .H      LDR      r0,[pc,#12] ; [0x2654] = 0x20000648
        0x00002648:    2107        .!      MOVS     r1,#7
        0x0000264a:    f005f9ec    ....    BL       longjmp ; 0x7a26
        0x0000264e:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x00002650:    2000023e    >..     DCD    536871486
    __arm_cp.2_1
        0x00002654:    20000648    H..     DCD    536872520
    $t.6
    _102221_verifyPin
;;;1      #include"102_221.h"
;;;2      
;;;3      #define PIN_RETRY_COUNTER									(0x00)
;;;4      
;;;5      /*
;;;6      * It throws the error exception as per give Pin status code
;;;7      *
;;;8      * @param pscVal: contains status code sent by Pin functions
;;;9      */
;;;10     void _102221_throwStatusResponseAsPer(tPinStatusCode pscVal) {
;;;11     
;;;12     	if (pscVal > PIN_SC_BLOCKED) { // atleast few retries left
;;;13     		
;;;14     		THROW2(EXCEP_PIN_VERIFICATION_FAILED, pscVal - PIN_SC_NOT_VERIFIED);
;;;15     	}
;;;16     	else if (PIN_SC_BLOCKED == pscVal) { //If CHV is blocked
;;;17     
;;;18     		THROW(EXCEP_PIN_BLOCKED);
;;;19     	}
;;;20     	else if (PIN_SC_INVALID_STATE == pscVal) { //If PIN is disabled
;;;21     
;;;22     		THROW(EXCEP_CONTRADICTS_PIN_STATUS);
;;;23     	}
;;;24     	else if (PIN_SC_NOT_FOUND == pscVal) { //if no such pin found.
;;;25     
;;;26     		THROW(EXCEP_NO_PIN_INITIALIZED);
;;;27     	}
;;;28     }
;;;29     
;;;30     /*
;;;31     * It implements the Change PIN command as per ETSI 102 221
;;;32     */
;;;33     void _102221_changePin(void) {
;;;34     	
;;;35     	tPinStatusCode pscReturned;
;;;36     	DBG_FUNC_ENTRY(">>[102_221] _102221_changePin() \n");
;;;37     
;;;38     	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;39     		DBG_ERR("[102_221] _102221_changePin: Invalid P1 - P2 \n");
;;;40     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;41     		THROW(EXCEP_WRONG_P1_P2);
;;;42     	}
;;;43     
;;;44     	if (P3_BYTE != LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN) {// Incorrect P3
;;;45     
;;;46     		DBG_ERR("[102_221] _102221_changePin: Invalid P3 \n");
;;;47     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;48     		THROW2(EXCEP_WRONG_P3, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;49     	}
;;;50     	pscReturned = _7816_4_changeUnblockPin(P2_BYTE, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;51     
;;;52     	DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;53     
;;;54     	_102221_throwStatusResponseAsPer(pscReturned);
;;;55     }
;;;56     
;;;57     /*
;;;58     * It implements the Unblock PIN command as per ETSI 102 221
;;;59     */
;;;60     void _102221_unblockPin(void) {
;;;61     
;;;62     	tPinStatusCode pscReturned;
;;;63     	tPinOperation	poFor = PIN_OP_UNBLOCK;
;;;64     	DBG_FUNC_ENTRY(">>[102_221] _102221_unblockPin() \n");
;;;65     
;;;66     	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;67     		DBG_ERR("[102_221] _102221_unblockPin: Invalid P1 - P2 \n");
;;;68     		DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;69     		THROW(EXCEP_WRONG_P1_P2);
;;;70     	}
;;;71     
;;;72     	if (PIN_RETRY_COUNTER == P3_BYTE) { //If empty command data
;;;73     
;;;74     		/*Request to retreive Unblock Pin Retry counter*/
;;;75     		poFor = PIN_OP_UNBLOCK_COUNTER;
;;;76     	}
;;;77     	else if (P3_BYTE != LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN) {// Incorrect P3
;;;78     
;;;79     		DBG_ERR("[102_221] _102221_unblockPin: Invalid P3 \n");
;;;80     		DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;81     		THROW2(EXCEP_WRONG_P3, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;82     	}
;;;83     
;;;84     	pscReturned = _7816_4_changeUnblockPin(P2_BYTE, poFor, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;85     
;;;86     	DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;87     
;;;88     	_102221_throwStatusResponseAsPer(pscReturned);
;;;89     }
;;;90     
;;;91     /*
;;;92     * It implements the Verify PIN command as per ETSI 102 221
;;;93     */
;;;94     void _102221_verifyPin(void) {
        0x00002658:    b510        ..      PUSH     {r4,lr}
        0x0000265a:    4c1d        .L      LDR      r4,[pc,#116] ; [0x26d0] = 0x2000023e
        0x0000265c:    78a0        .x      LDRB     r0,[r4,#2]
        0x0000265e:    2800        .(      CMP      r0,#0
        0x00002660:    d11a        ..      BNE      0x2698 ; _102221_verifyPin + 64
        0x00002662:    78e0        .x      LDRB     r0,[r4,#3]
        0x00002664:    f001fd5a    ..Z.    BL       _7816_4_isInvalidReferenceData ; 0x411c
        0x00002668:    2800        .(      CMP      r0,#0
        0x0000266a:    d115        ..      BNE      0x2698 ; _102221_verifyPin + 64
        0x0000266c:    7920         y      LDRB     r0,[r4,#4]
        0x0000266e:    2800        .(      CMP      r0,#0
        0x00002670:    d003        ..      BEQ      0x267a ; _102221_verifyPin + 34
        0x00002672:    2808        .(      CMP      r0,#8
        0x00002674:    d126        &.      BNE      0x26c4 ; _102221_verifyPin + 108
        0x00002676:    2300        .#      MOVS     r3,#0
        0x00002678:    e000        ..      B        0x267c ; _102221_verifyPin + 36
        0x0000267a:    2305        .#      MOVS     r3,#5
        0x0000267c:    78e0        .x      LDRB     r0,[r4,#3]
        0x0000267e:    1d62        b.      ADDS     r2,r4,#5
        0x00002680:    2100        .!      MOVS     r1,#0
        0x00002682:    f001ff6f    ..o.    BL       _7816_4_verifyPin ; 0x4564
        0x00002686:    2804        .(      CMP      r0,#4
        0x00002688:    d20a        ..      BCS      0x26a0 ; _102221_verifyPin + 72
        0x0000268a:    2801        .(      CMP      r0,#1
        0x0000268c:    d00e        ..      BEQ      0x26ac ; _102221_verifyPin + 84
        0x0000268e:    2802        .(      CMP      r0,#2
        0x00002690:    d010        ..      BEQ      0x26b4 ; _102221_verifyPin + 92
        0x00002692:    2803        .(      CMP      r0,#3
        0x00002694:    d012        ..      BEQ      0x26bc ; _102221_verifyPin + 100
        0x00002696:    bd10        ..      POP      {r4,pc}
        0x00002698:    480e        .H      LDR      r0,[pc,#56] ; [0x26d4] = 0x20000648
        0x0000269a:    2106        .!      MOVS     r1,#6
        0x0000269c:    f005f9c3    ....    BL       longjmp ; 0x7a26
        0x000026a0:    1f00        ..      SUBS     r0,r0,#4
        0x000026a2:    7120         q      STRB     r0,[r4,#4]
        0x000026a4:    480b        .H      LDR      r0,[pc,#44] ; [0x26d4] = 0x20000648
        0x000026a6:    2119        .!      MOVS     r1,#0x19
        0x000026a8:    f005f9bd    ....    BL       longjmp ; 0x7a26
        0x000026ac:    4809        .H      LDR      r0,[pc,#36] ; [0x26d4] = 0x20000648
;;; Core/102_221/source\PinManagementCommands.c
        0x000026ae:    211c        .!      MOVS     r1,#0x1c
        0x000026b0:    f005f9b9    ....    BL       longjmp ; 0x7a26
        0x000026b4:    4807        .H      LDR      r0,[pc,#28] ; [0x26d4] = 0x20000648
        0x000026b6:    211b        .!      MOVS     r1,#0x1b
        0x000026b8:    f005f9b5    ....    BL       longjmp ; 0x7a26
        0x000026bc:    4805        .H      LDR      r0,[pc,#20] ; [0x26d4] = 0x20000648
        0x000026be:    211a        .!      MOVS     r1,#0x1a
        0x000026c0:    f005f9b1    ....    BL       longjmp ; 0x7a26
        0x000026c4:    2008        .       MOVS     r0,#8
        0x000026c6:    7120         q      STRB     r0,[r4,#4]
        0x000026c8:    4802        .H      LDR      r0,[pc,#8] ; [0x26d4] = 0x20000648
        0x000026ca:    2107        .!      MOVS     r1,#7
        0x000026cc:    f005f9ab    ....    BL       longjmp ; 0x7a26
    $d.7
    __arm_cp.3_0
        0x000026d0:    2000023e    >..     DCD    536871486
    __arm_cp.3_1
        0x000026d4:    20000648    H..     DCD    536872520
    $t.8
    _102221_enablePin
;;;1      #include"102_221.h"
;;;2      
;;;3      #define PIN_RETRY_COUNTER									(0x00)
;;;4      
;;;5      /*
;;;6      * It throws the error exception as per give Pin status code
;;;7      *
;;;8      * @param pscVal: contains status code sent by Pin functions
;;;9      */
;;;10     void _102221_throwStatusResponseAsPer(tPinStatusCode pscVal) {
;;;11     
;;;12     	if (pscVal > PIN_SC_BLOCKED) { // atleast few retries left
;;;13     		
;;;14     		THROW2(EXCEP_PIN_VERIFICATION_FAILED, pscVal - PIN_SC_NOT_VERIFIED);
;;;15     	}
;;;16     	else if (PIN_SC_BLOCKED == pscVal) { //If CHV is blocked
;;;17     
;;;18     		THROW(EXCEP_PIN_BLOCKED);
;;;19     	}
;;;20     	else if (PIN_SC_INVALID_STATE == pscVal) { //If PIN is disabled
;;;21     
;;;22     		THROW(EXCEP_CONTRADICTS_PIN_STATUS);
;;;23     	}
;;;24     	else if (PIN_SC_NOT_FOUND == pscVal) { //if no such pin found.
;;;25     
;;;26     		THROW(EXCEP_NO_PIN_INITIALIZED);
;;;27     	}
;;;28     }
;;;29     
;;;30     /*
;;;31     * It implements the Change PIN command as per ETSI 102 221
;;;32     */
;;;33     void _102221_changePin(void) {
;;;34     	
;;;35     	tPinStatusCode pscReturned;
;;;36     	DBG_FUNC_ENTRY(">>[102_221] _102221_changePin() \n");
;;;37     
;;;38     	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;39     		DBG_ERR("[102_221] _102221_changePin: Invalid P1 - P2 \n");
;;;40     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;41     		THROW(EXCEP_WRONG_P1_P2);
;;;42     	}
;;;43     
;;;44     	if (P3_BYTE != LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN) {// Incorrect P3
;;;45     
;;;46     		DBG_ERR("[102_221] _102221_changePin: Invalid P3 \n");
;;;47     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;48     		THROW2(EXCEP_WRONG_P3, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;49     	}
;;;50     	pscReturned = _7816_4_changeUnblockPin(P2_BYTE, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;51     
;;;52     	DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;53     
;;;54     	_102221_throwStatusResponseAsPer(pscReturned);
;;;55     }
;;;56     
;;;57     /*
;;;58     * It implements the Unblock PIN command as per ETSI 102 221
;;;59     */
;;;60     void _102221_unblockPin(void) {
;;;61     
;;;62     	tPinStatusCode pscReturned;
;;;63     	tPinOperation	poFor = PIN_OP_UNBLOCK;
;;;64     	DBG_FUNC_ENTRY(">>[102_221] _102221_unblockPin() \n");
;;;65     
;;;66     	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;67     		DBG_ERR("[102_221] _102221_unblockPin: Invalid P1 - P2 \n");
;;;68     		DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;69     		THROW(EXCEP_WRONG_P1_P2);
;;;70     	}
;;;71     
;;;72     	if (PIN_RETRY_COUNTER == P3_BYTE) { //If empty command data
;;;73     
;;;74     		/*Request to retreive Unblock Pin Retry counter*/
;;;75     		poFor = PIN_OP_UNBLOCK_COUNTER;
;;;76     	}
;;;77     	else if (P3_BYTE != LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN) {// Incorrect P3
;;;78     
;;;79     		DBG_ERR("[102_221] _102221_unblockPin: Invalid P3 \n");
;;;80     		DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;81     		THROW2(EXCEP_WRONG_P3, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;82     	}
;;;83     
;;;84     	pscReturned = _7816_4_changeUnblockPin(P2_BYTE, poFor, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;85     
;;;86     	DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;87     
;;;88     	_102221_throwStatusResponseAsPer(pscReturned);
;;;89     }
;;;90     
;;;91     /*
;;;92     * It implements the Verify PIN command as per ETSI 102 221
;;;93     */
;;;94     void _102221_verifyPin(void) {
;;;95     
;;;96     	tPinStatusCode	pscReturned; // Stores the Pins status code
;;;97     	tPinOperation	poFor = PIN_OP_VERIFY;
;;;98     
;;;99     	DBG_FUNC_ENTRY(">>[102_221] _102221_verifyPin() \n");
;;;100    
;;;101    	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;102    		DBG_ERR("[102_221] _102221_verifyPin: Invalid P1 - P2 \n");
;;;103    		DBG_FUNC_EXIT("<<[102_221] _102221_verifyPin() \n");
;;;104    		THROW(EXCEP_WRONG_P1_P2);
;;;105    	}
;;;106    
;;;107    	if (PIN_RETRY_COUNTER == P3_BYTE) { // If P3 indicates to retreive Retry counter
;;;108    		
;;;109    		DBG_FUNC("[102_221] _102221_verifyPin: Request for Verify PIN retry counter\n");
;;;110    
;;;111    		/*Change the pin operation*/
;;;112    		poFor = PIN_OP_VERIFY_COUNTER;
;;;113    
;;;114    	}
;;;115    	else if(P3_BYTE != LENGTH_PIN_VALUE) {// Incorrect P3
;;;116    
;;;117    		DBG_ERR("[102_221] _102221_verifyPin: Invalid P3 \n");
;;;118    		DBG_FUNC_EXIT("<<[102_221] _102221_verifyPin() \n");
;;;119    		THROW2(EXCEP_WRONG_P3, LENGTH_PIN_VALUE);
;;;120    
;;;121    	}
;;;122    
;;;123    	/*Verify PIN*/
;;;124    	pscReturned = _7816_4_verifyPin(P2_BYTE, PIN_ENABLED,  COMMAND_DATA, poFor);
;;;125    
;;;126    	DBG_FUNC_EXIT("<<[102_221] _102221_verifyPin() \n");
;;;127    
;;;128    	/*Handle negative values of pscReturned*/
;;;129    	_102221_throwStatusResponseAsPer(pscReturned);
;;;130    }
;;;131    
;;;132    /*
;;;133    * It implements the Enable PIN command as per ETSI 102 221
;;;134    */
;;;135    void _102221_enablePin(void) {
        0x000026d8:    b510        ..      PUSH     {r4,lr}
        0x000026da:    4c1b        .L      LDR      r4,[pc,#108] ; [0x2748] = 0x2000023e
        0x000026dc:    78a0        .x      LDRB     r0,[r4,#2]
        0x000026de:    2800        .(      CMP      r0,#0
        0x000026e0:    d115        ..      BNE      0x270e ; _102221_enablePin + 54
        0x000026e2:    78e0        .x      LDRB     r0,[r4,#3]
        0x000026e4:    f001fd1a    ....    BL       _7816_4_isInvalidReferenceData ; 0x411c
        0x000026e8:    2800        .(      CMP      r0,#0
        0x000026ea:    d110        ..      BNE      0x270e ; _102221_enablePin + 54
        0x000026ec:    7920         y      LDRB     r0,[r4,#4]
        0x000026ee:    2808        .(      CMP      r0,#8
        0x000026f0:    d111        ..      BNE      0x2716 ; _102221_enablePin + 62
        0x000026f2:    78e0        .x      LDRB     r0,[r4,#3]
        0x000026f4:    1d62        b.      ADDS     r2,r4,#5
        0x000026f6:    2101        .!      MOVS     r1,#1
        0x000026f8:    f002f808    ....    BL       _7816_4_changePinState ; 0x470c
        0x000026fc:    2804        .(      CMP      r0,#4
        0x000026fe:    d210        ..      BCS      0x2722 ; _102221_enablePin + 74
        0x00002700:    2801        .(      CMP      r0,#1
        0x00002702:    d014        ..      BEQ      0x272e ; _102221_enablePin + 86
        0x00002704:    2802        .(      CMP      r0,#2
        0x00002706:    d016        ..      BEQ      0x2736 ; _102221_enablePin + 94
        0x00002708:    2803        .(      CMP      r0,#3
        0x0000270a:    d018        ..      BEQ      0x273e ; _102221_enablePin + 102
        0x0000270c:    bd10        ..      POP      {r4,pc}
        0x0000270e:    480f        .H      LDR      r0,[pc,#60] ; [0x274c] = 0x20000648
        0x00002710:    2106        .!      MOVS     r1,#6
        0x00002712:    f005f988    ....    BL       longjmp ; 0x7a26
        0x00002716:    2008        .       MOVS     r0,#8
        0x00002718:    7120         q      STRB     r0,[r4,#4]
        0x0000271a:    480c        .H      LDR      r0,[pc,#48] ; [0x274c] = 0x20000648
        0x0000271c:    2107        .!      MOVS     r1,#7
        0x0000271e:    f005f982    ....    BL       longjmp ; 0x7a26
        0x00002722:    1f00        ..      SUBS     r0,r0,#4
        0x00002724:    7120         q      STRB     r0,[r4,#4]
        0x00002726:    4809        .H      LDR      r0,[pc,#36] ; [0x274c] = 0x20000648
        0x00002728:    2119        .!      MOVS     r1,#0x19
        0x0000272a:    f005f97c    ..|.    BL       longjmp ; 0x7a26
        0x0000272e:    4807        .H      LDR      r0,[pc,#28] ; [0x274c] = 0x20000648
;;; Core/102_221/source\PinManagementCommands.c
        0x00002730:    211c        .!      MOVS     r1,#0x1c
        0x00002732:    f005f978    ..x.    BL       longjmp ; 0x7a26
        0x00002736:    4805        .H      LDR      r0,[pc,#20] ; [0x274c] = 0x20000648
        0x00002738:    211b        .!      MOVS     r1,#0x1b
        0x0000273a:    f005f974    ..t.    BL       longjmp ; 0x7a26
        0x0000273e:    4803        .H      LDR      r0,[pc,#12] ; [0x274c] = 0x20000648
        0x00002740:    211a        .!      MOVS     r1,#0x1a
        0x00002742:    f005f970    ..p.    BL       longjmp ; 0x7a26
        0x00002746:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.4_0
        0x00002748:    2000023e    >..     DCD    536871486
    __arm_cp.4_1
        0x0000274c:    20000648    H..     DCD    536872520
    $t.10
    _102221_disablePin
;;;1      #include"102_221.h"
;;;2      
;;;3      #define PIN_RETRY_COUNTER									(0x00)
;;;4      
;;;5      /*
;;;6      * It throws the error exception as per give Pin status code
;;;7      *
;;;8      * @param pscVal: contains status code sent by Pin functions
;;;9      */
;;;10     void _102221_throwStatusResponseAsPer(tPinStatusCode pscVal) {
;;;11     
;;;12     	if (pscVal > PIN_SC_BLOCKED) { // atleast few retries left
;;;13     		
;;;14     		THROW2(EXCEP_PIN_VERIFICATION_FAILED, pscVal - PIN_SC_NOT_VERIFIED);
;;;15     	}
;;;16     	else if (PIN_SC_BLOCKED == pscVal) { //If CHV is blocked
;;;17     
;;;18     		THROW(EXCEP_PIN_BLOCKED);
;;;19     	}
;;;20     	else if (PIN_SC_INVALID_STATE == pscVal) { //If PIN is disabled
;;;21     
;;;22     		THROW(EXCEP_CONTRADICTS_PIN_STATUS);
;;;23     	}
;;;24     	else if (PIN_SC_NOT_FOUND == pscVal) { //if no such pin found.
;;;25     
;;;26     		THROW(EXCEP_NO_PIN_INITIALIZED);
;;;27     	}
;;;28     }
;;;29     
;;;30     /*
;;;31     * It implements the Change PIN command as per ETSI 102 221
;;;32     */
;;;33     void _102221_changePin(void) {
;;;34     	
;;;35     	tPinStatusCode pscReturned;
;;;36     	DBG_FUNC_ENTRY(">>[102_221] _102221_changePin() \n");
;;;37     
;;;38     	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;39     		DBG_ERR("[102_221] _102221_changePin: Invalid P1 - P2 \n");
;;;40     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;41     		THROW(EXCEP_WRONG_P1_P2);
;;;42     	}
;;;43     
;;;44     	if (P3_BYTE != LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN) {// Incorrect P3
;;;45     
;;;46     		DBG_ERR("[102_221] _102221_changePin: Invalid P3 \n");
;;;47     		DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;48     		THROW2(EXCEP_WRONG_P3, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;49     	}
;;;50     	pscReturned = _7816_4_changeUnblockPin(P2_BYTE, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;51     
;;;52     	DBG_FUNC_EXIT("<<[102_221] _102221_changePin() \n");
;;;53     
;;;54     	_102221_throwStatusResponseAsPer(pscReturned);
;;;55     }
;;;56     
;;;57     /*
;;;58     * It implements the Unblock PIN command as per ETSI 102 221
;;;59     */
;;;60     void _102221_unblockPin(void) {
;;;61     
;;;62     	tPinStatusCode pscReturned;
;;;63     	tPinOperation	poFor = PIN_OP_UNBLOCK;
;;;64     	DBG_FUNC_ENTRY(">>[102_221] _102221_unblockPin() \n");
;;;65     
;;;66     	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;67     		DBG_ERR("[102_221] _102221_unblockPin: Invalid P1 - P2 \n");
;;;68     		DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;69     		THROW(EXCEP_WRONG_P1_P2);
;;;70     	}
;;;71     
;;;72     	if (PIN_RETRY_COUNTER == P3_BYTE) { //If empty command data
;;;73     
;;;74     		/*Request to retreive Unblock Pin Retry counter*/
;;;75     		poFor = PIN_OP_UNBLOCK_COUNTER;
;;;76     	}
;;;77     	else if (P3_BYTE != LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN) {// Incorrect P3
;;;78     
;;;79     		DBG_ERR("[102_221] _102221_unblockPin: Invalid P3 \n");
;;;80     		DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;81     		THROW2(EXCEP_WRONG_P3, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;82     	}
;;;83     
;;;84     	pscReturned = _7816_4_changeUnblockPin(P2_BYTE, poFor, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;85     
;;;86     	DBG_FUNC_EXIT("<<[102_221] _102221_unblockPin() \n");
;;;87     
;;;88     	_102221_throwStatusResponseAsPer(pscReturned);
;;;89     }
;;;90     
;;;91     /*
;;;92     * It implements the Verify PIN command as per ETSI 102 221
;;;93     */
;;;94     void _102221_verifyPin(void) {
;;;95     
;;;96     	tPinStatusCode	pscReturned; // Stores the Pins status code
;;;97     	tPinOperation	poFor = PIN_OP_VERIFY;
;;;98     
;;;99     	DBG_FUNC_ENTRY(">>[102_221] _102221_verifyPin() \n");
;;;100    
;;;101    	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;102    		DBG_ERR("[102_221] _102221_verifyPin: Invalid P1 - P2 \n");
;;;103    		DBG_FUNC_EXIT("<<[102_221] _102221_verifyPin() \n");
;;;104    		THROW(EXCEP_WRONG_P1_P2);
;;;105    	}
;;;106    
;;;107    	if (PIN_RETRY_COUNTER == P3_BYTE) { // If P3 indicates to retreive Retry counter
;;;108    		
;;;109    		DBG_FUNC("[102_221] _102221_verifyPin: Request for Verify PIN retry counter\n");
;;;110    
;;;111    		/*Change the pin operation*/
;;;112    		poFor = PIN_OP_VERIFY_COUNTER;
;;;113    
;;;114    	}
;;;115    	else if(P3_BYTE != LENGTH_PIN_VALUE) {// Incorrect P3
;;;116    
;;;117    		DBG_ERR("[102_221] _102221_verifyPin: Invalid P3 \n");
;;;118    		DBG_FUNC_EXIT("<<[102_221] _102221_verifyPin() \n");
;;;119    		THROW2(EXCEP_WRONG_P3, LENGTH_PIN_VALUE);
;;;120    
;;;121    	}
;;;122    
;;;123    	/*Verify PIN*/
;;;124    	pscReturned = _7816_4_verifyPin(P2_BYTE, PIN_ENABLED,  COMMAND_DATA, poFor);
;;;125    
;;;126    	DBG_FUNC_EXIT("<<[102_221] _102221_verifyPin() \n");
;;;127    
;;;128    	/*Handle negative values of pscReturned*/
;;;129    	_102221_throwStatusResponseAsPer(pscReturned);
;;;130    }
;;;131    
;;;132    /*
;;;133    * It implements the Enable PIN command as per ETSI 102 221
;;;134    */
;;;135    void _102221_enablePin(void) {
;;;136    
;;;137    	tPinStatusCode pscReturned; // Stores the Pins status code
;;;138    
;;;139    	DBG_FUNC_ENTRY(">>[102_221] _102221_enablePin() \n");
;;;140    
;;;141    	if ((P1_BYTE) || (_7816_4_isInvalidReferenceData(P2_BYTE))) { //Check if P1 is non-zero OR p2 conatins invalid key reference
;;;142    		DBG_ERR("[102_221] _102221_enablePin: Invalid P1 - P2 \n");
;;;143    		DBG_FUNC_EXIT("<<[102_221] _102221_enablePin() \n");
;;;144    		THROW(EXCEP_WRONG_P1_P2);
;;;145    	}
;;;146    
;;;147    	if (P3_BYTE != LENGTH_PIN_VALUE) {// Incorrect P3
;;;148    
;;;149    		DBG_ERR("[102_221] _102221_enablePin: Invalid P3 \n");
;;;150    		DBG_FUNC_EXIT("<<[102_221] _102221_enablePin() \n");
;;;151    		THROW2(EXCEP_WRONG_P3, LENGTH_PIN_VALUE);
;;;152    	}
;;;153    
;;;154    	/*Change PIN*/
;;;155    	pscReturned = _7816_4_changePinState(P2_BYTE, PIN_OP_ENABLE, COMMAND_DATA);
;;;156    
;;;157    	DBG_FUNC_EXIT("<<[102_221] _102221_enablePin() \n");
;;;158    
;;;159    	/*Handle negative values of pscReturned*/
;;;160    	_102221_throwStatusResponseAsPer(pscReturned);
;;;161    }
;;;162    
;;;163    /*
;;;164    * It implements the Disable PIN command as per ETSI 102 221
;;;165    */
;;;166    void _102221_disablePin(void) {
        0x00002750:    b510        ..      PUSH     {r4,lr}
        0x00002752:    4cb7        .L      LDR      r4,[pc,#732] ; [0x2a30] = 0x2000023e
        0x00002754:    78a0        .x      LDRB     r0,[r4,#2]
        0x00002756:    2800        .(      CMP      r0,#0
        0x00002758:    d115        ..      BNE      0x2786 ; _102221_disablePin + 54
        0x0000275a:    78e0        .x      LDRB     r0,[r4,#3]
        0x0000275c:    f001fcde    ....    BL       _7816_4_isInvalidReferenceData ; 0x411c
        0x00002760:    2800        .(      CMP      r0,#0
        0x00002762:    d110        ..      BNE      0x2786 ; _102221_disablePin + 54
        0x00002764:    7920         y      LDRB     r0,[r4,#4]
        0x00002766:    2808        .(      CMP      r0,#8
        0x00002768:    d111        ..      BNE      0x278e ; _102221_disablePin + 62
        0x0000276a:    78e0        .x      LDRB     r0,[r4,#3]
        0x0000276c:    1d62        b.      ADDS     r2,r4,#5
        0x0000276e:    2102        .!      MOVS     r1,#2
        0x00002770:    f001ffcc    ....    BL       _7816_4_changePinState ; 0x470c
        0x00002774:    2804        .(      CMP      r0,#4
        0x00002776:    d210        ..      BCS      0x279a ; _102221_disablePin + 74
        0x00002778:    2801        .(      CMP      r0,#1
        0x0000277a:    d014        ..      BEQ      0x27a6 ; _102221_disablePin + 86
        0x0000277c:    2802        .(      CMP      r0,#2
        0x0000277e:    d016        ..      BEQ      0x27ae ; _102221_disablePin + 94
        0x00002780:    2803        .(      CMP      r0,#3
        0x00002782:    d018        ..      BEQ      0x27b6 ; _102221_disablePin + 102
        0x00002784:    bd10        ..      POP      {r4,pc}
        0x00002786:    4824        $H      LDR      r0,[pc,#144] ; [0x2818] = 0x20000648
        0x00002788:    2106        .!      MOVS     r1,#6
        0x0000278a:    f005f94c    ..L.    BL       longjmp ; 0x7a26
        0x0000278e:    2008        .       MOVS     r0,#8
        0x00002790:    7120         q      STRB     r0,[r4,#4]
        0x00002792:    4821        !H      LDR      r0,[pc,#132] ; [0x2818] = 0x20000648
        0x00002794:    2107        .!      MOVS     r1,#7
        0x00002796:    f005f946    ..F.    BL       longjmp ; 0x7a26
        0x0000279a:    1f00        ..      SUBS     r0,r0,#4
        0x0000279c:    7120         q      STRB     r0,[r4,#4]
        0x0000279e:    481e        .H      LDR      r0,[pc,#120] ; [0x2818] = 0x20000648
        0x000027a0:    2119        .!      MOVS     r1,#0x19
        0x000027a2:    f005f940    ..@.    BL       longjmp ; 0x7a26
        0x000027a6:    481c        .H      LDR      r0,[pc,#112] ; [0x2818] = 0x20000648
;;; Core/102_221/source\PinManagementCommands.c
        0x000027a8:    211c        .!      MOVS     r1,#0x1c
        0x000027aa:    f005f93c    ..<.    BL       longjmp ; 0x7a26
        0x000027ae:    481a        .H      LDR      r0,[pc,#104] ; [0x2818] = 0x20000648
        0x000027b0:    211b        .!      MOVS     r1,#0x1b
        0x000027b2:    f005f938    ..8.    BL       longjmp ; 0x7a26
        0x000027b6:    4818        .H      LDR      r0,[pc,#96] ; [0x2818] = 0x20000648
        0x000027b8:    211a        .!      MOVS     r1,#0x1a
        0x000027ba:    f005f934    ..4.    BL       longjmp ; 0x7a26
        0x000027be:    46c0        .F      MOV      r8,r8
    _102221_getResponse
        0x000027c0:    499b        .I      LDR      r1,[pc,#620] ; [0x2a30] = 0x2000023e
        0x000027c2:    7888        .x      LDRB     r0,[r1,#2]
        0x000027c4:    2800        .(      CMP      r0,#0
        0x000027c6:    d110        ..      BNE      0x27ea ; _102221_getResponse + 42
        0x000027c8:    78c8        .x      LDRB     r0,[r1,#3]
;;; Core/102_221/source\TransmissionCommands.c
;;;14     	if ((0x00 != P1_BYTE)
        0x000027ca:    2800        .(      CMP      r0,#0
        0x000027cc:    d10d        ..      BNE      0x27ea ; _102221_getResponse + 42
        0x000027ce:    48c0        .H      LDR      r0,[pc,#768] ; [0x2ad0] = 0x2000023c
        0x000027d0:    8803        ..      LDRH     r3,[r0,#0]
        0x000027d2:    2b00        .+      CMP      r3,#0
        0x000027d4:    d010        ..      BEQ      0x27f8 ; _102221_getResponse + 56
        0x000027d6:    790a        .y      LDRB     r2,[r1,#4]
        0x000027d8:    4293        .B      CMP      r3,r2
        0x000027da:    d311        ..      BCC      0x2800 ; _102221_getResponse + 64
        0x000027dc:    7809        .x      LDRB     r1,[r1,#0]
        0x000027de:    29a0        .)      CMP      r1,#0xa0
        0x000027e0:    d102        ..      BNE      0x27e8 ; _102221_getResponse + 40
        0x000027e2:    2a00        .*      CMP      r2,#0
        0x000027e4:    d000        ..      BEQ      0x27e8 ; _102221_getResponse + 40
        0x000027e6:    8002        ..      STRH     r2,[r0,#0]
        0x000027e8:    4770        pG      BX       lr
;;;15     		||
;;;16     		(0x00 != P2_BYTE))
;;;17     	{
;;;18     		DBG_WARN("[102_221] _102221_getResponse: P1 and P2 should be 00\n");
;;;19     
;;;20     		/*Reset the remaining response*/
;;;21     		gudbOutputLen = 0x00;
        0x000027ea:    48b9        .H      LDR      r0,[pc,#740] ; [0x2ad0] = 0x2000023c
        0x000027ec:    2100        .!      MOVS     r1,#0
        0x000027ee:    8001        ..      STRH     r1,[r0,#0]
;;;22     
;;;23     		THROW(EXCEP_WRONG_P1_P2);
        0x000027f0:    4809        .H      LDR      r0,[pc,#36] ; [0x2818] = 0x20000648
        0x000027f2:    2106        .!      MOVS     r1,#6
        0x000027f4:    f005f917    ....    BL       longjmp ; 0x7a26
;;;24     	}
;;;25     
;;;26     	else if (0x00 == gudbOutputLen) {
;;;27     
;;;28     		/*Data cant be sent as no response data is available */
;;;29     		DBG_WARN("[102_221] _102221_getResponse: Luicc is 00\n");
;;;30     		THROW(EXCEP_TECHNICAL_PROBLEM);
        0x000027f8:    4807        .H      LDR      r0,[pc,#28] ; [0x2818] = 0x20000648
        0x000027fa:    2117        .!      MOVS     r1,#0x17
        0x000027fc:    f005f913    ....    BL       longjmp ; 0x7a26
        0x00002800:    710b        .q      STRB     r3,[r1,#4]
        0x00002802:    2100        .!      MOVS     r1,#0
;;;31     	}
;;;32     
;;;33     	else if (P3_BYTE > gudbOutputLen) { // incoming Le is greater than Luicc i.e. gudbOutputLen
;;;34     
;;;35     		DBG_WARN("[102_221] _102221_getResponse: Requested p3 is more than Luicc \n");
;;;36     
;;;37     		/*Store the Luicc in udbLuicc*/
;;;38     		udbLuicc = gudbOutputLen;
;;;39     
;;;40     		/*Reset the remaining response*/
;;;41     		gudbOutputLen = 0x00;
        0x00002804:    8001        ..      STRH     r1,[r0,#0]
;;;42     
;;;43     		THROW2(EXCEP_WRONG_P3, ((uMonoByte)udbLuicc));
        0x00002806:    4804        .H      LDR      r0,[pc,#16] ; [0x2818] = 0x20000648
        0x00002808:    2107        .!      MOVS     r1,#7
        0x0000280a:    f005f90c    ....    BL       longjmp ; 0x7a26
        0x0000280e:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x00002810:    2000023e    >..     DCD    536871486
    __arm_cp.0_1
        0x00002814:    2000023c    <..     DCD    536871484
    __arm_cp.0_2
        0x00002818:    20000648    H..     DCD    536872520
    $t.0
    _102221_fetchTheCommandFunc
;;; Core/102_221/source\UICC_CommandDispatcher.c
;;;42     cmdFunc _102221_fetchTheCommandFunc(OUT_ARG puMonoByte pumbInput){
        0x0000281c:    b570        p.      PUSH     {r4-r6,lr}
        0x0000281e:    2100        .!      MOVS     r1,#0
        0x00002820:    7001        .p      STRB     r1,[r0,#0]
;;; Core/102_221/source\UICC_CommandDispatcher.c
        0x00002822:    4a83        .J      LDR      r2,[pc,#524] ; [0x2a30] = 0x2000023e
        0x00002824:    7853        Sx      LDRB     r3,[r2,#1]
        0x00002826:    1f1b        ..      SUBS     r3,r3,#4
        0x00002828:    2bf6        .+      CMP      r3,#0xf6
        0x0000282a:    d900        ..      BLS      0x282e ; _102221_fetchTheCommandFunc + 18
        0x0000282c:    e14c        L.      B        0x2ac8 ; 0x2ac8
        0x0000282e:    005b        [.      LSLS     r3,r3,#1
        0x00002830:    447b        {D      ADD      r3,r3,pc
        0x00002832:    889b        ..      LDRH     r3,[r3,#4]
        0x00002834:    005b        [.      LSLS     r3,r3,#1
        0x00002836:    449f        .D      ADD      pc,pc,r3
    $d.1
        0x00002838:    014700f6    ..G.    DCD    21430518
        0x0000283c:    01470147    G.G.    DCD    21430599
        0x00002840:    01470147    G.G.    DCD    21430599
        0x00002844:    01470147    G.G.    DCD    21430599
        0x00002848:    01470147    G.G.    DCD    21430599
        0x0000284c:    01470147    G.G.    DCD    21430599
        0x00002850:    014700f8    ..G.    DCD    21430520
        0x00002854:    014700fd    ..G.    DCD    21430525
        0x00002858:    014700ff    ..G.    DCD    21430527
        0x0000285c:    01470147    G.G.    DCD    21430599
        0x00002860:    01470147    G.G.    DCD    21430599
        0x00002864:    01470147    G.G.    DCD    21430599
        0x00002868:    01470147    G.G.    DCD    21430599
        0x0000286c:    01470147    G.G.    DCD    21430599
        0x00002870:    01470101    ..G.    DCD    21430529
        0x00002874:    01470147    G.G.    DCD    21430599
        0x00002878:    01470103    ..G.    DCD    21430531
        0x0000287c:    01470105    ..G.    DCD    21430533
        0x00002880:    01470107    ..G.    DCD    21430535
        0x00002884:    01470147    G.G.    DCD    21430599
        0x00002888:    01470109    ..G.    DCD    21430537
        0x0000288c:    01470147    G.G.    DCD    21430599
        0x00002890:    01470147    G.G.    DCD    21430599
        0x00002894:    0147010b    ..G.    DCD    21430539
        0x00002898:    01470147    G.G.    DCD    21430599
        0x0000289c:    01470147    G.G.    DCD    21430599
        0x000028a0:    01470147    G.G.    DCD    21430599
        0x000028a4:    01470147    G.G.    DCD    21430599
        0x000028a8:    01470147    G.G.    DCD    21430599
        0x000028ac:    01470147    G.G.    DCD    21430599
        0x000028b0:    01470147    G.G.    DCD    21430599
        0x000028b4:    01470147    G.G.    DCD    21430599
        0x000028b8:    0147010d    ..G.    DCD    21430541
        0x000028bc:    01470147    G.G.    DCD    21430599
        0x000028c0:    01470147    G.G.    DCD    21430599
        0x000028c4:    01470147    G.G.    DCD    21430599
        0x000028c8:    01470147    G.G.    DCD    21430599
        0x000028cc:    01470147    G.G.    DCD    21430599
        0x000028d0:    01470147    G.G.    DCD    21430599
        0x000028d4:    01470147    G.G.    DCD    21430599
        0x000028d8:    01470147    G.G.    DCD    21430599
        0x000028dc:    01470147    G.G.    DCD    21430599
        0x000028e0:    01470147    G.G.    DCD    21430599
        0x000028e4:    01470147    G.G.    DCD    21430599
        0x000028e8:    01470147    G.G.    DCD    21430599
        0x000028ec:    01470147    G.G.    DCD    21430599
        0x000028f0:    01470147    G.G.    DCD    21430599
        0x000028f4:    01470147    G.G.    DCD    21430599
        0x000028f8:    01470147    G.G.    DCD    21430599
        0x000028fc:    01470147    G.G.    DCD    21430599
        0x00002900:    01470147    G.G.    DCD    21430599
        0x00002904:    01470147    G.G.    DCD    21430599
        0x00002908:    01470147    G.G.    DCD    21430599
        0x0000290c:    01470147    G.G.    DCD    21430599
        0x00002910:    0147010f    ..G.    DCD    21430543
        0x00002914:    01470147    G.G.    DCD    21430599
        0x00002918:    01470147    G.G.    DCD    21430599
        0x0000291c:    01470147    G.G.    DCD    21430599
        0x00002920:    01470147    G.G.    DCD    21430599
        0x00002924:    01470147    G.G.    DCD    21430599
        0x00002928:    01470147    G.G.    DCD    21430599
        0x0000292c:    01470147    G.G.    DCD    21430599
        0x00002930:    01470147    G.G.    DCD    21430599
        0x00002934:    01470147    G.G.    DCD    21430599
        0x00002938:    01470147    G.G.    DCD    21430599
        0x0000293c:    01470147    G.G.    DCD    21430599
        0x00002940:    01470111    ..G.    DCD    21430545
        0x00002944:    01470147    G.G.    DCD    21430599
        0x00002948:    01470147    G.G.    DCD    21430599
        0x0000294c:    01470147    G.G.    DCD    21430599
        0x00002950:    01470147    G.G.    DCD    21430599
        0x00002954:    01470147    G.G.    DCD    21430599
        0x00002958:    01470147    G.G.    DCD    21430599
        0x0000295c:    01470147    G.G.    DCD    21430599
        0x00002960:    01470147    G.G.    DCD    21430599
        0x00002964:    01470147    G.G.    DCD    21430599
        0x00002968:    01470147    G.G.    DCD    21430599
        0x0000296c:    01470147    G.G.    DCD    21430599
        0x00002970:    01470147    G.G.    DCD    21430599
        0x00002974:    01470113    ..G.    DCD    21430547
        0x00002978:    01470115    ..G.    DCD    21430549
        0x0000297c:    01470147    G.G.    DCD    21430599
        0x00002980:    01470147    G.G.    DCD    21430599
        0x00002984:    01470147    G.G.    DCD    21430599
        0x00002988:    01470147    G.G.    DCD    21430599
        0x0000298c:    01470147    G.G.    DCD    21430599
        0x00002990:    01470117    ..G.    DCD    21430551
        0x00002994:    01470119    ..G.    DCD    21430553
        0x00002998:    01470147    G.G.    DCD    21430599
        0x0000299c:    01470147    G.G.    DCD    21430599
        0x000029a0:    01470147    G.G.    DCD    21430599
        0x000029a4:    01470147    G.G.    DCD    21430599
        0x000029a8:    01470147    G.G.    DCD    21430599
        0x000029ac:    01470147    G.G.    DCD    21430599
        0x000029b0:    0147011b    ..G.    DCD    21430555
        0x000029b4:    0147011d    ..G.    DCD    21430557
        0x000029b8:    01470147    G.G.    DCD    21430599
        0x000029bc:    01470147    G.G.    DCD    21430599
        0x000029c0:    01470147    G.G.    DCD    21430599
        0x000029c4:    01470147    G.G.    DCD    21430599
        0x000029c8:    01470147    G.G.    DCD    21430599
        0x000029cc:    01470147    G.G.    DCD    21430599
        0x000029d0:    01470147    G.G.    DCD    21430599
        0x000029d4:    01470147    G.G.    DCD    21430599
        0x000029d8:    01470147    G.G.    DCD    21430599
        0x000029dc:    0147011f    ..G.    DCD    21430559
        0x000029e0:    01210147    G.!.    DCD    18940231
        0x000029e4:    01470123    #.G.    DCD    21430563
        0x000029e8:    01470125    %.G.    DCD    21430565
        0x000029ec:    01470147    G.G.    DCD    21430599
        0x000029f0:    0147012c    ,.G.    DCD    21430572
        0x000029f4:    01470147    G.G.    DCD    21430599
        0x000029f8:    01470147    G.G.    DCD    21430599
        0x000029fc:    01470147    G.G.    DCD    21430599
        0x00002a00:    01470147    G.G.    DCD    21430599
        0x00002a04:    01470147    G.G.    DCD    21430599
        0x00002a08:    01470147    G.G.    DCD    21430599
        0x00002a0c:    01470147    G.G.    DCD    21430599
        0x00002a10:    01470127    '.G.    DCD    21430567
        0x00002a14:    01470129    ).G.    DCD    21430569
        0x00002a18:    01470147    G.G.    DCD    21430599
        0x00002a1c:    01470147    G.G.    DCD    21430599
        0x00002a20:    01470147    G.G.    DCD    21430599
        0x00002a24:    012b        +.      DCW    299
    $t.2
        0x00002a26:    2107        .!      MOVS     r1,#7
        0x00002a28:    e033        3.      B        0x2a92 ; 0x2a92
        0x00002a2a:    210b        .!      MOVS     r1,#0xb
        0x00002a2c:    e031        1.      B        0x2a92 ; 0x2a92
        0x00002a2e:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.0_6
        0x00002a30:    2000023e    >..     DCD    536871486
    $t.4
        0x00002a34:    210e        .!      MOVS     r1,#0xe
        0x00002a36:    e02c        ,.      B        0x2a92 ; 0x2a92
        0x00002a38:    210c        .!      MOVS     r1,#0xc
        0x00002a3a:    e02a        *.      B        0x2a92 ; 0x2a92
        0x00002a3c:    2113        .!      MOVS     r1,#0x13
        0x00002a3e:    e028        (.      B        0x2a92 ; 0x2a92
        0x00002a40:    2112        .!      MOVS     r1,#0x12
        0x00002a42:    e026        &.      B        0x2a92 ; 0x2a92
        0x00002a44:    2116        .!      MOVS     r1,#0x16
        0x00002a46:    e024        $.      B        0x2a92 ; 0x2a92
        0x00002a48:    2115        .!      MOVS     r1,#0x15
        0x00002a4a:    e022        ".      B        0x2a92 ; 0x2a92
        0x00002a4c:    2114        .!      MOVS     r1,#0x14
        0x00002a4e:    e020         .      B        0x2a92 ; 0x2a92
        0x00002a50:    2109        .!      MOVS     r1,#9
        0x00002a52:    e01e        ..      B        0x2a92 ; 0x2a92
        0x00002a54:    2108        .!      MOVS     r1,#8
        0x00002a56:    e01c        ..      B        0x2a92 ; 0x2a92
        0x00002a58:    2117        .!      MOVS     r1,#0x17
        0x00002a5a:    e01a        ..      B        0x2a92 ; 0x2a92
        0x00002a5c:    2111        .!      MOVS     r1,#0x11
        0x00002a5e:    e018        ..      B        0x2a92 ; 0x2a92
        0x00002a60:    210a        .!      MOVS     r1,#0xa
        0x00002a62:    e016        ..      B        0x2a92 ; 0x2a92
        0x00002a64:    2102        .!      MOVS     r1,#2
        0x00002a66:    e014        ..      B        0x2a92 ; 0x2a92
        0x00002a68:    2103        .!      MOVS     r1,#3
        0x00002a6a:    e012        ..      B        0x2a92 ; 0x2a92
        0x00002a6c:    2105        .!      MOVS     r1,#5
        0x00002a6e:    e010        ..      B        0x2a92 ; 0x2a92
        0x00002a70:    210f        .!      MOVS     r1,#0xf
        0x00002a72:    e00e        ..      B        0x2a92 ; 0x2a92
        0x00002a74:    210d        .!      MOVS     r1,#0xd
        0x00002a76:    e00c        ..      B        0x2a92 ; 0x2a92
        0x00002a78:    2104        .!      MOVS     r1,#4
        0x00002a7a:    e00a        ..      B        0x2a92 ; 0x2a92
        0x00002a7c:    2118        .!      MOVS     r1,#0x18
        0x00002a7e:    e008        ..      B        0x2a92 ; 0x2a92
        0x00002a80:    211a        .!      MOVS     r1,#0x1a
        0x00002a82:    e006        ..      B        0x2a92 ; 0x2a92
        0x00002a84:    2106        .!      MOVS     r1,#6
        0x00002a86:    e004        ..      B        0x2a92 ; 0x2a92
        0x00002a88:    2119        .!      MOVS     r1,#0x19
        0x00002a8a:    e002        ..      B        0x2a92 ; 0x2a92
        0x00002a8c:    2101        .!      MOVS     r1,#1
        0x00002a8e:    e000        ..      B        0x2a92 ; 0x2a92
        0x00002a90:    2110        .!      MOVS     r1,#0x10
        0x00002a92:    230c        .#      MOVS     r3,#0xc
;;;1      #include "UICC_CommandDispatcher.h"
;;;2      
;;;3      static tCommand commandList[] = {
;;;4      //	UICC func---------------------------------------SIM Func----------------------------Instruction byte------------I/O and OTA flag-----//
;;;5      	{_102222_createFile,							NULL,								INS_CREATE_FILE,			INS_INPUT|INS_NO_OTA_CMD						},
;;;6      	{_102221_status,								_51011_status,						INS_STATUS,					INS_NO_INPUT|INS_OTA_CMD|INS_ITS_CLA_8X			},
;;;7      	{_102221_select,								_51011_select,						INS_SELECT,					INS_INPUT|INS_CMD_DATA_OPTIONAL|INS_OTA_CMD		},
;;;8      	{_102221_readUpdateBinary,						_51011_readUpdateBinary,			INS_READ_BINARY,			INS_NO_INPUT|INS_OTA_CMD						},
;;;9      	{_102221_readUpdateBinary,						_51011_readUpdateBinary,			INS_UPDATE_BINARY,			INS_INPUT|INS_OTA_CMD							},
;;;10     	{_102221_readUpdateRecord,						_51011_readUpdateRecord,			INS_READ_RECORD,			INS_NO_INPUT|INS_OTA_CMD						},
;;;11     	{_102221_readUpdateRecord,						_51011_readUpdateRecord,			INS_UPDATE_RECORD,			INS_INPUT|INS_OTA_CMD							},
;;;12     	{_102221_deactivateActivateFile,				_51011_invalidateRehabilitate,		INS_DEACTIVATE_FILE,		INS_INPUT|INS_CMD_DATA_OPTIONAL|INS_OTA_CMD		},
;;;13     	{_102221_deactivateActivateFile,				_51011_invalidateRehabilitate,		INS_ACTIVATE_FILE,			INS_INPUT|INS_CMD_DATA_OPTIONAL|INS_OTA_CMD		},
;;;14     	{_102221_increase,								_51011_increaseRecord,				INS_INCREASE,				INS_INPUT|INS_OTA_CMD|INS_ITS_CLA_8X			},
;;;15     	{_102221_search,								_51011_Seek,						INS_SEARCH,					INS_INPUT|INS_OTA_CMD							},
;;;16     	{_102221_terminalProfile,						_51011_terminalProfile,				INS_TERMINAL_PROFILE,		INS_INPUT|INS_OTA_CMD|INS_ITS_CLA_8X			},
;;;17     	{_102221_terminalResponse,						_51011_terminalResponse,			INS_TERMINAL_RESPONSE,		INS_INPUT|INS_OTA_CMD|INS_ITS_CLA_8X			},
;;;18     	{_102221_envelope,								_51011_envelope,					INS_ENVELOPE,				INS_INPUT|INS_OTA_CMD|INS_ITS_CLA_8X			},
;;;19     	{_102221_fetch,									_51011_fetch,						INS_FETCH,					INS_NO_INPUT|INS_OTA_CMD|INS_ITS_CLA_8X			},
;;;20     	{_102221_getResponse,							_102221_getResponse,				INS_GET_RESPONSE,			INS_NO_INPUT|INS_OTA_CMD						},
;;;21     	{NULL,											_51011_sleep,						INS_SLEEP,					INS_NO_INPUT|INS_OTA_CMD						},
;;;22     	{_31102_authenticate,							_51011_runGsmAlgorithm,				INS_AUTHENTICATE,			INS_INPUT|INS_NO_OTA_CMD						},
;;;23     	{_102221_changePin,								_51011_changeChv,					INS_CHANGE_PIN,				INS_INPUT|INS_OTA_CMD							},
;;;24     	{_102221_verifyPin,								_51011_verifyChv,					INS_VERIFY_PIN,				INS_INPUT|INS_CMD_DATA_OPTIONAL|INS_OTA_CMD		},
;;;25     	{_102221_unblockPin,							_51011_unblockChv,					INS_UNBLOCK_PIN,			INS_INPUT|INS_CMD_DATA_OPTIONAL|INS_OTA_CMD		},
;;;26     	{_102221_enablePin,								_51011_enableChv,					INS_ENABLE_PIN,				INS_INPUT|INS_OTA_CMD							},
;;;27     	{_102221_disablePin,							_51011_disableChv,					INS_DISABLE_PIN,			INS_INPUT|INS_OTA_CMD							},
;;;28     	{_102221_manageChannel,							NULL,								INS_MANAGE_CHANNEL,			INS_NO_INPUT|INS_NO_OTA_CMD						},
;;;29     	{oasis_SetCardState,							oasis_SetCardState,					INS_SET_CARD_STATE,			INS_NO_INPUT|INS_NO_OTA_CMD						},
;;;30     	{oasis_switchToBL,								oasis_switchToBL,					INS_SWITCH_TO_BL,			INS_NO_INPUT|INS_NO_OTA_CMD						},
;;;31     	{oasis_getMemoryConfig,							oasis_getMemoryConfig,				INS_GET_MEM_CONFIG,			INS_NO_INPUT|INS_NO_OTA_CMD						}
;;;32     };
;;;33     
;;;34     
;;;35     /*
;;;36     * Check the presence of incoming instruction byte and return the command function along with type of command
;;;37     * 
;;;38     * @param pumbInput: stores type of command info of intended command
;;;39     * 
;;;40     * @return command function
;;;41     */
;;;42     cmdFunc _102221_fetchTheCommandFunc(OUT_ARG puMonoByte pumbInput){
;;;43     
;;;44     	//TODO: We can try BST here to improve the performance of searching
;;;45     	uMonoByte idx; //index variable
;;;46     
;;;47     	DBG_FUNC_ENTRY(">>[102_221] _102221_fetchTheCommandFunc() \n");
;;;48     
;;;49     	*pumbInput = 0x00; //default
;;;50     
;;;51     	DBG_FUNC("[102_221] _102221_fetchTheCommandFunc: Parse each element of Uicc Command dispatcher to find the instruction \n");
;;;52     
;;;53     	//Loop from 0 to last element of commandList
;;;54     	for (idx = 0;idx < sizeof(commandList)/sizeof(tCommand);idx++)
;;;55     	{
;;;56     		//Check if incoming instruction byte matches with
;;;57     		if (commandList[idx].umbInsByte == INS_BYTE)
;;;58     		{
;;;59     			DBG_FUNC("[102_221] _102221_fetchTheCommandFunc: Instruction '%1' found\n", INS_BYTE);
;;;60     
;;;61     			/*Save input status*/
;;;62     			*pumbInput = commandList[idx].umbTypeOfCommand;
        0x00002a94:    434b        KC      MULS     r3,r1,r3
        0x00002a96:    4d0d        .M      LDR      r5,[pc,#52] ; [0x2acc] = 0x82e8
        0x00002a98:    18e9        ..      ADDS     r1,r5,r3
        0x00002a9a:    7a4c        Lz      LDRB     r4,[r1,#9]
        0x00002a9c:    7004        .p      STRB     r4,[r0,#0]
;;;63     
;;;64     			if (INS_GET_RESPONSE != INS_BYTE) { // if command is not get response
        0x00002a9e:    7850        Px      LDRB     r0,[r2,#1]
        0x00002aa0:    28c0        .(      CMP      r0,#0xc0
        0x00002aa2:    d002        ..      BEQ      0x2aaa ; 0x2aaa
;;;65     				gudbOutputLen = 0x00;
        0x00002aa4:    480a        .H      LDR      r0,[pc,#40] ; [0x2ad0] = 0x2000023c
        0x00002aa6:    2600        .&      MOVS     r6,#0
        0x00002aa8:    8006        ..      STRH     r6,[r0,#0]
;;;66     			}
;;;67     
;;;68     			//Returning the command function SIM or UICC one 
;;;69     			if (NAA_SIM == gumbCurrentNaaApp) {//GSM application is active
        0x00002aaa:    480a        .H      LDR      r0,[pc,#40] ; [0x2ad4] = 0x20000343
        0x00002aac:    7800        .x      LDRB     r0,[r0,#0]
        0x00002aae:    2801        .(      CMP      r0,#1
        0x00002ab0:    d102        ..      BNE      0x2ab8 ; 0x2ab8
;;;70     
;;;71     				DBG_FUNC("[102_221] _102221_fetchTheCommandFunc: SIM function\n");
;;;72     				DBG_FUNC_EXIT("<<[102_221] _102221_fetchTheCommandFunc() \n");
;;;73     				return commandList[idx].SimCommandFunction;
        0x00002ab2:    18e8        ..      ADDS     r0,r5,r3
        0x00002ab4:    1d01        ..      ADDS     r1,r0,#4
        0x00002ab6:    e004        ..      B        0x2ac2 ; 0x2ac2
;;;74     			}
;;;75     			/*USIM/UICC application is active*/
;;;76     			else if((CLA_BYTE & MASK_CLA_8X) == (commandList[idx].umbTypeOfCommand & MASK_CLA_8X)) {
        0x00002ab8:    7810        .x      LDRB     r0,[r2,#0]
        0x00002aba:    4060        `@      EORS     r0,r0,r4
        0x00002abc:    b240        @.      SXTB     r0,r0
        0x00002abe:    2800        .(      CMP      r0,#0
        0x00002ac0:    d401        ..      BMI      0x2ac6 ; 0x2ac6
        0x00002ac2:    6808        .h      LDR      r0,[r1,#0]
;;;77     				
;;;78     				DBG_FUNC("[102_221] _102221_fetchTheCommandFunc: UICC function\n");
;;;79     				DBG_FUNC_EXIT("<<[102_221] _102221_fetchTheCommandFunc() \n");
;;;80     				return commandList[idx].UiccCommandFunction;
;;;81     			}
;;;82     			else { //Instuction has different CLA byte than incoming one
;;;83     
;;;84     				DBG_ERR("[102_221] _102221_fetchTheCommandFunc: Given instruction doesnt fall under any CLA byte\n");
;;;85     				DBG_FUNC_EXIT("<<[102_221] _102221_fetchTheCommandFunc() \n");
;;;86     				return NULL;
;;;87     			}
;;;88     
;;;89     		}
;;;90     	}
;;;91     
;;;92     	DBG_WARN("[102_221] _102221_fetchTheCommandFunc: No instruction found\n");
;;;93     	DBG_FUNC_EXIT("<<[102_221] _102221_fetchTheCommandFunc() \n");
;;;94     	// No instruction matched
;;;95     	return NULL;
;;;96     }
        0x00002ac4:    bd70        p.      POP      {r4-r6,pc}
        0x00002ac6:    2100        .!      MOVS     r1,#0
        0x00002ac8:    4608        .F      MOV      r0,r1
        0x00002aca:    bd70        p.      POP      {r4-r6,pc}
    $d.5
    __arm_cp.0_1
        0x00002acc:    000082e8    ....    DCD    33512
    __arm_cp.0_2
        0x00002ad0:    2000023c    <..     DCD    536871484
    __arm_cp.0_3
        0x00002ad4:    20000343    C..     DCD    536871747
    $t.0
    _102222_createFile
;;; Core/102_222/source\102_222.c
;;;49     void _102222_createFile(void) {
        0x00002ad8:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00002ada:    b08f        ..      SUB      sp,sp,#0x3c
        0x00002adc:    2400        .$      MOVS     r4,#0
;;;50     	/*Variables declaration*/
;;;51     	uMonoByte			umbFcpIndex = 0x00;
;;;52     	uMonoByte			umbFileDesc = 0x00;
;;;53     	uMonoByte			umbTemp = 0x00;
;;;54     	uMonoByte			umbKey;
;;;55     	uMonoByte			umbAdfOffset = 0x00;
;;;56     	uMonoByte			umbIsDf = 0x00;
;;;57     	uMonoByte			umbFileRecord = RECORD_UNDEFINED;
;;;58     	uDiByte				udbFileSize;
;;;59     	tFileHeader			fhFile = {0}; //reset it to 0x00
        0x00002ade:    940e        ..      STR      r4,[sp,#0x38]
        0x00002ae0:    940d        ..      STR      r4,[sp,#0x34]
        0x00002ae2:    940c        ..      STR      r4,[sp,#0x30]
        0x00002ae4:    940b        ..      STR      r4,[sp,#0x2c]
        0x00002ae6:    940a        ..      STR      r4,[sp,#0x28]
        0x00002ae8:    a809        ..      ADD      r0,sp,#0x24
;;;60     	tFileHeaderAddr		fhaFile = EMPTY_OBJECT;
        0x00002aea:    8004        ..      STRH     r4,[r0,#0]
;;;61     	tFileHeaderAddr		fhaPropFile = EMPTY_OBJECT;
;;;62     	tMemAddr			maFileData = EMPTY_OBJECT; // only stores file data memory address
;;;63     	
;;;64     	DBG_FUNC_ENTRY(">>[102_222] _102222_createFile()\n");
;;;65     
;;;66     	/*Check P1-P2 must be '0000'*/
;;;67     	if (P1_BYTE|P2_BYTE)
        0x00002aec:    4bb1        .K      LDR      r3,[pc,#708] ; [0x2db4] = 0x2000023e
        0x00002aee:    7898        .x      LDRB     r0,[r3,#2]
        0x00002af0:    78d9        .x      LDRB     r1,[r3,#3]
        0x00002af2:    4301        .C      ORRS     r1,r1,r0
        0x00002af4:    d000        ..      BEQ      0x2af8 ; _102222_createFile + 32
        0x00002af6:    e23c        <.      B        0x2f72 ; _102222_createFile + 1178
;;;68     	{
;;;69     		/*Wrong P1-P2 parameters*/
;;;70     		DBG_ERR("[102_222] _102222_createFile: Invalid p1-p2: %1 %1\n", P1_BYTE, P2_BYTE);
;;;71     		DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;72     		THROW(EXCEP_WRONG_P1_P2);
;;;73     	}
;;;74     
;;;75     	DBG_FUNC("[102_222] _102222_createFile: Valid p1-p2: %1 %1\n", P1_BYTE, P2_BYTE);
;;;76     
;;;77     	DBG_FUNC("[102_222] _102222_createFile: Checking FCP TLV\n");
;;;78     	/*Check FCP tag first*/
;;;79     	_102222_matchValues(TAG_FCP_TEMPLATE, COMMAND_DATA[umbFcpIndex++]);
        0x00002af8:    7958        Xy      LDRB     r0,[r3,#5]
        0x00002afa:    2862        b(      CMP      r0,#0x62
        0x00002afc:    d000        ..      BEQ      0x2b00 ; _102222_createFile + 40
        0x00002afe:    e22c        ,.      B        0x2f5a ; _102222_createFile + 1154
;;;80     
;;;81     	/*Check FCP Length is correct as per P3 i.e. 2 bytes less where 1 for tag and 1 for length byte*/
;;;82     	/*Assuming length of FCP template comes in 1 byte only*/
;;;83     	_102222_matchValues(P3_BYTE - 0x02, COMMAND_DATA[umbFcpIndex++]);
        0x00002b00:    7998        .y      LDRB     r0,[r3,#6]
        0x00002b02:    7919        .y      LDRB     r1,[r3,#4]
        0x00002b04:    1e89        ..      SUBS     r1,r1,#2
        0x00002b06:    b2c9        ..      UXTB     r1,r1
        0x00002b08:    4281        .B      CMP      r1,r0
        0x00002b0a:    d000        ..      BEQ      0x2b0e ; _102222_createFile + 54
        0x00002b0c:    e225        %.      B        0x2f5a ; _102222_createFile + 1154
;;;84     
;;;85     	DBG_FUNC("[102_222] _102222_createFile: Checking File descriptor TLV\n");
;;;86     
;;;87     	/*Check File descriptor tag*/
;;;88     	_102222_matchValues(TAG_FILE_DESC, COMMAND_DATA[umbFcpIndex++]);
        0x00002b0e:    79d8        .y      LDRB     r0,[r3,#7]
        0x00002b10:    2882        .(      CMP      r0,#0x82
        0x00002b12:    d000        ..      BEQ      0x2b16 ; _102222_createFile + 62
        0x00002b14:    e221        !.      B        0x2f5a ; _102222_createFile + 1154
;;;89     
;;;90     	/*Read File descriptor Length*/
;;;91     	umbTemp = COMMAND_DATA[umbFcpIndex++];
        0x00002b16:    7a18        .z      LDRB     r0,[r3,#8]
;;;92     
;;;93     	/*Check length of File Descriptor Byte*/
;;;94     	if (
;;;95     		(LENGTH_FILE_DESC != umbTemp)		//	Not '02'
;;;96     		&&									//	and
        0x00002b18:    2802        .(      CMP      r0,#2
        0x00002b1a:    d002        ..      BEQ      0x2b22 ; _102222_createFile + 74
        0x00002b1c:    2804        .(      CMP      r0,#4
        0x00002b1e:    d000        ..      BEQ      0x2b22 ; _102222_createFile + 74
        0x00002b20:    e21b        ..      B        0x2f5a ; _102222_createFile + 1154
;;;97     		(LENGTH_REC_FILE_DESC != umbTemp)	//	Not '04'
;;;98     		)
;;;99     	{
;;;100    		/*Invalid length of File Descriptor Tag*/
;;;101    		DBG_ERR("[102_222] _102222_createFile: Invalid File desc length: %1\n", umbTemp);
;;;102    		DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;103    		THROW(EXCEP_INCORRECT_DATAFIELD);
;;;104    	}
;;;105    
;;;106    	/*Get File descriptor */
;;;107    	umbFileDesc = COMMAND_DATA[umbFcpIndex++];
        0x00002b22:    7a5d        ]z      LDRB     r5,[r3,#9]
        0x00002b24:    b269        i.      SXTB     r1,r5
        0x00002b26:    2900        .)      CMP      r1,#0
        0x00002b28:    d500        ..      BPL      0x2b2c ; _102222_createFile + 84
        0x00002b2a:    e216        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002b2c:    7a9a        .z      LDRB     r2,[r3,#0xa]
;;;108    
;;;109    	/* Check MSbit of File Descriptor byte
;;;110    	* OR
;;;111    	* Data coding byte '21'
;;;112    	*/
;;;113    	if ((SHIFT_RIGHT_BY_N_BITS(umbFileDesc,7))    //Invalid File Desc byte
        0x00002b2e:    2a21        !*      CMP      r2,#0x21
        0x00002b30:    d000        ..      BEQ      0x2b34 ; _102222_createFile + 92
        0x00002b32:    e212        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002b34:    22bf        ."      MOVS     r2,#0xbf
;;;114    		||					//OR
;;;115    		(FIX_DCB_FOR_102_222 != COMMAND_DATA[umbFcpIndex++]) //invalid Data coding byte
;;;116    		)
;;;117    	{
;;;118    		/*Invalid Data*/
;;;119    		DBG_ERR("[102_222] _102222_createFile: Invalid File desc byte '%1' or data coding byte \n", umbFileDesc);
;;;120    		DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;121    		THROW(EXCEP_INCORRECT_DATAFIELD);
;;;122    	}
;;;123    
;;;124    	/*flag to check if its DF, as need to check it multiple times down in the function*/
;;;125    	umbIsDf = IS(DF, umbFileDesc);
        0x00002b36:    402a        *@      ANDS     r2,r2,r5
        0x00002b38:    9208        ..      STR      r2,[sp,#0x20]
;;;126    
;;;127    	/*Validate File Descriptor along with length of File Descriptor */
;;;128    	if (
;;;129    		(umbIsDf || IS(TF, umbFileDesc))	// Dedicated File or Transparent File
        0x00002b3a:    2a38        8*      CMP      r2,#0x38
        0x00002b3c:    9407        ..      STR      r4,[sp,#0x1c]
        0x00002b3e:    d104        ..      BNE      0x2b4a ; _102222_createFile + 114
        0x00002b40:    2802        .(      CMP      r0,#2
        0x00002b42:    d008        ..      BEQ      0x2b56 ; _102222_createFile + 126
        0x00002b44:    2287        ."      MOVS     r2,#0x87
;;;130    		&&												// AND
;;;131    		(LENGTH_FILE_DESC == umbTemp)					// Length is '02'
;;;132    		)
;;;133    	{
;;;134    		DBG_FUNC("[102_222] _102222_createFile: Incoming file is transparent\n");
;;;135    		/*Store descriptor only*/
;;;136    		fhFile.umbFileDesc = umbFileDesc;
;;;137    	}
;;;138    	else if (
;;;139    		(IS(LF, umbFileDesc) || IS(CF, umbFileDesc))	// Linear File or Cyclic File i.e. Record structure file
        0x00002b46:    402a        *@      ANDS     r2,r2,r5
        0x00002b48:    e009        ..      B        0x2b5e ; _102222_createFile + 134
        0x00002b4a:    2287        ."      MOVS     r2,#0x87
        0x00002b4c:    402a        *@      ANDS     r2,r2,r5
        0x00002b4e:    2a01        .*      CMP      r2,#1
        0x00002b50:    d105        ..      BNE      0x2b5e ; _102222_createFile + 134
        0x00002b52:    2802        .(      CMP      r0,#2
        0x00002b54:    d103        ..      BNE      0x2b5e ; _102222_createFile + 134
        0x00002b56:    a80a        ..      ADD      r0,sp,#0x28
        0x00002b58:    7041        Ap      STRB     r1,[r0,#1]
        0x00002b5a:    2706        .'      MOVS     r7,#6
        0x00002b5c:    e00c        ..      B        0x2b78 ; _102222_createFile + 160
        0x00002b5e:    2a02        .*      CMP      r2,#2
        0x00002b60:    d002        ..      BEQ      0x2b68 ; _102222_createFile + 144
;;;140    		&&												// AND
        0x00002b62:    2a06        .*      CMP      r2,#6
        0x00002b64:    d000        ..      BEQ      0x2b68 ; _102222_createFile + 144
        0x00002b66:    e1f8        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002b68:    2804        .(      CMP      r0,#4
        0x00002b6a:    d000        ..      BEQ      0x2b6e ; _102222_createFile + 150
        0x00002b6c:    e1f5        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002b6e:    a80a        ..      ADD      r0,sp,#0x28
;;;141    		(LENGTH_REC_FILE_DESC == umbTemp)				// Length is '04'
;;;142    		)
;;;143    	{
;;;144    		DBG_FUNC("[102_222] _102222_createFile: Incoming file is Record structured\n");
;;;145    		/*Store descriptor*/
;;;146    		fhFile.umbFileDesc = umbFileDesc;
        0x00002b70:    7041        Ap      STRB     r1,[r0,#1]
;;;147    
;;;148    		/*Stores record size*/
;;;149    		/*Assuming Record size is always less than or equal to 0xFF ,
;;;150    		* Hence, ignoring first byte of Record size in command */
;;;151    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize = COMMAND_DATA[umbFcpIndex + 1];
        0x00002b72:    7b19        .{      LDRB     r1,[r3,#0xc]
        0x00002b74:    7401        .t      STRB     r1,[r0,#0x10]
        0x00002b76:    2708        .'      MOVS     r7,#8
;;;152    
;;;153    		/*Move index to next TLV File-ID*/
;;;154    		umbFcpIndex += 2;
;;;155    	}
;;;156    	else 
;;;157    	{
;;;158    		/*inconsistency of File Desc Len with File Desc byte*/
;;;159    		DBG_ERR("[102_222] _102222_createFile: Wrong File Desc Len as per File Desc byte\n");
;;;160    		DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;161    		THROW(EXCEP_INCORRECT_DATAFIELD);
;;;162    	}
;;;163    	
;;;164    	DBG_FUNC("[102_222] _102222_createFile: Checking File ID TLV\n");
;;;165    
;;;166    	/*Check File ID tag*/
;;;167    	_102222_matchValues(TAG_FILE_ID, COMMAND_DATA[umbFcpIndex++]);
        0x00002b78:    19d8        ..      ADDS     r0,r3,r7
        0x00002b7a:    7940        @y      LDRB     r0,[r0,#5]
        0x00002b7c:    2883        .(      CMP      r0,#0x83
        0x00002b7e:    d000        ..      BEQ      0x2b82 ; _102222_createFile + 170
        0x00002b80:    e1eb        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002b82:    9505        ..      STR      r5,[sp,#0x14]
        0x00002b84:    2101        .!      MOVS     r1,#1
        0x00002b86:    4638        8F      MOV      r0,r7
        0x00002b88:    9106        ..      STR      r1,[sp,#0x18]
        0x00002b8a:    4308        .C      ORRS     r0,r0,r1
;;;168    
;;;169    	/*Check File ID tag's Length*/
;;;170    	_102222_matchValues(LENGTH_FILE_ID, COMMAND_DATA[umbFcpIndex++]);
        0x00002b8c:    1818        ..      ADDS     r0,r3,r0
        0x00002b8e:    7940        @y      LDRB     r0,[r0,#5]
        0x00002b90:    2802        .(      CMP      r0,#2
        0x00002b92:    d000        ..      BEQ      0x2b96 ; _102222_createFile + 190
        0x00002b94:    e1e1        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002b96:    1d5d        ].      ADDS     r5,r3,#5
        0x00002b98:    1cb9        ..      ADDS     r1,r7,#2
;;;171    
;;;172    	/*Store File ID*/
;;;173    	fhFile.udbFileId = mm_makeUdiByte(COMMAND_DATA, umbFcpIndex);
        0x00002b9a:    4628        (F      MOV      r0,r5
        0x00002b9c:    f7fefb02    ....    BL       mm_makeUdiByte ; 0x11a4
        0x00002ba0:    ac0a        ..      ADD      r4,sp,#0x28
        0x00002ba2:    8120         .      STRH     r0,[r4,#8]
        0x00002ba4:    48fc        .H      LDR      r0,[pc,#1008] ; [0x2f98] = 0xa004
        0x00002ba6:    ae09        ..      ADD      r6,sp,#0x24
        0x00002ba8:    2202        ."      MOVS     r2,#2
;;;174    
;;;175    	DBG_FUNC("[102_222] _102222_createFile: Checking if MF is created prior or not\n");
;;;176    
;;;177    	/*Read the MF header address from system page*/
;;;178    	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFile, SIZE_OF_FILE_HEADER_ADDR);
        0x00002baa:    4631        1F      MOV      r1,r6
        0x00002bac:    f004f8a6    ....    BL       baseReadNBytes ; 0x6cfc
        0x00002bb0:    203f        ?       MOVS     r0,#0x3f
        0x00002bb2:    0201        ..      LSLS     r1,r0,#8
;;;179    
;;;180    	/*Check if no MF created, ensure MF Create File command received*/
;;;181    	if (
;;;182    		(NO_FILE_PRESENT == fhaFile)	//If MF address is not defined i.e. MF not created
        0x00002bb4:    8830        0.      LDRH     r0,[r6,#0]
;;;183    		&&													//AND
        0x00002bb6:    2800        .(      CMP      r0,#0
        0x00002bb8:    d103        ..      BNE      0x2bc2 ; _102222_createFile + 234
        0x00002bba:    8920         .      LDRH     r0,[r4,#8]
        0x00002bbc:    4288        .B      CMP      r0,r1
        0x00002bbe:    d000        ..      BEQ      0x2bc2 ; _102222_createFile + 234
        0x00002bc0:    e1cf        ..      B        0x2f62 ; _102222_createFile + 1162
        0x00002bc2:    9104        ..      STR      r1,[sp,#0x10]
;;;184    		(FID_MF != fhFile.udbFileId)						//Incoming command is not for MF
;;;185    		)
;;;186    	{
;;;187    		/*Other create file Commands are not allowed if MF is not yet created*/
;;;188    		DBG_ERR("[102_222] _102222_createFile: First create file command must be a MF\n");
;;;189    		DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;190    		THROW(EXCEP_COMMAND_NOT_ALLOWED);
;;;191    	}
;;;192    
;;;193    	/*Skip to LCSI or DF Name TLV*/
;;;194    	umbFcpIndex += 0x02;
        0x00002bc4:    1d38        8.      ADDS     r0,r7,#4
;;;195    
;;;196    	/*Check if incoming create file command is for DF
;;;197    	* AND
;;;198    	* Tag is DF NAME
;;;199    	*/
;;;200    	if (umbIsDf && (TAG_DF_NAME == COMMAND_DATA[umbFcpIndex]))
        0x00002bc6:    9908        ..      LDR      r1,[sp,#0x20]
        0x00002bc8:    2938        8)      CMP      r1,#0x38
        0x00002bca:    d113        ..      BNE      0x2bf4 ; _102222_createFile + 284
        0x00002bcc:    4bf0        .K      LDR      r3,[pc,#960] ; [0x2f90] = 0x2000023e
        0x00002bce:    1819        ..      ADDS     r1,r3,r0
        0x00002bd0:    7949        Iy      LDRB     r1,[r1,#5]
        0x00002bd2:    2984        .)      CMP      r1,#0x84
        0x00002bd4:    d111        ..      BNE      0x2bfa ; _102222_createFile + 290
;;;201    	{
;;;202    		DBG_FUNC("[102_222] _102222_createFile:DF Name TLV present\n");
;;;203    
;;;204    		/*points to length of DF name tlv, Indication that this is an ADF*/
;;;205    		umbAdfOffset = umbFcpIndex + 1;
        0x00002bd6:    9906        ..      LDR      r1,[sp,#0x18]
        0x00002bd8:    4308        .C      ORRS     r0,r0,r1
;;;206    
;;;207    		if ((COMMAND_DATA[umbAdfOffset] < LENGTH_MIN_AID)
        0x00002bda:    1819        ..      ADDS     r1,r3,r0
        0x00002bdc:    7949        Iy      LDRB     r1,[r1,#5]
;;;208    			||
        0x00002bde:    460a        .F      MOV      r2,r1
        0x00002be0:    3a11        .:      SUBS     r2,r2,#0x11
        0x00002be2:    b2d2        ..      UXTB     r2,r2
        0x00002be4:    0892        ..      LSRS     r2,r2,#2
        0x00002be6:    2a3c        <*      CMP      r2,#0x3c
        0x00002be8:    d800        ..      BHI      0x2bec ; _102222_createFile + 276
        0x00002bea:    e1b6        ..      B        0x2f5a ; _102222_createFile + 1154
;;;209    			(COMMAND_DATA[umbAdfOffset] > LENGTH_MAX_AID)) {
;;;210    			/*Invalid Length of DF name*/
;;;211    			DBG_ERR("[102_222] _102222_createFile: Invalid Length of DF name: 5-16 bytes only\n");
;;;212    			DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;213    			THROW(EXCEP_INCORRECT_DATAFIELD);
;;;214    		}
;;;215    
;;;216    		/*Skip to LCSI TLV*/
;;;217    		umbFcpIndex += COMMAND_DATA[umbAdfOffset] + 0x02; //Add 2 bytes of Tag and Length byte and length of 
        0x00002bec:    1879        y.      ADDS     r1,r7,r1
        0x00002bee:    1d8f        ..      ADDS     r7,r1,#6
        0x00002bf0:    9007        ..      STR      r0,[sp,#0x1c]
        0x00002bf2:    e003        ..      B        0x2bfc ; _102222_createFile + 292
        0x00002bf4:    4607        .F      MOV      r7,r0
        0x00002bf6:    4be6        .K      LDR      r3,[pc,#920] ; [0x2f90] = 0x2000023e
        0x00002bf8:    e000        ..      B        0x2bfc ; _102222_createFile + 292
        0x00002bfa:    4607        .F      MOV      r7,r0
;;;218    															//value part
;;;219    	}
;;;220    
;;;221    	DBG_FUNC("[102_222] _102222_createFile:Checking LCSI tlv\n");
;;;222    
;;;223    	/*check LCSI tag*/
;;;224    	_102222_matchValues(TAG_LCSI, COMMAND_DATA[umbFcpIndex++]);
        0x00002bfc:    b2fc        ..      UXTB     r4,r7
        0x00002bfe:    191e        ..      ADDS     r6,r3,r4
        0x00002c00:    7970        py      LDRB     r0,[r6,#5]
        0x00002c02:    288a        .(      CMP      r0,#0x8a
        0x00002c04:    d000        ..      BEQ      0x2c08 ; _102222_createFile + 304
        0x00002c06:    e1a8        ..      B        0x2f5a ; _102222_createFile + 1154
;;;225    
;;;226    	/*Check LCSI length*/
;;;227    	_102222_matchValues(LENGTH_LCSI, COMMAND_DATA[umbFcpIndex++]);
        0x00002c08:    79b0        .y      LDRB     r0,[r6,#6]
        0x00002c0a:    2801        .(      CMP      r0,#1
        0x00002c0c:    d000        ..      BEQ      0x2c10 ; _102222_createFile + 312
        0x00002c0e:    e1a4        ..      B        0x2f5a ; _102222_createFile + 1154
;;;228    
;;;229    	/*Check valid values of LCSI byte*/
;;;230    	switch (COMMAND_DATA[umbFcpIndex++]) {
        0x00002c10:    79f0        .y      LDRB     r0,[r6,#7]
        0x00002c12:    1e40        @.      SUBS     r0,r0,#1
        0x00002c14:    b2c0        ..      UXTB     r0,r0
        0x00002c16:    280f        .(      CMP      r0,#0xf
        0x00002c18:    d300        ..      BCC      0x2c1c ; _102222_createFile + 324
        0x00002c1a:    e19e        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002c1c:    49df        .I      LDR      r1,[pc,#892] ; [0x2f9c] = 0x787d
        0x00002c1e:    40c1        .@      LSRS     r1,r1,r0
        0x00002c20:    07c9        ..      LSLS     r1,r1,#31
        0x00002c22:    d100        ..      BNE      0x2c26 ; _102222_createFile + 334
        0x00002c24:    e199        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002c26:    1ce1        ..      ADDS     r1,r4,#3
        0x00002c28:    a2dd        ..      ADR      r2,{pc}+0x378 ; 0x2fa0
        0x00002c2a:    5c10        .\      LDRB     r0,[r2,r0]
        0x00002c2c:    aa0a        ..      ADD      r2,sp,#0x28
        0x00002c2e:    7090        .p      STRB     r0,[r2,#2]
;;;231    
;;;232    	case LCSI_CREATION_STATE:
;;;233    		DBG_FUNC("[102_222] _102222_createFile: File is created in Creation state\n");
;;;234    		/*If LCSI state is creation*/
;;;235    		fhFile.flState = LCSI_CREATED;
;;;236    		break;
;;;237    
;;;238    	case LCSI_INITALIZATION_STATE:
;;;239    		DBG_FUNC("[102_222] _102222_createFile: File is created in Initialization state\n");
;;;240    		/*If LCSI state is Initialization*/
;;;241    		fhFile.flState = LCSI_INIT;
;;;242    		break;
;;;243    
;;;244    	case LCSI_ACTIVATION_STATE_1:
;;;245    	case LCSI_ACTIVATION_STATE_2:
;;;246    		DBG_FUNC("[102_222] _102222_createFile: File is created in Activation state\n");
;;;247    		/*If LCSI state is Operational state - activated*/
;;;248    		fhFile.flState = LCSI_ACTIVATED;
;;;249    		break;
;;;250    
;;;251    	case LCSI_DEACTIVATION_STATE_1:
;;;252    	case LCSI_DEACTIVATION_STATE_2:
;;;253    		DBG_FUNC("[102_222] _102222_createFile: File is created in Deactivation state\n");
;;;254    		/*If LCSI state is Operational state - deactivated*/
;;;255    		fhFile.flState = LCSI_DEACTIVATED;
;;;256    		break;
;;;257    
;;;258    	case LCSI_TERMINATION_STATE_1:
;;;259    	case LCSI_TERMINATION_STATE_2:
;;;260    	case LCSI_TERMINATION_STATE_3:
;;;261    	case LCSI_TERMINATION_STATE_4:
;;;262    		DBG_FUNC("[102_222] _102222_createFile: File is created in Termination state\n");
;;;263    		/*If LCSI state is termination*/
;;;264    		fhFile.flState = LCSI_TERMINATED;
;;;265    		break;
;;;266    
;;;267    	default:
;;;268    		DBG_ERR("[102_222] _102222_createFile: Invalid LCSI value\n");
;;;269    		THROW(EXCEP_INCORRECT_DATAFIELD); // Invalid LCSI value
;;;270    	}
;;;271    
;;;272    	DBG_FUNC("[102_222] _102222_createFile:Checking Security Attribute TLV, must be Referenced\n");
;;;273    
;;;274    	/*Check Referenced Security Attribute '8B'. This is only supported Security Attribute*/
;;;275    	_102222_matchValues(TAG_SEC_ATTR_REFERENCED, COMMAND_DATA[umbFcpIndex++]);
        0x00002c30:    1858        X.      ADDS     r0,r3,r1
        0x00002c32:    7940        @y      LDRB     r0,[r0,#5]
        0x00002c34:    288b        .(      CMP      r0,#0x8b
        0x00002c36:    d000        ..      BEQ      0x2c3a ; _102222_createFile + 354
        0x00002c38:    e18f        ..      B        0x2f5a ; _102222_createFile + 1154
;;;276    
;;;277    	/*Check Length of Security Attribute*/
;;;278    	_102222_matchValues(LENGTH_SEC_ATTR_REFERENCED, COMMAND_DATA[umbFcpIndex++]);
        0x00002c3a:    7a70        pz      LDRB     r0,[r6,#9]
        0x00002c3c:    2803        .(      CMP      r0,#3
        0x00002c3e:    d000        ..      BEQ      0x2c42 ; _102222_createFile + 362
        0x00002c40:    e18b        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002c42:    1d78        x.      ADDS     r0,r7,#5
;;;279    
;;;280    	/*Save EFarr file ID*/
;;;281    	fhFile.udbEFarrId = mm_makeUdiByte(COMMAND_DATA, umbFcpIndex);
        0x00002c44:    b2c1        ..      UXTB     r1,r0
        0x00002c46:    4628        (F      MOV      r0,r5
        0x00002c48:    f7fefaac    ....    BL       mm_makeUdiByte ; 0x11a4
        0x00002c4c:    a90a        ..      ADD      r1,sp,#0x28
        0x00002c4e:    8148        H.      STRH     r0,[r1,#0xa]
;;;282    	umbFcpIndex += LENGTH_FILE_ID;		//Skip to EFarr record
        0x00002c50:    1960        `.      ADDS     r0,r4,r5
;;;283    
;;;284    	/*Save EFarr record*/
;;;285    	fhFile.umbEFarrRec = COMMAND_DATA[umbFcpIndex++];
        0x00002c52:    79c2        .y      LDRB     r2,[r0,#7]
        0x00002c54:    700a        .p      STRB     r2,[r1,#0]
        0x00002c56:    7a00        .z      LDRB     r0,[r0,#8]
;;;286    	
;;;287    	/*Check if its DF*/
;;;288    	if (umbIsDf){
        0x00002c58:    9908        ..      LDR      r1,[sp,#0x20]
        0x00002c5a:    2938        8)      CMP      r1,#0x38
        0x00002c5c:    d13f        ?.      BNE      0x2cde ; _102222_createFile + 518
        0x00002c5e:    2881        .(      CMP      r0,#0x81
        0x00002c60:    d000        ..      BEQ      0x2c64 ; _102222_createFile + 396
        0x00002c62:    e17a        z.      B        0x2f5a ; _102222_createFile + 1154
;;;289    
;;;290    		DBG_FUNC("[102_222] _102222_createFile: Checking DF specific TLVs\n");
;;;291    		DBG_FUNC("[102_222] _102222_createFile: Checking Total File size TLV\n");
;;;292    		/*Check Total File Size tag*/
;;;293    		_102222_matchValues(TAG_TOTAL_FILE_SIZE, COMMAND_DATA[umbFcpIndex++]);
;;;294    
;;;295    		/*Check Total Fil Size length*/
;;;296    		_102222_matchValues(LENGTH_TOTAL_FILE_SIZE, COMMAND_DATA[umbFcpIndex++]);
        0x00002c64:    7bb0        .{      LDRB     r0,[r6,#0xe]
        0x00002c66:    2802        .(      CMP      r0,#2
        0x00002c68:    d000        ..      BEQ      0x2c6c ; _102222_createFile + 404
        0x00002c6a:    e176        v.      B        0x2f5a ; _102222_createFile + 1154
;;;297    
;;;298    		/*Value of Total File size will be ignored, as card supports Dynamic memory allocation for UICC*/
;;;299    		umbFcpIndex += LENGTH_TOTAL_FILE_SIZE;
;;;300    
;;;301    		DBG_FUNC("[102_222] _102222_createFile: Checking Pin Status Templated DO TLV\n");
;;;302    
;;;303    		/*Check Pin Status template DO tag*/
;;;304    		_102222_matchValues(TAG_PIN_STATUS_TEMP_DO, COMMAND_DATA[umbFcpIndex++]);
        0x00002c6c:    7c70        p|      LDRB     r0,[r6,#0x11]
        0x00002c6e:    28c6        .(      CMP      r0,#0xc6
        0x00002c70:    d000        ..      BEQ      0x2c74 ; _102222_createFile + 412
        0x00002c72:    e172        r.      B        0x2f5a ; _102222_createFile + 1154
;;;305    
;;;306    		/*get index of next TLV after PSTDO*/
;;;307    		umbTemp = umbFcpIndex + COMMAND_DATA[umbFcpIndex] + 1;
        0x00002c74:    7cb0        .|      LDRB     r0,[r6,#0x12]
        0x00002c76:    370e        .7      ADDS     r7,r7,#0xe
        0x00002c78:    1838        8.      ADDS     r0,r7,r0
        0x00002c7a:    b2c4        ..      UXTB     r4,r0
        0x00002c7c:    ad0a        ..      ADD      r5,sp,#0x28
        0x00002c7e:    b2f8        ..      UXTB     r0,r7
;;;308    		
;;;309    		umbFcpIndex++;
;;;310    		
;;;311    		DBG_FUNC("[102_222] _102222_createFile: Parsing each tag of Pin Status Templated DO TLV\n");
;;;312    
;;;313    		/*Traverse each TLV withing PSTDO*/
;;;314    		while (umbFcpIndex < umbTemp)
        0x00002c80:    42a0        .B      CMP      r0,r4
        0x00002c82:    d300        ..      BCC      0x2c86 ; _102222_createFile + 430
        0x00002c84:    e0d9        ..      B        0x2e3a ; _102222_createFile + 866
        0x00002c86:    3510        .5      ADDS     r5,r5,#0x10
        0x00002c88:    b2f8        ..      UXTB     r0,r7
        0x00002c8a:    4ac1        .J      LDR      r2,[pc,#772] ; [0x2f90] = 0x2000023e
;;;315    		{
;;;316    			/*Check Usage Qualifier tag*/
;;;317    			if (TAG_USAGE_QUALIFIER == COMMAND_DATA[umbFcpIndex])
        0x00002c8c:    1811        ..      ADDS     r1,r2,r0
        0x00002c8e:    7948        Hy      LDRB     r0,[r1,#5]
        0x00002c90:    2895        .(      CMP      r0,#0x95
        0x00002c92:    d107        ..      BNE      0x2ca4 ; _102222_createFile + 460
;;;318    			{
;;;319    				DBG_FUNC("[102_222] _102222_createFile: Usage Qualifier TLV present corresponding to following Key reference\n");
;;;320    
;;;321    				/*Check Length of UQ*/
;;;322    				_102222_matchValues(LENGTH_USAGE_QUALIFIER, COMMAND_DATA[umbFcpIndex+1]);
        0x00002c94:    7988        .y      LDRB     r0,[r1,#6]
        0x00002c96:    2801        .(      CMP      r0,#1
        0x00002c98:    d000        ..      BEQ      0x2c9c ; _102222_createFile + 452
        0x00002c9a:    e15e        ^.      B        0x2f5a ; _102222_createFile + 1154
;;;323    
;;;324    				/*Ignore Usage Quailifier byte, Right now we dont have any use case
;;;325    				* So we are ignoring its value
;;;326    				*/
;;;327    				/*Skip to Key Reference TLV*/
;;;328    				umbFcpIndex += 0x03; //3 = 1(Tag) + 1(length) + 1(value)
        0x00002c9c:    1cff        ..      ADDS     r7,r7,#3
;;;329    			}
;;;330    
;;;331    			DBG_FUNC("[102_222] _102222_createFile: Checking Key reference TLV\n");
;;;332    
;;;333    			/*Check Key Reference Tag*/
;;;334    			_102222_matchValues(TAG_KEY_REFERENCE, COMMAND_DATA[umbFcpIndex++]);
        0x00002c9e:    b2f8        ..      UXTB     r0,r7
        0x00002ca0:    1810        ..      ADDS     r0,r2,r0
        0x00002ca2:    7940        @y      LDRB     r0,[r0,#5]
        0x00002ca4:    2883        .(      CMP      r0,#0x83
        0x00002ca6:    d000        ..      BEQ      0x2caa ; _102222_createFile + 466
        0x00002ca8:    e157        W.      B        0x2f5a ; _102222_createFile + 1154
        0x00002caa:    1c78        x.      ADDS     r0,r7,#1
;;;335    
;;;336    			/*Check Key Reference Length*/
;;;337    			_102222_matchValues(LENGTH_KEY_REFERENCE, COMMAND_DATA[umbFcpIndex++]);
        0x00002cac:    b2c0        ..      UXTB     r0,r0
        0x00002cae:    1810        ..      ADDS     r0,r2,r0
        0x00002cb0:    7940        @y      LDRB     r0,[r0,#5]
        0x00002cb2:    2801        .(      CMP      r0,#1
        0x00002cb4:    d000        ..      BEQ      0x2cb8 ; _102222_createFile + 480
        0x00002cb6:    e150        P.      B        0x2f5a ; _102222_createFile + 1154
        0x00002cb8:    1cb8        ..      ADDS     r0,r7,#2
;;;338    
;;;339    			/*get key reference*/
;;;340    			umbKey = COMMAND_DATA[umbFcpIndex++];
        0x00002cba:    b2c0        ..      UXTB     r0,r0
        0x00002cbc:    1810        ..      ADDS     r0,r2,r0
        0x00002cbe:    7946        Fy      LDRB     r6,[r0,#5]
        0x00002cc0:    4630        0F      MOV      r0,r6
        0x00002cc2:    f001fa2b    ..+.    BL       _7816_4_isInvalidReferenceData ; 0x411c
        0x00002cc6:    2800        .(      CMP      r0,#0
        0x00002cc8:    d000        ..      BEQ      0x2ccc ; _102222_createFile + 500
        0x00002cca:    e146        F.      B        0x2f5a ; _102222_createFile + 1154
        0x00002ccc:    4628        (F      MOV      r0,r5
        0x00002cce:    4631        1F      MOV      r1,r6
        0x00002cd0:    f001fa38    ..8.    BL       _7816_4_setKeyRef ; 0x4144
        0x00002cd4:    1cff        ..      ADDS     r7,r7,#3
        0x00002cd6:    b2f8        ..      UXTB     r0,r7
        0x00002cd8:    42a0        .B      CMP      r0,r4
        0x00002cda:    d3d5        ..      BCC      0x2c88 ; _102222_createFile + 432
        0x00002cdc:    e0ad        ..      B        0x2e3a ; _102222_createFile + 866
        0x00002cde:    2880        .(      CMP      r0,#0x80
        0x00002ce0:    4aab        .J      LDR      r2,[pc,#684] ; [0x2f90] = 0x2000023e
        0x00002ce2:    d000        ..      BEQ      0x2ce6 ; _102222_createFile + 526
        0x00002ce4:    e139        9.      B        0x2f5a ; _102222_createFile + 1154
;;;341    
;;;342    			if (_7816_4_isInvalidReferenceData(umbKey)) {
;;;343    
;;;344    				/*key references are Invalid*/
;;;345    				DBG_ERR("[102_222] _102222_createFile: Invalid Key Reference %1\n", umbKey);
;;;346    				DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;347    				THROW(EXCEP_INCORRECT_DATAFIELD);
;;;348    			}
;;;349    
;;;350    			/*Set corresponding bit*/
;;;351    			_7816_4_setKeyRef(&(fhFile.FileSpecific.DF.pdPstdo), umbKey);
;;;352    		}
;;;353    	}// End of DF handling
;;;354    	else { //Its EF!!
;;;355    
;;;356    		DBG_FUNC("[102_222] _102222_createFile: Checking EF specific TLVs\n");
;;;357    		DBG_FUNC("[102_222] _102222_createFile: Checking File size TLV\n");
;;;358    
;;;359    		/*Check File Size tag*/
;;;360    		_102222_matchValues(TAG_FILE_SIZE, COMMAND_DATA[umbFcpIndex++]);
;;;361    
;;;362    		/*Read file Size length*/
;;;363    		umbTemp = COMMAND_DATA[umbFcpIndex++];
        0x00002ce6:    7bb1        .{      LDRB     r1,[r6,#0xe]
        0x00002ce8:    4638        8F      MOV      r0,r7
        0x00002cea:    300a        .0      ADDS     r0,r0,#0xa
;;;364    
;;;365    		/*Reset file size*/
;;;366    		udbFileSize = 0x00; 
;;;367    
;;;368    		/*If file size comes in 1 byte*/
;;;369    		if (umbTemp == 1)
        0x00002cec:    2902        .)      CMP      r1,#2
        0x00002cee:    d007        ..      BEQ      0x2d00 ; _102222_createFile + 552
        0x00002cf0:    2901        .)      CMP      r1,#1
        0x00002cf2:    d000        ..      BEQ      0x2cf6 ; _102222_createFile + 542
        0x00002cf4:    e131        1.      B        0x2f5a ; _102222_createFile + 1154
;;;370    		{
;;;371    			/*store File size*/
;;;372    			udbFileSize = COMMAND_DATA[umbFcpIndex++];
        0x00002cf6:    b2c0        ..      UXTB     r0,r0
        0x00002cf8:    1810        ..      ADDS     r0,r2,r0
        0x00002cfa:    7946        Fy      LDRB     r6,[r0,#5]
        0x00002cfc:    370b        .7      ADDS     r7,r7,#0xb
        0x00002cfe:    e006        ..      B        0x2d0e ; _102222_createFile + 566
;;;373    		}
;;;374    		else if (umbTemp == 2)
;;;375    		{
;;;376    			/*store File size*/
;;;377    			udbFileSize = ((uDiByte)(SHIFT_LEFT_BY_N_BITS(COMMAND_DATA[umbFcpIndex], 0x08)) | COMMAND_DATA[umbFcpIndex + 1]);
        0x00002d00:    b2c0        ..      UXTB     r0,r0
        0x00002d02:    1810        ..      ADDS     r0,r2,r0
        0x00002d04:    7981        .y      LDRB     r1,[r0,#6]
        0x00002d06:    7940        @y      LDRB     r0,[r0,#5]
        0x00002d08:    0200        ..      LSLS     r0,r0,#8
        0x00002d0a:    1846        F.      ADDS     r6,r0,r1
;;;378    
;;;379    			/*skip to next TLV*/
;;;380    			umbFcpIndex += 2;
        0x00002d0c:    370c        .7      ADDS     r7,r7,#0xc
;;;381    		}
;;;382    
;;;383    		/*Check if File size is 0*/
;;;384    		if(0 == udbFileSize)
        0x00002d0e:    0430        0.      LSLS     r0,r6,#16
        0x00002d10:    d100        ..      BNE      0x2d14 ; _102222_createFile + 572
        0x00002d12:    e122        ".      B        0x2f5a ; _102222_createFile + 1154
        0x00002d14:    2087        .       MOVS     r0,#0x87
        0x00002d16:    9905        ..      LDR      r1,[sp,#0x14]
;;;385    		{
;;;386    			/*Here control will come due two reasons
;;;387    			* 1. if invalid length of file size TLV i.e current supports not more than 2 bytes
;;;388    			* 2. if genuinely received file size value is 0
;;;389    			*/
;;;390    			DBG_ERR("[102_222] _102222_createFile:  Invalid file size %2\n", udbFileSize);
;;;391    			DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;392    			THROW(EXCEP_INCORRECT_DATAFIELD);
;;;393    		}
;;;394    
;;;395    		/*Check type of EF*/
;;;396    		if (IS(TF, umbFileDesc)) {
        0x00002d18:    4001        .@      ANDS     r1,r1,r0
        0x00002d1a:    2901        .)      CMP      r1,#1
        0x00002d1c:    d102        ..      BNE      0x2d24 ; _102222_createFile + 588
        0x00002d1e:    a80a        ..      ADD      r0,sp,#0x28
;;;397    			
;;;398    			DBG_FUNC("[102_222] _102222_createFile: Transparent File size '%2' \n", udbFileSize);
;;;399    
;;;400    			/*saves file size*/
;;;401    			fhFile.FileSpecific.EF.fileData.udbFileSize = udbFileSize;
        0x00002d20:    81c6        ..      STRH     r6,[r0,#0xe]
        0x00002d22:    e012        ..      B        0x2d4a ; _102222_createFile + 626
        0x00002d24:    a80a        ..      ADD      r0,sp,#0x28
;;;402    		}
;;;403    		/*if control here it means file is record structured
;;;404    		* Now check if its divisible by record length */
;;;405    		else if (
;;;406    					(0x00 != fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize)
        0x00002d26:    7c04        .|      LDRB     r4,[r0,#0x10]
;;;407    					&&
        0x00002d28:    2c00        .,      CMP      r4,#0
        0x00002d2a:    d100        ..      BNE      0x2d2e ; _102222_createFile + 598
        0x00002d2c:    e115        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002d2e:    b2b0        ..      UXTH     r0,r6
        0x00002d30:    b2a1        ..      UXTH     r1,r4
;;;408    					(0x00 == (udbFileSize % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize))
;;;409    				) { 
;;;410    
;;;411    			/*Save record nos.*/
;;;412    			fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec = (uMonoByte)(udbFileSize / fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
        0x00002d32:    f004ff11    ....    BL       __aeabi_uidiv ; 0x7b58
        0x00002d36:    4344        DC      MULS     r4,r0,r4
        0x00002d38:    1b31        1.      SUBS     r1,r6,r4
        0x00002d3a:    0409        ..      LSLS     r1,r1,#16
        0x00002d3c:    d000        ..      BEQ      0x2d40 ; _102222_createFile + 616
        0x00002d3e:    e10c        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002d40:    a90a        ..      ADD      r1,sp,#0x28
        0x00002d42:    9a06        ..      LDR      r2,[sp,#0x18]
        0x00002d44:    738a        .s      STRB     r2,[r1,#0xe]
        0x00002d46:    73c8        .s      STRB     r0,[r1,#0xf]
        0x00002d48:    4a91        .J      LDR      r2,[pc,#580] ; [0x2f90] = 0x2000023e
;;;413    
;;;414    			/*It stores last updated record, which is useful for cyclic file
;;;415    			* For linear fixed file, records are fixed unlike Cyclic file where records depend upon last updated record
;;;416    			*/
;;;417    			fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = RECORD_FIRST;
;;;418    
;;;419    			DBG_FUNC("[102_222] _102222_createFile: Record sturcture file with Record length: '%1' No. of records '%1' \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize, fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;420    
;;;421    		}
;;;422    		else
;;;423    		{
;;;424    			/*Either Record length is 0 or File size is not divisible by record length*/
;;;425    			/*Incorrect Data field*/
;;;426    			DBG_ERR("[102_222] _102222_createFile: Either Record length is 0 or File size is not divisible by record length '%1' File size '%2'\n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize, udbFileSize);
;;;427    			DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;428    			THROW(EXCEP_INCORRECT_DATAFIELD);
;;;429    		}
;;;430    
;;;431    		DBG_FUNC("[102_222] _102222_createFile: Checking Short File Identifier TLV\n");
;;;432    
;;;433    		/*Check SFI tag*/
;;;434    		if (TAG_SFI == COMMAND_DATA[umbFcpIndex]) { // SFI tag is present
        0x00002d4a:    b2f8        ..      UXTB     r0,r7
        0x00002d4c:    1810        ..      ADDS     r0,r2,r0
        0x00002d4e:    7941        Ay      LDRB     r1,[r0,#5]
        0x00002d50:    2988        .)      CMP      r1,#0x88
        0x00002d52:    d113        ..      BNE      0x2d7c ; _102222_createFile + 676
;;;435    
;;;436    			DBG_FUNC("[102_222] _102222_createFile:SFI TLV present \n");
;;;437    
;;;438    			/*Get length*/
;;;439    			umbTemp = COMMAND_DATA[umbFcpIndex + 0x01];
        0x00002d54:    7981        .y      LDRB     r1,[r0,#6]
;;;440    
;;;441    			/*Skip to value*/
;;;442    			umbFcpIndex += 0x02;
        0x00002d56:    1cb8        ..      ADDS     r0,r7,#2
;;;443    
;;;444    			/*Get length*/
;;;445    			if (LENGTH_SFI == umbTemp){ // SFI value is present 
        0x00002d58:    2900        .)      CMP      r1,#0
        0x00002d5a:    d02d        -.      BEQ      0x2db8 ; _102222_createFile + 736
        0x00002d5c:    2901        .)      CMP      r1,#1
        0x00002d5e:    d000        ..      BEQ      0x2d62 ; _102222_createFile + 650
        0x00002d60:    e0fb        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002d62:    aa0a        ..      ADD      r2,sp,#0x28
;;;446    
;;;447    				DBG_FUNC("[102_222] _102222_createFile:SFI value present \n");
;;;448    
;;;449    				/*b8-b4 indicates SFI, b3-b1=000*/
;;;450    				fhFile.FileSpecific.EF.umbSfi = SHIFT_RIGHT_BY_N_BITS( COMMAND_DATA[umbFcpIndex++], 0x03);
        0x00002d64:    7c91        .|      LDRB     r1,[r2,#0x12]
        0x00002d66:    231f        .#      MOVS     r3,#0x1f
        0x00002d68:    4399        .C      BICS     r1,r1,r3
        0x00002d6a:    b2c0        ..      UXTB     r0,r0
        0x00002d6c:    4b88        .K      LDR      r3,[pc,#544] ; [0x2f90] = 0x2000023e
        0x00002d6e:    1818        ..      ADDS     r0,r3,r0
        0x00002d70:    7940        @y      LDRB     r0,[r0,#5]
        0x00002d72:    08c0        ..      LSRS     r0,r0,#3
        0x00002d74:    1809        ..      ADDS     r1,r1,r0
        0x00002d76:    7491        .t      STRB     r1,[r2,#0x12]
        0x00002d78:    1cff        ..      ADDS     r7,r7,#3
        0x00002d7a:    e007        ..      B        0x2d8c ; _102222_createFile + 692
        0x00002d7c:    a80a        ..      ADD      r0,sp,#0x28
;;;451    			}
;;;452    			else if (0x00 == umbTemp) { // SFI value is missing
;;;453    
;;;454    				DBG_FUNC("[102_222] _102222_createFile:SFI value empty, hence SFI is not supported for this file \n");
;;;455    				/*SFI is not supported*/
;;;456    				umbTemp = SFI_NOT_SUPPORTED;
;;;457    			}
;;;458    			else {
;;;459    				/*Invalid length of SFI tag*/
;;;460    				DBG_ERR("[102_222] _102222_createFile:  Invalid SFI length %1\n", umbTemp);
;;;461    				DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;462    				THROW(EXCEP_INCORRECT_DATAFIELD);
;;;463    			}
;;;464    		}
;;;465    		else { // SFID tag is not present
;;;466    
;;;467    			/*lower 5 bits of file id is SFID*/
;;;468    			/*Save it exactly in same way as done if SFID is present*/
;;;469    			/**/
;;;470    			fhFile.FileSpecific.EF.umbSfi = (uMonoByte)(fhFile.udbFileId);
        0x00002d7e:    7a01        .z      LDRB     r1,[r0,#8]
        0x00002d80:    221f        ."      MOVS     r2,#0x1f
        0x00002d82:    4011        .@      ANDS     r1,r1,r2
        0x00002d84:    7c83        .|      LDRB     r3,[r0,#0x12]
        0x00002d86:    4393        .C      BICS     r3,r3,r2
        0x00002d88:    1859        Y.      ADDS     r1,r3,r1
        0x00002d8a:    7481        .t      STRB     r1,[r0,#0x12]
        0x00002d8c:    201f        .       MOVS     r0,#0x1f
;;;471    
;;;472    			umbTemp = ~SFI_NOT_SUPPORTED; // just to ensure that below condition for checking existence of SFI under current df must be called
;;;473    
;;;474    			DBG_FUNC("[102_222] _102222_createFile: Last 5 bits of File ID act as SFI\n");
;;;475    		}
;;;476    
;;;477    		/*Check if SFID exists under current DF previously*/
;;;478    		if (SFI_NOT_SUPPORTED != umbTemp) {
;;;479    
;;;480    			/*Check invalid values of SFI
;;;481    			* Valid Range of SFI: '01' to '1E'
;;;482    			*/
;;;483    			if ((0x00 == fhFile.FileSpecific.EF.umbSfi)
;;;484    				||
        0x00002d8e:    4008        .@      ANDS     r0,r0,r1
        0x00002d90:    281f        .(      CMP      r0,#0x1f
        0x00002d92:    d100        ..      BNE      0x2d96 ; _102222_createFile + 702
        0x00002d94:    e0e1        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002d96:    2800        .(      CMP      r0,#0
        0x00002d98:    d100        ..      BNE      0x2d9c ; _102222_createFile + 708
        0x00002d9a:    e0de        ..      B        0x2f5a ; _102222_createFile + 1154
;;;485    				(0x1F == fhFile.FileSpecific.EF.umbSfi)) {
;;;486    
;;;487    				/*Invalid Params in datafield*/
;;;488    				DBG_ERR("[102_222] _102222_createFile:  Invalid SFI i.e. '00'\n");
;;;489    				DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;490    				THROW(EXCEP_INCORRECT_DATAFIELD);
;;;491    			}
;;;492    
;;;493    			DBG_FUNC("[102_222] _102222_createFile: Checking if SFID already exists \n");
;;;494    
;;;495    			/*Check if SFID exists*/
;;;496    			_7816_4_ifFileExists(fhFile.FileSpecific.EF.umbSfi, pccCurrentChannel->fhaCurrentDf, MODE_FIND_SFID, &fhaFile);
        0x00002d9c:    4984        .I      LDR      r1,[pc,#528] ; [0x2fb0] = 0x200006e8
        0x00002d9e:    6809        .h      LDR      r1,[r1,#0]
        0x00002da0:    88c9        ..      LDRH     r1,[r1,#6]
        0x00002da2:    2201        ."      MOVS     r2,#1
        0x00002da4:    ad09        ..      ADD      r5,sp,#0x24
        0x00002da6:    462b        +F      MOV      r3,r5
        0x00002da8:    f000f9c4    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;497    
;;;498    			if (NO_FILE_PRESENT != fhaFile) {
        0x00002dac:    8828        (.      LDRH     r0,[r5,#0]
        0x00002dae:    2800        .(      CMP      r0,#0
        0x00002db0:    d008        ..      BEQ      0x2dc4 ; _102222_createFile + 748
        0x00002db2:    e0da        ..      B        0x2f6a ; _102222_createFile + 1170
    $d.1
        0x00002db4:    2000023e    >..     DCD    536871486
    $t.2
        0x00002db8:    a90a        ..      ADD      r1,sp,#0x28
;;;499    				/*SFI alread exists*/
;;;500    				DBG_FUNC("[102_222] _102222_createFile: SFID already exists \n");
;;;501    				THROW(EXCEP_FILE_ID_ALREADY_EXISTS);
;;;502    			}
;;;503    
;;;504    		}
;;;505    		else {
;;;506    			/*SFI is not supported for current EF */
;;;507    			fhFile.FileSpecific.EF.umbSfi = SFI_NOT_SUPPORTED;
        0x00002dba:    7c8a        .|      LDRB     r2,[r1,#0x12]
        0x00002dbc:    231f        .#      MOVS     r3,#0x1f
        0x00002dbe:    4313        .C      ORRS     r3,r3,r2
        0x00002dc0:    748b        .t      STRB     r3,[r1,#0x12]
        0x00002dc2:    4607        .F      MOV      r7,r0
;;;508    		}
;;;509    
;;;510    		/*Check for Prop. TLV A5*/
;;;511    		if (TAG_PROP_TLV == COMMAND_DATA[umbFcpIndex]){
        0x00002dc4:    b2f8        ..      UXTB     r0,r7
        0x00002dc6:    4b72        rK      LDR      r3,[pc,#456] ; [0x2f90] = 0x2000023e
        0x00002dc8:    181a        ..      ADDS     r2,r3,r0
        0x00002dca:    7950        Py      LDRB     r0,[r2,#5]
        0x00002dcc:    28a5        .(      CMP      r0,#0xa5
        0x00002dce:    9603        ..      STR      r6,[sp,#0xc]
        0x00002dd0:    d133        3.      BNE      0x2e3a ; _102222_createFile + 866
;;;512    
;;;513    			DBG_FUNC("[102_222] _102222_createFile: Prop. TLV 'A5' present\n");
;;;514    
;;;515    			/*Skip to length of the TLV*/
;;;516    			umbFcpIndex++;
;;;517    
;;;518    			/*check length
;;;519    			* Assuming only C0 TLV is supported in OS
;;;520    			*/
;;;521    			_102222_matchValues(LENGTH_PROP_TLV, COMMAND_DATA[umbFcpIndex++]);
        0x00002dd2:    7990        .y      LDRB     r0,[r2,#6]
        0x00002dd4:    2803        .(      CMP      r0,#3
        0x00002dd6:    d000        ..      BEQ      0x2dda ; _102222_createFile + 770
        0x00002dd8:    e0bf        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002dda:    1cb8        ..      ADDS     r0,r7,#2
;;;522    			/*Check for special file TLV C0 */
;;;523    			if ( TAG_SPECIAL_FILE_INFO==COMMAND_DATA[umbFcpIndex]) {
        0x00002ddc:    b2c1        ..      UXTB     r1,r0
        0x00002dde:    1859        Y.      ADDS     r1,r3,r1
        0x00002de0:    7949        Iy      LDRB     r1,[r1,#5]
        0x00002de2:    29c0        .)      CMP      r1,#0xc0
        0x00002de4:    d119        ..      BNE      0x2e1a ; _102222_createFile + 834
;;;524    
;;;525    
;;;526    				DBG_FUNC("[102_222] _102222_createFile: Checking Special File Info. TLV \n");
;;;527    
;;;528    				/*Check Special File Info Tag*/
;;;529    				_102222_matchValues(TAG_SPECIAL_FILE_INFO, COMMAND_DATA[umbFcpIndex++]);
;;;530    
;;;531    				/*Check Special File Info Length */
;;;532    				_102222_matchValues(LENGTH_SPECIAL_FILE_INFO, COMMAND_DATA[umbFcpIndex++]);
        0x00002de6:    7a10        .z      LDRB     r0,[r2,#8]
        0x00002de8:    2801        .(      CMP      r0,#1
        0x00002dea:    d000        ..      BEQ      0x2dee ; _102222_createFile + 790
        0x00002dec:    e0b5        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002dee:    1d38        8.      ADDS     r0,r7,#4
;;;533    
;;;534    				/*Check if value is valid one*/
;;;535    				if (COMMAND_DATA[umbFcpIndex] & MASK_SPECIAL_FILE_INFO_RFU_BITS)
        0x00002df0:    b2c1        ..      UXTB     r1,r0
        0x00002df2:    1859        Y.      ADDS     r1,r3,r1
        0x00002df4:    7949        Iy      LDRB     r1,[r1,#5]
        0x00002df6:    068a        ..      LSLS     r2,r1,#26
        0x00002df8:    d000        ..      BEQ      0x2dfc ; _102222_createFile + 804
        0x00002dfa:    e0ae        ..      B        0x2f5a ; _102222_createFile + 1154
;;;536    				{
;;;537    					/*Invalid datafield incorrect error*/
;;;538    					DBG_ERR("[102_222] _102222_createFile:  Invalid Special file infor '%1'\n", COMMAND_DATA[umbFcpIndex]);
;;;539    					DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;540    					THROW(EXCEP_INCORRECT_DATAFIELD);
;;;541    				}
;;;542    
;;;543    				/*check high update activity*/
;;;544    				if (IS_HIGH_UPDATE(COMMAND_DATA[umbFcpIndex])) {
        0x00002dfc:    060a        ..      LSLS     r2,r1,#24
        0x00002dfe:    d504        ..      BPL      0x2e0a ; _102222_createFile + 818
        0x00002e00:    aa0a        ..      ADD      r2,sp,#0x28
;;;545    
;;;546    					DBG_FUNC("[102_222] _102222_createFile: Given File is highly updatable file \n");
;;;547    					/*set high update flag*/
;;;548    					fhFile.FileSpecific.EF.umbUpdAct = HIGHLY_UPDATE_FILE;
        0x00002e02:    7c93        .|      LDRB     r3,[r2,#0x12]
        0x00002e04:    2420         $      MOVS     r4,#0x20
        0x00002e06:    431c        .C      ORRS     r4,r4,r3
        0x00002e08:    7494        .t      STRB     r4,[r2,#0x12]
;;;549    				}
;;;550    
;;;551    				/*check Read/Update when deactivate*/
;;;552    				if (IS_FILE_RW_WHEN_DEACTIVATE(COMMAND_DATA[umbFcpIndex])) {
        0x00002e0a:    064a        J.      LSLS     r2,r1,#25
        0x00002e0c:    d515        ..      BPL      0x2e3a ; _102222_createFile + 866
        0x00002e0e:    aa0a        ..      ADD      r2,sp,#0x28
;;;553    
;;;554    					DBG_FUNC("[102_222] _102222_createFile: File can be read/update when deactivated \n");
;;;555    					/*Set Read/Update when deactivated flag*/
;;;556    					fhFile.FileSpecific.EF.umbReadUpdateWhenDeactivated = READABLE_UPDATABLE_WHEN_DEACTIVATED;
        0x00002e10:    7c93        .|      LDRB     r3,[r2,#0x12]
        0x00002e12:    2440        @$      MOVS     r4,#0x40
        0x00002e14:    431c        .C      ORRS     r4,r4,r3
        0x00002e16:    7494        .t      STRB     r4,[r2,#0x12]
        0x00002e18:    4b5d        ]K      LDR      r3,[pc,#372] ; [0x2f90] = 0x2000023e
;;;557    				}
;;;558    
;;;559    			}
;;;560    			/*Check for OTA FILE TLV CC*/
;;;561    			if (TAG_OTA_FILE_INFO == COMMAND_DATA[umbFcpIndex]) {
        0x00002e1a:    29cc        .)      CMP      r1,#0xcc
        0x00002e1c:    d10d        ..      BNE      0x2e3a ; _102222_createFile + 866
        0x00002e1e:    b2c0        ..      UXTB     r0,r0
;;;562    				/*This is the last TLV in CREATE command and other TLVs occurring after this shall be ignored*/
;;;563    				
;;;564    
;;;565    				/*Check OTA File Info Tag*/
;;;566    				_102222_matchValues(TAG_OTA_FILE_INFO, COMMAND_DATA[umbFcpIndex++]);
        0x00002e20:    18c0        ..      ADDS     r0,r0,r3
;;;567    
;;;568    				/*Check OTA File Info Length */
;;;569    				_102222_matchValues(LENGTH_OTA_FILE_INFO, COMMAND_DATA[umbFcpIndex++]);
        0x00002e22:    7981        .y      LDRB     r1,[r0,#6]
        0x00002e24:    2901        .)      CMP      r1,#1
        0x00002e26:    d000        ..      BEQ      0x2e2a ; _102222_createFile + 850
        0x00002e28:    e097        ..      B        0x2f5a ; _102222_createFile + 1154
        0x00002e2a:    a90a        ..      ADD      r1,sp,#0x28
        0x00002e2c:    7c8a        .|      LDRB     r2,[r1,#0x12]
        0x00002e2e:    237f        .#      MOVS     r3,#0x7f
;;;570    				     
;;;571    				
;;;572    				/*check OTA updatable */
;;;573    				if (IS_FILE_OTA_UPDATABLE(COMMAND_DATA[umbFcpIndex])) {
        0x00002e30:    4013        .@      ANDS     r3,r3,r2
        0x00002e32:    79c0        .y      LDRB     r0,[r0,#7]
        0x00002e34:    01c0        ..      LSLS     r0,r0,#7
        0x00002e36:    1818        ..      ADDS     r0,r3,r0
        0x00002e38:    7488        .t      STRB     r0,[r1,#0x12]
;;;574    
;;;575    					DBG_FUNC("[102_222] _102222_createFile: OTA can be updatable  \n");
;;;576    					/*Set OTA updatable  flag*/
;;;577    					fhFile.FileSpecific.EF.umbOtaUpdateable = OTA_UPDATABLE;
;;;578    				}
;;;579    				else {
;;;580    					DBG_FUNC("[102_222] _102222_createFile: OTA can Not be updatable  \n");
;;;581    					/*Set OTA NOT updatable  flag*/
;;;582    					fhFile.FileSpecific.EF.umbOtaUpdateable = OTA_NOT_UPDATABLE;
;;;583    				}
;;;584    			}
;;;585    
;;;586    
;;;587    		}// End of Prop. TLV handling
;;;588    
;;;589    	}// End of EF
;;;590    
;;;591    	/*Save Current DF inside parent of incoming file creation header*/
;;;592    	fhFile.fhaParent = pccCurrentChannel->fhaCurrentDf;
        0x00002e3a:    485d        ]H      LDR      r0,[pc,#372] ; [0x2fb0] = 0x200006e8
        0x00002e3c:    6800        .h      LDR      r0,[r0,#0]
        0x00002e3e:    88c1        ..      LDRH     r1,[r0,#6]
        0x00002e40:    a80a        ..      ADD      r0,sp,#0x28
        0x00002e42:    8081        ..      STRH     r1,[r0,#4]
;;;593    
;;;594    	DBG_FUNC("[102_222] _102222_createFile: Check if incoming file id exists or not\n");
;;;595    
;;;596    	/*Search for file ID under DF*/
;;;597    	_7816_4_ifFileExists(fhFile.udbFileId, pccCurrentChannel->fhaCurrentDf, MODE_FIND_FID, &fhaFile);
        0x00002e44:    8900        ..      LDRH     r0,[r0,#8]
        0x00002e46:    2600        .&      MOVS     r6,#0
        0x00002e48:    ad09        ..      ADD      r5,sp,#0x24
        0x00002e4a:    4632        2F      MOV      r2,r6
        0x00002e4c:    462b        +F      MOV      r3,r5
        0x00002e4e:    f000f971    ..q.    BL       _7816_4_ifFileExists ; 0x3134
;;;598    
;;;599    	/*if File exists*/
;;;600    	if (NO_FILE_PRESENT != fhaFile)
        0x00002e52:    8828        (.      LDRH     r0,[r5,#0]
        0x00002e54:    2800        .(      CMP      r0,#0
        0x00002e56:    d000        ..      BEQ      0x2e5a ; _102222_createFile + 898
        0x00002e58:    e087        ..      B        0x2f6a ; _102222_createFile + 1170
        0x00002e5a:    9c07        ..      LDR      r4,[sp,#0x1c]
;;;601    	{
;;;602    		/*File already exists*/
;;;603    		DBG_ERR("[102_222] _102222_createFile: File Already exists \n");
;;;604    		DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;605    		THROW(EXCEP_FILE_ID_ALREADY_EXISTS);
;;;606    	}
;;;607    
;;;608    	DBG_FUNC("[102_222] _102222_createFile: File doesnt exist\n");
;;;609    
;;;610    	/*Check for Type of file to create*/
;;;611    	if (umbAdfOffset) { //Incoming file creation is for ADF
        0x00002e5c:    2c00        .,      CMP      r4,#0
        0x00002e5e:    4635        5F      MOV      r5,r6
        0x00002e60:    d014        ..      BEQ      0x2e8c ; _102222_createFile + 948
;;;612    
;;;613    		/*ensure current DF is MF*/
;;;614    		if (_7816_4_getMfAddress() != pccCurrentChannel->fhaCurrentDf) {
        0x00002e62:    f000f8a7    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x00002e66:    4952        RI      LDR      r1,[pc,#328] ; [0x2fb0] = 0x200006e8
        0x00002e68:    6809        .h      LDR      r1,[r1,#0]
        0x00002e6a:    88c9        ..      LDRH     r1,[r1,#6]
        0x00002e6c:    4288        .B      CMP      r0,r1
        0x00002e6e:    d178        x.      BNE      0x2f62 ; _102222_createFile + 1162
;;;615    
;;;616    			/*Command not allowed in case of ADF creation*/
;;;617    			DBG_ERR("[102_222] _102222_createFile: MF must be current DF while creating ADF \n");
;;;618    			DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;619    			THROW(EXCEP_COMMAND_NOT_ALLOWED);
;;;620    		}
;;;621    		DBG_FUNC("[102_222] _102222_createFile: Checking if DF name exists or not\n");
;;;622    
;;;623    		/*search for incoming ADF using DF Name*/
;;;624    		umbFileRecord = _7816_4_ifAdfExists(&COMMAND_DATA[umbAdfOffset], &fhaFile);
        0x00002e70:    4847        GH      LDR      r0,[pc,#284] ; [0x2f90] = 0x2000023e
        0x00002e72:    1900        ..      ADDS     r0,r0,r4
        0x00002e74:    1d40        @.      ADDS     r0,r0,#5
        0x00002e76:    af09        ..      ADD      r7,sp,#0x24
        0x00002e78:    4639        9F      MOV      r1,r7
        0x00002e7a:    f000f8a9    ....    BL       _7816_4_ifAdfExists ; 0x2fd0
        0x00002e7e:    4605        .F      MOV      r5,r0
;;;625    
;;;626    		/*if ADF exists*/
;;;627    		if (NO_FILE_PRESENT != fhaFile)
        0x00002e80:    8838        8.      LDRH     r0,[r7,#0]
        0x00002e82:    2800        .(      CMP      r0,#0
        0x00002e84:    d000        ..      BEQ      0x2e88 ; _102222_createFile + 944
        0x00002e86:    e07f        ..      B        0x2f88 ; _102222_createFile + 1200
;;;628    		{
;;;629    			/*ADF already exists*/
;;;630    			DBG_ERR("[102_222] _102222_createFile: ADF Already exists \n");
;;;631    			DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;632    			THROW(EXCEP_DF_NAME_ALREADY_EXISTS);
;;;633    		}
;;;634    		DBG_FUNC("[102_222] _102222_createFile:DF name doesnt exist\n");
;;;635    
;;;636    		if (RECORD_UNDEFINED == umbFileRecord) //check if returned record no. is undefined
        0x00002e88:    2d00        .-      CMP      r5,#0
        0x00002e8a:    d079        y.      BEQ      0x2f80 ; _102222_createFile + 1192
;;;637    		{
;;;638    			/*if control is here it means, there is no space in ADF list file to add 1 more record*/
;;;639    			DBG_ERR("[102_222] _102222_createFile: No empty records available in ADF List file: 6F10 \n");
;;;640    			DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;641    			THROW(EXCEP_NOT_ENOUGH_MEMORY);
;;;642    		}
;;;643    
;;;644    	}
;;;645    
;;;646    	if(0x00 == umbIsDf){ //if its EF
        0x00002e8c:    9808        ..      LDR      r0,[sp,#0x20]
        0x00002e8e:    2838        8(      CMP      r0,#0x38
        0x00002e90:    d009        ..      BEQ      0x2ea6 ; _102222_createFile + 974
;;;647    
;;;648    		DBG_FUNC("[102_222] _102222_createFile: Allocate File data of size '%2'\n", udbFileSize);
;;;649    
;;;650    		/*Create data of EF*/
;;;651    		maFileData = mm_alloc(udbFileSize, DEFAULT_102_222_BYTE);
        0x00002e92:    9803        ..      LDR      r0,[sp,#0xc]
        0x00002e94:    b280        ..      UXTH     r0,r0
        0x00002e96:    21ff        .!      MOVS     r1,#0xff
        0x00002e98:    f7fdff76    ..v.    BL       mm_alloc ; 0xd88
;;;652    
;;;653    		if (NO_FREE_MEMORY == maFileData) //if no object returned
        0x00002e9c:    2800        .(      CMP      r0,#0
        0x00002e9e:    d06f        o.      BEQ      0x2f80 ; _102222_createFile + 1192
        0x00002ea0:    4606        .F      MOV      r6,r0
        0x00002ea2:    a80a        ..      ADD      r0,sp,#0x28
;;;654    		{
;;;655    			/*No free memory available*/
;;;656    			DBG_ERR("[102_222] _102222_createFile: No enough memory for File data Required: '%2' Available: '%4' \n", udbFileSize, mm_GetAvailableMemory());
;;;657    			DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;658    			THROW(EXCEP_NOT_ENOUGH_MEMORY);
;;;659    		}
;;;660    
;;;661    		/*mamory address of file data*/
;;;662    		fhFile.FileSpecific.EF.maFileData = maFileData;
        0x00002ea4:    8186        ..      STRH     r6,[r0,#0xc]
;;;663    
;;;664    	}
;;;665    
;;;666    	DBG_FUNC("[102_222] _102222_createFile: Creating file header\n");
;;;667    
;;;668    	/*Create File header*/
;;;669    	fhaFile = _7816_9_createFileHeader(pccCurrentChannel->fhaCurrentDf, fhFile);
        0x00002ea6:    4842        BH      LDR      r0,[pc,#264] ; [0x2fb0] = 0x200006e8
        0x00002ea8:    6800        .h      LDR      r0,[r0,#0]
        0x00002eaa:    88c0        ..      LDRH     r0,[r0,#6]
        0x00002eac:    af0a        ..      ADD      r7,sp,#0x28
        0x00002eae:    cf9e        ..      LDM      r7,{r1-r4,r7}
        0x00002eb0:    9400        ..      STR      r4,[sp,#0]
        0x00002eb2:    9701        ..      STR      r7,[sp,#4]
        0x00002eb4:    f001fc7e    ..~.    BL       _7816_9_createFileHeader ; 0x47b4
        0x00002eb8:    a909        ..      ADD      r1,sp,#0x24
        0x00002eba:    8008        ..      STRH     r0,[r1,#0]
;;;670    
;;;671    	if (EMPTY_OBJECT == fhaFile) //Check null/empty object returned, it means not enough memory
        0x00002ebc:    2800        .(      CMP      r0,#0
        0x00002ebe:    d05c        \.      BEQ      0x2f7a ; _102222_createFile + 1186
;;;672    	{
;;;673    		DBG_ERR("[102_222] _102222_createFile: Not enough memory for file header.  Required: %2 Available: '%4'\n", sizeof(fhFile), mm_GetAvailableMemory());
;;;674    		/*Free file data memory if allocated*/
;;;675    		mm_Free(maFileData);
;;;676    
;;;677    		DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;678    		/*No free memory available*/
;;;679    		THROW(EXCEP_NOT_ENOUGH_MEMORY);
;;;680    	}
;;;681    	DBG_FUNC("[102_222] _102222_createFile: File header created and added in File system\n");
;;;682    
;;;683    	if (umbIsDf) { // Check if its DF
        0x00002ec0:    9908        ..      LDR      r1,[sp,#0x20]
        0x00002ec2:    2938        8)      CMP      r1,#0x38
        0x00002ec4:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x00002ec6:    d112        ..      BNE      0x2eee ; _102222_createFile + 1046
        0x00002ec8:    a90a        ..      ADD      r1,sp,#0x28
;;;684    
;;;685    		if (FID_MF == fhFile.udbFileId) {//check if incoming file is MF update the system page
        0x00002eca:    8909        ..      LDRH     r1,[r1,#8]
        0x00002ecc:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00002ece:    4291        .B      CMP      r1,r2
        0x00002ed0:    d106        ..      BNE      0x2ee0 ; _102222_createFile + 1032
        0x00002ed2:    ae09        ..      ADD      r6,sp,#0x24
        0x00002ed4:    2202        ."      MOVS     r2,#2
;;;686    
;;;687    			DBG_FUNC("[102_222] _102222_createFile: This is MF, so updating its address on system page \n");
;;;688    			/*Write the MF header address from system page*/
;;;689    			baseWriteNBytes(ADDRESS_MASTER_FILE, (puMonoByte)&fhaFile, SIZE_OF_FILE_HEADER_ADDR);
        0x00002ed6:    4830        0H      LDR      r0,[pc,#192] ; [0x2f98] = 0xa004
        0x00002ed8:    4631        1F      MOV      r1,r6
        0x00002eda:    f003ff77    ..w.    BL       baseWriteNBytes ; 0x6dcc
;;;690    		}
;;;691    		/*Set Current DF*/
;;;692    		pccCurrentChannel->fhaCurrentDf = fhaFile;
        0x00002ede:    8830        0.      LDRH     r0,[r6,#0]
        0x00002ee0:    a909        ..      ADD      r1,sp,#0x24
        0x00002ee2:    2200        ."      MOVS     r2,#0
        0x00002ee4:    800a        ..      STRH     r2,[r1,#0]
        0x00002ee6:    4932        2I      LDR      r1,[pc,#200] ; [0x2fb0] = 0x200006e8
        0x00002ee8:    6809        .h      LDR      r1,[r1,#0]
        0x00002eea:    80c8        ..      STRH     r0,[r1,#6]
        0x00002eec:    e002        ..      B        0x2ef4 ; _102222_createFile + 1052
;;;693    		fhaFile = NO_FILE_PRESENT;
;;;694    	}
;;;695    
;;;696    	/*Set Current File*/
;;;697    	pccCurrentChannel->fhaCurrentEf = fhaFile;
        0x00002eee:    4930        0I      LDR      r1,[pc,#192] ; [0x2fb0] = 0x200006e8
        0x00002ef0:    6809        .h      LDR      r1,[r1,#0]
        0x00002ef2:    4602        .F      MOV      r2,r0
        0x00002ef4:    2400        .$      MOVS     r4,#0
        0x00002ef6:    700c        .p      STRB     r4,[r1,#0]
        0x00002ef8:    810a        ..      STRH     r2,[r1,#8]
;;;698    	
;;;699    	/*As file selection happened, record is undefined now*/
;;;700    	pccCurrentChannel->umbCurrentRecPtr = RECORD_UNDEFINED;
;;;701    
;;;702    	/*If its ADF*/
;;;703    	if (umbAdfOffset) {
        0x00002efa:    2f00        ./      CMP      r7,#0
        0x00002efc:    d02b        +.      BEQ      0x2f56 ; _102222_createFile + 1150
;;;704    
;;;705    		DBG_FUNC("[102_222] _102222_createFile: Adding DF name in ADF list file as we have successfully created ADF\n");
;;;706    
;;;707    		/*Assuming All prop. files must be present with intended file attributes,
;;;708    		* so no extra checks are added for validation of prop file*/
;;;709    		/*get memory reference of Admin use DF*/
;;;710    		_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, &fhaFile);
        0x00002efe:    f000f859    ..Y.    BL       _7816_4_getMfAddress ; 0x2fb4
        0x00002f02:    4601        .F      MOV      r1,r0
        0x00002f04:    4885        .H      LDR      r0,[pc,#532] ; [0x311c] = 0x7f49
        0x00002f06:    ae09        ..      ADD      r6,sp,#0x24
        0x00002f08:    4622        "F      MOV      r2,r4
        0x00002f0a:    4633        3F      MOV      r3,r6
        0x00002f0c:    f000f912    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;711    
;;;712    		/*get memory reference of ADF list ef*/
;;;713    		_7816_4_ifFileExists(FID_PROP_ADF_LIST, fhaFile, MODE_FIND_FID, &fhaFile);
        0x00002f10:    8831        1.      LDRH     r1,[r6,#0]
        0x00002f12:    4883        .H      LDR      r0,[pc,#524] ; [0x3120] = 0x6f10
        0x00002f14:    4622        "F      MOV      r2,r4
        0x00002f16:    4633        3F      MOV      r3,r6
        0x00002f18:    f000f90c    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;714    
;;;715    		/*Read file header*/
;;;716    		mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
        0x00002f1c:    8830        0.      LDRH     r0,[r6,#0]
        0x00002f1e:    9400        ..      STR      r4,[sp,#0]
        0x00002f20:    ae0a        ..      ADD      r6,sp,#0x28
        0x00002f22:    2314        .#      MOVS     r3,#0x14
        0x00002f24:    4631        1F      MOV      r1,r6
        0x00002f26:    4622        "F      MOV      r2,r4
        0x00002f28:    f7fef81e    ....    BL       mm_ReadUpdate ; 0xf68
        0x00002f2c:    4818        .H      LDR      r0,[pc,#96] ; [0x2f90] = 0x2000023e
        0x00002f2e:    19c7        ..      ADDS     r7,r0,r7
        0x00002f30:    4638        8F      MOV      r0,r7
        0x00002f32:    3016        .0      ADDS     r0,r0,#0x16
;;;717    
;;;718    		/*Read memory address of file data*/
;;;719    		maFileData = fhFile.FileSpecific.EF.maFileData;
        0x00002f34:    89b4        ..      LDRH     r4,[r6,#0xc]
;;;720    
;;;721    		/*Update File Header Address*/
;;;722    		mem_cpy(COMMAND_DATA + umbAdfOffset + OFFSET_ADDR_FILE_HEADER, (puMonoByte)&(pccCurrentChannel->fhaCurrentDf), SIZE_OF_FILE_HEADER_ADDR);
        0x00002f36:    491e        .I      LDR      r1,[pc,#120] ; [0x2fb0] = 0x200006e8
        0x00002f38:    6809        .h      LDR      r1,[r1,#0]
        0x00002f3a:    1d89        ..      ADDS     r1,r1,#6
        0x00002f3c:    2202        ."      MOVS     r2,#2
        0x00002f3e:    f7fdfd3e    ..>.    BL       mem_cpyFwd ; 0x9be
        0x00002f42:    9806        ..      LDR      r0,[sp,#0x18]
        0x00002f44:    9000        ..      STR      r0,[sp,#0]
        0x00002f46:    1d79        y.      ADDS     r1,r7,#5
        0x00002f48:    2313        .#      MOVS     r3,#0x13
;;;723    
;;;724    		/*Read file data*/
;;;725    		mm_ReadUpdate(maFileData, COMMAND_DATA + umbAdfOffset, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, \
        0x00002f4a:    435d        ]C      MULS     r5,r3,r5
        0x00002f4c:    3d13        .=      SUBS     r5,r5,#0x13
        0x00002f4e:    b2aa        ..      UXTH     r2,r5
        0x00002f50:    4620         F      MOV      r0,r4
        0x00002f52:    f7fef809    ....    BL       mm_ReadUpdate ; 0xf68
;;;726    			LENGTH_RECORD_ADF_LIST, MEM_MODE_UPDATE);
;;;727    	}
;;;728    
;;;729    	/*exit from the function*/
;;;730    	DBG_FUNC_EXIT("<<[102_222] _102222_createFile()\n");
;;;731    }
        0x00002f56:    b00f        ..      ADD      sp,sp,#0x3c
        0x00002f58:    bdf0        ..      POP      {r4-r7,pc}
        0x00002f5a:    480e        .H      LDR      r0,[pc,#56] ; [0x2f94] = 0x20000648
        0x00002f5c:    2108        .!      MOVS     r1,#8
        0x00002f5e:    f004fd62    ..b.    BL       longjmp ; 0x7a26
        0x00002f62:    480c        .H      LDR      r0,[pc,#48] ; [0x2f94] = 0x20000648
        0x00002f64:    2109        .!      MOVS     r1,#9
        0x00002f66:    f004fd5e    ..^.    BL       longjmp ; 0x7a26
        0x00002f6a:    480a        .H      LDR      r0,[pc,#40] ; [0x2f94] = 0x20000648
        0x00002f6c:    210b        .!      MOVS     r1,#0xb
        0x00002f6e:    f004fd5a    ..Z.    BL       longjmp ; 0x7a26
        0x00002f72:    4808        .H      LDR      r0,[pc,#32] ; [0x2f94] = 0x20000648
        0x00002f74:    2106        .!      MOVS     r1,#6
        0x00002f76:    f004fd56    ..V.    BL       longjmp ; 0x7a26
        0x00002f7a:    4630        0F      MOV      r0,r6
        0x00002f7c:    f7fef87e    ..~.    BL       mm_Free ; 0x107c
        0x00002f80:    4804        .H      LDR      r0,[pc,#16] ; [0x2f94] = 0x20000648
        0x00002f82:    210a        .!      MOVS     r1,#0xa
        0x00002f84:    f004fd4f    ..O.    BL       longjmp ; 0x7a26
        0x00002f88:    4802        .H      LDR      r0,[pc,#8] ; [0x2f94] = 0x20000648
        0x00002f8a:    210c        .!      MOVS     r1,#0xc
        0x00002f8c:    f004fd4b    ..K.    BL       longjmp ; 0x7a26
    $d.3
    __arm_cp.0_0
        0x00002f90:    2000023e    >..     DCD    536871486
    __arm_cp.0_1
        0x00002f94:    20000648    H..     DCD    536872520
    __arm_cp.0_2
        0x00002f98:    0000a004    ....    DCD    40964
    __arm_cp.0_3
        0x00002f9c:    0000787d    }x..    DCD    30845
        0x00002fa0:    04030101    ....    DCD    67305729
        0x00002fa4:    01050405    ....    DCD    17105925
        0x00002fa8:    0c010101    ....    DCD    201392385
        0x00002fac:    000c0c0c    ....    DCD    789516
    __arm_cp.0_5
        0x00002fb0:    200006e8    ...     DCD    536872680
    $t.0
    _7816_4_getMfAddress
;;; Core/7816_4/source\7816_4.c
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
        0x00002fb4:    b510        ..      PUSH     {r4,lr}
        0x00002fb6:    b082        ..      SUB      sp,sp,#8
        0x00002fb8:    4804        .H      LDR      r0,[pc,#16] ; [0x2fcc] = 0xa004
        0x00002fba:    ac01        ..      ADD      r4,sp,#4
        0x00002fbc:    2202        ."      MOVS     r2,#2
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
        0x00002fbe:    4621        !F      MOV      r1,r4
        0x00002fc0:    f003fe9c    ....    BL       baseReadNBytes ; 0x6cfc
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
        0x00002fc4:    8820         .      LDRH     r0,[r4,#0]
        0x00002fc6:    b002        ..      ADD      sp,sp,#8
        0x00002fc8:    bd10        ..      POP      {r4,pc}
        0x00002fca:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x00002fcc:    0000a004    ....    DCD    40964
    $t.2
    _7816_4_ifAdfExists
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
        0x00002fd0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00002fd2:    b08f        ..      SUB      sp,sp,#0x3c
        0x00002fd4:    2900        .)      CMP      r1,#0
        0x00002fd6:    d100        ..      BNE      0x2fda ; _7816_4_ifAdfExists + 10
        0x00002fd8:    e094        ..      B        0x3104 ; _7816_4_ifAdfExists + 308
;;; Core/7816_4/source\7816_4.c
        0x00002fda:    9004        ..      STR      r0,[sp,#0x10]
        0x00002fdc:    2800        .(      CMP      r0,#0
        0x00002fde:    d100        ..      BNE      0x2fe2 ; _7816_4_ifAdfExists + 18
        0x00002fe0:    e095        ..      B        0x310e ; _7816_4_ifAdfExists + 318
        0x00002fe2:    460e        .F      MOV      r6,r1
        0x00002fe4:    484c        LH      LDR      r0,[pc,#304] ; [0x3118] = 0xa004
        0x00002fe6:    ac0a        ..      ADD      r4,sp,#0x28
        0x00002fe8:    2202        ."      MOVS     r2,#2
        0x00002fea:    4621        !F      MOV      r1,r4
        0x00002fec:    f003fe86    ....    BL       baseReadNBytes ; 0x6cfc
        0x00002ff0:    8820         .      LDRH     r0,[r4,#0]
        0x00002ff2:    2700        .'      MOVS     r7,#0
        0x00002ff4:    8037        7.      STRH     r7,[r6,#0]
        0x00002ff6:    2800        .(      CMP      r0,#0
        0x00002ff8:    d01b        ..      BEQ      0x3032 ; _7816_4_ifAdfExists + 98
        0x00002ffa:    9700        ..      STR      r7,[sp,#0]
        0x00002ffc:    ac0a        ..      ADD      r4,sp,#0x28
        0x00002ffe:    2314        .#      MOVS     r3,#0x14
        0x00003000:    4621        !F      MOV      r1,r4
        0x00003002:    463a        :F      MOV      r2,r7
        0x00003004:    f7fdffb0    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003008:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x0000300a:    2800        .(      CMP      r0,#0
        0x0000300c:    d016        ..      BEQ      0x303c ; _7816_4_ifAdfExists + 108
        0x0000300e:    8030        0.      STRH     r0,[r6,#0]
        0x00003010:    4d42        BM      LDR      r5,[pc,#264] ; [0x311c] = 0x7f49
        0x00003012:    9700        ..      STR      r7,[sp,#0]
        0x00003014:    b280        ..      UXTH     r0,r0
        0x00003016:    ac0a        ..      ADD      r4,sp,#0x28
        0x00003018:    2314        .#      MOVS     r3,#0x14
        0x0000301a:    4621        !F      MOV      r1,r4
        0x0000301c:    463a        :F      MOV      r2,r7
        0x0000301e:    f7fdffa3    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003022:    8920         .      LDRH     r0,[r4,#8]
        0x00003024:    42a8        .B      CMP      r0,r5
        0x00003026:    d009        ..      BEQ      0x303c ; _7816_4_ifAdfExists + 108
        0x00003028:    a80a        ..      ADD      r0,sp,#0x28
        0x0000302a:    88c0        ..      LDRH     r0,[r0,#6]
        0x0000302c:    8030        0.      STRH     r0,[r6,#0]
        0x0000302e:    2800        .(      CMP      r0,#0
        0x00003030:    d1ef        ..      BNE      0x3012 ; _7816_4_ifAdfExists + 66
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
        0x00003032:    483c        <H      LDR      r0,[pc,#240] ; [0x3124] = 0x8615
        0x00003034:    493c        <I      LDR      r1,[pc,#240] ; [0x3128] = 0x86a2
        0x00003036:    224d        M"      MOVS     r2,#0x4d
        0x00003038:    f004fb5a    ..Z.    BL       __aeabi_assert ; 0x76f0
        0x0000303c:    8830        0.      LDRH     r0,[r6,#0]
        0x0000303e:    2800        .(      CMP      r0,#0
        0x00003040:    d0f7        ..      BEQ      0x3032 ; _7816_4_ifAdfExists + 98
        0x00003042:    8037        7.      STRH     r7,[r6,#0]
        0x00003044:    9700        ..      STR      r7,[sp,#0]
        0x00003046:    ac0a        ..      ADD      r4,sp,#0x28
        0x00003048:    2314        .#      MOVS     r3,#0x14
        0x0000304a:    4621        !F      MOV      r1,r4
        0x0000304c:    463a        :F      MOV      r2,r7
        0x0000304e:    f7fdff8b    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003052:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x00003054:    2800        .(      CMP      r0,#0
        0x00003056:    d016        ..      BEQ      0x3086 ; _7816_4_ifAdfExists + 182
        0x00003058:    8030        0.      STRH     r0,[r6,#0]
        0x0000305a:    4d31        1M      LDR      r5,[pc,#196] ; [0x3120] = 0x6f10
        0x0000305c:    9700        ..      STR      r7,[sp,#0]
        0x0000305e:    b280        ..      UXTH     r0,r0
        0x00003060:    ac0a        ..      ADD      r4,sp,#0x28
        0x00003062:    2314        .#      MOVS     r3,#0x14
        0x00003064:    4621        !F      MOV      r1,r4
        0x00003066:    463a        :F      MOV      r2,r7
        0x00003068:    f7fdff7e    ..~.    BL       mm_ReadUpdate ; 0xf68
        0x0000306c:    8920         .      LDRH     r0,[r4,#8]
        0x0000306e:    42a8        .B      CMP      r0,r5
        0x00003070:    d009        ..      BEQ      0x3086 ; _7816_4_ifAdfExists + 182
        0x00003072:    a80a        ..      ADD      r0,sp,#0x28
        0x00003074:    88c0        ..      LDRH     r0,[r0,#6]
        0x00003076:    8030        0.      STRH     r0,[r6,#0]
        0x00003078:    2800        .(      CMP      r0,#0
        0x0000307a:    d1ef        ..      BNE      0x305c ; _7816_4_ifAdfExists + 140
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
        0x0000307c:    4829        )H      LDR      r0,[pc,#164] ; [0x3124] = 0x8615
        0x0000307e:    492a        *I      LDR      r1,[pc,#168] ; [0x3128] = 0x86a2
        0x00003080:    2254        T"      MOVS     r2,#0x54
        0x00003082:    f004fb35    ..5.    BL       __aeabi_assert ; 0x76f0
        0x00003086:    8830        0.      LDRH     r0,[r6,#0]
        0x00003088:    2800        .(      CMP      r0,#0
        0x0000308a:    d0f7        ..      BEQ      0x307c ; _7816_4_ifAdfExists + 172
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
        0x0000308c:    9700        ..      STR      r7,[sp,#0]
        0x0000308e:    ac0a        ..      ADD      r4,sp,#0x28
        0x00003090:    2314        .#      MOVS     r3,#0x14
        0x00003092:    4621        !F      MOV      r1,r4
        0x00003094:    463a        :F      MOV      r2,r7
        0x00003096:    f7fdff67    ..g.    BL       mm_ReadUpdate ; 0xf68
        0x0000309a:    9601        ..      STR      r6,[sp,#4]
        0x0000309c:    8037        7.      STRH     r7,[r6,#0]
        0x0000309e:    a805        ..      ADD      r0,sp,#0x14
        0x000030a0:    1c40        @.      ADDS     r0,r0,#1
        0x000030a2:    9003        ..      STR      r0,[sp,#0xc]
        0x000030a4:    9804        ..      LDR      r0,[sp,#0x10]
        0x000030a6:    1c45        E.      ADDS     r5,r0,#1
        0x000030a8:    7be0        .{      LDRB     r0,[r4,#0xf]
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
        0x000030aa:    9002        ..      STR      r0,[sp,#8]
        0x000030ac:    89a4        ..      LDRH     r4,[r4,#0xc]
        0x000030ae:    463e        >F      MOV      r6,r7
        0x000030b0:    9700        ..      STR      r7,[sp,#0]
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
        0x000030b2:    1c76        v.      ADDS     r6,r6,#1
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
        0x000030b4:    b2f0        ..      UXTB     r0,r6
        0x000030b6:    2313        .#      MOVS     r3,#0x13
        0x000030b8:    4358        XC      MULS     r0,r3,r0
        0x000030ba:    3813        .8      SUBS     r0,r0,#0x13
        0x000030bc:    b282        ..      UXTH     r2,r0
        0x000030be:    a905        ..      ADD      r1,sp,#0x14
        0x000030c0:    4620         F      MOV      r0,r4
        0x000030c2:    f7fdff51    ..Q.    BL       mm_ReadUpdate ; 0xf68
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
        0x000030c6:    9804        ..      LDR      r0,[sp,#0x10]
        0x000030c8:    7802        .x      LDRB     r2,[r0,#0]
        0x000030ca:    4628        (F      MOV      r0,r5
        0x000030cc:    9903        ..      LDR      r1,[sp,#0xc]
        0x000030ce:    f7fdfccc    ....    BL       mem_cmp ; 0xa6a
        0x000030d2:    2800        .(      CMP      r0,#0
        0x000030d4:    d00d        ..      BEQ      0x30f2 ; _7816_4_ifAdfExists + 290
        0x000030d6:    a805        ..      ADD      r0,sp,#0x14
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
        0x000030d8:    9902        ..      LDR      r1,[sp,#8]
        0x000030da:    428e        .B      CMP      r6,r1
        0x000030dc:    d202        ..      BCS      0x30e4 ; _7816_4_ifAdfExists + 276
        0x000030de:    7800        .x      LDRB     r0,[r0,#0]
        0x000030e0:    28ff        .(      CMP      r0,#0xff
        0x000030e2:    d1e5        ..      BNE      0x30b0 ; _7816_4_ifAdfExists + 224
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
        0x000030e4:    9802        ..      LDR      r0,[sp,#8]
        0x000030e6:    4286        .B      CMP      r6,r0
        0x000030e8:    d100        ..      BNE      0x30ec ; _7816_4_ifAdfExists + 284
        0x000030ea:    2600        .&      MOVS     r6,#0
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
        0x000030ec:    b2f0        ..      UXTB     r0,r6
        0x000030ee:    b00f        ..      ADD      sp,sp,#0x3c
        0x000030f0:    bdf0        ..      POP      {r4-r7,pc}
        0x000030f2:    a905        ..      ADD      r1,sp,#0x14
        0x000030f4:    3111        .1      ADDS     r1,r1,#0x11
        0x000030f6:    2202        ."      MOVS     r2,#2
        0x000030f8:    9801        ..      LDR      r0,[sp,#4]
        0x000030fa:    f7fdfc60    ..`.    BL       mem_cpyFwd ; 0x9be
        0x000030fe:    b2f0        ..      UXTB     r0,r6
        0x00003100:    b00f        ..      ADD      sp,sp,#0x3c
        0x00003102:    bdf0        ..      POP      {r4-r7,pc}
        0x00003104:    480a        .H      LDR      r0,[pc,#40] ; [0x3130] = 0x857d
        0x00003106:    4908        .I      LDR      r1,[pc,#32] ; [0x3128] = 0x86a2
        0x00003108:    223e        >"      MOVS     r2,#0x3e
        0x0000310a:    f004faf1    ....    BL       __aeabi_assert ; 0x76f0
        0x0000310e:    4807        .H      LDR      r0,[pc,#28] ; [0x312c] = 0x856d
        0x00003110:    4905        .I      LDR      r1,[pc,#20] ; [0x3128] = 0x86a2
        0x00003112:    223f        ?"      MOVS     r2,#0x3f
        0x00003114:    f004faec    ....    BL       __aeabi_assert ; 0x76f0
    $d.3
    __arm_cp.1_0
        0x00003118:    0000a004    ....    DCD    40964
    __arm_cp.1_1
        0x0000311c:    00007f49    I...    DCD    32585
    __arm_cp.1_2
        0x00003120:    00006f10    .o..    DCD    28432
    __arm_cp.1_3
        0x00003124:    00008615    ....    DCD    34325
    __arm_cp.1_4
        0x00003128:    000086a2    ....    DCD    34466
    __arm_cp.1_5
        0x0000312c:    0000856d    m...    DCD    34157
    __arm_cp.1_6
        0x00003130:    0000857d    }...    DCD    34173
    $t.4
    _7816_4_ifFileExists
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
        0x00003134:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00003136:    b087        ..      SUB      sp,sp,#0x1c
        0x00003138:    2b00        .+      CMP      r3,#0
        0x0000313a:    d04d        M.      BEQ      0x31d8 ; _7816_4_ifFileExists + 164
;;; Core/7816_4/source\7816_4.c
        0x0000313c:    461c        .F      MOV      r4,r3
        0x0000313e:    2500        .%      MOVS     r5,#0
        0x00003140:    801d        ..      STRH     r5,[r3,#0]
        0x00003142:    2900        .)      CMP      r1,#0
        0x00003144:    d046        F.      BEQ      0x31d4 ; _7816_4_ifFileExists + 160
        0x00003146:    4617        .F      MOV      r7,r2
        0x00003148:    4606        .F      MOV      r6,r0
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x0000314a:    9500        ..      STR      r5,[sp,#0]
        0x0000314c:    aa02        ..      ADD      r2,sp,#8
        0x0000314e:    2314        .#      MOVS     r3,#0x14
        0x00003150:    4608        .F      MOV      r0,r1
        0x00003152:    4611        .F      MOV      r1,r2
        0x00003154:    462a        *F      MOV      r2,r5
        0x00003156:    f7fdff07    ....    BL       mm_ReadUpdate ; 0xf68
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
        0x0000315a:    2f01        ./      CMP      r7,#1
        0x0000315c:    d125        %.      BNE      0x31aa ; _7816_4_ifFileExists + 118
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
        0x0000315e:    2e00        ..      CMP      r6,#0
        0x00003160:    d038        8.      BEQ      0x31d4 ; _7816_4_ifFileExists + 160
        0x00003162:    2e1f        ..      CMP      r6,#0x1f
        0x00003164:    d036        6.      BEQ      0x31d4 ; _7816_4_ifFileExists + 160
        0x00003166:    a802        ..      ADD      r0,sp,#8
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
        0x00003168:    8980        ..      LDRH     r0,[r0,#0xc]
        0x0000316a:    2800        .(      CMP      r0,#0
        0x0000316c:    d032        2.      BEQ      0x31d4 ; _7816_4_ifFileExists + 160
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
        0x0000316e:    8020         .      STRH     r0,[r4,#0]
        0x00003170:    2f01        ./      CMP      r7,#1
        0x00003172:    d11f        ..      BNE      0x31b4 ; _7816_4_ifFileExists + 128
        0x00003174:    b2f7        ..      UXTB     r7,r6
        0x00003176:    e004        ..      B        0x3182 ; _7816_4_ifFileExists + 78
        0x00003178:    a802        ..      ADD      r0,sp,#8
        0x0000317a:    88c0        ..      LDRH     r0,[r0,#6]
        0x0000317c:    8020         .      STRH     r0,[r4,#0]
        0x0000317e:    2800        .(      CMP      r0,#0
        0x00003180:    d028        (.      BEQ      0x31d4 ; _7816_4_ifFileExists + 160
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00003182:    9500        ..      STR      r5,[sp,#0]
        0x00003184:    b280        ..      UXTH     r0,r0
        0x00003186:    ae02        ..      ADD      r6,sp,#8
        0x00003188:    2314        .#      MOVS     r3,#0x14
        0x0000318a:    4631        1F      MOV      r1,r6
        0x0000318c:    462a        *F      MOV      r2,r5
        0x0000318e:    f7fdfeeb    ....    BL       mm_ReadUpdate ; 0xf68
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
        0x00003192:    7870        px      LDRB     r0,[r6,#1]
        0x00003194:    21bf        .!      MOVS     r1,#0xbf
        0x00003196:    4001        .@      ANDS     r1,r1,r0
        0x00003198:    2938        8)      CMP      r1,#0x38
        0x0000319a:    d0ed        ..      BEQ      0x3178 ; _7816_4_ifFileExists + 68
        0x0000319c:    a802        ..      ADD      r0,sp,#8
        0x0000319e:    7c80        .|      LDRB     r0,[r0,#0x12]
        0x000031a0:    211f        .!      MOVS     r1,#0x1f
        0x000031a2:    4001        .@      ANDS     r1,r1,r0
        0x000031a4:    42b9        .B      CMP      r1,r7
        0x000031a6:    d1e7        ..      BNE      0x3178 ; _7816_4_ifFileExists + 68
        0x000031a8:    e014        ..      B        0x31d4 ; _7816_4_ifFileExists + 160
        0x000031aa:    a802        ..      ADD      r0,sp,#8
        0x000031ac:    8980        ..      LDRH     r0,[r0,#0xc]
        0x000031ae:    2800        .(      CMP      r0,#0
        0x000031b0:    d010        ..      BEQ      0x31d4 ; _7816_4_ifFileExists + 160
        0x000031b2:    8020         .      STRH     r0,[r4,#0]
        0x000031b4:    9500        ..      STR      r5,[sp,#0]
        0x000031b6:    b280        ..      UXTH     r0,r0
        0x000031b8:    af02        ..      ADD      r7,sp,#8
        0x000031ba:    2314        .#      MOVS     r3,#0x14
        0x000031bc:    4639        9F      MOV      r1,r7
        0x000031be:    462a        *F      MOV      r2,r5
        0x000031c0:    f7fdfed2    ....    BL       mm_ReadUpdate ; 0xf68
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
        0x000031c4:    8938        8.      LDRH     r0,[r7,#8]
        0x000031c6:    42b0        .B      CMP      r0,r6
        0x000031c8:    d004        ..      BEQ      0x31d4 ; _7816_4_ifFileExists + 160
        0x000031ca:    a802        ..      ADD      r0,sp,#8
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
        0x000031cc:    88c0        ..      LDRH     r0,[r0,#6]
        0x000031ce:    8020         .      STRH     r0,[r4,#0]
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
        0x000031d0:    2800        .(      CMP      r0,#0
        0x000031d2:    d1ef        ..      BNE      0x31b4 ; _7816_4_ifFileExists + 128
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
        0x000031d4:    b007        ..      ADD      sp,sp,#0x1c
        0x000031d6:    bdf0        ..      POP      {r4-r7,pc}
        0x000031d8:    4802        .H      LDR      r0,[pc,#8] ; [0x31e4] = 0x857d
        0x000031da:    4903        .I      LDR      r1,[pc,#12] ; [0x31e8] = 0x86a2
        0x000031dc:    22a4        ."      MOVS     r2,#0xa4
        0x000031de:    f004fa87    ....    BL       __aeabi_assert ; 0x76f0
        0x000031e2:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x000031e4:    0000857d    }...    DCD    34173
    __arm_cp.2_1
        0x000031e8:    000086a2    ....    DCD    34466
    $t.6
    _7816_4_readUpdateRecordFile
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
        0x000031ec:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000031ee:    b08b        ..      SUB      sp,sp,#0x2c
        0x000031f0:    2800        .(      CMP      r0,#0
        0x000031f2:    d048        H.      BEQ      0x3286 ; _7816_4_readUpdateRecordFile + 154
        0x000031f4:    2900        .)      CMP      r1,#0
        0x000031f6:    d04c        L.      BEQ      0x3292 ; _7816_4_readUpdateRecordFile + 166
;;; Core/7816_4/source\7816_4.c
        0x000031f8:    9205        ..      STR      r2,[sp,#0x14]
        0x000031fa:    2a00        .*      CMP      r2,#0
        0x000031fc:    d050        P.      BEQ      0x32a0 ; _7816_4_readUpdateRecordFile + 180
        0x000031fe:    461e        .F      MOV      r6,r3
        0x00003200:    9104        ..      STR      r1,[sp,#0x10]
        0x00003202:    2200        ."      MOVS     r2,#0
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
        0x00003204:    9200        ..      STR      r2,[sp,#0]
        0x00003206:    af06        ..      ADD      r7,sp,#0x18
        0x00003208:    2314        .#      MOVS     r3,#0x14
        0x0000320a:    9002        ..      STR      r0,[sp,#8]
        0x0000320c:    4639        9F      MOV      r1,r7
        0x0000320e:    f7fdfeab    ....    BL       mm_ReadUpdate ; 0xf68
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
        0x00003212:    7878        xx      LDRB     r0,[r7,#1]
        0x00003214:    2104        .!      MOVS     r1,#4
        0x00003216:    4301        .C      ORRS     r1,r1,r0
        0x00003218:    2287        ."      MOVS     r2,#0x87
        0x0000321a:    4011        .@      ANDS     r1,r1,r2
        0x0000321c:    2906        .)      CMP      r1,#6
        0x0000321e:    d146        F.      BNE      0x32ae ; _7816_4_readUpdateRecordFile + 194
        0x00003220:    1e71        q.      SUBS     r1,r6,#1
        0x00003222:    4635        5F      MOV      r5,r6
        0x00003224:    418d        .A      SBCS     r5,r5,r1
        0x00003226:    2106        .!      MOVS     r1,#6
        0x00003228:    4008        .@      ANDS     r0,r0,r1
        0x0000322a:    ac06        ..      ADD      r4,sp,#0x18
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
        0x0000322c:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x0000322e:    2806        .(      CMP      r0,#6
        0x00003230:    460f        .F      MOV      r7,r1
        0x00003232:    9805        ..      LDR      r0,[sp,#0x14]
        0x00003234:    d000        ..      BEQ      0x3238 ; _7816_4_readUpdateRecordFile + 76
        0x00003236:    4607        .F      MOV      r7,r0
        0x00003238:    9203        ..      STR      r2,[sp,#0xc]
        0x0000323a:    2e01        ..      CMP      r6,#1
        0x0000323c:    d000        ..      BEQ      0x3240 ; _7816_4_readUpdateRecordFile + 84
        0x0000323e:    4607        .F      MOV      r7,r0
        0x00003240:    7ba0        .{      LDRB     r0,[r4,#0xe]
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
        0x00003242:    19c0        ..      ADDS     r0,r0,r7
        0x00003244:    1e80        ..      SUBS     r0,r0,#2
        0x00003246:    f004fae9    ....    BL       __aeabi_idivmod ; 0x781c
        0x0000324a:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x0000324c:    7c23        #|      LDRB     r3,[r4,#0x10]
        0x0000324e:    460c        .F      MOV      r4,r1
        0x00003250:    9500        ..      STR      r5,[sp,#0]
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
        0x00003252:    b2ca        ..      UXTB     r2,r1
        0x00003254:    435a        ZC      MULS     r2,r3,r2
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
        0x00003256:    9904        ..      LDR      r1,[sp,#0x10]
        0x00003258:    f7fdfe86    ....    BL       mm_ReadUpdate ; 0xf68
        0x0000325c:    2e00        ..      CMP      r6,#0
        0x0000325e:    d00f        ..      BEQ      0x3280 ; _7816_4_readUpdateRecordFile + 148
        0x00003260:    a806        ..      ADD      r0,sp,#0x18
        0x00003262:    7840        @x      LDRB     r0,[r0,#1]
        0x00003264:    9903        ..      LDR      r1,[sp,#0xc]
        0x00003266:    4008        .@      ANDS     r0,r0,r1
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
        0x00003268:    2806        .(      CMP      r0,#6
        0x0000326a:    d109        ..      BNE      0x3280 ; _7816_4_readUpdateRecordFile + 148
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
        0x0000326c:    1c60        `.      ADDS     r0,r4,#1
        0x0000326e:    a906        ..      ADD      r1,sp,#0x18
        0x00003270:    7388        .s      STRB     r0,[r1,#0xe]
        0x00003272:    2701        .'      MOVS     r7,#1
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
        0x00003274:    9700        ..      STR      r7,[sp,#0]
        0x00003276:    2200        ."      MOVS     r2,#0
        0x00003278:    2314        .#      MOVS     r3,#0x14
        0x0000327a:    9802        ..      LDR      r0,[sp,#8]
        0x0000327c:    f7fdfe74    ..t.    BL       mm_ReadUpdate ; 0xf68
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
        0x00003280:    4638        8F      MOV      r0,r7
        0x00003282:    b00b        ..      ADD      sp,sp,#0x2c
        0x00003284:    bdf0        ..      POP      {r4-r7,pc}
        0x00003286:    2083        .       MOVS     r0,#0x83
        0x00003288:    0042        B.      LSLS     r2,r0,#1
        0x0000328a:    4817        .H      LDR      r0,[pc,#92] ; [0x32e8] = 0x8617
        0x0000328c:    490c        .I      LDR      r1,[pc,#48] ; [0x32c0] = 0x86a2
        0x0000328e:    f004fa2f    ../.    BL       __aeabi_assert ; 0x76f0
        0x00003292:    2083        .       MOVS     r0,#0x83
        0x00003294:    0040        @.      LSLS     r0,r0,#1
        0x00003296:    1c42        B.      ADDS     r2,r0,#1
        0x00003298:    4812        .H      LDR      r0,[pc,#72] ; [0x32e4] = 0x855d
        0x0000329a:    4909        .I      LDR      r1,[pc,#36] ; [0x32c0] = 0x86a2
        0x0000329c:    f004fa28    ..(.    BL       __aeabi_assert ; 0x76f0
        0x000032a0:    2083        .       MOVS     r0,#0x83
        0x000032a2:    0040        @.      LSLS     r0,r0,#1
        0x000032a4:    1c82        ..      ADDS     r2,r0,#2
        0x000032a6:    a007        ..      ADR      r0,{pc}+0x1e ; 0x32c4
        0x000032a8:    4905        .I      LDR      r1,[pc,#20] ; [0x32c0] = 0x86a2
        0x000032aa:    f004fa21    ..!.    BL       __aeabi_assert ; 0x76f0
        0x000032ae:    2083        .       MOVS     r0,#0x83
        0x000032b0:    0040        @.      LSLS     r0,r0,#1
        0x000032b2:    1dc2        ..      ADDS     r2,r0,#7
        0x000032b4:    4801        .H      LDR      r0,[pc,#4] ; [0x32bc] = 0x849e
        0x000032b6:    4902        .I      LDR      r1,[pc,#8] ; [0x32c0] = 0x86a2
        0x000032b8:    f004fa1a    ....    BL       __aeabi_assert ; 0x76f0
    $d.7
    __arm_cp.3_0
        0x000032bc:    0000849e    ....    DCD    33950
    __arm_cp.3_1
        0x000032c0:    000086a2    ....    DCD    34466
        0x000032c4:    52626d75    umbR    DCD    1382182261
        0x000032c8:    726f6365    ecor    DCD    1919902565
        0x000032cc:    206f4e64    dNo     DCD    544165476
        0x000032d0:    52203d21    != R    DCD    1377844513
        0x000032d4:    524f4345    ECOR    DCD    1380926277
        0x000032d8:    4e555f44    D_UN    DCD    1314217796
        0x000032dc:    49464544    DEFI    DCD    1229342020
        0x000032e0:    0044454e    NED.    DCD    4474190
    __arm_cp.3_3
        0x000032e4:    0000855d    ]...    DCD    34141
    __arm_cp.3_4
        0x000032e8:    00008617    ....    DCD    34327
    $t.8
    _7816_4_readUpdateFile
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
        0x000032ec:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000032ee:    b087        ..      SUB      sp,sp,#0x1c
        0x000032f0:    2800        .(      CMP      r0,#0
        0x000032f2:    d017        ..      BEQ      0x3324 ; _7816_4_readUpdateFile + 56
;;; Core/7816_4/source\7816_4.c
        0x000032f4:    460e        .F      MOV      r6,r1
        0x000032f6:    9301        ..      STR      r3,[sp,#4]
        0x000032f8:    2900        .)      CMP      r1,#0
        0x000032fa:    d019        ..      BEQ      0x3330 ; _7816_4_readUpdateFile + 68
        0x000032fc:    4615        .F      MOV      r5,r2
        0x000032fe:    9c0c        ..      LDR      r4,[sp,#0x30]
        0x00003300:    2200        ."      MOVS     r2,#0
        0x00003302:    9200        ..      STR      r2,[sp,#0]
        0x00003304:    af02        ..      ADD      r7,sp,#8
        0x00003306:    2314        .#      MOVS     r3,#0x14
        0x00003308:    4639        9F      MOV      r1,r7
        0x0000330a:    f7fdfe2d    ..-.    BL       mm_ReadUpdate ; 0xf68
        0x0000330e:    1e60        `.      SUBS     r0,r4,#1
        0x00003310:    4184        .A      SBCS     r4,r4,r0
        0x00003312:    89b8        ..      LDRH     r0,[r7,#0xc]
        0x00003314:    9400        ..      STR      r4,[sp,#0]
        0x00003316:    4631        1F      MOV      r1,r6
        0x00003318:    462a        *F      MOV      r2,r5
        0x0000331a:    9b01        ..      LDR      r3,[sp,#4]
        0x0000331c:    f7fdfe24    ..$.    BL       mm_ReadUpdate ; 0xf68
        0x00003320:    b007        ..      ADD      sp,sp,#0x1c
        0x00003322:    bdf0        ..      POP      {r4-r7,pc}
        0x00003324:    20af        .       MOVS     r0,#0xaf
        0x00003326:    0042        B.      LSLS     r2,r0,#1
        0x00003328:    4807        .H      LDR      r0,[pc,#28] ; [0x3348] = 0x8617
        0x0000332a:    4906        .I      LDR      r1,[pc,#24] ; [0x3344] = 0x86a2
        0x0000332c:    f004f9e0    ....    BL       __aeabi_assert ; 0x76f0
        0x00003330:    20af        .       MOVS     r0,#0xaf
        0x00003332:    0040        @.      LSLS     r0,r0,#1
        0x00003334:    1c42        B.      ADDS     r2,r0,#1
        0x00003336:    4802        .H      LDR      r0,[pc,#8] ; [0x3340] = 0x855d
        0x00003338:    4902        .I      LDR      r1,[pc,#8] ; [0x3344] = 0x86a2
        0x0000333a:    f004f9d9    ....    BL       __aeabi_assert ; 0x76f0
        0x0000333e:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.4_0
        0x00003340:    0000855d    ]...    DCD    34141
    __arm_cp.4_1
        0x00003344:    000086a2    ....    DCD    34466
    __arm_cp.4_2
        0x00003348:    00008617    ....    DCD    34327
    $t.10
    _7816_4_getFileHeader
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
        0x0000334c:    b580        ..      PUSH     {r7,lr}
        0x0000334e:    b082        ..      SUB      sp,sp,#8
        0x00003350:    2800        .(      CMP      r0,#0
        0x00003352:    d008        ..      BEQ      0x3366 ; _7816_4_getFileHeader + 26
        0x00003354:    2900        .)      CMP      r1,#0
        0x00003356:    d00c        ..      BEQ      0x3372 ; _7816_4_getFileHeader + 38
;;; Core/7816_4/source\7816_4.c
        0x00003358:    2200        ."      MOVS     r2,#0
        0x0000335a:    9200        ..      STR      r2,[sp,#0]
        0x0000335c:    2314        .#      MOVS     r3,#0x14
        0x0000335e:    f7fdfe03    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003362:    b002        ..      ADD      sp,sp,#8
        0x00003364:    bd80        ..      POP      {r7,pc}
        0x00003366:    22ff        ."      MOVS     r2,#0xff
        0x00003368:    3280        .2      ADDS     r2,r2,#0x80
        0x0000336a:    480a        .H      LDR      r0,[pc,#40] ; [0x3394] = 0x8617
        0x0000336c:    4908        .I      LDR      r1,[pc,#32] ; [0x3390] = 0x86a2
        0x0000336e:    f004f9bf    ....    BL       __aeabi_assert ; 0x76f0
        0x00003372:    20ff        .       MOVS     r0,#0xff
        0x00003374:    3080        .0      ADDS     r0,r0,#0x80
        0x00003376:    1c42        B.      ADDS     r2,r0,#1
        0x00003378:    a001        ..      ADR      r0,{pc}+8 ; 0x3380
        0x0000337a:    4905        .I      LDR      r1,[pc,#20] ; [0x3390] = 0x86a2
        0x0000337c:    f004f9b8    ....    BL       __aeabi_assert ; 0x76f0
    $d.11
        0x00003380:    46686670    pfhF    DCD    1181247088
        0x00003384:    20656c69    ile     DCD    543517801
        0x00003388:    4e203d21    != N    DCD    1310735649
        0x0000338c:    004c4c55    ULL.    DCD    5000277
    __arm_cp.5_1
        0x00003390:    000086a2    ....    DCD    34466
    __arm_cp.5_2
        0x00003394:    00008617    ....    DCD    34327
    $t.12
    _7816_4_getFileId
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
        0x00003398:    b510        ..      PUSH     {r4,lr}
        0x0000339a:    b086        ..      SUB      sp,sp,#0x18
        0x0000339c:    2800        .(      CMP      r0,#0
        0x0000339e:    d009        ..      BEQ      0x33b4 ; _7816_4_getFileId + 28
;;; Core/7816_4/source\7816_4.c
        0x000033a0:    2200        ."      MOVS     r2,#0
        0x000033a2:    9200        ..      STR      r2,[sp,#0]
        0x000033a4:    ac01        ..      ADD      r4,sp,#4
        0x000033a6:    2314        .#      MOVS     r3,#0x14
        0x000033a8:    4621        !F      MOV      r1,r4
        0x000033aa:    f7fdfddd    ....    BL       mm_ReadUpdate ; 0xf68
        0x000033ae:    8920         .      LDRH     r0,[r4,#8]
        0x000033b0:    b006        ..      ADD      sp,sp,#0x18
        0x000033b2:    bd10        ..      POP      {r4,pc}
        0x000033b4:    20cd        .       MOVS     r0,#0xcd
        0x000033b6:    0042        B.      LSLS     r2,r0,#1
        0x000033b8:    4801        .H      LDR      r0,[pc,#4] ; [0x33c0] = 0x8617
        0x000033ba:    4902        .I      LDR      r1,[pc,#8] ; [0x33c4] = 0x86a2
        0x000033bc:    f004f998    ....    BL       __aeabi_assert ; 0x76f0
    $d.13
    __arm_cp.6_0
        0x000033c0:    00008617    ....    DCD    34327
    __arm_cp.6_1
        0x000033c4:    000086a2    ....    DCD    34466
    $t.14
    _7816_4_getFileDataAddress
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
        0x000033c8:    b510        ..      PUSH     {r4,lr}
        0x000033ca:    b086        ..      SUB      sp,sp,#0x18
        0x000033cc:    2800        .(      CMP      r0,#0
        0x000033ce:    d00f        ..      BEQ      0x33f0 ; _7816_4_getFileDataAddress + 40
;;; Core/7816_4/source\7816_4.c
        0x000033d0:    2200        ."      MOVS     r2,#0
        0x000033d2:    9200        ..      STR      r2,[sp,#0]
        0x000033d4:    ac01        ..      ADD      r4,sp,#4
        0x000033d6:    2314        .#      MOVS     r3,#0x14
        0x000033d8:    4621        !F      MOV      r1,r4
        0x000033da:    f7fdfdc5    ....    BL       mm_ReadUpdate ; 0xf68
        0x000033de:    7860        `x      LDRB     r0,[r4,#1]
        0x000033e0:    21bf        .!      MOVS     r1,#0xbf
        0x000033e2:    4001        .@      ANDS     r1,r1,r0
        0x000033e4:    2938        8)      CMP      r1,#0x38
        0x000033e6:    d009        ..      BEQ      0x33fc ; _7816_4_getFileDataAddress + 52
        0x000033e8:    a801        ..      ADD      r0,sp,#4
        0x000033ea:    8980        ..      LDRH     r0,[r0,#0xc]
        0x000033ec:    b006        ..      ADD      sp,sp,#0x18
        0x000033ee:    bd10        ..      POP      {r4,pc}
        0x000033f0:    22ff        ."      MOVS     r2,#0xff
        0x000033f2:    32b6        .2      ADDS     r2,r2,#0xb6
        0x000033f4:    480e        .H      LDR      r0,[pc,#56] ; [0x3430] = 0x8617
        0x000033f6:    490d        .I      LDR      r1,[pc,#52] ; [0x342c] = 0x86a2
        0x000033f8:    f004f97a    ..z.    BL       __aeabi_assert ; 0x76f0
        0x000033fc:    22ff        ."      MOVS     r2,#0xff
        0x000033fe:    32b6        .2      ADDS     r2,r2,#0xb6
        0x00003400:    3209        .2      ADDS     r2,r2,#9
        0x00003402:    a002        ..      ADR      r0,{pc}+0xa ; 0x340c
        0x00003404:    4909        .I      LDR      r1,[pc,#36] ; [0x342c] = 0x86a2
        0x00003406:    f004f973    ..s.    BL       __aeabi_assert ; 0x76f0
        0x0000340a:    46c0        .F      MOV      r8,r8
    $d.15
        0x0000340c:    53492821    !(IS    DCD    1397303329
        0x00003410:    2c464428    (DF,    DCD    742802472
        0x00003414:    46686620     fhF    DCD    1181247008
        0x00003418:    2e656c69    ile.    DCD    778398825
        0x0000341c:    46626d75    umbF    DCD    1180855669
        0x00003420:    44656c69    ileD    DCD    1147497577
        0x00003424:    29637365    esc)    DCD    694383461
        0x00003428:    00000029    )...    DCD    41
    __arm_cp.7_1
        0x0000342c:    000086a2    ....    DCD    34466
    __arm_cp.7_2
        0x00003430:    00008617    ....    DCD    34327
    $t.16
    _7816_4_getFileDescriptor
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
        0x00003434:    b510        ..      PUSH     {r4,lr}
        0x00003436:    b086        ..      SUB      sp,sp,#0x18
        0x00003438:    2800        .(      CMP      r0,#0
        0x0000343a:    d009        ..      BEQ      0x3450 ; _7816_4_getFileDescriptor + 28
;;; Core/7816_4/source\7816_4.c
        0x0000343c:    2200        ."      MOVS     r2,#0
        0x0000343e:    9200        ..      STR      r2,[sp,#0]
        0x00003440:    ac01        ..      ADD      r4,sp,#4
        0x00003442:    2314        .#      MOVS     r3,#0x14
        0x00003444:    4621        !F      MOV      r1,r4
        0x00003446:    f7fdfd8f    ....    BL       mm_ReadUpdate ; 0xf68
        0x0000344a:    7860        `x      LDRB     r0,[r4,#1]
        0x0000344c:    b006        ..      ADD      sp,sp,#0x18
        0x0000344e:    bd10        ..      POP      {r4,pc}
        0x00003450:    22ff        ."      MOVS     r2,#0xff
        0x00003452:    32d6        .2      ADDS     r2,r2,#0xd6
        0x00003454:    4801        .H      LDR      r0,[pc,#4] ; [0x345c] = 0x8617
        0x00003456:    4902        .I      LDR      r1,[pc,#8] ; [0x3460] = 0x86a2
        0x00003458:    f004f94a    ..J.    BL       __aeabi_assert ; 0x76f0
    $d.17
    __arm_cp.8_0
        0x0000345c:    00008617    ....    DCD    34327
    __arm_cp.8_1
        0x00003460:    000086a2    ....    DCD    34466
    $t.18
    _7816_4_getArrInfomation
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
        0x00003464:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00003466:    b086        ..      SUB      sp,sp,#0x18
        0x00003468:    2800        .(      CMP      r0,#0
        0x0000346a:    d00f        ..      BEQ      0x348c ; _7816_4_getArrInfomation + 40
;;; Core/7816_4/source\7816_4.c
        0x0000346c:    460c        .F      MOV      r4,r1
        0x0000346e:    2900        .)      CMP      r1,#0
        0x00003470:    d012        ..      BEQ      0x3498 ; _7816_4_getArrInfomation + 52
        0x00003472:    2200        ."      MOVS     r2,#0
        0x00003474:    9200        ..      STR      r2,[sp,#0]
        0x00003476:    ad01        ..      ADD      r5,sp,#4
        0x00003478:    2314        .#      MOVS     r3,#0x14
        0x0000347a:    4629        )F      MOV      r1,r5
        0x0000347c:    f7fdfd74    ..t.    BL       mm_ReadUpdate ; 0xf68
        0x00003480:    8968        h.      LDRH     r0,[r5,#0xa]
        0x00003482:    8020         .      STRH     r0,[r4,#0]
        0x00003484:    9801        ..      LDR      r0,[sp,#4]
        0x00003486:    70a0        .p      STRB     r0,[r4,#2]
        0x00003488:    b006        ..      ADD      sp,sp,#0x18
        0x0000348a:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x0000348c:    201f        .       MOVS     r0,#0x1f
        0x0000348e:    0102        ..      LSLS     r2,r0,#4
        0x00003490:    480a        .H      LDR      r0,[pc,#40] ; [0x34bc] = 0x8617
        0x00003492:    4909        .I      LDR      r1,[pc,#36] ; [0x34b8] = 0x86a2
        0x00003494:    f004f92c    ..,.    BL       __aeabi_assert ; 0x76f0
        0x00003498:    201f        .       MOVS     r0,#0x1f
        0x0000349a:    0100        ..      LSLS     r0,r0,#4
        0x0000349c:    1c42        B.      ADDS     r2,r0,#1
        0x0000349e:    a002        ..      ADR      r0,{pc}+0xa ; 0x34a8
        0x000034a0:    4905        .I      LDR      r1,[pc,#20] ; [0x34b8] = 0x86a2
        0x000034a2:    f004f925    ..%.    BL       __aeabi_assert ; 0x76f0
        0x000034a6:    46c0        .F      MOV      r8,r8
    $d.19
        0x000034a8:    46696170    paiF    DCD    1181311344
        0x000034ac:    20656c69    ile     DCD    543517801
        0x000034b0:    4e203d21    != N    DCD    1310735649
        0x000034b4:    004c4c55    ULL.    DCD    5000277
    __arm_cp.9_1
        0x000034b8:    000086a2    ....    DCD    34466
    __arm_cp.9_2
        0x000034bc:    00008617    ....    DCD    34327
    $t.20
    _7816_4_getFileSize
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
        0x000034c0:    b510        ..      PUSH     {r4,lr}
        0x000034c2:    b086        ..      SUB      sp,sp,#0x18
        0x000034c4:    2800        .(      CMP      r0,#0
        0x000034c6:    d009        ..      BEQ      0x34dc ; _7816_4_getFileSize + 28
;;; Core/7816_4/source\7816_4.c
        0x000034c8:    2200        ."      MOVS     r2,#0
        0x000034ca:    9200        ..      STR      r2,[sp,#0]
        0x000034cc:    ac01        ..      ADD      r4,sp,#4
        0x000034ce:    2314        .#      MOVS     r3,#0x14
        0x000034d0:    4621        !F      MOV      r1,r4
        0x000034d2:    f7fdfd49    ..I.    BL       mm_ReadUpdate ; 0xf68
        0x000034d6:    89e0        ..      LDRH     r0,[r4,#0xe]
        0x000034d8:    b006        ..      ADD      sp,sp,#0x18
        0x000034da:    bd10        ..      POP      {r4,pc}
        0x000034dc:    4802        .H      LDR      r0,[pc,#8] ; [0x34e8] = 0x8617
        0x000034de:    4903        .I      LDR      r1,[pc,#12] ; [0x34ec] = 0x86a2
        0x000034e0:    4a03        .J      LDR      r2,[pc,#12] ; [0x34f0] = 0x211
        0x000034e2:    f004f905    ....    BL       __aeabi_assert ; 0x76f0
        0x000034e6:    46c0        .F      MOV      r8,r8
    $d.21
    __arm_cp.10_0
        0x000034e8:    00008617    ....    DCD    34327
    __arm_cp.10_1
        0x000034ec:    000086a2    ....    DCD    34466
    __arm_cp.10_2
        0x000034f0:    00000211    ....    DCD    529
    $t.22
    _7816_4_getRecordLength
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
        0x000034f4:    b510        ..      PUSH     {r4,lr}
        0x000034f6:    b086        ..      SUB      sp,sp,#0x18
        0x000034f8:    2800        .(      CMP      r0,#0
        0x000034fa:    d009        ..      BEQ      0x3510 ; _7816_4_getRecordLength + 28
;;; Core/7816_4/source\7816_4.c
        0x000034fc:    2200        ."      MOVS     r2,#0
        0x000034fe:    9200        ..      STR      r2,[sp,#0]
        0x00003500:    ac01        ..      ADD      r4,sp,#4
        0x00003502:    2314        .#      MOVS     r3,#0x14
        0x00003504:    4621        !F      MOV      r1,r4
        0x00003506:    f7fdfd2f    ../.    BL       mm_ReadUpdate ; 0xf68
        0x0000350a:    7c20         |      LDRB     r0,[r4,#0x10]
        0x0000350c:    b006        ..      ADD      sp,sp,#0x18
        0x0000350e:    bd10        ..      POP      {r4,pc}
        0x00003510:    4802        .H      LDR      r0,[pc,#8] ; [0x351c] = 0x8617
        0x00003512:    4903        .I      LDR      r1,[pc,#12] ; [0x3520] = 0x86a2
        0x00003514:    4a03        .J      LDR      r2,[pc,#12] ; [0x3524] = 0x229
        0x00003516:    f004f8eb    ....    BL       __aeabi_assert ; 0x76f0
        0x0000351a:    46c0        .F      MOV      r8,r8
    $d.23
    __arm_cp.11_0
        0x0000351c:    00008617    ....    DCD    34327
    __arm_cp.11_1
        0x00003520:    000086a2    ....    DCD    34466
    __arm_cp.11_2
        0x00003524:    00000229    )...    DCD    553
    $t.24
    _7816_4_getNoOfRecords
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
        0x00003528:    b510        ..      PUSH     {r4,lr}
        0x0000352a:    b086        ..      SUB      sp,sp,#0x18
        0x0000352c:    2800        .(      CMP      r0,#0
        0x0000352e:    d011        ..      BEQ      0x3554 ; _7816_4_getNoOfRecords + 44
;;; Core/7816_4/source\7816_4.c
        0x00003530:    2200        ."      MOVS     r2,#0
        0x00003532:    9200        ..      STR      r2,[sp,#0]
        0x00003534:    ac01        ..      ADD      r4,sp,#4
        0x00003536:    2314        .#      MOVS     r3,#0x14
        0x00003538:    4621        !F      MOV      r1,r4
        0x0000353a:    f7fdfd15    ....    BL       mm_ReadUpdate ; 0xf68
        0x0000353e:    7860        `x      LDRB     r0,[r4,#1]
        0x00003540:    2104        .!      MOVS     r1,#4
        0x00003542:    4301        .C      ORRS     r1,r1,r0
        0x00003544:    2087        .       MOVS     r0,#0x87
        0x00003546:    4008        .@      ANDS     r0,r0,r1
        0x00003548:    2806        .(      CMP      r0,#6
        0x0000354a:    d108        ..      BNE      0x355e ; _7816_4_getNoOfRecords + 54
        0x0000354c:    a801        ..      ADD      r0,sp,#4
        0x0000354e:    7bc0        .{      LDRB     r0,[r0,#0xf]
        0x00003550:    b006        ..      ADD      sp,sp,#0x18
        0x00003552:    bd10        ..      POP      {r4,pc}
        0x00003554:    4808        .H      LDR      r0,[pc,#32] ; [0x3578] = 0x8617
        0x00003556:    4907        .I      LDR      r1,[pc,#28] ; [0x3574] = 0x86a2
        0x00003558:    4a04        .J      LDR      r2,[pc,#16] ; [0x356c] = 0x242
        0x0000355a:    f004f8c9    ....    BL       __aeabi_assert ; 0x76f0
        0x0000355e:    4a03        .J      LDR      r2,[pc,#12] ; [0x356c] = 0x242
        0x00003560:    3209        .2      ADDS     r2,r2,#9
        0x00003562:    4803        .H      LDR      r0,[pc,#12] ; [0x3570] = 0x849e
        0x00003564:    4903        .I      LDR      r1,[pc,#12] ; [0x3574] = 0x86a2
        0x00003566:    f004f8c3    ....    BL       __aeabi_assert ; 0x76f0
        0x0000356a:    46c0        .F      MOV      r8,r8
    $d.25
    __arm_cp.12_0
        0x0000356c:    00000242    B...    DCD    578
    __arm_cp.12_1
        0x00003570:    0000849e    ....    DCD    33950
    __arm_cp.12_2
        0x00003574:    000086a2    ....    DCD    34466
    __arm_cp.12_3
        0x00003578:    00008617    ....    DCD    34327
    $t.26
    _7816_4_getLastUpdatedRecord
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
        0x0000357c:    b510        ..      PUSH     {r4,lr}
        0x0000357e:    b086        ..      SUB      sp,sp,#0x18
        0x00003580:    2800        .(      CMP      r0,#0
        0x00003582:    d011        ..      BEQ      0x35a8 ; _7816_4_getLastUpdatedRecord + 44
;;; Core/7816_4/source\7816_4.c
        0x00003584:    2200        ."      MOVS     r2,#0
        0x00003586:    9200        ..      STR      r2,[sp,#0]
        0x00003588:    ac01        ..      ADD      r4,sp,#4
        0x0000358a:    2314        .#      MOVS     r3,#0x14
        0x0000358c:    4621        !F      MOV      r1,r4
        0x0000358e:    f7fdfceb    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003592:    7860        `x      LDRB     r0,[r4,#1]
        0x00003594:    2104        .!      MOVS     r1,#4
        0x00003596:    4301        .C      ORRS     r1,r1,r0
        0x00003598:    2087        .       MOVS     r0,#0x87
        0x0000359a:    4008        .@      ANDS     r0,r0,r1
        0x0000359c:    2806        .(      CMP      r0,#6
        0x0000359e:    d108        ..      BNE      0x35b2 ; _7816_4_getLastUpdatedRecord + 54
        0x000035a0:    a801        ..      ADD      r0,sp,#4
        0x000035a2:    7b80        .{      LDRB     r0,[r0,#0xe]
        0x000035a4:    b006        ..      ADD      sp,sp,#0x18
        0x000035a6:    bd10        ..      POP      {r4,pc}
        0x000035a8:    4808        .H      LDR      r0,[pc,#32] ; [0x35cc] = 0x8617
        0x000035aa:    4907        .I      LDR      r1,[pc,#28] ; [0x35c8] = 0x86a2
        0x000035ac:    4a04        .J      LDR      r2,[pc,#16] ; [0x35c0] = 0x25e
        0x000035ae:    f004f89f    ....    BL       __aeabi_assert ; 0x76f0
        0x000035b2:    4a03        .J      LDR      r2,[pc,#12] ; [0x35c0] = 0x25e
        0x000035b4:    3209        .2      ADDS     r2,r2,#9
        0x000035b6:    4803        .H      LDR      r0,[pc,#12] ; [0x35c4] = 0x849e
        0x000035b8:    4903        .I      LDR      r1,[pc,#12] ; [0x35c8] = 0x86a2
        0x000035ba:    f004f899    ....    BL       __aeabi_assert ; 0x76f0
        0x000035be:    46c0        .F      MOV      r8,r8
    $d.27
    __arm_cp.13_0
        0x000035c0:    0000025e    ^...    DCD    606
    __arm_cp.13_1
        0x000035c4:    0000849e    ....    DCD    33950
    __arm_cp.13_2
        0x000035c8:    000086a2    ....    DCD    34466
    __arm_cp.13_3
        0x000035cc:    00008617    ....    DCD    34327
    $t.28
    _7816_4_setLifeCycleStatus
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
        0x000035d0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000035d2:    b087        ..      SUB      sp,sp,#0x1c
        0x000035d4:    9101        ..      STR      r1,[sp,#4]
        0x000035d6:    2800        .(      CMP      r0,#0
        0x000035d8:    d015        ..      BEQ      0x3606 ; _7816_4_setLifeCycleStatus + 54
;;; Core/7816_4/source\7816_4.c
        0x000035da:    4604        .F      MOV      r4,r0
        0x000035dc:    2600        .&      MOVS     r6,#0
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x000035de:    9600        ..      STR      r6,[sp,#0]
        0x000035e0:    af02        ..      ADD      r7,sp,#8
        0x000035e2:    2514        .%      MOVS     r5,#0x14
        0x000035e4:    4639        9F      MOV      r1,r7
        0x000035e6:    4632        2F      MOV      r2,r6
        0x000035e8:    462b        +F      MOV      r3,r5
        0x000035ea:    f7fdfcbd    ....    BL       mm_ReadUpdate ; 0xf68
;;;641    
;;;642    	fhFile.flState = flState; // update new state
        0x000035ee:    9801        ..      LDR      r0,[sp,#4]
        0x000035f0:    70b8        .p      STRB     r0,[r7,#2]
        0x000035f2:    2001        .       MOVS     r0,#1
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
        0x000035f4:    9000        ..      STR      r0,[sp,#0]
        0x000035f6:    4620         F      MOV      r0,r4
        0x000035f8:    4639        9F      MOV      r1,r7
        0x000035fa:    4632        2F      MOV      r2,r6
        0x000035fc:    462b        +F      MOV      r3,r5
        0x000035fe:    f7fdfcb3    ....    BL       mm_ReadUpdate ; 0xf68
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
        0x00003602:    b007        ..      ADD      sp,sp,#0x1c
        0x00003604:    bdf0        ..      POP      {r4-r7,pc}
        0x00003606:    4802        .H      LDR      r0,[pc,#8] ; [0x3610] = 0x8617
        0x00003608:    4902        .I      LDR      r1,[pc,#8] ; [0x3614] = 0x86a2
        0x0000360a:    4a03        .J      LDR      r2,[pc,#12] ; [0x3618] = 0x27b
        0x0000360c:    f004f870    ..p.    BL       __aeabi_assert ; 0x76f0
    $d.29
    __arm_cp.14_0
        0x00003610:    00008617    ....    DCD    34327
    __arm_cp.14_1
        0x00003614:    000086a2    ....    DCD    34466
    __arm_cp.14_2
        0x00003618:    0000027b    {...    DCD    635
    $t.30
    _7816_4_getLifeCycleStatus
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
        0x0000361c:    b510        ..      PUSH     {r4,lr}
        0x0000361e:    b086        ..      SUB      sp,sp,#0x18
        0x00003620:    2800        .(      CMP      r0,#0
        0x00003622:    d009        ..      BEQ      0x3638 ; _7816_4_getLifeCycleStatus + 28
;;; Core/7816_4/source\7816_4.c
        0x00003624:    2200        ."      MOVS     r2,#0
        0x00003626:    9200        ..      STR      r2,[sp,#0]
        0x00003628:    ac01        ..      ADD      r4,sp,#4
        0x0000362a:    2314        .#      MOVS     r3,#0x14
        0x0000362c:    4621        !F      MOV      r1,r4
        0x0000362e:    f7fdfc9b    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003632:    78a0        .x      LDRB     r0,[r4,#2]
        0x00003634:    b006        ..      ADD      sp,sp,#0x18
        0x00003636:    bd10        ..      POP      {r4,pc}
        0x00003638:    2053        S       MOVS     r0,#0x53
        0x0000363a:    00c2        ..      LSLS     r2,r0,#3
        0x0000363c:    4801        .H      LDR      r0,[pc,#4] ; [0x3644] = 0x8617
        0x0000363e:    4902        .I      LDR      r1,[pc,#8] ; [0x3648] = 0x86a2
        0x00003640:    f004f856    ..V.    BL       __aeabi_assert ; 0x76f0
    $d.31
    __arm_cp.15_0
        0x00003644:    00008617    ....    DCD    34327
    __arm_cp.15_1
        0x00003648:    000086a2    ....    DCD    34466
    $t.32
    _7816_4_SearchRecordFile
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
        0x0000364c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000364e:    b097        ..      SUB      sp,sp,#0x5c
        0x00003650:    461f        .F      MOV      r7,r3
        0x00003652:    4614        .F      MOV      r4,r2
        0x00003654:    910c        ..      STR      r1,[sp,#0x30]
        0x00003656:    2200        ."      MOVS     r2,#0
        0x00003658:    9200        ..      STR      r2,[sp,#0]
        0x0000365a:    ae0d        ..      ADD      r6,sp,#0x34
        0x0000365c:    2314        .#      MOVS     r3,#0x14
        0x0000365e:    9008        ..      STR      r0,[sp,#0x20]
        0x00003660:    4631        1F      MOV      r1,r6
        0x00003662:    9204        ..      STR      r2,[sp,#0x10]
        0x00003664:    f7fdfc80    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003668:    7870        px      LDRB     r0,[r6,#1]
        0x0000366a:    2104        .!      MOVS     r1,#4
        0x0000366c:    4301        .C      ORRS     r1,r1,r0
        0x0000366e:    2287        ."      MOVS     r2,#0x87
        0x00003670:    400a        .@      ANDS     r2,r2,r1
        0x00003672:    2a06        .*      CMP      r2,#6
        0x00003674:    d000        ..      BEQ      0x3678 ; _7816_4_SearchRecordFile + 44
        0x00003676:    e0cf        ..      B        0x3818 ; _7816_4_SearchRecordFile + 460
        0x00003678:    2f02        ./      CMP      r7,#2
        0x0000367a:    d300        ..      BCC      0x367e ; _7816_4_SearchRecordFile + 50
        0x0000367c:    e0c5        ..      B        0x380a ; _7816_4_SearchRecordFile + 446
;;; Core/7816_4/source\7816_4.c
        0x0000367e:    9d1d        ..      LDR      r5,[sp,#0x74]
        0x00003680:    2106        .!      MOVS     r1,#6
        0x00003682:    4008        .@      ANDS     r0,r0,r1
        0x00003684:    2802        .(      CMP      r0,#2
        0x00003686:    d106        ..      BNE      0x3696 ; _7816_4_SearchRecordFile + 74
        0x00003688:    a80d        ..      ADD      r0,sp,#0x34
        0x0000368a:    9009        ..      STR      r0,[sp,#0x24]
        0x0000368c:    7bc0        .{      LDRB     r0,[r0,#0xf]
        0x0000368e:    2f00        ./      CMP      r7,#0
        0x00003690:    d011        ..      BEQ      0x36b6 ; _7816_4_SearchRecordFile + 106
        0x00003692:    1b42        B.      SUBS     r2,r0,r5
        0x00003694:    e010        ..      B        0x36b8 ; _7816_4_SearchRecordFile + 108
        0x00003696:    a90d        ..      ADD      r1,sp,#0x34
        0x00003698:    7bc8        .{      LDRB     r0,[r1,#0xf]
        0x0000369a:    310e        .1      ADDS     r1,r1,#0xe
        0x0000369c:    9109        ..      STR      r1,[sp,#0x24]
        0x0000369e:    9a04        ..      LDR      r2,[sp,#0x10]
        0x000036a0:    2f00        ./      CMP      r7,#0
        0x000036a2:    d10e        ..      BNE      0x36c2 ; _7816_4_SearchRecordFile + 118
        0x000036a4:    2101        .!      MOVS     r1,#1
        0x000036a6:    9107        ..      STR      r1,[sp,#0x1c]
        0x000036a8:    b2d1        ..      UXTB     r1,r2
        0x000036aa:    4281        .B      CMP      r1,r0
        0x000036ac:    d30f        ..      BCC      0x36ce ; _7816_4_SearchRecordFile + 130
        0x000036ae:    9804        ..      LDR      r0,[sp,#0x10]
        0x000036b0:    b2c0        ..      UXTB     r0,r0
        0x000036b2:    b017        ..      ADD      sp,sp,#0x5c
        0x000036b4:    bdf0        ..      POP      {r4-r7,pc}
        0x000036b6:    1e6a        j.      SUBS     r2,r5,#1
        0x000036b8:    9909        ..      LDR      r1,[sp,#0x24]
        0x000036ba:    310e        .1      ADDS     r1,r1,#0xe
        0x000036bc:    9109        ..      STR      r1,[sp,#0x24]
        0x000036be:    2f00        ./      CMP      r7,#0
        0x000036c0:    d0f0        ..      BEQ      0x36a4 ; _7816_4_SearchRecordFile + 88
        0x000036c2:    9904        ..      LDR      r1,[sp,#0x10]
        0x000036c4:    43c9        .C      MVNS     r1,r1
        0x000036c6:    9107        ..      STR      r1,[sp,#0x1c]
        0x000036c8:    b2d1        ..      UXTB     r1,r2
        0x000036ca:    4281        .B      CMP      r1,r0
        0x000036cc:    d2ef        ..      BCS      0x36ae ; _7816_4_SearchRecordFile + 98
        0x000036ce:    9808        ..      LDR      r0,[sp,#0x20]
        0x000036d0:    2800        .(      CMP      r0,#0
        0x000036d2:    d100        ..      BNE      0x36d6 ; _7816_4_SearchRecordFile + 138
        0x000036d4:    e0a6        ..      B        0x3824 ; _7816_4_SearchRecordFile + 472
        0x000036d6:    991e        ..      LDR      r1,[sp,#0x78]
        0x000036d8:    981f        ..      LDR      r0,[sp,#0x7c]
        0x000036da:    9002        ..      STR      r0,[sp,#8]
        0x000036dc:    981c        ..      LDR      r0,[sp,#0x70]
        0x000036de:    9103        ..      STR      r1,[sp,#0xc]
        0x000036e0:    1909        ..      ADDS     r1,r1,r4
        0x000036e2:    9106        ..      STR      r1,[sp,#0x18]
        0x000036e4:    2800        .(      CMP      r0,#0
        0x000036e6:    d04e        N.      BEQ      0x3786 ; _7816_4_SearchRecordFile + 314
        0x000036e8:    2000        .       MOVS     r0,#0
        0x000036ea:    9005        ..      STR      r0,[sp,#0x14]
        0x000036ec:    9004        ..      STR      r0,[sp,#0x10]
        0x000036ee:    e004        ..      B        0x36fa ; _7816_4_SearchRecordFile + 174
        0x000036f0:    9a0a        ..      LDR      r2,[sp,#0x28]
        0x000036f2:    1c52        R.      ADDS     r2,r2,#1
        0x000036f4:    b2d1        ..      UXTB     r1,r2
        0x000036f6:    4281        .B      CMP      r1,r0
        0x000036f8:    d2d9        ..      BCS      0x36ae ; _7816_4_SearchRecordFile + 98
        0x000036fa:    920a        ..      STR      r2,[sp,#0x28]
        0x000036fc:    9a05        ..      LDR      r2,[sp,#0x14]
        0x000036fe:    9200        ..      STR      r2,[sp,#0]
        0x00003700:    ae12        ..      ADD      r6,sp,#0x48
        0x00003702:    2314        .#      MOVS     r3,#0x14
        0x00003704:    9808        ..      LDR      r0,[sp,#0x20]
        0x00003706:    4631        1F      MOV      r1,r6
        0x00003708:    f7fdfc2e    ....    BL       mm_ReadUpdate ; 0xf68
        0x0000370c:    950b        ..      STR      r5,[sp,#0x2c]
        0x0000370e:    b2e8        ..      UXTB     r0,r5
        0x00003710:    7bb1        .{      LDRB     r1,[r6,#0xe]
        0x00003712:    1840        @.      ADDS     r0,r0,r1
        0x00003714:    1e80        ..      SUBS     r0,r0,#2
        0x00003716:    7bf1        .{      LDRB     r1,[r6,#0xf]
        0x00003718:    f004f880    ....    BL       __aeabi_idivmod ; 0x781c
        0x0000371c:    7c30        0|      LDRB     r0,[r6,#0x10]
        0x0000371e:    9a06        ..      LDR      r2,[sp,#0x18]
        0x00003720:    1a86        ..      SUBS     r6,r0,r2
        0x00003722:    d413        ..      BMI      0x374c ; _7816_4_SearchRecordFile + 256
        0x00003724:    b289        ..      UXTH     r1,r1
        0x00003726:    4348        HC      MULS     r0,r1,r0
        0x00003728:    9903        ..      LDR      r1,[sp,#0xc]
        0x0000372a:    1847        G.      ADDS     r7,r0,r1
        0x0000372c:    2000        .       MOVS     r0,#0
        0x0000372e:    4605        .F      MOV      r5,r0
        0x00003730:    1838        8.      ADDS     r0,r7,r0
        0x00003732:    b282        ..      UXTH     r2,r0
        0x00003734:    a812        ..      ADD      r0,sp,#0x48
        0x00003736:    8980        ..      LDRH     r0,[r0,#0xc]
        0x00003738:    990c        ..      LDR      r1,[sp,#0x30]
        0x0000373a:    4623        #F      MOV      r3,r4
        0x0000373c:    f7fdfcd6    ....    BL       mm_cmpRam ; 0x10ec
        0x00003740:    28ff        .(      CMP      r0,#0xff
        0x00003742:    d005        ..      BEQ      0x3750 ; _7816_4_SearchRecordFile + 260
        0x00003744:    1c6d        m.      ADDS     r5,r5,#1
        0x00003746:    b2e8        ..      UXTB     r0,r5
        0x00003748:    4286        .B      CMP      r6,r0
        0x0000374a:    daf1        ..      BGE      0x3730 ; _7816_4_SearchRecordFile + 228
        0x0000374c:    990b        ..      LDR      r1,[sp,#0x2c]
        0x0000374e:    e006        ..      B        0x375e ; _7816_4_SearchRecordFile + 274
        0x00003750:    9b04        ..      LDR      r3,[sp,#0x10]
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
        0x00003752:    b2d8        ..      UXTB     r0,r3
        0x00003754:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00003756:    9a02        ..      LDR      r2,[sp,#8]
        0x00003758:    5411        .T      STRB     r1,[r2,r0]
        0x0000375a:    1c5b        [.      ADDS     r3,r3,#1
        0x0000375c:    9304        ..      STR      r3,[sp,#0x10]
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
        0x0000375e:    9807        ..      LDR      r0,[sp,#0x1c]
        0x00003760:    180a        ..      ADDS     r2,r1,r0
        0x00003762:    b2d1        ..      UXTB     r1,r2
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
        0x00003764:    9809        ..      LDR      r0,[sp,#0x24]
        0x00003766:    7840        @x      LDRB     r0,[r0,#1]
        0x00003768:    2900        .)      CMP      r1,#0
        0x0000376a:    4605        .F      MOV      r5,r0
        0x0000376c:    d000        ..      BEQ      0x3770 ; _7816_4_SearchRecordFile + 292
        0x0000376e:    4615        .F      MOV      r5,r2
        0x00003770:    4281        .B      CMP      r1,r0
        0x00003772:    d9bd        ..      BLS      0x36f0 ; _7816_4_SearchRecordFile + 164
        0x00003774:    2501        .%      MOVS     r5,#1
        0x00003776:    e7bb        ..      B        0x36f0 ; _7816_4_SearchRecordFile + 164
        0x00003778:    9a0a        ..      LDR      r2,[sp,#0x28]
        0x0000377a:    1c52        R.      ADDS     r2,r2,#1
        0x0000377c:    b2d1        ..      UXTB     r1,r2
        0x0000377e:    2300        .#      MOVS     r3,#0
        0x00003780:    9304        ..      STR      r3,[sp,#0x10]
        0x00003782:    4281        .B      CMP      r1,r0
        0x00003784:    d293        ..      BCS      0x36ae ; _7816_4_SearchRecordFile + 98
        0x00003786:    920a        ..      STR      r2,[sp,#0x28]
        0x00003788:    2600        .&      MOVS     r6,#0
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x0000378a:    9600        ..      STR      r6,[sp,#0]
        0x0000378c:    af12        ..      ADD      r7,sp,#0x48
        0x0000378e:    2314        .#      MOVS     r3,#0x14
        0x00003790:    9808        ..      LDR      r0,[sp,#0x20]
        0x00003792:    4639        9F      MOV      r1,r7
        0x00003794:    4632        2F      MOV      r2,r6
        0x00003796:    f7fdfbe7    ....    BL       mm_ReadUpdate ; 0xf68
        0x0000379a:    950b        ..      STR      r5,[sp,#0x2c]
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
        0x0000379c:    b2e8        ..      UXTB     r0,r5
        0x0000379e:    7bb9        .{      LDRB     r1,[r7,#0xe]
        0x000037a0:    1840        @.      ADDS     r0,r0,r1
        0x000037a2:    1e80        ..      SUBS     r0,r0,#2
        0x000037a4:    7bf9        .{      LDRB     r1,[r7,#0xf]
        0x000037a6:    f004f839    ..9.    BL       __aeabi_idivmod ; 0x781c
        0x000037aa:    7c38        8|      LDRB     r0,[r7,#0x10]
        0x000037ac:    9a06        ..      LDR      r2,[sp,#0x18]
        0x000037ae:    1a82        ..      SUBS     r2,r0,r2
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
        0x000037b0:    9205        ..      STR      r2,[sp,#0x14]
        0x000037b2:    d413        ..      BMI      0x37dc ; _7816_4_SearchRecordFile + 400
        0x000037b4:    b289        ..      UXTH     r1,r1
        0x000037b6:    4348        HC      MULS     r0,r1,r0
        0x000037b8:    9903        ..      LDR      r1,[sp,#0xc]
        0x000037ba:    1847        G.      ADDS     r7,r0,r1
        0x000037bc:    4635        5F      MOV      r5,r6
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
        0x000037be:    19b8        ..      ADDS     r0,r7,r6
        0x000037c0:    b282        ..      UXTH     r2,r0
        0x000037c2:    a812        ..      ADD      r0,sp,#0x48
        0x000037c4:    8980        ..      LDRH     r0,[r0,#0xc]
        0x000037c6:    990c        ..      LDR      r1,[sp,#0x30]
        0x000037c8:    4623        #F      MOV      r3,r4
        0x000037ca:    f7fdfc8f    ....    BL       mm_cmpRam ; 0x10ec
        0x000037ce:    28ff        .(      CMP      r0,#0xff
        0x000037d0:    d012        ..      BEQ      0x37f8 ; _7816_4_SearchRecordFile + 428
        0x000037d2:    1c6d        m.      ADDS     r5,r5,#1
        0x000037d4:    b2ee        ..      UXTB     r6,r5
        0x000037d6:    9805        ..      LDR      r0,[sp,#0x14]
        0x000037d8:    42b0        .B      CMP      r0,r6
        0x000037da:    daf0        ..      BGE      0x37be ; _7816_4_SearchRecordFile + 370
        0x000037dc:    980b        ..      LDR      r0,[sp,#0x2c]
        0x000037de:    9907        ..      LDR      r1,[sp,#0x1c]
        0x000037e0:    1842        B.      ADDS     r2,r0,r1
        0x000037e2:    b2d1        ..      UXTB     r1,r2
        0x000037e4:    9809        ..      LDR      r0,[sp,#0x24]
        0x000037e6:    7840        @x      LDRB     r0,[r0,#1]
        0x000037e8:    2900        .)      CMP      r1,#0
        0x000037ea:    4605        .F      MOV      r5,r0
        0x000037ec:    d000        ..      BEQ      0x37f0 ; _7816_4_SearchRecordFile + 420
        0x000037ee:    4615        .F      MOV      r5,r2
        0x000037f0:    4281        .B      CMP      r1,r0
        0x000037f2:    d9c1        ..      BLS      0x3778 ; _7816_4_SearchRecordFile + 300
        0x000037f4:    2501        .%      MOVS     r5,#1
        0x000037f6:    e7bf        ..      B        0x3778 ; _7816_4_SearchRecordFile + 300
        0x000037f8:    980b        ..      LDR      r0,[sp,#0x2c]
        0x000037fa:    9902        ..      LDR      r1,[sp,#8]
        0x000037fc:    7008        .p      STRB     r0,[r1,#0]
        0x000037fe:    2001        .       MOVS     r0,#1
        0x00003800:    9004        ..      STR      r0,[sp,#0x10]
        0x00003802:    9804        ..      LDR      r0,[sp,#0x10]
        0x00003804:    b2c0        ..      UXTB     r0,r0
        0x00003806:    b017        ..      ADD      sp,sp,#0x5c
        0x00003808:    bdf0        ..      POP      {r4-r7,pc}
        0x0000380a:    20b1        .       MOVS     r0,#0xb1
        0x0000380c:    0080        ..      LSLS     r0,r0,#2
        0x0000380e:    1c42        B.      ADDS     r2,r0,#1
        0x00003810:    4807        .H      LDR      r0,[pc,#28] ; [0x3830] = 0x84db
        0x00003812:    4908        .I      LDR      r1,[pc,#32] ; [0x3834] = 0x86a2
        0x00003814:    f003ff6c    ..l.    BL       __aeabi_assert ; 0x76f0
        0x00003818:    20b1        .       MOVS     r0,#0xb1
        0x0000381a:    0082        ..      LSLS     r2,r0,#2
        0x0000381c:    4808        .H      LDR      r0,[pc,#32] ; [0x3840] = 0x849e
        0x0000381e:    4905        .I      LDR      r1,[pc,#20] ; [0x3834] = 0x86a2
        0x00003820:    f003ff66    ..f.    BL       __aeabi_assert ; 0x76f0
        0x00003824:    4804        .H      LDR      r0,[pc,#16] ; [0x3838] = 0x8617
        0x00003826:    4903        .I      LDR      r1,[pc,#12] ; [0x3834] = 0x86a2
        0x00003828:    4a04        .J      LDR      r2,[pc,#16] ; [0x383c] = 0x3d1
        0x0000382a:    f003ff61    ..a.    BL       __aeabi_assert ; 0x76f0
        0x0000382e:    46c0        .F      MOV      r8,r8
    $d.33
    __arm_cp.16_0
        0x00003830:    000084db    ....    DCD    34011
    __arm_cp.16_1
        0x00003834:    000086a2    ....    DCD    34466
    __arm_cp.16_2
        0x00003838:    00008617    ....    DCD    34327
    __arm_cp.16_3
        0x0000383c:    000003d1    ....    DCD    977
    __arm_cp.16_4
        0x00003840:    0000849e    ....    DCD    33950
    $t.34
    _7816_4_compareWithRecord
;;; Core/7816_4/source\7816_4.c (967)
        0x00003844:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00003846:    b089        ..      SUB      sp,sp,#0x24
        0x00003848:    9303        ..      STR      r3,[sp,#0xc]
        0x0000384a:    9102        ..      STR      r1,[sp,#8]
        0x0000384c:    2800        .(      CMP      r0,#0
        0x0000384e:    d02f        /.      BEQ      0x38b0 ; _7816_4_compareWithRecord + 108
;;; Core/7816_4/source\7816_4.c
        0x00003850:    4614        .F      MOV      r4,r2
        0x00003852:    9d0e        ..      LDR      r5,[sp,#0x38]
        0x00003854:    2700        .'      MOVS     r7,#0
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00003856:    9700        ..      STR      r7,[sp,#0]
        0x00003858:    ae04        ..      ADD      r6,sp,#0x10
        0x0000385a:    2314        .#      MOVS     r3,#0x14
        0x0000385c:    4631        1F      MOV      r1,r6
        0x0000385e:    463a        :F      MOV      r2,r7
        0x00003860:    f7fdfb82    ....    BL       mm_ReadUpdate ; 0xf68
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
        0x00003864:    7bb0        .{      LDRB     r0,[r6,#0xe]
        0x00003866:    9902        ..      LDR      r1,[sp,#8]
        0x00003868:    1808        ..      ADDS     r0,r1,r0
        0x0000386a:    1e80        ..      SUBS     r0,r0,#2
        0x0000386c:    7bf1        .{      LDRB     r1,[r6,#0xf]
        0x0000386e:    f003ffd5    ....    BL       __aeabi_idivmod ; 0x781c
        0x00003872:    192a        *.      ADDS     r2,r5,r4
        0x00003874:    7c30        0|      LDRB     r0,[r6,#0x10]
        0x00003876:    1a86        ..      SUBS     r6,r0,r2
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
        0x00003878:    d413        ..      BMI      0x38a2 ; _7816_4_compareWithRecord + 94
        0x0000387a:    b289        ..      UXTH     r1,r1
        0x0000387c:    4348        HC      MULS     r0,r1,r0
        0x0000387e:    1907        ..      ADDS     r7,r0,r4
        0x00003880:    2000        .       MOVS     r0,#0
        0x00003882:    4604        .F      MOV      r4,r0
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
        0x00003884:    1838        8.      ADDS     r0,r7,r0
        0x00003886:    b282        ..      UXTH     r2,r0
        0x00003888:    a804        ..      ADD      r0,sp,#0x10
        0x0000388a:    8980        ..      LDRH     r0,[r0,#0xc]
        0x0000388c:    9903        ..      LDR      r1,[sp,#0xc]
        0x0000388e:    462b        +F      MOV      r3,r5
        0x00003890:    f7fdfc2c    ..,.    BL       mm_cmpRam ; 0x10ec
        0x00003894:    28ff        .(      CMP      r0,#0xff
        0x00003896:    d007        ..      BEQ      0x38a8 ; _7816_4_compareWithRecord + 100
        0x00003898:    1c64        d.      ADDS     r4,r4,#1
        0x0000389a:    b2e0        ..      UXTB     r0,r4
        0x0000389c:    4286        .B      CMP      r6,r0
        0x0000389e:    daf1        ..      BGE      0x3884 ; _7816_4_compareWithRecord + 64
        0x000038a0:    2700        .'      MOVS     r7,#0
;;;993    
;;;994    			DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Data found inside the record\n");
;;;995    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns TRUE %1\n", TRUE);
;;;996    			return TRUE;
;;;997    		}
;;;998    	}
;;;999    
;;;1000   		DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns FALSE %1\n", FALSE);
;;;1001   		return FALSE;
;;;1002   }
        0x000038a2:    4638        8F      MOV      r0,r7
        0x000038a4:    b009        ..      ADD      sp,sp,#0x24
        0x000038a6:    bdf0        ..      POP      {r4-r7,pc}
        0x000038a8:    27ff        .'      MOVS     r7,#0xff
        0x000038aa:    4638        8F      MOV      r0,r7
        0x000038ac:    b009        ..      ADD      sp,sp,#0x24
        0x000038ae:    bdf0        ..      POP      {r4-r7,pc}
        0x000038b0:    4802        .H      LDR      r0,[pc,#8] ; [0x38bc] = 0x8617
        0x000038b2:    4903        .I      LDR      r1,[pc,#12] ; [0x38c0] = 0x86a2
        0x000038b4:    4a03        .J      LDR      r2,[pc,#12] ; [0x38c4] = 0x3d1
        0x000038b6:    f003ff1b    ....    BL       __aeabi_assert ; 0x76f0
        0x000038ba:    46c0        .F      MOV      r8,r8
    $d.35
    __arm_cp.17_0
        0x000038bc:    00008617    ....    DCD    34327
    __arm_cp.17_1
        0x000038c0:    000086a2    ....    DCD    34466
    __arm_cp.17_2
        0x000038c4:    000003d1    ....    DCD    977
    $t.36
    _7816_4_EnhancedSearchRecordFile
;;; Core/7816_4/source\7816_4.c (796)
        0x000038c8:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000038ca:    b09d        ..      SUB      sp,sp,#0x74
        0x000038cc:    ad17        ..      ADD      r5,sp,#0x5c
        0x000038ce:    9c24        $.      LDR      r4,[sp,#0x90]
        0x000038d0:    702c        ,p      STRB     r4,[r5,#0]
        0x000038d2:    9f25        %.      LDR      r7,[sp,#0x94]
        0x000038d4:    9e23        #.      LDR      r6,[sp,#0x8c]
        0x000038d6:    9d22        ".      LDR      r5,[sp,#0x88]
        0x000038d8:    2d00        .-      CMP      r5,#0
        0x000038da:    d023        #.      BEQ      0x3924 ; _7816_4_EnhancedSearchRecordFile + 92
;;; Core/7816_4/source\7816_4.c
        0x000038dc:    910e        ..      STR      r1,[sp,#0x38]
        0x000038de:    9311        ..      STR      r3,[sp,#0x44]
        0x000038e0:    9210        ..      STR      r2,[sp,#0x40]
        0x000038e2:    2200        ."      MOVS     r2,#0
        0x000038e4:    9200        ..      STR      r2,[sp,#0]
        0x000038e6:    ac12        ..      ADD      r4,sp,#0x48
        0x000038e8:    2314        .#      MOVS     r3,#0x14
        0x000038ea:    9007        ..      STR      r0,[sp,#0x1c]
        0x000038ec:    4621        !F      MOV      r1,r4
        0x000038ee:    4615        .F      MOV      r5,r2
        0x000038f0:    f7fdfb3a    ..:.    BL       mm_ReadUpdate ; 0xf68
        0x000038f4:    7860        `x      LDRB     r0,[r4,#1]
        0x000038f6:    2104        .!      MOVS     r1,#4
        0x000038f8:    4301        .C      ORRS     r1,r1,r0
        0x000038fa:    2287        ."      MOVS     r2,#0x87
        0x000038fc:    400a        .@      ANDS     r2,r2,r1
        0x000038fe:    2a06        .*      CMP      r2,#6
        0x00003900:    d000        ..      BEQ      0x3904 ; _7816_4_EnhancedSearchRecordFile + 60
        0x00003902:    e0b8        ..      B        0x3a76 ; _7816_4_EnhancedSearchRecordFile + 430
        0x00003904:    9911        ..      LDR      r1,[sp,#0x44]
        0x00003906:    2902        .)      CMP      r1,#2
        0x00003908:    d300        ..      BCC      0x390c ; _7816_4_EnhancedSearchRecordFile + 68
        0x0000390a:    e0a9        ..      B        0x3a60 ; _7816_4_EnhancedSearchRecordFile + 408
        0x0000390c:    2106        .!      MOVS     r1,#6
        0x0000390e:    4008        .@      ANDS     r0,r0,r1
        0x00003910:    2802        .(      CMP      r0,#2
        0x00003912:    462c        ,F      MOV      r4,r5
        0x00003914:    d110        ..      BNE      0x3938 ; _7816_4_EnhancedSearchRecordFile + 112
        0x00003916:    a812        ..      ADD      r0,sp,#0x48
        0x00003918:    9911        ..      LDR      r1,[sp,#0x44]
        0x0000391a:    2900        .)      CMP      r1,#0
        0x0000391c:    d00b        ..      BEQ      0x3936 ; _7816_4_EnhancedSearchRecordFile + 110
        0x0000391e:    7bc0        .{      LDRB     r0,[r0,#0xf]
        0x00003920:    1b84        ..      SUBS     r4,r0,r6
        0x00003922:    e009        ..      B        0x3938 ; _7816_4_EnhancedSearchRecordFile + 112
        0x00003924:    2501        .%      MOVS     r5,#1
        0x00003926:    9500        ..      STR      r5,[sp,#0]
        0x00003928:    9601        ..      STR      r6,[sp,#4]
        0x0000392a:    9402        ..      STR      r4,[sp,#8]
        0x0000392c:    9703        ..      STR      r7,[sp,#0xc]
        0x0000392e:    f7fffe8d    ....    BL       _7816_4_SearchRecordFile ; 0x364c
        0x00003932:    9006        ..      STR      r0,[sp,#0x18]
        0x00003934:    e090        ..      B        0x3a58 ; _7816_4_EnhancedSearchRecordFile + 400
        0x00003936:    1e74        t.      SUBS     r4,r6,#1
        0x00003938:    9807        ..      LDR      r0,[sp,#0x1c]
        0x0000393a:    2800        .(      CMP      r0,#0
        0x0000393c:    d100        ..      BNE      0x3940 ; _7816_4_EnhancedSearchRecordFile + 120
        0x0000393e:    e095        ..      B        0x3a6c ; _7816_4_EnhancedSearchRecordFile + 420
        0x00003940:    2500        .%      MOVS     r5,#0
        0x00003942:    9500        ..      STR      r5,[sp,#0]
        0x00003944:    a918        ..      ADD      r1,sp,#0x60
        0x00003946:    2314        .#      MOVS     r3,#0x14
        0x00003948:    910f        ..      STR      r1,[sp,#0x3c]
        0x0000394a:    462a        *F      MOV      r2,r5
        0x0000394c:    f7fdfb0c    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003950:    9811        ..      LDR      r0,[sp,#0x44]
        0x00003952:    2800        .(      CMP      r0,#0
        0x00003954:    d001        ..      BEQ      0x395a ; _7816_4_EnhancedSearchRecordFile + 146
        0x00003956:    43e8        .C      MVNS     r0,r5
        0x00003958:    e000        ..      B        0x395c ; _7816_4_EnhancedSearchRecordFile + 148
        0x0000395a:    2001        .       MOVS     r0,#1
        0x0000395c:    900b        ..      STR      r0,[sp,#0x2c]
        0x0000395e:    9506        ..      STR      r5,[sp,#0x18]
        0x00003960:    a812        ..      ADD      r0,sp,#0x48
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
        0x00003962:    7bc1        .{      LDRB     r1,[r0,#0xf]
        0x00003964:    b2e2        ..      UXTB     r2,r4
        0x00003966:    428a        .B      CMP      r2,r1
        0x00003968:    d276        v.      BCS      0x3a58 ; _7816_4_EnhancedSearchRecordFile + 400
        0x0000396a:    9a0f        ..      LDR      r2,[sp,#0x3c]
        0x0000396c:    7c13        .|      LDRB     r3,[r2,#0x10]
        0x0000396e:    9a10        ..      LDR      r2,[sp,#0x40]
        0x00003970:    930a        ..      STR      r3,[sp,#0x28]
        0x00003972:    1a9a        ..      SUBS     r2,r3,r2
        0x00003974:    9211        ..      STR      r2,[sp,#0x44]
        0x00003976:    2a01        .*      CMP      r2,#1
        0x00003978:    db6e        n.      BLT      0x3a58 ; _7816_4_EnhancedSearchRecordFile + 400
        0x0000397a:    7b80        .{      LDRB     r0,[r0,#0xe]
        0x0000397c:    1e80        ..      SUBS     r0,r0,#2
        0x0000397e:    9009        ..      STR      r0,[sp,#0x24]
        0x00003980:    2000        .       MOVS     r0,#0
        0x00003982:    9008        ..      STR      r0,[sp,#0x20]
        0x00003984:    9006        ..      STR      r0,[sp,#0x18]
        0x00003986:    9705        ..      STR      r7,[sp,#0x14]
        0x00003988:    e003        ..      B        0x3992 ; _7816_4_EnhancedSearchRecordFile + 202
        0x0000398a:    1c64        d.      ADDS     r4,r4,#1
        0x0000398c:    b2e0        ..      UXTB     r0,r4
        0x0000398e:    4288        .B      CMP      r0,r1
        0x00003990:    d262        b.      BCS      0x3a58 ; _7816_4_EnhancedSearchRecordFile + 400
        0x00003992:    940d        ..      STR      r4,[sp,#0x34]
        0x00003994:    960c        ..      STR      r6,[sp,#0x30]
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
        0x00003996:    b2f2        ..      UXTB     r2,r6
        0x00003998:    9809        ..      LDR      r0,[sp,#0x24]
        0x0000399a:    920f        ..      STR      r2,[sp,#0x3c]
        0x0000399c:    1880        ..      ADDS     r0,r0,r2
        0x0000399e:    b2c9        ..      UXTB     r1,r1
        0x000039a0:    f003ff3c    ..<.    BL       __aeabi_idivmod ; 0x781c
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
        0x000039a4:    b2cd        ..      UXTB     r5,r1
        0x000039a6:    980a        ..      LDR      r0,[sp,#0x28]
        0x000039a8:    4345        EC      MULS     r5,r0,r5
        0x000039aa:    9c08        ..      LDR      r4,[sp,#0x20]
        0x000039ac:    4620         F      MOV      r0,r4
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
        0x000039ae:    1940        @.      ADDS     r0,r0,r5
        0x000039b0:    b282        ..      UXTH     r2,r0
        0x000039b2:    a812        ..      ADD      r0,sp,#0x48
        0x000039b4:    8980        ..      LDRH     r0,[r0,#0xc]
        0x000039b6:    a917        ..      ADD      r1,sp,#0x5c
        0x000039b8:    2601        .&      MOVS     r6,#1
        0x000039ba:    4633        3F      MOV      r3,r6
        0x000039bc:    f7fdfb96    ....    BL       mm_cmpRam ; 0x10ec
        0x000039c0:    1c64        d.      ADDS     r4,r4,#1
        0x000039c2:    28ff        .(      CMP      r0,#0xff
        0x000039c4:    d004        ..      BEQ      0x39d0 ; _7816_4_EnhancedSearchRecordFile + 264
        0x000039c6:    b2e0        ..      UXTB     r0,r4
        0x000039c8:    9911        ..      LDR      r1,[sp,#0x44]
        0x000039ca:    4281        .B      CMP      r1,r0
        0x000039cc:    dcef        ..      BGT      0x39ae ; _7816_4_EnhancedSearchRecordFile + 230
        0x000039ce:    e029        ).      B        0x3a24 ; _7816_4_EnhancedSearchRecordFile + 348
        0x000039d0:    2700        .'      MOVS     r7,#0
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x000039d2:    9700        ..      STR      r7,[sp,#0]
        0x000039d4:    ad18        ..      ADD      r5,sp,#0x60
        0x000039d6:    2314        .#      MOVS     r3,#0x14
        0x000039d8:    9807        ..      LDR      r0,[sp,#0x1c]
        0x000039da:    4629        )F      MOV      r1,r5
        0x000039dc:    463a        :F      MOV      r2,r7
        0x000039de:    f7fdfac3    ....    BL       mm_ReadUpdate ; 0xf68
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
        0x000039e2:    7ba8        .{      LDRB     r0,[r5,#0xe]
        0x000039e4:    990f        ..      LDR      r1,[sp,#0x3c]
        0x000039e6:    1808        ..      ADDS     r0,r1,r0
        0x000039e8:    1e80        ..      SUBS     r0,r0,#2
        0x000039ea:    7be9        .{      LDRB     r1,[r5,#0xf]
        0x000039ec:    f003ff16    ....    BL       __aeabi_idivmod ; 0x781c
        0x000039f0:    b2e0        ..      UXTB     r0,r4
        0x000039f2:    9a10        ..      LDR      r2,[sp,#0x40]
        0x000039f4:    1883        ..      ADDS     r3,r0,r2
        0x000039f6:    7c2a        *|      LDRB     r2,[r5,#0x10]
        0x000039f8:    1ad3        ..      SUBS     r3,r2,r3
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
        0x000039fa:    930f        ..      STR      r3,[sp,#0x3c]
        0x000039fc:    d412        ..      BMI      0x3a24 ; _7816_4_EnhancedSearchRecordFile + 348
        0x000039fe:    b289        ..      UXTH     r1,r1
        0x00003a00:    434a        JC      MULS     r2,r1,r2
        0x00003a02:    1814        ..      ADDS     r4,r2,r0
        0x00003a04:    463d        =F      MOV      r5,r7
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
        0x00003a06:    19e0        ..      ADDS     r0,r4,r7
        0x00003a08:    b282        ..      UXTH     r2,r0
        0x00003a0a:    a818        ..      ADD      r0,sp,#0x60
        0x00003a0c:    8980        ..      LDRH     r0,[r0,#0xc]
        0x00003a0e:    990e        ..      LDR      r1,[sp,#0x38]
        0x00003a10:    9b10        ..      LDR      r3,[sp,#0x40]
        0x00003a12:    f7fdfb6b    ..k.    BL       mm_cmpRam ; 0x10ec
        0x00003a16:    28ff        .(      CMP      r0,#0xff
        0x00003a18:    d016        ..      BEQ      0x3a48 ; _7816_4_EnhancedSearchRecordFile + 384
        0x00003a1a:    1c6d        m.      ADDS     r5,r5,#1
        0x00003a1c:    b2ef        ..      UXTB     r7,r5
        0x00003a1e:    980f        ..      LDR      r0,[sp,#0x3c]
        0x00003a20:    42b8        .B      CMP      r0,r7
        0x00003a22:    daf0        ..      BGE      0x3a06 ; _7816_4_EnhancedSearchRecordFile + 318
        0x00003a24:    9a0c        ..      LDR      r2,[sp,#0x30]
        0x00003a26:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00003a28:    1813        ..      ADDS     r3,r2,r0
        0x00003a2a:    b2d8        ..      UXTB     r0,r3
        0x00003a2c:    a912        ..      ADD      r1,sp,#0x48
        0x00003a2e:    7bc9        .{      LDRB     r1,[r1,#0xf]
        0x00003a30:    2800        .(      CMP      r0,#0
        0x00003a32:    460a        .F      MOV      r2,r1
        0x00003a34:    9c0d        ..      LDR      r4,[sp,#0x34]
        0x00003a36:    d102        ..      BNE      0x3a3e ; _7816_4_EnhancedSearchRecordFile + 374
        0x00003a38:    4288        .B      CMP      r0,r1
        0x00003a3a:    d8a6        ..      BHI      0x398a ; _7816_4_EnhancedSearchRecordFile + 194
        0x00003a3c:    e002        ..      B        0x3a44 ; _7816_4_EnhancedSearchRecordFile + 380
        0x00003a3e:    461a        .F      MOV      r2,r3
        0x00003a40:    4288        .B      CMP      r0,r1
        0x00003a42:    d8a2        ..      BHI      0x398a ; _7816_4_EnhancedSearchRecordFile + 194
        0x00003a44:    4616        .F      MOV      r6,r2
        0x00003a46:    e7a0        ..      B        0x398a ; _7816_4_EnhancedSearchRecordFile + 194
        0x00003a48:    9906        ..      LDR      r1,[sp,#0x18]
        0x00003a4a:    b2c8        ..      UXTB     r0,r1
        0x00003a4c:    9f05        ..      LDR      r7,[sp,#0x14]
        0x00003a4e:    9a0c        ..      LDR      r2,[sp,#0x30]
        0x00003a50:    543a        :T      STRB     r2,[r7,r0]
        0x00003a52:    1c49        I.      ADDS     r1,r1,#1
        0x00003a54:    9106        ..      STR      r1,[sp,#0x18]
        0x00003a56:    e7e6        ..      B        0x3a26 ; _7816_4_EnhancedSearchRecordFile + 350
        0x00003a58:    9806        ..      LDR      r0,[sp,#0x18]
        0x00003a5a:    b2c0        ..      UXTB     r0,r0
        0x00003a5c:    b01d        ..      ADD      sp,sp,#0x74
        0x00003a5e:    bdf0        ..      POP      {r4-r7,pc}
        0x00003a60:    4807        .H      LDR      r0,[pc,#28] ; [0x3a80] = 0x335
        0x00003a62:    1c42        B.      ADDS     r2,r0,#1
        0x00003a64:    4807        .H      LDR      r0,[pc,#28] ; [0x3a84] = 0x84db
        0x00003a66:    4908        .I      LDR      r1,[pc,#32] ; [0x3a88] = 0x86a2
        0x00003a68:    f003fe42    ..B.    BL       __aeabi_assert ; 0x76f0
        0x00003a6c:    4807        .H      LDR      r0,[pc,#28] ; [0x3a8c] = 0x8617
        0x00003a6e:    4906        .I      LDR      r1,[pc,#24] ; [0x3a88] = 0x86a2
        0x00003a70:    4a07        .J      LDR      r2,[pc,#28] ; [0x3a90] = 0x229
        0x00003a72:    f003fe3d    ..=.    BL       __aeabi_assert ; 0x76f0
        0x00003a76:    4807        .H      LDR      r0,[pc,#28] ; [0x3a94] = 0x849e
        0x00003a78:    4903        .I      LDR      r1,[pc,#12] ; [0x3a88] = 0x86a2
        0x00003a7a:    4a01        .J      LDR      r2,[pc,#4] ; [0x3a80] = 0x335
        0x00003a7c:    f003fe38    ..8.    BL       __aeabi_assert ; 0x76f0
    $d.37
    __arm_cp.18_0
        0x00003a80:    00000335    5...    DCD    821
    __arm_cp.18_1
        0x00003a84:    000084db    ....    DCD    34011
    __arm_cp.18_2
        0x00003a88:    000086a2    ....    DCD    34466
    __arm_cp.18_3
        0x00003a8c:    00008617    ....    DCD    34327
    __arm_cp.18_4
        0x00003a90:    00000229    )...    DCD    553
    __arm_cp.18_5
        0x00003a94:    0000849e    ....    DCD    33950
    $t.38
    _7816_4_getParentFile
;;; Core/7816_4/source\7816_4.c (912)
        0x00003a98:    b510        ..      PUSH     {r4,lr}
        0x00003a9a:    b086        ..      SUB      sp,sp,#0x18
        0x00003a9c:    2800        .(      CMP      r0,#0
        0x00003a9e:    d009        ..      BEQ      0x3ab4 ; _7816_4_getParentFile + 28
;;; Core/7816_4/source\7816_4.c
        0x00003aa0:    2200        ."      MOVS     r2,#0
        0x00003aa2:    9200        ..      STR      r2,[sp,#0]
        0x00003aa4:    ac01        ..      ADD      r4,sp,#4
        0x00003aa6:    2314        .#      MOVS     r3,#0x14
        0x00003aa8:    4621        !F      MOV      r1,r4
        0x00003aaa:    f7fdfa5d    ..].    BL       mm_ReadUpdate ; 0xf68
        0x00003aae:    88a0        ..      LDRH     r0,[r4,#4]
        0x00003ab0:    b006        ..      ADD      sp,sp,#0x18
        0x00003ab2:    bd10        ..      POP      {r4,pc}
        0x00003ab4:    4802        .H      LDR      r0,[pc,#8] ; [0x3ac0] = 0x8617
        0x00003ab6:    4903        .I      LDR      r1,[pc,#12] ; [0x3ac4] = 0x86a2
        0x00003ab8:    4a03        .J      LDR      r2,[pc,#12] ; [0x3ac8] = 0x397
        0x00003aba:    f003fe19    ....    BL       __aeabi_assert ; 0x76f0
        0x00003abe:    46c0        .F      MOV      r8,r8
    $d.39
    __arm_cp.19_0
        0x00003ac0:    00008617    ....    DCD    34327
    __arm_cp.19_1
        0x00003ac4:    000086a2    ....    DCD    34466
    __arm_cp.19_2
        0x00003ac8:    00000397    ....    DCD    919
    $t.40
    _7816_4_getSiblingFile
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
        0x00003acc:    b510        ..      PUSH     {r4,lr}
        0x00003ace:    b086        ..      SUB      sp,sp,#0x18
        0x00003ad0:    2800        .(      CMP      r0,#0
        0x00003ad2:    d009        ..      BEQ      0x3ae8 ; _7816_4_getSiblingFile + 28
;;; Core/7816_4/source\7816_4.c
        0x00003ad4:    2200        ."      MOVS     r2,#0
        0x00003ad6:    9200        ..      STR      r2,[sp,#0]
        0x00003ad8:    ac01        ..      ADD      r4,sp,#4
        0x00003ada:    2314        .#      MOVS     r3,#0x14
        0x00003adc:    4621        !F      MOV      r1,r4
        0x00003ade:    f7fdfa43    ..C.    BL       mm_ReadUpdate ; 0xf68
        0x00003ae2:    88e0        ..      LDRH     r0,[r4,#6]
        0x00003ae4:    b006        ..      ADD      sp,sp,#0x18
        0x00003ae6:    bd10        ..      POP      {r4,pc}
        0x00003ae8:    4802        .H      LDR      r0,[pc,#8] ; [0x3af4] = 0x8617
        0x00003aea:    4903        .I      LDR      r1,[pc,#12] ; [0x3af8] = 0x86a2
        0x00003aec:    4a03        .J      LDR      r2,[pc,#12] ; [0x3afc] = 0x3b1
        0x00003aee:    f003fdff    ....    BL       __aeabi_assert ; 0x76f0
        0x00003af2:    46c0        .F      MOV      r8,r8
    $d.41
    __arm_cp.20_0
        0x00003af4:    00008617    ....    DCD    34327
    __arm_cp.20_1
        0x00003af8:    000086a2    ....    DCD    34466
    __arm_cp.20_2
        0x00003afc:    000003b1    ....    DCD    945
    $t.42
    _7186_4_getCardState
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
;;;993    
;;;994    			DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Data found inside the record\n");
;;;995    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns TRUE %1\n", TRUE);
;;;996    			return TRUE;
;;;997    		}
;;;998    	}
;;;999    
;;;1000   		DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns FALSE %1\n", FALSE);
;;;1001   		return FALSE;
;;;1002   }
;;;1003   
;;;1004   /*
;;;1005   * It retrieves the Card Life Cycle State
;;;1006   *
;;;1007   * @return tCardLifeCycleState card state
;;;1008   */
;;;1009   tCardLifeCycleState _7186_4_getCardState(void) {
        0x00003b00:    b510        ..      PUSH     {r4,lr}
        0x00003b02:    b082        ..      SUB      sp,sp,#8
        0x00003b04:    ac01        ..      ADD      r4,sp,#4
        0x00003b06:    2000        .       MOVS     r0,#0
        0x00003b08:    7020         p      STRB     r0,[r4,#0]
;;; Core/7816_4/source\7816_4.c
        0x00003b0a:    4804        .H      LDR      r0,[pc,#16] ; [0x3b1c] = 0xa006
        0x00003b0c:    2201        ."      MOVS     r2,#1
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
;;;993    
;;;994    			DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Data found inside the record\n");
;;;995    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns TRUE %1\n", TRUE);
;;;996    			return TRUE;
;;;997    		}
;;;998    	}
;;;999    
;;;1000   		DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns FALSE %1\n", FALSE);
;;;1001   		return FALSE;
;;;1002   }
;;;1003   
;;;1004   /*
;;;1005   * It retrieves the Card Life Cycle State
;;;1006   *
;;;1007   * @return tCardLifeCycleState card state
;;;1008   */
;;;1009   tCardLifeCycleState _7186_4_getCardState(void) {
;;;1010   	
;;;1011   	uMonoByte umbState = 0x00;
;;;1012   
;;;1013   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_getCardState()\n");
;;;1014   
;;;1015   	/*Read Card life cycle state*/
;;;1016   	baseReadNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
        0x00003b0e:    4621        !F      MOV      r1,r4
        0x00003b10:    f003f8f4    ....    BL       baseReadNBytes ; 0x6cfc
;;;1017   
;;;1018   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_getCardState() retruns %1\n", umbState);
;;;1019   
;;;1020   	return (tCardLifeCycleState)umbState;
        0x00003b14:    7820         x      LDRB     r0,[r4,#0]
        0x00003b16:    b002        ..      ADD      sp,sp,#8
        0x00003b18:    bd10        ..      POP      {r4,pc}
        0x00003b1a:    46c0        .F      MOV      r8,r8
    $d.43
    __arm_cp.21_0
        0x00003b1c:    0000a006    ....    DCD    40966
    $t.44
    _7186_4_changeCardState
;;;1021   }
;;;1022   
;;;1023   /*
;;;1024   * It changes the Card Life Cycle State
;;;1025   *
;;;1026   * @param umbState (tCardLifeCycleState): new card state 
;;;1027   */
;;;1028   void _7186_4_changeCardState(uMonoByte umbState) {
        0x00003b20:    b580        ..      PUSH     {r7,lr}
        0x00003b22:    b082        ..      SUB      sp,sp,#8
        0x00003b24:    a901        ..      ADD      r1,sp,#4
        0x00003b26:    7008        .p      STRB     r0,[r1,#0]
        0x00003b28:    4802        .H      LDR      r0,[pc,#8] ; [0x3b34] = 0xa006
        0x00003b2a:    2201        ."      MOVS     r2,#1
        0x00003b2c:    f003f94e    ..N.    BL       baseWriteNBytes ; 0x6dcc
        0x00003b30:    b002        ..      ADD      sp,sp,#8
        0x00003b32:    bd80        ..      POP      {r7,pc}
    $d.45
    __arm_cp.22_0
        0x00003b34:    0000a006    ....    DCD    40966
    $t.46
    _7186_4_searchFileUpInHierarchy
;;;1029   
;;;1030   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_changeCardState()\n");
;;;1031   
;;;1032   	/*Update Card life cycle state*/
;;;1033   	baseWriteNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
;;;1034   
;;;1035   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_changeCardState() \n");
;;;1036   }
;;;1037   
;;;1038   /*
;;;1039   * It searches the given File ID up in Hierarchy till we hit deadend i.e. MF or ADF
;;;1040   *
;;;1041   * @param udbFileId: file to search
;;;1042   * @param fhaCurrentDf: DF from where search starts
;;;1043   *
;;;1044   * @return File header address if found, otherwise NO_FILE_PRESENT
;;;1045   */
;;;1046   tFileHeaderAddr  _7186_4_searchFileUpInHierarchy(IN_ARG uDiByte udbFileId, IN_ARG tFileHeaderAddr fhaCurrentDf) {
        0x00003b38:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00003b3a:    b087        ..      SUB      sp,sp,#0x1c
        0x00003b3c:    2900        .)      CMP      r1,#0
        0x00003b3e:    d02d        -.      BEQ      0x3b9c ; _7186_4_searchFileUpInHierarchy + 100
;;; Core/7816_4/source\7816_4.c
        0x00003b40:    4604        .F      MOV      r4,r0
        0x00003b42:    e00a        ..      B        0x3b5a ; _7186_4_searchFileUpInHierarchy + 34
        0x00003b44:    9600        ..      STR      r6,[sp,#0]
        0x00003b46:    af02        ..      ADD      r7,sp,#8
        0x00003b48:    2314        .#      MOVS     r3,#0x14
        0x00003b4a:    9801        ..      LDR      r0,[sp,#4]
        0x00003b4c:    4639        9F      MOV      r1,r7
        0x00003b4e:    4632        2F      MOV      r2,r6
        0x00003b50:    f7fdfa0a    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003b54:    88b9        ..      LDRH     r1,[r7,#4]
        0x00003b56:    2900        .)      CMP      r1,#0
        0x00003b58:    d01d        ..      BEQ      0x3b96 ; _7186_4_searchFileUpInHierarchy + 94
        0x00003b5a:    2600        .&      MOVS     r6,#0
        0x00003b5c:    9600        ..      STR      r6,[sp,#0]
        0x00003b5e:    b288        ..      UXTH     r0,r1
        0x00003b60:    af02        ..      ADD      r7,sp,#8
        0x00003b62:    2314        .#      MOVS     r3,#0x14
        0x00003b64:    9001        ..      STR      r0,[sp,#4]
        0x00003b66:    4639        9F      MOV      r1,r7
        0x00003b68:    4632        2F      MOV      r2,r6
        0x00003b6a:    f7fdf9fd    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003b6e:    89bd        ..      LDRH     r5,[r7,#0xc]
        0x00003b70:    2d00        .-      CMP      r5,#0
        0x00003b72:    d0e7        ..      BEQ      0x3b44 ; _7186_4_searchFileUpInHierarchy + 12
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00003b74:    9600        ..      STR      r6,[sp,#0]
        0x00003b76:    b2a8        ..      UXTH     r0,r5
        0x00003b78:    af02        ..      ADD      r7,sp,#8
        0x00003b7a:    2314        .#      MOVS     r3,#0x14
        0x00003b7c:    4639        9F      MOV      r1,r7
        0x00003b7e:    4632        2F      MOV      r2,r6
        0x00003b80:    f7fdf9f2    ....    BL       mm_ReadUpdate ; 0xf68
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
        0x00003b84:    8938        8.      LDRH     r0,[r7,#8]
        0x00003b86:    42a0        .B      CMP      r0,r4
        0x00003b88:    d004        ..      BEQ      0x3b94 ; _7186_4_searchFileUpInHierarchy + 92
        0x00003b8a:    a802        ..      ADD      r0,sp,#8
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
        0x00003b8c:    88c5        ..      LDRH     r5,[r0,#6]
        0x00003b8e:    2d00        .-      CMP      r5,#0
        0x00003b90:    d1f0        ..      BNE      0x3b74 ; _7186_4_searchFileUpInHierarchy + 60
        0x00003b92:    e7d7        ..      B        0x3b44 ; _7186_4_searchFileUpInHierarchy + 12
        0x00003b94:    462e        .F      MOV      r6,r5
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
;;;993    
;;;994    			DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Data found inside the record\n");
;;;995    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns TRUE %1\n", TRUE);
;;;996    			return TRUE;
;;;997    		}
;;;998    	}
;;;999    
;;;1000   		DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns FALSE %1\n", FALSE);
;;;1001   		return FALSE;
;;;1002   }
;;;1003   
;;;1004   /*
;;;1005   * It retrieves the Card Life Cycle State
;;;1006   *
;;;1007   * @return tCardLifeCycleState card state
;;;1008   */
;;;1009   tCardLifeCycleState _7186_4_getCardState(void) {
;;;1010   	
;;;1011   	uMonoByte umbState = 0x00;
;;;1012   
;;;1013   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_getCardState()\n");
;;;1014   
;;;1015   	/*Read Card life cycle state*/
;;;1016   	baseReadNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
;;;1017   
;;;1018   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_getCardState() retruns %1\n", umbState);
;;;1019   
;;;1020   	return (tCardLifeCycleState)umbState;
;;;1021   }
;;;1022   
;;;1023   /*
;;;1024   * It changes the Card Life Cycle State
;;;1025   *
;;;1026   * @param umbState (tCardLifeCycleState): new card state 
;;;1027   */
;;;1028   void _7186_4_changeCardState(uMonoByte umbState) {
;;;1029   
;;;1030   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_changeCardState()\n");
;;;1031   
;;;1032   	/*Update Card life cycle state*/
;;;1033   	baseWriteNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
;;;1034   
;;;1035   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_changeCardState() \n");
;;;1036   }
;;;1037   
;;;1038   /*
;;;1039   * It searches the given File ID up in Hierarchy till we hit deadend i.e. MF or ADF
;;;1040   *
;;;1041   * @param udbFileId: file to search
;;;1042   * @param fhaCurrentDf: DF from where search starts
;;;1043   *
;;;1044   * @return File header address if found, otherwise NO_FILE_PRESENT
;;;1045   */
;;;1046   tFileHeaderAddr  _7186_4_searchFileUpInHierarchy(IN_ARG uDiByte udbFileId, IN_ARG tFileHeaderAddr fhaCurrentDf) {
;;;1047   
;;;1048   	tFileHeaderAddr fhaFile;
;;;1049   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_searchFileUpInHierarchy()\n");
;;;1050   
;;;1051   	/*keep checking the file from current DF to root df (i.e. MF or ADF)*/
;;;1052   	while (NO_FILE_PRESENT != fhaCurrentDf) { //if there is still parent file.
;;;1053   
;;;1054   		/*search for given file ID*/
;;;1055   		_7816_4_ifFileExists(udbFileId, fhaCurrentDf, MODE_FIND_FID, &fhaFile);
;;;1056   
;;;1057   		if (fhaFile != NO_FILE_PRESENT) { // check if file found
;;;1058   
;;;1059   			/*get out of the loop*/
;;;1060   			break;
;;;1061   		}
;;;1062   
;;;1063   		/*get parent of current file header*/
;;;1064   		fhaCurrentDf = _7816_4_getParentFile(fhaCurrentDf);
;;;1065   	}
;;;1066   
;;;1067   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_searchFileUpInHierarchy() returns %2\n", fhaFile);
;;;1068   	return fhaFile;
        0x00003b96:    b2b0        ..      UXTH     r0,r6
        0x00003b98:    b007        ..      ADD      sp,sp,#0x1c
        0x00003b9a:    bdf0        ..      POP      {r4-r7,pc}
        0x00003b9c:    2600        .&      MOVS     r6,#0
        0x00003b9e:    b2b0        ..      UXTH     r0,r6
        0x00003ba0:    b007        ..      ADD      sp,sp,#0x1c
        0x00003ba2:    bdf0        ..      POP      {r4-r7,pc}
    _7816_4_getSecurityCondition
;;;1069   }
;;;1070   
;;;1071   /*
;;;1072   * It tells the security condition on presented file for given operation
;;;1073   *
;;;1074   * @param fhaFile: Presented File whose security to check
;;;1075   * @param amOperation: operation to perform  on file
;;;1076   *
;;;1077   * @returns PIN_**** (check constants.h) PIN_NEVER for Never
;;;1078   *										PIN_ALWAYS for Always and
;;;1079   *										XY for key reference (PIN_APP_1 - PIN_APP_8, PIN_ADM_1 - PIN_ADM_5, PIN_SECOND_APP_1 - PIN_SECOND_APP_8)
;;;1080   */
;;;1081   uMonoByte _7816_4_getSecurityCondition(IN_ARG tFileHeaderAddr fhaFile, tAccessMode amOperation) {
        0x00003ba4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00003ba6:    b089        ..      SUB      sp,sp,#0x24
        0x00003ba8:    9101        ..      STR      r1,[sp,#4]
        0x00003baa:    2800        .(      CMP      r0,#0
        0x00003bac:    d100        ..      BNE      0x3bb0 ; _7816_4_getSecurityCondition + 12
        0x00003bae:    e103        ..      B        0x3db8 ; _7816_4_getSecurityCondition + 532
;;; Core/7816_4/source\7816_4.c
        0x00003bb0:    4604        .F      MOV      r4,r0
        0x00003bb2:    2700        .'      MOVS     r7,#0
        0x00003bb4:    9700        ..      STR      r7,[sp,#0]
        0x00003bb6:    ae04        ..      ADD      r6,sp,#0x10
        0x00003bb8:    2314        .#      MOVS     r3,#0x14
        0x00003bba:    9303        ..      STR      r3,[sp,#0xc]
        0x00003bbc:    4631        1F      MOV      r1,r6
        0x00003bbe:    463a        :F      MOV      r2,r7
        0x00003bc0:    f7fdf9d2    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003bc4:    8975        u.      LDRH     r5,[r6,#0xa]
        0x00003bc6:    7830        0x      LDRB     r0,[r6,#0]
        0x00003bc8:    9002        ..      STR      r0,[sp,#8]
        0x00003bca:    9700        ..      STR      r7,[sp,#0]
        0x00003bcc:    ae04        ..      ADD      r6,sp,#0x10
        0x00003bce:    4620         F      MOV      r0,r4
        0x00003bd0:    4631        1F      MOV      r1,r6
        0x00003bd2:    463a        :F      MOV      r2,r7
        0x00003bd4:    9b03        ..      LDR      r3,[sp,#0xc]
        0x00003bd6:    f7fdf9c7    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003bda:    88b0        ..      LDRH     r0,[r6,#4]
        0x00003bdc:    2800        .(      CMP      r0,#0
        0x00003bde:    d026        &.      BEQ      0x3c2e ; _7816_4_getSecurityCondition + 138
        0x00003be0:    9700        ..      STR      r7,[sp,#0]
        0x00003be2:    b280        ..      UXTH     r0,r0
        0x00003be4:    ac04        ..      ADD      r4,sp,#0x10
        0x00003be6:    2314        .#      MOVS     r3,#0x14
        0x00003be8:    9003        ..      STR      r0,[sp,#0xc]
        0x00003bea:    4621        !F      MOV      r1,r4
        0x00003bec:    463a        :F      MOV      r2,r7
        0x00003bee:    f7fdf9bb    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003bf2:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x00003bf4:    2800        .(      CMP      r0,#0
        0x00003bf6:    d00f        ..      BEQ      0x3c18 ; _7816_4_getSecurityCondition + 116
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00003bf8:    9700        ..      STR      r7,[sp,#0]
        0x00003bfa:    b284        ..      UXTH     r4,r0
        0x00003bfc:    ae04        ..      ADD      r6,sp,#0x10
        0x00003bfe:    2314        .#      MOVS     r3,#0x14
        0x00003c00:    4620         F      MOV      r0,r4
        0x00003c02:    4631        1F      MOV      r1,r6
        0x00003c04:    463a        :F      MOV      r2,r7
        0x00003c06:    f7fdf9af    ....    BL       mm_ReadUpdate ; 0xf68
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
        0x00003c0a:    8930        0.      LDRH     r0,[r6,#8]
        0x00003c0c:    42a8        .B      CMP      r0,r5
        0x00003c0e:    d013        ..      BEQ      0x3c38 ; _7816_4_getSecurityCondition + 148
        0x00003c10:    a804        ..      ADD      r0,sp,#0x10
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
        0x00003c12:    88c0        ..      LDRH     r0,[r0,#6]
        0x00003c14:    2800        .(      CMP      r0,#0
        0x00003c16:    d1ef        ..      BNE      0x3bf8 ; _7816_4_getSecurityCondition + 84
        0x00003c18:    2200        ."      MOVS     r2,#0
        0x00003c1a:    9200        ..      STR      r2,[sp,#0]
        0x00003c1c:    ac04        ..      ADD      r4,sp,#0x10
        0x00003c1e:    2314        .#      MOVS     r3,#0x14
        0x00003c20:    9803        ..      LDR      r0,[sp,#0xc]
        0x00003c22:    4621        !F      MOV      r1,r4
        0x00003c24:    f7fdf9a0    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003c28:    88a0        ..      LDRH     r0,[r4,#4]
        0x00003c2a:    2800        .(      CMP      r0,#0
        0x00003c2c:    d1d8        ..      BNE      0x3be0 ; _7816_4_getSecurityCondition + 60
        0x00003c2e:    a097        ..      ADR      r0,{pc}+0x25e ; 0x3e8c
        0x00003c30:    4983        .I      LDR      r1,[pc,#524] ; [0x3e40] = 0x86a2
        0x00003c32:    4a77        wJ      LDR      r2,[pc,#476] ; [0x3e10] = 0x44d
        0x00003c34:    f003fd5c    ..\.    BL       __aeabi_assert ; 0x76f0
        0x00003c38:    9700        ..      STR      r7,[sp,#0]
        0x00003c3a:    ae04        ..      ADD      r6,sp,#0x10
        0x00003c3c:    2314        .#      MOVS     r3,#0x14
        0x00003c3e:    4620         F      MOV      r0,r4
        0x00003c40:    4631        1F      MOV      r1,r6
        0x00003c42:    463a        :F      MOV      r2,r7
        0x00003c44:    f7fdf990    ....    BL       mm_ReadUpdate ; 0xf68
        0x00003c48:    7870        px      LDRB     r0,[r6,#1]
        0x00003c4a:    2587        .%      MOVS     r5,#0x87
        0x00003c4c:    4028        (@      ANDS     r0,r0,r5
        0x00003c4e:    2802        .(      CMP      r0,#2
        0x00003c50:    d000        ..      BEQ      0x3c54 ; _7816_4_getSecurityCondition + 176
        0x00003c52:    e0b7        ..      B        0x3dc4 ; _7816_4_getSecurityCondition + 544
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00003c54:    9700        ..      STR      r7,[sp,#0]
        0x00003c56:    ae04        ..      ADD      r6,sp,#0x10
        0x00003c58:    2314        .#      MOVS     r3,#0x14
        0x00003c5a:    4620         F      MOV      r0,r4
        0x00003c5c:    4631        1F      MOV      r1,r6
        0x00003c5e:    463a        :F      MOV      r2,r7
        0x00003c60:    f7fdf982    ....    BL       mm_ReadUpdate ; 0xf68
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
        0x00003c64:    7870        px      LDRB     r0,[r6,#1]
        0x00003c66:    2104        .!      MOVS     r1,#4
        0x00003c68:    4301        .C      ORRS     r1,r1,r0
        0x00003c6a:    4029        )@      ANDS     r1,r1,r5
        0x00003c6c:    2906        .)      CMP      r1,#6
        0x00003c6e:    d000        ..      BEQ      0x3c72 ; _7816_4_getSecurityCondition + 206
        0x00003c70:    e0b4        ..      B        0x3ddc ; _7816_4_getSecurityCondition + 568
        0x00003c72:    a804        ..      ADD      r0,sp,#0x10
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
        0x00003c74:    7bc0        .{      LDRB     r0,[r0,#0xf]
        0x00003c76:    9a02        ..      LDR      r2,[sp,#8]
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
;;;993    
;;;994    			DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Data found inside the record\n");
;;;995    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns TRUE %1\n", TRUE);
;;;996    			return TRUE;
;;;997    		}
;;;998    	}
;;;999    
;;;1000   		DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns FALSE %1\n", FALSE);
;;;1001   		return FALSE;
;;;1002   }
;;;1003   
;;;1004   /*
;;;1005   * It retrieves the Card Life Cycle State
;;;1006   *
;;;1007   * @return tCardLifeCycleState card state
;;;1008   */
;;;1009   tCardLifeCycleState _7186_4_getCardState(void) {
;;;1010   	
;;;1011   	uMonoByte umbState = 0x00;
;;;1012   
;;;1013   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_getCardState()\n");
;;;1014   
;;;1015   	/*Read Card life cycle state*/
;;;1016   	baseReadNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
;;;1017   
;;;1018   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_getCardState() retruns %1\n", umbState);
;;;1019   
;;;1020   	return (tCardLifeCycleState)umbState;
;;;1021   }
;;;1022   
;;;1023   /*
;;;1024   * It changes the Card Life Cycle State
;;;1025   *
;;;1026   * @param umbState (tCardLifeCycleState): new card state 
;;;1027   */
;;;1028   void _7186_4_changeCardState(uMonoByte umbState) {
;;;1029   
;;;1030   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_changeCardState()\n");
;;;1031   
;;;1032   	/*Update Card life cycle state*/
;;;1033   	baseWriteNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
;;;1034   
;;;1035   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_changeCardState() \n");
;;;1036   }
;;;1037   
;;;1038   /*
;;;1039   * It searches the given File ID up in Hierarchy till we hit deadend i.e. MF or ADF
;;;1040   *
;;;1041   * @param udbFileId: file to search
;;;1042   * @param fhaCurrentDf: DF from where search starts
;;;1043   *
;;;1044   * @return File header address if found, otherwise NO_FILE_PRESENT
;;;1045   */
;;;1046   tFileHeaderAddr  _7186_4_searchFileUpInHierarchy(IN_ARG uDiByte udbFileId, IN_ARG tFileHeaderAddr fhaCurrentDf) {
;;;1047   
;;;1048   	tFileHeaderAddr fhaFile;
;;;1049   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_searchFileUpInHierarchy()\n");
;;;1050   
;;;1051   	/*keep checking the file from current DF to root df (i.e. MF or ADF)*/
;;;1052   	while (NO_FILE_PRESENT != fhaCurrentDf) { //if there is still parent file.
;;;1053   
;;;1054   		/*search for given file ID*/
;;;1055   		_7816_4_ifFileExists(udbFileId, fhaCurrentDf, MODE_FIND_FID, &fhaFile);
;;;1056   
;;;1057   		if (fhaFile != NO_FILE_PRESENT) { // check if file found
;;;1058   
;;;1059   			/*get out of the loop*/
;;;1060   			break;
;;;1061   		}
;;;1062   
;;;1063   		/*get parent of current file header*/
;;;1064   		fhaCurrentDf = _7816_4_getParentFile(fhaCurrentDf);
;;;1065   	}
;;;1066   
;;;1067   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_searchFileUpInHierarchy() returns %2\n", fhaFile);
;;;1068   	return fhaFile;
;;;1069   }
;;;1070   
;;;1071   /*
;;;1072   * It tells the security condition on presented file for given operation
;;;1073   *
;;;1074   * @param fhaFile: Presented File whose security to check
;;;1075   * @param amOperation: operation to perform  on file
;;;1076   *
;;;1077   * @returns PIN_**** (check constants.h) PIN_NEVER for Never
;;;1078   *										PIN_ALWAYS for Always and
;;;1079   *										XY for key reference (PIN_APP_1 - PIN_APP_8, PIN_ADM_1 - PIN_ADM_5, PIN_SECOND_APP_1 - PIN_SECOND_APP_8)
;;;1080   */
;;;1081   uMonoByte _7816_4_getSecurityCondition(IN_ARG tFileHeaderAddr fhaFile, tAccessMode amOperation) {
;;;1082   
;;;1083   	uMonoByte		umbIndex;
;;;1084   	uMonoByte		umbReturnCode = PIN_NEVER;
;;;1085   	tArrInfo		aiTargetFile;
;;;1086   
;;;1087   	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSecurityCondition() \n");
;;;1088   
;;;1089   	/*get ARR file ID and record*/
;;;1090   	_7816_4_getArrInfomation(fhaFile, &aiTargetFile);
;;;1091   
;;;1092   	/*Check ARR file from parent of given file*/
;;;1093   	fhaFile = _7816_4_getParentFile(fhaFile);
;;;1094   
;;;1095   	DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: Search for EFarr file %2 \n", aiTargetFile.udbArrFile);
;;;1096   
;;;1097   	/*searching EFarr file*/
;;;1098   	fhaFile = _7186_4_searchFileUpInHierarchy(aiTargetFile.udbArrFile, fhaFile);
;;;1099   
;;;1100   	/*if file not found*/
;;;1101   	assert(NO_FILE_PRESENT != fhaFile);
;;;1102   
;;;1103   	/*ARR file must be a linear fixed file*/
;;;1104   	assert(IS(LF, _7816_4_getFileDescriptor(fhaFile)));
;;;1105   
;;;1106   	/*if file doesnt have enough records to read the given record*/
;;;1107   	assert(aiTargetFile.umbArrRec <= _7816_4_getNoOfRecords(fhaFile));
        0x00003c78:    4282        .B      CMP      r2,r0
        0x00003c7a:    d900        ..      BLS      0x3c7e ; _7816_4_getSecurityCondition + 218
        0x00003c7c:    e0a8        ..      B        0x3dd0 ; _7816_4_getSecurityCondition + 556
;;;1108   
;;;1109   	/*Read the whole record in working array buffer "gumbWorkingBuffer"*/
;;;1110   	_7816_4_readUpdateRecordFile(fhaFile, gumbWorkingBuffer, aiTargetFile.umbArrRec, ACC_MODE_FILE_READ);
        0x00003c7e:    4971        qI      LDR      r1,[pc,#452] ; [0x3e44] = 0x20000544
        0x00003c80:    4620         F      MOV      r0,r4
        0x00003c82:    463b        ;F      MOV      r3,r7
        0x00003c84:    f7fffab2    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
        0x00003c88:    9700        ..      STR      r7,[sp,#0]
        0x00003c8a:    ae04        ..      ADD      r6,sp,#0x10
        0x00003c8c:    2314        .#      MOVS     r3,#0x14
        0x00003c8e:    4620         F      MOV      r0,r4
        0x00003c90:    4631        1F      MOV      r1,r6
        0x00003c92:    463a        :F      MOV      r2,r7
        0x00003c94:    f7fdf968    ..h.    BL       mm_ReadUpdate ; 0xf68
        0x00003c98:    7c31        1|      LDRB     r1,[r6,#0x10]
        0x00003c9a:    20ff        .       MOVS     r0,#0xff
;;;1111   
;;;1112   	/*start searching given Access mode in the working buffer*/
;;;1113   	umbIndex = 0x00;
;;;1114   	while (umbIndex < (_7816_4_getRecordLength(fhaFile) - LENGTH_MINIMUM_FOR_AM_SC_DO)) {
        0x00003c9c:    2907        .)      CMP      r1,#7
        0x00003c9e:    d37d        }.      BCC      0x3d9c ; _7816_4_getSecurityCondition + 504
        0x00003ca0:    9002        ..      STR      r0,[sp,#8]
        0x00003ca2:    9801        ..      LDR      r0,[sp,#4]
        0x00003ca4:    2802        .(      CMP      r0,#2
        0x00003ca6:    d12d        -.      BNE      0x3d04 ; _7816_4_getSecurityCondition + 352
        0x00003ca8:    2000        .       MOVS     r0,#0
        0x00003caa:    4605        .F      MOV      r5,r0
        0x00003cac:    4a65        eJ      LDR      r2,[pc,#404] ; [0x3e44] = 0x20000544
        0x00003cae:    e012        ..      B        0x3cd6 ; _7816_4_getSecurityCondition + 306
        0x00003cb0:    b2e8        ..      UXTB     r0,r5
        0x00003cb2:    1880        ..      ADDS     r0,r0,r2
        0x00003cb4:    7847        Gx      LDRB     r7,[r0,#1]
        0x00003cb6:    2200        ."      MOVS     r2,#0
        0x00003cb8:    9200        ..      STR      r2,[sp,#0]
        0x00003cba:    ae04        ..      ADD      r6,sp,#0x10
        0x00003cbc:    2314        .#      MOVS     r3,#0x14
        0x00003cbe:    4620         F      MOV      r0,r4
        0x00003cc0:    4631        1F      MOV      r1,r6
        0x00003cc2:    f7fdf951    ..Q.    BL       mm_ReadUpdate ; 0xf68
        0x00003cc6:    4a5f        _J      LDR      r2,[pc,#380] ; [0x3e44] = 0x20000544
        0x00003cc8:    19e8        ..      ADDS     r0,r5,r7
        0x00003cca:    1c85        ..      ADDS     r5,r0,#2
        0x00003ccc:    b2e8        ..      UXTB     r0,r5
        0x00003cce:    7c31        1|      LDRB     r1,[r6,#0x10]
        0x00003cd0:    1f89        ..      SUBS     r1,r1,#6
        0x00003cd2:    4281        .B      CMP      r1,r0
        0x00003cd4:    dd46        F.      BLE      0x3d64 ; _7816_4_getSecurityCondition + 448
        0x00003cd6:    5c11        .\      LDRB     r1,[r2,r0]
        0x00003cd8:    2984        .)      CMP      r1,#0x84
        0x00003cda:    d007        ..      BEQ      0x3cec ; _7816_4_getSecurityCondition + 328
        0x00003cdc:    2980        .)      CMP      r1,#0x80
        0x00003cde:    d156        V.      BNE      0x3d8e ; _7816_4_getSecurityCondition + 490
        0x00003ce0:    1880        ..      ADDS     r0,r0,r2
        0x00003ce2:    7840        @x      LDRB     r0,[r0,#1]
        0x00003ce4:    2801        .(      CMP      r0,#1
        0x00003ce6:    d161        a.      BNE      0x3dac ; _7816_4_getSecurityCondition + 520
        0x00003ce8:    1ced        ..      ADDS     r5,r5,#3
        0x00003cea:    e7e1        ..      B        0x3cb0 ; _7816_4_getSecurityCondition + 268
        0x00003cec:    1880        ..      ADDS     r0,r0,r2
        0x00003cee:    7840        @x      LDRB     r0,[r0,#1]
        0x00003cf0:    2801        .(      CMP      r0,#1
        0x00003cf2:    d155        U.      BNE      0x3da0 ; _7816_4_getSecurityCondition + 508
        0x00003cf4:    1ced        ..      ADDS     r5,r5,#3
        0x00003cf6:    b2e8        ..      UXTB     r0,r5
        0x00003cf8:    1880        ..      ADDS     r0,r0,r2
        0x00003cfa:    1e40        @.      SUBS     r0,r0,#1
        0x00003cfc:    7800        .x      LDRB     r0,[r0,#0]
        0x00003cfe:    2832        2(      CMP      r0,#0x32
        0x00003d00:    d1d6        ..      BNE      0x3cb0 ; _7816_4_getSecurityCondition + 268
        0x00003d02:    e02f        /.      B        0x3d64 ; _7816_4_getSecurityCondition + 448
        0x00003d04:    2101        .!      MOVS     r1,#1
        0x00003d06:    4081        .@      LSLS     r1,r1,r0
        0x00003d08:    9103        ..      STR      r1,[sp,#0xc]
        0x00003d0a:    463d        =F      MOV      r5,r7
        0x00003d0c:    4a4d        MJ      LDR      r2,[pc,#308] ; [0x3e44] = 0x20000544
        0x00003d0e:    e011        ..      B        0x3d34 ; _7816_4_getSecurityCondition + 400
        0x00003d10:    1880        ..      ADDS     r0,r0,r2
        0x00003d12:    7847        Gx      LDRB     r7,[r0,#1]
        0x00003d14:    2200        ."      MOVS     r2,#0
        0x00003d16:    9200        ..      STR      r2,[sp,#0]
        0x00003d18:    ae04        ..      ADD      r6,sp,#0x10
        0x00003d1a:    2314        .#      MOVS     r3,#0x14
        0x00003d1c:    4620         F      MOV      r0,r4
        0x00003d1e:    4631        1F      MOV      r1,r6
        0x00003d20:    f7fdf922    ..".    BL       mm_ReadUpdate ; 0xf68
        0x00003d24:    4a47        GJ      LDR      r2,[pc,#284] ; [0x3e44] = 0x20000544
        0x00003d26:    19e8        ..      ADDS     r0,r5,r7
        0x00003d28:    1c85        ..      ADDS     r5,r0,#2
        0x00003d2a:    b2ef        ..      UXTB     r7,r5
        0x00003d2c:    7c30        0|      LDRB     r0,[r6,#0x10]
        0x00003d2e:    1f80        ..      SUBS     r0,r0,#6
        0x00003d30:    42b8        .B      CMP      r0,r7
        0x00003d32:    dd17        ..      BLE      0x3d64 ; _7816_4_getSecurityCondition + 448
;;;1115   
;;;1116   		/*Access condition of increase operation only come inside TAG_SECURITY_AMDO_INSTRUCTION*/
;;;1117   		if (gumbWorkingBuffer[umbIndex] == TAG_SECURITY_AMDO_INSTRUCTION) {
        0x00003d34:    5dd0        .]      LDRB     r0,[r2,r7]
        0x00003d36:    2880        .(      CMP      r0,#0x80
        0x00003d38:    d008        ..      BEQ      0x3d4c ; _7816_4_getSecurityCondition + 424
        0x00003d3a:    2884        .(      CMP      r0,#0x84
        0x00003d3c:    d12d        -.      BNE      0x3d9a ; _7816_4_getSecurityCondition + 502
;;;1118   
;;;1119   			assert(gumbWorkingBuffer[umbIndex + 0x01] == LENGTH_ACCESS_MODE_DATA_OBJECT);
        0x00003d3e:    18b8        ..      ADDS     r0,r7,r2
        0x00003d40:    7840        @x      LDRB     r0,[r0,#1]
        0x00003d42:    2801        .(      CMP      r0,#1
        0x00003d44:    d12c        ,.      BNE      0x3da0 ; _7816_4_getSecurityCondition + 508
;;;1120   			umbIndex += 0x03; // skip to SC_DO
        0x00003d46:    1ced        ..      ADDS     r5,r5,#3
        0x00003d48:    b2e8        ..      UXTB     r0,r5
        0x00003d4a:    e7e1        ..      B        0x3d10 ; _7816_4_getSecurityCondition + 364
;;;1121   
;;;1122   			if ((amOperation == ACC_MODE_FILE_INCREASE) && (gumbWorkingBuffer[umbIndex - 0x01] == INS_INCREASE)) { // check if value contains Increase instruction and Operation is increase
;;;1123   				break; //Access mode found
;;;1124   			}
;;;1125   
;;;1126   		}
;;;1127   		else if (gumbWorkingBuffer[umbIndex] == TAG_SECURITY_AMDO_ACCESS_MODE_BYTE) { // TAG_SECURITY_AMDO_ACCESS_MODE_BYTE for Read/Update/deactivate and Activate
;;;1128   
;;;1129   			assert(gumbWorkingBuffer[umbIndex + 1] == LENGTH_ACCESS_MODE_DATA_OBJECT);
        0x00003d4c:    18b8        ..      ADDS     r0,r7,r2
        0x00003d4e:    7840        @x      LDRB     r0,[r0,#1]
        0x00003d50:    2801        .(      CMP      r0,#1
        0x00003d52:    d12b        +.      BNE      0x3dac ; _7816_4_getSecurityCondition + 520
;;;1130   			umbIndex += 0x03; // skip to SC_DO
        0x00003d54:    1ced        ..      ADDS     r5,r5,#3
;;;1131   
;;;1132   			if ((ACC_MODE_FILE_INCREASE != amOperation) && (gumbWorkingBuffer[umbIndex - 0x01] & (0x01 << amOperation))) { // check if corresponding access mode bit set acc. to requested operation
        0x00003d56:    b2e8        ..      UXTB     r0,r5
        0x00003d58:    1881        ..      ADDS     r1,r0,r2
        0x00003d5a:    1e49        I.      SUBS     r1,r1,#1
        0x00003d5c:    7809        .x      LDRB     r1,[r1,#0]
        0x00003d5e:    9b03        ..      LDR      r3,[sp,#0xc]
        0x00003d60:    420b        .B      TST      r3,r1
        0x00003d62:    d0d5        ..      BEQ      0x3d10 ; _7816_4_getSecurityCondition + 364
;;;1133   				break;//Access mode found
;;;1134   			}
;;;1135   
;;;1136   		}
;;;1137   		else {
;;;1138   			DBG_WARN("[7816_4] _7816_4_getSecurityCondition: Invalid tag %1 in ARR record\n", gumbWorkingBuffer[umbIndex]);
;;;1139   			umbIndex = 0x00;
;;;1140   			break;//Access mode not found
;;;1141   		}
;;;1142   
;;;1143   		umbIndex += gumbWorkingBuffer[umbIndex + 1] + 0x02; // Skip SC_DO of current access mode
;;;1144   	}
;;;1145   
;;;1146   	/*if access mode found*/
;;;1147   	if (umbIndex) {
        0x00003d64:    0628        (.      LSLS     r0,r5,#24
        0x00003d66:    d012        ..      BEQ      0x3d8e ; _7816_4_getSecurityCondition + 490
;;;1148   
;;;1149   		DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: Access Mode Data object found \n");
;;;1150   
;;;1151   		/*parse security condition*/
;;;1152   		if (TAG_SECURITY_SCDO_ALWAYS == gumbWorkingBuffer[umbIndex]) { // Always Access mode data object
        0x00003d68:    b2e8        ..      UXTB     r0,r5
        0x00003d6a:    5c11        .\      LDRB     r1,[r2,r0]
        0x00003d6c:    2990        .)      CMP      r1,#0x90
        0x00003d6e:    d011        ..      BEQ      0x3d94 ; _7816_4_getSecurityCondition + 496
        0x00003d70:    29a4        .)      CMP      r1,#0xa4
        0x00003d72:    d10c        ..      BNE      0x3d8e ; _7816_4_getSecurityCondition + 490
;;;1153   
;;;1154   			DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: SC_DO indicates ALWAYS\n");
;;;1155   			umbReturnCode = PIN_ALWAYS;
;;;1156   		}
;;;1157   		else if (TAG_SECURITY_SCDO_CRT == gumbWorkingBuffer[umbIndex]) { //Control Reference Template
;;;1158   
;;;1159   			/*extract key reference*/
;;;1160   			assert(0x06 == gumbWorkingBuffer[umbIndex + 0x01]);
        0x00003d74:    1880        ..      ADDS     r0,r0,r2
        0x00003d76:    7841        Ax      LDRB     r1,[r0,#1]
        0x00003d78:    2906        .)      CMP      r1,#6
        0x00003d7a:    d136        6.      BNE      0x3dea ; _7816_4_getSecurityCondition + 582
;;;1161   			assert(TAG_KEY_REFERENCE == gumbWorkingBuffer[umbIndex + 0x02]);
        0x00003d7c:    7881        .x      LDRB     r1,[r0,#2]
        0x00003d7e:    2983        .)      CMP      r1,#0x83
        0x00003d80:    d139        9.      BNE      0x3df6 ; _7816_4_getSecurityCondition + 594
;;;1162   			assert(LENGTH_KEY_REFERENCE == gumbWorkingBuffer[umbIndex + 0x03]);
        0x00003d82:    78c1        .x      LDRB     r1,[r0,#3]
        0x00003d84:    2901        .)      CMP      r1,#1
        0x00003d86:    d13c        <.      BNE      0x3e02 ; _7816_4_getSecurityCondition + 606
;;;1163   
;;;1164   			DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: SC_DO indicates Key reference %1\n", gumbWorkingBuffer[umbIndex + 0x04]);
;;;1165   			umbReturnCode = gumbWorkingBuffer[umbIndex + 0x04];
        0x00003d88:    7900        .y      LDRB     r0,[r0,#4]
;;;1166   
;;;1167   		} // NEVER access mode data object or other SC_DO: results in PIN_NEVER
;;;1168   
;;;1169   	}// If access mode is not found: results in PIN_NEVER
;;;1170   
;;;1171   	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSecurityCondition() returns %1\n", umbReturnCode);
;;;1172   	return umbReturnCode;
        0x00003d8a:    b009        ..      ADD      sp,sp,#0x24
        0x00003d8c:    bdf0        ..      POP      {r4-r7,pc}
        0x00003d8e:    9802        ..      LDR      r0,[sp,#8]
        0x00003d90:    b009        ..      ADD      sp,sp,#0x24
        0x00003d92:    bdf0        ..      POP      {r4-r7,pc}
        0x00003d94:    2090        .       MOVS     r0,#0x90
        0x00003d96:    b009        ..      ADD      sp,sp,#0x24
        0x00003d98:    bdf0        ..      POP      {r4-r7,pc}
        0x00003d9a:    9802        ..      LDR      r0,[sp,#8]
        0x00003d9c:    b009        ..      ADD      sp,sp,#0x24
        0x00003d9e:    bdf0        ..      POP      {r4-r7,pc}
        0x00003da0:    4a1b        .J      LDR      r2,[pc,#108] ; [0x3e10] = 0x44d
        0x00003da2:    3212        .2      ADDS     r2,r2,#0x12
        0x00003da4:    4829        )H      LDR      r0,[pc,#164] ; [0x3e4c] = 0x85d0
        0x00003da6:    4926        &I      LDR      r1,[pc,#152] ; [0x3e40] = 0x86a2
        0x00003da8:    f003fca2    ....    BL       __aeabi_assert ; 0x76f0
        0x00003dac:    4a18        .J      LDR      r2,[pc,#96] ; [0x3e10] = 0x44d
        0x00003dae:    321c        .2      ADDS     r2,r2,#0x1c
        0x00003db0:    4825        %H      LDR      r0,[pc,#148] ; [0x3e48] = 0x858e
        0x00003db2:    4923        #I      LDR      r1,[pc,#140] ; [0x3e40] = 0x86a2
        0x00003db4:    f003fc9c    ....    BL       __aeabi_assert ; 0x76f0
        0x00003db8:    201f        .       MOVS     r0,#0x1f
        0x00003dba:    0102        ..      LSLS     r2,r0,#4
        0x00003dbc:    483a        :H      LDR      r0,[pc,#232] ; [0x3ea8] = 0x8617
        0x00003dbe:    4920         I      LDR      r1,[pc,#128] ; [0x3e40] = 0x86a2
        0x00003dc0:    f003fc96    ....    BL       __aeabi_assert ; 0x76f0
        0x00003dc4:    4812        .H      LDR      r0,[pc,#72] ; [0x3e10] = 0x44d
        0x00003dc6:    1cc2        ..      ADDS     r2,r0,#3
        0x00003dc8:    a012        ..      ADR      r0,{pc}+0x4c ; 0x3e14
        0x00003dca:    491d        .I      LDR      r1,[pc,#116] ; [0x3e40] = 0x86a2
        0x00003dcc:    f003fc90    ....    BL       __aeabi_assert ; 0x76f0
        0x00003dd0:    480f        .H      LDR      r0,[pc,#60] ; [0x3e10] = 0x44d
        0x00003dd2:    1d82        ..      ADDS     r2,r0,#6
        0x00003dd4:    482b        +H      LDR      r0,[pc,#172] ; [0x3e84] = 0x8523
        0x00003dd6:    491a        .I      LDR      r1,[pc,#104] ; [0x3e40] = 0x86a2
        0x00003dd8:    f003fc8a    ....    BL       __aeabi_assert ; 0x76f0
        0x00003ddc:    201f        .       MOVS     r0,#0x1f
        0x00003dde:    0102        ..      LSLS     r2,r0,#4
        0x00003de0:    325b        [2      ADDS     r2,r2,#0x5b
        0x00003de2:    4829        )H      LDR      r0,[pc,#164] ; [0x3e88] = 0x849e
        0x00003de4:    4916        .I      LDR      r1,[pc,#88] ; [0x3e40] = 0x86a2
        0x00003de6:    f003fc83    ....    BL       __aeabi_assert ; 0x76f0
        0x00003dea:    4a09        .J      LDR      r2,[pc,#36] ; [0x3e10] = 0x44d
        0x00003dec:    323b        ;2      ADDS     r2,r2,#0x3b
        0x00003dee:    a018        ..      ADR      r0,{pc}+0x62 ; 0x3e50
        0x00003df0:    4913        .I      LDR      r1,[pc,#76] ; [0x3e40] = 0x86a2
        0x00003df2:    f003fc7d    ..}.    BL       __aeabi_assert ; 0x76f0
        0x00003df6:    4a06        .J      LDR      r2,[pc,#24] ; [0x3e10] = 0x44d
        0x00003df8:    323c        <2      ADDS     r2,r2,#0x3c
        0x00003dfa:    4820         H      LDR      r0,[pc,#128] ; [0x3e7c] = 0x862f
        0x00003dfc:    4910        .I      LDR      r1,[pc,#64] ; [0x3e40] = 0x86a2
        0x00003dfe:    f003fc77    ..w.    BL       __aeabi_assert ; 0x76f0
        0x00003e02:    4a03        .J      LDR      r2,[pc,#12] ; [0x3e10] = 0x44d
        0x00003e04:    323d        =2      ADDS     r2,r2,#0x3d
        0x00003e06:    481e        .H      LDR      r0,[pc,#120] ; [0x3e80] = 0x8667
        0x00003e08:    490d        .I      LDR      r1,[pc,#52] ; [0x3e40] = 0x86a2
        0x00003e0a:    f003fc71    ..q.    BL       __aeabi_assert ; 0x76f0
        0x00003e0e:    46c0        .F      MOV      r8,r8
    $d.47
    __arm_cp.24_0
        0x00003e10:    0000044d    M...    DCD    1101
        0x00003e14:    4c285349    IS(L    DCD    1277711177
        0x00003e18:    5f202c46    F, _    DCD    1595944006
        0x00003e1c:    36313837    7816    DCD    909195319
        0x00003e20:    675f345f    _4_g    DCD    1734292575
        0x00003e24:    69467465    etFi    DCD    1766224997
        0x00003e28:    6544656c    leDe    DCD    1698981228
        0x00003e2c:    69726373    scri    DCD    1769104243
        0x00003e30:    726f7470    ptor    DCD    1919906928
        0x00003e34:    61686628    (fha    DCD    1634231848
        0x00003e38:    656c6946    File    DCD    1701603654
        0x00003e3c:    00002929    ))..    DCD    10537
    __arm_cp.24_2
        0x00003e40:    000086a2    ....    DCD    34466
    __arm_cp.24_3
        0x00003e44:    20000544    D..     DCD    536872260
    __arm_cp.24_4
        0x00003e48:    0000858e    ....    DCD    34190
    __arm_cp.24_5
        0x00003e4c:    000085d0    ....    DCD    34256
        0x00003e50:    36307830    0x06    DCD    909146160
        0x00003e54:    203d3d20     ==     DCD    540884256
        0x00003e58:    626d7567    gumb    DCD    1651340647
        0x00003e5c:    6b726f57    Work    DCD    1802661719
        0x00003e60:    42676e69    ingB    DCD    1114074729
        0x00003e64:    65666675    uffe    DCD    1701209717
        0x00003e68:    6d755b72    r[um    DCD    1836407666
        0x00003e6c:    646e4962    bInd    DCD    1684949346
        0x00003e70:    2b207865    ex +    DCD    723548261
        0x00003e74:    30783020     0x0    DCD    813183008
        0x00003e78:    00005d31    1]..    DCD    23857
    __arm_cp.24_7
        0x00003e7c:    0000862f    /...    DCD    34351
    __arm_cp.24_8
        0x00003e80:    00008667    g...    DCD    34407
    __arm_cp.24_9
        0x00003e84:    00008523    #...    DCD    34083
    __arm_cp.24_10
        0x00003e88:    0000849e    ....    DCD    33950
        0x00003e8c:    465f4f4e    NO_F    DCD    1180651342
        0x00003e90:    5f454c49    ILE_    DCD    1598377033
        0x00003e94:    53455250    PRES    DCD    1397051984
        0x00003e98:    20544e45    ENT     DCD    542395973
        0x00003e9c:    66203d21    != f    DCD    1713388833
        0x00003ea0:    69466168    haFi    DCD    1766220136
        0x00003ea4:    0000656c    le..    DCD    25964
    __arm_cp.24_12
        0x00003ea8:    00008617    ....    DCD    34327
    $t.48
    _7816_4_getAidOfAdf
;;;1173   }
;;;1174   /*
;;;1175   * It searches for given Address in the ADF List file, and return its AID.
;;;1176   * 
;;;1177   * @param fhaADF: Contains address of ADF.
;;;1178   * @param pumbAid: contains an array.
;;;1179   * 
;;;1180   * @return If Address matches return AID. 
;;;1181   *		  if Address doesnt match, return false 00.
;;;1182   */ 
;;;1183   boolean _7816_4_getAidOfAdf(tFileHeaderAddr fhaADF, puMonoByte pumbAid)
;;;1184   {
        0x00003eac:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00003eae:    b08b        ..      SUB      sp,sp,#0x2c
        0x00003eb0:    aa05        ..      ADD      r2,sp,#0x14
        0x00003eb2:    8010        ..      STRH     r0,[r2,#0]
        0x00003eb4:    2800        .(      CMP      r0,#0
        0x00003eb6:    d063        c.      BEQ      0x3f80 ; _7816_4_getAidOfAdf + 212
;;; Core/7816_4/source\7816_4.c
        0x00003eb8:    9104        ..      STR      r1,[sp,#0x10]
        0x00003eba:    2900        .)      CMP      r1,#0
        0x00003ebc:    d065        e.      BEQ      0x3f8a ; _7816_4_getAidOfAdf + 222
        0x00003ebe:    4836        6H      LDR      r0,[pc,#216] ; [0x3f98] = 0xa004
        0x00003ec0:    ad06        ..      ADD      r5,sp,#0x18
        0x00003ec2:    2202        ."      MOVS     r2,#2
;;;1      #include "7816_4.h"
;;;2      
;;;3      /*
;;;4      * Macros define
;;;5      */
;;;6      //LCSI values
;;;7      #define LCSI_FOR_CREATION					(0x01)
;;;8      #define LCSI_FOR_INIT						(0x03)
;;;9      #define LCSI_FOR_ACTIVATE					(0x05)
;;;10     #define LCSI_FOR_DEACTIVATE					(0x04)
;;;11     #define LCSI_FOR_TERMINATE					(0x0C)
;;;12     #define INS_INCREASE						(0x32)
;;;13     
;;;14     /*
;;;15     * Variables definition
;;;16     */
;;;17     
;;;18     /*Below buffer will be not used to store data across commands, it will be used in a function only and after execution of function , data will be no more valid*/
;;;19     uMonoByte gumbWorkingBuffer[LENGTH_WORKING_BUFFER];
;;;20     
;;;21     /*
;;;22     * It returns Address of MF
;;;23     *
;;;24     * @param 
;;;25     */
;;;26     tFileHeaderAddr _7816_4_getMfAddress(void) {
;;;27     
;;;28     	/*Store Address of MF*/
;;;29     	tFileHeaderAddr fhaFileAddr;
;;;30     
;;;31     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getMfAddress() \n");
;;;32     
;;;33     	DBG_FUNC("[7816_4] _7816_4_getMfAddress: Read Address of MF file from System page\n");
;;;34     
;;;35     	/*Read MF address from system page*/
;;;36     	baseReadNBytes(ADDRESS_MASTER_FILE, (puMonoByte) &fhaFileAddr, SIZE_OF_FILE_HEADER_ADDR);
        0x00003ec4:    4629        )F      MOV      r1,r5
        0x00003ec6:    f002ff19    ....    BL       baseReadNBytes ; 0x6cfc
;;;37     
;;;38     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getMfAddress() returns %2 \n", fhaFileAddr);
;;;39     	/*Retur MF address*/
;;;40     	return fhaFileAddr;
        0x00003eca:    8828        (.      LDRH     r0,[r5,#0]
;;;41     }
;;;42     
;;;43     /*
;;;44     * It searches for given AID in the ADF List file, and return its header address
;;;45     * 
;;;46     * @param pumbAid: Contains AID, 1st byte indicates length and remaining AID bytes
;;;47     * @param pfhaFile: if an ADF found, it contains Address of that file.'
;;;48     * 
;;;49     * @return If AID matches return record no. 
;;;50     *		  if EOF reached return return 0x00 i.e. invalid record no.
;;;51     *		  if AID doesnt match and encounter FF before EOF, return record no.
;;;52     */
;;;53     uMonoByte _7816_4_ifAdfExists(IN_ARG puMonoByte pumbAid, OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;54     
;;;55     	uMonoByte	umbFileRecord = 0x00;
;;;56     	uMonoByte	umbNoOfRec;
;;;57     	tFileHeader fhFile; //file header
;;;58     	tMemAddr	maFileData;
;;;59     	uMonoByte	umbRecord[LENGTH_RECORD_ADF_LIST]; // 1 byte for length and 16 bytes for AID
;;;60     
;;;61     	/*Check address must not be NULL*/
;;;62     	assert(pfhaFile != NULL);
;;;63     	assert(pumbAid != NULL);
;;;64     
;;;65     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifAdfExists() \n");
;;;66     
;;;67     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Incoming DF name:\n");
;;;68     	DBG_PRINT_ARRAY(pumbAid + 0x01, pumbAid[0]);
;;;69     
;;;70     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. admin use DF 7F49 \n");
;;;71     
;;;72     	/*Assuming All prop. files must be present with intended file attributes,
;;;73     	* so no extra checks are added for validation of prop file*/
;;;74     	/*get memory reference of Admin use DF*/
;;;75     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaFile);
;;;76     
;;;77     	assert(*pfhaFile != EMPTY_OBJECT); //ensure file must be created
;;;78     
;;;79     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Get File address of Prop. Adf list file under DF 7F49 \n");
;;;80     
;;;81     	/*get memory reference of ADF list ef*/
;;;82     	_7816_4_ifFileExists(FID_PROP_ADF_LIST, *pfhaFile, MODE_FIND_FID, pfhaFile);
;;;83     
;;;84     	assert(*pfhaFile != EMPTY_OBJECT); // ensure file must be created
;;;85     
;;;86     	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read file header of of Prop. Adf list file \n");
;;;87     
;;;88     	//TODO: here we can use _7816_4_ForwardSearchRecordFile() for searching AID in Prop. file
;;;89     
;;;90     	/*Read file header*/
;;;91     	mm_ReadUpdate(*pfhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;92     
;;;93     	/*read memory addess of file data*/
;;;94     	maFileData = fhFile.FileSpecific.EF.maFileData;
;;;95     
;;;96     	/*Set file header to EMPTY*/
;;;97     	*pfhaFile = NO_FILE_PRESENT;
;;;98     
;;;99     	/*get total record nos*/
;;;100    	umbNoOfRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;101    
;;;102    	do {
;;;103    		/*increment record pointer*/
;;;104    		umbFileRecord++;
;;;105    
;;;106    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: Read record %1  of Prop. ADF List EF :\n", umbFileRecord);
;;;107    
;;;108    		/*Read file data*/
;;;109    		mm_ReadUpdate(maFileData, umbRecord, (umbFileRecord - 1) * LENGTH_RECORD_ADF_LIST, LENGTH_RECORD_ADF_LIST, MEM_MODE_READ);
;;;110    
;;;111    		DBG_PRINT_ARRAY(umbRecord, LENGTH_RECORD_ADF_LIST);
;;;112    
;;;113    		if (EQUAL == mem_cmp(pumbAid + 0x01, umbRecord + 0x01, pumbAid[0x00])) // Both arrays are equal
;;;114    		{
;;;115    			DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name found\n");
;;;116    			/*Copy file Header Address*/
;;;117    			mem_cpy((puMonoByte)pfhaFile, umbRecord + OFFSET_ADDR_FILE_HEADER, SIZE_OF_FILE_HEADER_ADDR);
;;;118    
;;;119    			/*return record no.*/
;;;120    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;121    
;;;122    			return umbFileRecord;
;;;123    		}
;;;124    	} while (
;;;125    		(umbFileRecord < umbNoOfRec) //Record no. must be less than or equal to total no. of records
;;;126    		&&												//AND
;;;127    		(umbRecord[0x00] != DEFAULT_BYTE_IN_FILE)		//If data is not FF
;;;128    		);
;;;129    
;;;130    
;;;131    	if (umbFileRecord == umbNoOfRec) //check if above loop is failed as EOF reached
;;;132    	{
;;;133    		DBG_FUNC("[7816_4] _7816_4_ifAdfExists: No empty record left\n");
;;;134    		// AID is not present and EOF reached
;;;135    		umbFileRecord = RECORD_UNDEFINED;
;;;136    	}
;;;137    
;;;138    	DBG_FUNC("[7816_4] _7816_4_ifAdfExists: DF name not found\n");
;;;139    
;;;140    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifAdfExists() returns %1 \n", umbFileRecord);
;;;141    	return umbFileRecord;
;;;142    }
;;;143    
;;;144    /*
;;;145    * It searches for given File ID in the given, and return its header address
;;;146    *
;;;147    * @param udbFileId: Contains File ID
;;;148    * @param fhaDf: Address of DF under which search being done
;;;149    * @param umbSearchMode: Mode: Search by FID or SFID
;;;150    * @param pfhaFile: if a File found, it contains Address of that file.
;;;151    */
;;;152    void _7816_4_ifFileExists(IN_ARG uDiByte udbFileId,
;;;153    	IN_ARG tFileHeaderAddr fhaDf,
;;;154    	IN_ARG uMonoByte umbSearchMode,
;;;155    	OUT_ARG ptFileHeaderAddr pfhaFile) {
;;;156    
;;;157    	tFileHeader		fhFile;
;;;158    
;;;159    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_ifFileExists() \n");
;;;160    
;;;161    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Searching File ID %2 under DF %2\n", udbFileId, fhaDf);
;;;162    
;;;163    	/*Check address must not be NULL*/
;;;164    	assert(pfhaFile != NULL);
;;;165    
;;;166    	*pfhaFile = NO_FILE_PRESENT; //default set it to empty
;;;167    
;;;168    	if (NO_FILE_PRESENT == fhaDf) // check if given DF address is not empty
        0x00003ecc:    2800        .(      CMP      r0,#0
        0x00003ece:    d01b        ..      BEQ      0x3f08 ; _7816_4_getAidOfAdf + 92
        0x00003ed0:    2500        .%      MOVS     r5,#0
;;;169    	{
;;;170    		DBG_WARN("[7816_4] _7816_4_ifFileExists: Given DF address is empty \n");
;;;171    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	DBG_FUNC("[7816_4] _7816_4_ifFileExists: Reading file header from Given DF address %2 \n", fhaDf);
;;;176    
;;;177    	/*Read DF file header to check where to write created file header address*/
;;;178    	mm_ReadUpdate(fhaDf, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00003ed2:    9500        ..      STR      r5,[sp,#0]
        0x00003ed4:    ae06        ..      ADD      r6,sp,#0x18
        0x00003ed6:    2314        .#      MOVS     r3,#0x14
        0x00003ed8:    4631        1F      MOV      r1,r6
        0x00003eda:    462a        *F      MOV      r2,r5
        0x00003edc:    f7fdf844    ..D.    BL       mm_ReadUpdate ; 0xf68
        0x00003ee0:    89b0        ..      LDRH     r0,[r6,#0xc]
        0x00003ee2:    2800        .(      CMP      r0,#0
        0x00003ee4:    d010        ..      BEQ      0x3f08 ; _7816_4_getAidOfAdf + 92
        0x00003ee6:    4c2d        -L      LDR      r4,[pc,#180] ; [0x3f9c] = 0x7f49
        0x00003ee8:    9500        ..      STR      r5,[sp,#0]
        0x00003eea:    b286        ..      UXTH     r6,r0
        0x00003eec:    af06        ..      ADD      r7,sp,#0x18
        0x00003eee:    2314        .#      MOVS     r3,#0x14
        0x00003ef0:    4630        0F      MOV      r0,r6
        0x00003ef2:    4639        9F      MOV      r1,r7
        0x00003ef4:    462a        *F      MOV      r2,r5
        0x00003ef6:    f7fdf837    ..7.    BL       mm_ReadUpdate ; 0xf68
        0x00003efa:    8938        8.      LDRH     r0,[r7,#8]
        0x00003efc:    42a0        .B      CMP      r0,r4
        0x00003efe:    d020         .      BEQ      0x3f42 ; _7816_4_getAidOfAdf + 150
        0x00003f00:    a806        ..      ADD      r0,sp,#0x18
        0x00003f02:    88c0        ..      LDRH     r0,[r0,#6]
        0x00003f04:    2800        .(      CMP      r0,#0
        0x00003f06:    d1ef        ..      BNE      0x3ee8 ; _7816_4_getAidOfAdf + 60
        0x00003f08:    2500        .%      MOVS     r5,#0
        0x00003f0a:    a806        ..      ADD      r0,sp,#0x18
        0x00003f0c:    2111        .!      MOVS     r1,#0x11
        0x00003f0e:    2201        ."      MOVS     r2,#1
        0x00003f10:    2600        .&      MOVS     r6,#0
        0x00003f12:    9600        ..      STR      r6,[sp,#0]
        0x00003f14:    9201        ..      STR      r2,[sp,#4]
        0x00003f16:    9102        ..      STR      r1,[sp,#8]
        0x00003f18:    9003        ..      STR      r0,[sp,#0xc]
        0x00003f1a:    b2ad        ..      UXTH     r5,r5
        0x00003f1c:    a905        ..      ADD      r1,sp,#0x14
        0x00003f1e:    2202        ."      MOVS     r2,#2
        0x00003f20:    4628        (F      MOV      r0,r5
        0x00003f22:    4633        3F      MOV      r3,r6
        0x00003f24:    f7fffb92    ....    BL       _7816_4_SearchRecordFile ; 0x364c
        0x00003f28:    2800        .(      CMP      r0,#0
        0x00003f2a:    d007        ..      BEQ      0x3f3c ; _7816_4_getAidOfAdf + 144
        0x00003f2c:    a806        ..      ADD      r0,sp,#0x18
        0x00003f2e:    7802        .x      LDRB     r2,[r0,#0]
        0x00003f30:    2300        .#      MOVS     r3,#0
        0x00003f32:    4628        (F      MOV      r0,r5
        0x00003f34:    9904        ..      LDR      r1,[sp,#0x10]
        0x00003f36:    f7fff959    ..Y.    BL       _7816_4_readUpdateRecordFile ; 0x31ec
        0x00003f3a:    26ff        .&      MOVS     r6,#0xff
        0x00003f3c:    4630        0F      MOV      r0,r6
        0x00003f3e:    b00b        ..      ADD      sp,sp,#0x2c
        0x00003f40:    bdf0        ..      POP      {r4-r7,pc}
        0x00003f42:    9500        ..      STR      r5,[sp,#0]
        0x00003f44:    af06        ..      ADD      r7,sp,#0x18
        0x00003f46:    2314        .#      MOVS     r3,#0x14
        0x00003f48:    4630        0F      MOV      r0,r6
        0x00003f4a:    4639        9F      MOV      r1,r7
        0x00003f4c:    462a        *F      MOV      r2,r5
        0x00003f4e:    f7fdf80b    ....    BL       mm_ReadUpdate ; 0xf68
;;;179    
;;;180    	/*Check if searching for SFI*/
;;;181    	if (MODE_FIND_SFID == umbSearchMode) {
;;;182    
;;;183    		/*Searching for SFI*/
;;;184    
;;;185    		//TODO: SFI cant be 00 so below check can be removed
;;;186    		if ((0x00 == (udbFileId) || (SFI_NOT_SUPPORTED == (udbFileId)))) { // Check if invalid Short file identifier
;;;187    			/*Invalid SFI presented*/
;;;188    			DBG_WARN("[7816_4] _7816_4_ifFileExists: SFI is invalid i.e. 00 or 1F \n");
;;;189    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;190    			return;
;;;191    		}
;;;192    
;;;193    	}
;;;194    
;;;195    
;;;196    
;;;197    	/*check if DF contains child or not*/
;;;198    	if (NO_FILE_PRESENT != fhFile.FileSpecific.DF.fhaChild) { //DF conatins child
        0x00003f52:    89bf        ..      LDRH     r7,[r7,#0xc]
        0x00003f54:    2f00        ./      CMP      r7,#0
        0x00003f56:    d0d8        ..      BEQ      0x3f0a ; _7816_4_getAidOfAdf + 94
        0x00003f58:    4c11        .L      LDR      r4,[pc,#68] ; [0x3fa0] = 0x6f10
        0x00003f5a:    2600        .&      MOVS     r6,#0
;;;199    
;;;200    		/*get Child file header address*/
;;;201    		*pfhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;202    
;;;203    		do {
;;;204    			DBG_FUNC("Searching...\n");
;;;205    
;;;206    			/*Created file would be child of given DF*/
;;;207    			mm_ReadUpdate(*pfhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00003f5c:    9600        ..      STR      r6,[sp,#0]
        0x00003f5e:    b2b8        ..      UXTH     r0,r7
        0x00003f60:    ad06        ..      ADD      r5,sp,#0x18
        0x00003f62:    2314        .#      MOVS     r3,#0x14
        0x00003f64:    4629        )F      MOV      r1,r5
        0x00003f66:    4632        2F      MOV      r2,r6
        0x00003f68:    f7fcfffe    ....    BL       mm_ReadUpdate ; 0xf68
;;;208    			
;;;209    			if (MODE_FIND_SFID == umbSearchMode)
;;;210    			{
;;;211    				if ((!IS(DF, fhFile.umbFileDesc)) // if its EF
;;;212    					&&							//AND
;;;213    					(fhFile.FileSpecific.EF.umbSfi == (uMonoByte)udbFileId)){ //SFI matches
;;;214    					DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given SFID matches with EF %2 \n", *pfhaFile);
;;;215    					DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;216    					return;
;;;217    				}
;;;218    			}
;;;219    			else if (fhFile.udbFileId == udbFileId) //Mode File ID, so direct compare file id
        0x00003f6c:    8928        (.      LDRH     r0,[r5,#8]
        0x00003f6e:    42a0        .B      CMP      r0,r4
        0x00003f70:    463d        =F      MOV      r5,r7
        0x00003f72:    d0ca        ..      BEQ      0x3f0a ; _7816_4_getAidOfAdf + 94
        0x00003f74:    a806        ..      ADD      r0,sp,#0x18
;;;220    			{
;;;221    				/*File ID matched*/
;;;222    				DBG_FUNC("[7816_4] _7816_4_ifFileExists: Given FID matches with File %2 \n", *pfhaFile);
;;;223    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;224    				return;
;;;225    			}
;;;226    
;;;227    			/*Get sibling o*/
;;;228    			*pfhaFile = fhFile.fhaSibling;
        0x00003f76:    88c7        ..      LDRH     r7,[r0,#6]
;;;229    
;;;230    		} while (*pfhaFile != NO_FILE_PRESENT); // loop until no sibling found
        0x00003f78:    2f00        ./      CMP      r7,#0
        0x00003f7a:    4635        5F      MOV      r5,r6
        0x00003f7c:    d1ed        ..      BNE      0x3f5a ; _7816_4_getAidOfAdf + 174
        0x00003f7e:    e7c4        ..      B        0x3f0a ; _7816_4_getAidOfAdf + 94
;;;231    
;;;232    	}
;;;233    	DBG_FUNC("[7816_4] _7816_4_ifFileExists:File ID %2 not found \n", udbFileId);
;;;234    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_ifFileExists() \n");
;;;235    }
;;;236    
;;;237    /*
;;;238    * It update/read the record data of given File header address
;;;239    *
;;;240    * @param fhaFile: Address of file that need to update
;;;241    * @param pumData: If mode Update, Data will be read from this array
;;;242    *					If mode Read, data will be stored in this array
;;;243    * @param umbRecordNo: record to read/update
;;;244    * @param amMode: Operation mode : read or update or increase
;;;245    *
;;;246    * @return Read/Updated logical record no.
;;;247    * @precondition: fhaFile must be an Record File
;;;248    */
;;;249    uMonoByte _7816_4_readUpdateRecordFile(	IN_ARG		tFileHeaderAddr fhaFile,
;;;250    										INOUT_ARG	puMonoByte pumData,
;;;251    										IN_ARG		uMonoByte umbRecordNo,
;;;252    										IN_ARG		tAccessMode amMode) {
;;;253    
;;;254    	uMonoByte	umbLastUpdatedRec;
;;;255    	uMonoByte	umbRecLength;
;;;256    	uDiByte		udbFileOffset;
;;;257    	tFileHeader fhFile; //stores target EF
;;;258    
;;;259    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateRecordFile() \n");
;;;260    
;;;261    	/*check address must not be null*/
;;;262    	assert(fhaFile != EMPTY_OBJECT);
;;;263    	assert(pumData != NULL);
;;;264    	assert(umbRecordNo != RECORD_UNDEFINED);
;;;265    
;;;266    	/*Read file header*/
;;;267    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;268    
;;;269    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;270    
;;;271    	/*Get last updated record*/
;;;272    	umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;273    
;;;274    	/*Get record length*/
;;;275    	umbRecLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;276    
;;;277    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Targetting file %2 of record length %1\n", fhFile.udbFileId, umbRecLength);
;;;278    
;;;279    	DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Performing operation on record no. %1\n", umbRecordNo);
;;;280    
;;;281    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;282    		&& // AND
;;;283    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;284    
;;;285    		/*Record no. will be always oldest one, which is last record*/
;;;286    		umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;287    	}
;;;288    
;;;289    	/*Caculate actual record no. from logical record no.*/
;;;290    	umbLastUpdatedRec = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;291    
;;;292    	/*calculate offset*/
;;;293    	udbFileOffset = umbLastUpdatedRec * umbRecLength;
;;;294    
;;;295    	if (ACC_MODE_FILE_READ == amMode) { // File in read mode
;;;296    		amMode = (tAccessMode)MEM_MODE_READ;
;;;297    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Reading record \n");
;;;298    	}
;;;299    	else { // File in case update or increase mode
;;;300    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;301    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Updating record\n");
;;;302    	}
;;;303    
;;;304    	/*Read/update the file on given memory address of file data*/
;;;305    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, umbRecLength, (tMemMode)amMode);
;;;306    
;;;307    	if ((MEM_MODE_UPDATE == amMode) // Update operation
;;;308    		&& // AND
;;;309    		(IS(CF, fhFile.umbFileDesc))) { // File is cyclic
;;;310    
;;;311    		DBG_FUNC("[7816_4] _7816_4_readUpdateRecordFile: Last updated record no %1 has been updated for this cyclic EF\n", umbLastUpdatedRec+1);
;;;312    
;;;313    		/*Update last updated record in cyclic file*/
;;;314    		fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord = umbLastUpdatedRec + 1;
;;;315    
;;;316    		/*update the file header with new last updated record*/
;;;317    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_UPDATE);
;;;318    
;;;319    		/*After updating, it becomes record no. 1 */
;;;320    		umbRecordNo = RECORD_FIRST;
;;;321    	}
;;;322    
;;;323    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateRecordFile() returns %1\n", umbRecordNo);
;;;324    	return umbRecordNo; //return read/updated record no.
;;;325    }
;;;326    
;;;327    /*
;;;328    * It update/read the data of given File header address 
;;;329    *
;;;330    * @param fhaFile: Address of file that need to update
;;;331    * @param pumData: If mode Update, Data will be read from this array
;;;332    *					If mode Read, data will be stored in this array
;;;333    * @param udbFileOffset: offset from/to  where data read/update
;;;334    * @param udbDataLength: Length of data to update/read
;;;335    * @param amMode: Operation mode : read or update or increase
;;;336    * 
;;;337    * @precondition: fhaFile must be an EF
;;;338    */
;;;339    void _7816_4_readUpdateFile(IN_ARG		tFileHeaderAddr fhaFile,
;;;340    							INOUT_ARG	puMonoByte pumData,
;;;341    							IN_ARG		uDiByte udbFileOffset,
;;;342    							IN_ARG		uDiByte udbDataLength,
;;;343    							IN_ARG		tAccessMode amMode) {
;;;344    
;;;345    	tFileHeader fhFile; //stores file header
;;;346    
;;;347    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_readUpdateFile() \n");
;;;348    
;;;349    	/*check address must not be null*/
;;;350    	assert(fhaFile != EMPTY_OBJECT);
;;;351    	assert(pumData != NULL);
;;;352    
;;;353    	/*Read file header*/
;;;354    	mm_ReadUpdate(fhaFile, (puMonoByte) &fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;355    
;;;356    	if (ACC_MODE_FILE_READ == amMode){ // File in read mode
;;;357    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Reading File %2\n", fhFile.udbFileId);
;;;358    		amMode = (tAccessMode)MEM_MODE_READ;
;;;359    	}
;;;360    	else { // File in case update or increase mode
;;;361    		DBG_FUNC("[7816_4] _7816_4_readUpdateFile: Updating File %2\n", fhFile.udbFileId);
;;;362    		amMode = (tAccessMode)MEM_MODE_UPDATE;
;;;363    	}
;;;364    
;;;365    	/*Read/update the file on given memory address of file data*/
;;;366    	mm_ReadUpdate(fhFile.FileSpecific.EF.maFileData, pumData, udbFileOffset, udbDataLength, (tMemMode)amMode);
;;;367    
;;;368    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_readUpdateFile() \n");
;;;369    }
;;;370    
;;;371    /*
;;;372    * It read the file header from given File header address
;;;373    *
;;;374    * @param fhaFile: Address of file whose header to read
;;;375    * @param pfhFile: Read the file
;;;376    *
;;;377    * @precondition: fhaFile must be a valid file header address
;;;378    */
;;;379    void _7816_4_getFileHeader(	IN_ARG		tFileHeaderAddr fhaFile,
;;;380    							OUT_ARG		ptFileHeader	pfhFile) {
;;;381    	
;;;382    	/*check address must not be null*/
;;;383    	assert(fhaFile != EMPTY_OBJECT);
;;;384    	assert(pfhFile != NULL);
;;;385    
;;;386    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileHeader() \n");
;;;387    
;;;388    	DBG_FUNC("[7816_4] _7816_4_getFileHeader: Read file header from File address %2\n", fhaFile);
;;;389    
;;;390    	/*Read file header*/
;;;391    	mm_ReadUpdate(fhaFile, (puMonoByte)pfhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;392    
;;;393    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileHeader() \n");
;;;394    
;;;395    }
;;;396    
;;;397    /*
;;;398    * It read the file ID from given File header address
;;;399    *
;;;400    * @param fhaFile: Address of file whose header to read
;;;401    * @param pfhFile: Read the file
;;;402    *
;;;403    * @precondition: fhaFile must be a valid file header address
;;;404    */
;;;405    uDiByte _7816_4_getFileId(IN_ARG		tFileHeaderAddr fhaFile) {
;;;406    
;;;407    	tFileHeader fhFile;
;;;408    
;;;409    	/*check address must not be null*/
;;;410    	assert(fhaFile != EMPTY_OBJECT);
;;;411    
;;;412    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileId() \n");
;;;413    
;;;414    	DBG_FUNC("[7816_4] _7816_4_getFileId: Read file header from File address %2\n", fhaFile);
;;;415    
;;;416    	/*Read file header*/
;;;417    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;418    
;;;419    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileId() returns %2\n", fhFile.udbFileId);
;;;420    
;;;421    	return fhFile.udbFileId;
;;;422    
;;;423    }
;;;424    
;;;425    /*
;;;426    * It read the file data address from given File header address
;;;427    *
;;;428    * @param fhaFile: file whose data address to read
;;;429    *
;;;430    * @precondition: fhaFile must be a valid EF header address
;;;431    */
;;;432    tMemAddr _7816_4_getFileDataAddress(IN_ARG tFileHeaderAddr fhaFile) {
;;;433    
;;;434    	tFileHeader fhFile;
;;;435    
;;;436    	/*check address must not be null*/
;;;437    	assert(fhaFile != EMPTY_OBJECT);
;;;438    
;;;439    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDataAddress() \n");
;;;440    
;;;441    	DBG_FUNC("[7816_4] _7816_4_getFileDataAddress: Read file header from File address %2\n", fhaFile);
;;;442    
;;;443    	/*Read file header*/
;;;444    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;445    
;;;446    	assert(!(IS(DF, fhFile.umbFileDesc)));
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDataAddress() returns %2 \n", fhFile.FileSpecific.EF.maFileData);
;;;449    
;;;450    	return fhFile.FileSpecific.EF.maFileData;
;;;451    
;;;452    }
;;;453    
;;;454    /*
;;;455    * It returns the File descriptor byte of file 
;;;456    * 
;;;457    * @param fhaFile: Address of file header
;;;458    * 
;;;459    * @return File descriptor byte
;;;460    * @precondition: fhaFile must be a valid file header address
;;;461    */
;;;462    uMonoByte	_7816_4_getFileDescriptor(IN_ARG tFileHeaderAddr fhaFile) {
;;;463    
;;;464    	tFileHeader fhFile; // Stores file header info.
;;;465    
;;;466    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileDescriptor() \n");
;;;467    
;;;468    	/*check address must not be null*/
;;;469    	assert(fhaFile != EMPTY_OBJECT);
;;;470    
;;;471    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Read file header from given file address '%2' \n", fhaFile);
;;;472    
;;;473    	/*Read file header*/
;;;474    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;475    
;;;476    	DBG_FUNC("[7816_4] _7816_4_getFileDescriptor: Return File descriptor byte \n");
;;;477    
;;;478    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileDescriptor() returns %1 \n", fhFile.umbFileDesc);
;;;479    	return fhFile.umbFileDesc; // File descriptor byte
;;;480    }
;;;481    /*
;;;482    * It returns the ARR file and Arr record
;;;483    *
;;;484    * @param fhaFile: Address of file header
;;;485    * @param paiFile: Arr file id and record will be returned through this param
;;;486    *
;;;487    * @precondition: fhaFile must be a valid file header address
;;;488    */
;;;489    void _7816_4_getArrInfomation(IN_ARG tFileHeaderAddr fhaFile, OUT_ARG ptArrInfo paiFile) {
;;;490    
;;;491    	tFileHeader fhFile; // Stores file header info.
;;;492    
;;;493    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getArrInfomation() \n");
;;;494    
;;;495    	/*check addresses must not be null*/
;;;496    	assert(fhaFile != EMPTY_OBJECT);
;;;497    	assert(paiFile != NULL);
;;;498    
;;;499    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Read file header from given file address '%2' \n", fhaFile);
;;;500    
;;;501    	/*Read file header*/
;;;502    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;503    
;;;504    	DBG_FUNC("[7816_4] _7816_4_getArrInfomation: Return File descriptor byte \n");
;;;505    
;;;506    	/*save ARR infor*/
;;;507    	paiFile->udbArrFile = fhFile.udbEFarrId;
;;;508    	paiFile->umbArrRec = fhFile.umbEFarrRec;
;;;509    
;;;510    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getArrInfomation()\n");
;;;511    }
;;;512    
;;;513    
;;;514    /*
;;;515    * It returns the File size of file
;;;516    *
;;;517    * @param fhaFile: Address of file header
;;;518    *
;;;519    * @return File size
;;;520    * @precondition: fhaFile must be a valid file header address of Transparent File
;;;521    */
;;;522    uDiByte _7816_4_getFileSize(IN_ARG tFileHeaderAddr fhaFile) {
;;;523    	
;;;524    	tFileHeader fhFile; // Stores file header info.
;;;525    
;;;526    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getFileSize() \n");
;;;527    
;;;528    	/*check address must not be null*/
;;;529    	assert(fhaFile != EMPTY_OBJECT);
;;;530    
;;;531    	DBG_FUNC("[7816_4] _7816_4_getFileSize: Read file header from given file address '%2' \n", fhaFile);
;;;532    
;;;533    	/*Read file header*/
;;;534    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;535    
;;;536    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getFileSize() returns %2 \n", fhFile.FileSpecific.EF.fileData.udbFileSize);
;;;537    	return fhFile.FileSpecific.EF.fileData.udbFileSize; // return File size
;;;538    }
;;;539    
;;;540    /*
;;;541    * It returns the Record length of given file
;;;542    *
;;;543    * @param fhaFile: Address of file header
;;;544    *
;;;545    * @return Record length
;;;546    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;547    */
;;;548    uMonoByte _7816_4_getRecordLength(IN_ARG tFileHeaderAddr fhaFile) {
;;;549    	
;;;550    	tFileHeader fhFile; // Stores file header info.
;;;551    	
;;;552    	/*check address must not be null*/
;;;553    	assert(fhaFile != EMPTY_OBJECT);
;;;554    
;;;555    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getRecordLength() \n");
;;;556    
;;;557    	DBG_FUNC("[7816_4] _7816_4_getRecordLength: Read file header from given file address '%2' \n", fhaFile);
;;;558    
;;;559    	/*Read file header*/
;;;560    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;561    
;;;562    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getRecordLength() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize);
;;;563    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize; // return record length
;;;564    }
;;;565    /*
;;;566    * It returns the No. of records of given file
;;;567    *
;;;568    * @param fhaFile: Address of file header
;;;569    *
;;;570    * @return No of records
;;;571    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;572    */
;;;573    uMonoByte _7816_4_getNoOfRecords(IN_ARG tFileHeaderAddr fhaFile) {
;;;574    
;;;575    	tFileHeader fhFile; // Stores file header info.
;;;576    
;;;577    	/*check address must not be null*/
;;;578    	assert(fhaFile != EMPTY_OBJECT);
;;;579    
;;;580    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getNoOfRecords() \n");
;;;581    
;;;582    	DBG_FUNC("[7816_4] _7816_4_getNoOfRecords: Read file header of given file address %2 \n", fhaFile);
;;;583    
;;;584    	/*Read file header*/
;;;585    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;586    
;;;587    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;588    
;;;589    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getNoOfRecords() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;590    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec; // return no. of records
;;;591    }
;;;592    
;;;593    /*
;;;594    * It returns the last updated record of given file
;;;595    *
;;;596    * @param fhaFile: Address of file header
;;;597    *
;;;598    * @return last updated record
;;;599    * @precondition: fhaFile must be a valid file header address of Linear fixed or Cyclic File
;;;600    */
;;;601    uMonoByte _7816_4_getLastUpdatedRecord(IN_ARG tFileHeaderAddr fhaFile) {
;;;602    
;;;603    	tFileHeader fhFile; // Stores file header info.
;;;604    	
;;;605    	/*check address must not be null*/
;;;606    	assert(fhaFile != EMPTY_OBJECT);
;;;607    
;;;608    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLastUpdatedRecord() \n");
;;;609    
;;;610    	DBG_FUNC("[7816_4] _7816_4_getLastUpdatedRecord: Read file header of given File address %2 \n", fhaFile);
;;;611    
;;;612    	/*Read file header*/
;;;613    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;614    
;;;615    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;616    
;;;617    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLastUpdatedRecord() returns %1 \n", fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord);
;;;618    	return fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord; // return last updated recprd
;;;619    }
;;;620    /*
;;;621    * It Sets the LCSI byte for given EF
;;;622    *
;;;623    * @param fhaFile: Address of file header
;;;624    * @param flState: Life cycle state to update in file
;;;625    *
;;;626    * @precondition: fhaFile must be a valid file header address of an EF
;;;627    */
;;;628    void _7816_4_setLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileLCSI flState) {
;;;629    
;;;630    	tFileHeader			fhFile; // Stores file header info.
;;;631    
;;;632    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setLifeCycleState() \n");
;;;633    
;;;634    	/*check address must not be null*/
;;;635    	assert(fhaFile != EMPTY_OBJECT);
;;;636    
;;;637    	DBG_FUNC("[7816_4] _7816_4_setLifeCycleState: Read file header from given file address '%2' \n", fhaFile);
;;;638    
;;;639    	/*Read file header*/
;;;640    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;641    
;;;642    	fhFile.flState = flState; // update new state
;;;643    
;;;644    	/*Update file header*/
;;;645    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
;;;646    
;;;647    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setLifeCycleState() \n");
;;;648    }
;;;649    
;;;650    /*
;;;651    * It get the Life cycle state of given EF
;;;652    *
;;;653    * @param fhaFile: Address of file header
;;;654    *
;;;655    * @precondition: fhaFile must be a valid file header address of an EF
;;;656    */
;;;657    tFileLCSI _7816_4_getLifeCycleStatus(IN_ARG tFileHeaderAddr fhaFile) {
;;;658    
;;;659    	tFileHeader			fhFile; // Stores file header info.
;;;660    
;;;661    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getLifeCycleStatus() \n");
;;;662    
;;;663    	/*check address must not be null*/
;;;664    	assert(fhaFile != EMPTY_OBJECT);
;;;665    
;;;666    	DBG_FUNC("[7816_4] _7816_4_getLifeCycleStatus: Read file header from given file address '%2' \n", fhaFile);
;;;667    
;;;668    	/*Read file header*/
;;;669    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;670    
;;;671    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getLifeCycleStatus() returns %1\n", fhFile.flState);
;;;672    	return fhFile.flState;
;;;673    }
;;;674    
;;;675    /*
;;;676    * It searches the no. of records for given pattern in forward/backward direction
;;;677    *
;;;678    * @param fhaFile: Address of file header
;;;679    * @param pumbPattern: contains search pattern
;;;680    * @param umbPatternLen: search pattern length
;;;681    * @param umbRecordNo: Record no. from where search starts
;;;682    * @param smMode: Search mode : forward or backward
;;;683    * @param soOccur: Search occurrence: First or ALL ?
;;;684    * @param umbOffset: absoulte position in record for search
;;;685    * @param pumbOutput: Stores list of records matched with given pattern
;;;686    *
;;;687    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;688    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;689    */
;;;690    uMonoByte _7816_4_SearchRecordFile(	IN_ARG	tFileHeaderAddr		fhaFile,
;;;691    									IN_ARG	puMonoByte			pumbPattern,
;;;692    									IN_ARG	uMonoByte			umbPatternLen,
;;;693    									IN_ARG	tSearchMode			smMode,
;;;694    									IN_ARG	tSearchOccurrence	soOccur,
;;;695    									IN_ARG	uMonoByte			umbRecordNo,
;;;696    									IN_ARG	uMonoByte			umbOffset,
;;;697    									OUT_ARG	puMonoByte			pumbOutput) {
;;;698    
;;;699    	uMonoByte		umbRecordsProcessed;
;;;700    	uMonoByte		umbOutputLen = 0x00;
;;;701    	tFileHeader		fhFile;
;;;702    
;;;703    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_SearchRecordFile() \n");
;;;704    
;;;705    	/*Get file header*/
;;;706    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;707    
;;;708    	assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;709    	assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;710    
;;;711    #ifdef _DEBUG
;;;712    	if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode0
;;;713    
;;;714    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in backward direction\n");
;;;715    	}
;;;716    	else { // forward search mode
;;;717    
;;;718    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Search record in forward direction\n");
;;;719    	}
;;;720    #endif // _DEBUG
;;;721    
;;;722    	if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;723    
;;;724    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is linear fixed\n");
;;;725    
;;;726    		/*for linear fixed file, assume all previous records have been searched*/
;;;727    		umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo-1): (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;728    	}
;;;729    	else { // Cyclic file
;;;730    
;;;731    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: File is Cyclic\n");
;;;732    
;;;733    		/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;734    		umbRecordsProcessed = 0x00;
;;;735    	}
;;;736    
;;;737    	while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;738    
;;;739    		DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Searching record %1\n", umbRecordNo);
;;;740    
;;;741    		/*Search the whole record data*/
;;;742    		if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbOffset, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;743    
;;;744    			DBG_FUNC("[7816_4] _7816_4_SearchRecordFile: Pattern matched\n");
;;;745    			pumbOutput[umbOutputLen++] = umbRecordNo;
;;;746    
;;;747    			if (SEARCH_FIRST_OCCURRENCE == soOccur) { // If first occurence to return only
;;;748    
;;;749    				DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", 0x01);
;;;750    				return 0x01;
;;;751    			}
;;;752    		}
;;;753    
;;;754    		/*get next record*/
;;;755    		(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;756    
;;;757    		umbRecordsProcessed++; //increment the processed no. of records
;;;758    
;;;759    		/* Below check is added for cyclic file */
;;;760    		if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;761    
;;;762    			umbRecordNo = RECORD_FIRST;
;;;763    		}
;;;764    		else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;765    
;;;766    			umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;767    		}
;;;768    	}
;;;769    
;;;770    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_SearchRecordFile() retruns %1\n", umbOutputLen);
;;;771    	return umbOutputLen;
;;;772    }
;;;773    
;;;774    /*
;;;775    * It is enhanced search for the no. of records for given pattern in forward/backward direction
;;;776    *
;;;777    * @param fhaFile: Address of file header
;;;778    * @param pumbPattern: contains search pattern
;;;779    * @param umbPatternLen: search pattern length
;;;780    * @param umbRecordNo: Record no. from where search starts
;;;781    * @param smMode: Search mode : forward or backward
;;;782    * @param esmMode: Search Mechanism for enhanced mode, Offset or First Byte Occurrence
;;;783    * @param umbOffsetOrValue: absoulte position in record for search or the byte to search first occurrence
;;;784    * @param pumbOutput: Stores list of records matched with given pattern
;;;785    *
;;;786    * @return Total no. of records found matching given pattern, List of those records in pumbOutput
;;;787    * @precondition: fhaFile must be a valid file Record file, record no. must be valid , requstor has to ensure
;;;788    */
;;;789    uMonoByte _7816_4_EnhancedSearchRecordFile( IN_ARG	tFileHeaderAddr				fhaFile,
;;;790    											IN_ARG	puMonoByte					pumbPattern,
;;;791    											IN_ARG	uMonoByte					umbPatternLen,
;;;792    											IN_ARG	tSearchMode					smMode,
;;;793    											IN_ARG	tEnhancedSearchMechanism	esmMode,
;;;794    											IN_ARG	uMonoByte					umbRecordNo,
;;;795    											IN_ARG	uMonoByte					umbOffsetOrValue,
;;;796    											OUT_ARG	puMonoByte					pumbOutput ) {
;;;797    
;;;798    	uMonoByte		umbLastUpdatedRec;
;;;799    	uMonoByte		umbActualRecordToUpdate;
;;;800    	uMonoByte		umbRecordsProcessed;
;;;801    	uMonoByte		umbOutputLen = 0x00;
;;;802    	tFileHeader		fhFile;
;;;803    	uMonoByte		umbIndex;
;;;804    	uMonoByte		umbRecordLength;
;;;805    	uDiByte			udbFileOffset;
;;;806    
;;;807    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_EnhancedSearchRecordFile() \n");
;;;808    
;;;809    	if (esmMode == SEARCH_BY_OFFSET) { //Enhanced search mode with offset
;;;810    
;;;811    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with Offset\n");
;;;812    		umbOutputLen = _7816_4_SearchRecordFile(fhaFile, pumbPattern, umbPatternLen, smMode, SEARCH_ALL_OCCURRENCES, umbRecordNo, umbOffsetOrValue, pumbOutput);
;;;813    	}
;;;814    
;;;815    	else { //Enhanced search mode with first byte occurrence of value
;;;816    
;;;817    		DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Enhanced Search mode with First Byte Occurrence of Value\n");
;;;818    		/*Get file header*/
;;;819    		mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(fhFile), MEM_MODE_READ);
;;;820    
;;;821    		assert((IS(LF, fhFile.umbFileDesc)) || (IS(CF, fhFile.umbFileDesc))); // check it must be Record structured file
;;;822    		assert((smMode == SEARCH_RECORD_BACKWARD) || (smMode == SEARCH_RECORD_FORWARD)); // Valid search mode
;;;823    
;;;824    #ifdef _DEBUG
;;;825    		if (smMode == SEARCH_RECORD_BACKWARD) { // backward search mode
;;;826    
;;;827    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in backward direction\n");
;;;828    		}
;;;829    		else { // forward search mode
;;;830    
;;;831    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Search record in forward direction\n");
;;;832    		}
;;;833    #endif // _DEBUG
;;;834    
;;;835    		if (IS(LF, fhFile.umbFileDesc)) { // if linear fixed file
;;;836    
;;;837    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is linear fixed\n");
;;;838    
;;;839    			/*for linear fixed file, assume all previous records have been searched*/
;;;840    			umbRecordsProcessed = (SEARCH_RECORD_FORWARD == smMode) ? (umbRecordNo - 1) : (fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec - umbRecordNo);
;;;841    		}
;;;842    		else { // Cyclic file
;;;843    
;;;844    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: File is Cyclic\n");
;;;845    
;;;846    			/*for Cyclic file,all records will be searched, because last record connected to first record*/
;;;847    			umbRecordsProcessed = 0x00;
;;;848    		}
;;;849    
;;;850    		umbRecordLength = _7816_4_getRecordLength(fhaFile);
;;;851    
;;;852    		/*Get last updated record*/
;;;853    		umbLastUpdatedRec = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord;
;;;854    
;;;855    		while (umbRecordsProcessed < fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { // check if all records have been searched
;;;856    
;;;857    			DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Searching record %1 for value %1\n", umbRecordNo, umbOffsetOrValue);
;;;858    
;;;859    			/*Caculate actual record no. from logical record no.*/
;;;860    			umbActualRecordToUpdate = ((umbLastUpdatedRec + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec);
;;;861    
;;;862    			/*calculate offset*/
;;;863    			udbFileOffset = umbActualRecordToUpdate * umbRecordLength;
;;;864    
;;;865    			for (umbIndex = 0x00; umbIndex < (umbRecordLength - umbPatternLen); umbIndex++) {// traverse through each byte of record 
;;;866    
;;;867    				/*Compare record byte with given value*/
;;;868    				if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, &umbOffsetOrValue, udbFileOffset + umbIndex, 0x01)) { // if record data matched
;;;869    
;;;870    					/*value byte matches in record*/
;;;871    					DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Value byte found inside the record at offset %1\n", umbIndex);
;;;872    
;;;873    					/*Search the whole record data from the next offset*/
;;;874    					if (TRUE == _7816_4_compareWithRecord(fhaFile, umbRecordNo, umbIndex + 1, pumbPattern, umbPatternLen)) { // Pattern found in current record
;;;875    
;;;876    						DBG_FUNC("[7816_4] _7816_4_EnhancedSearchRecordFile: Pattern matched\n");
;;;877    						pumbOutput[umbOutputLen++] = umbRecordNo;
;;;878    					}
;;;879    					break;
;;;880    				}
;;;881    			}
;;;882    			/*get next record*/
;;;883    
;;;884    			(SEARCH_RECORD_FORWARD == smMode) ? umbRecordNo++ : umbRecordNo--;
;;;885    
;;;886    			umbRecordsProcessed++; //increment the processed no. of records
;;;887    
;;;888    			/* Below check is added for cyclic file */
;;;889    			if (umbRecordNo > fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) { //This case is only applicable for Forward search
;;;890    
;;;891    				umbRecordNo = RECORD_FIRST;
;;;892    			}
;;;893    			else if (umbRecordNo == 0x00) { // this case is applicable for backward search
;;;894    
;;;895    				umbRecordNo = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec;
;;;896    			}
;;;897    		}
;;;898    	}
;;;899    
;;;900    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_EnhancedSearchRecordFile() retruns %1\n", umbOutputLen);
;;;901    	return umbOutputLen;
;;;902    }
;;;903    
;;;904    /*
;;;905    * It returns the Parent file address of given File (DF/EF)
;;;906    *
;;;907    * @param fhaFile: Address of file header
;;;908    *
;;;909    * @return Parent file header address
;;;910    * @precondition: fhaFile must be a valid file header address
;;;911    */
;;;912    tFileHeaderAddr	_7816_4_getParentFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;913    
;;;914    	tFileHeader fhFile; // Stores file header info.
;;;915    
;;;916    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getParentFile() \n");
;;;917    
;;;918    	/*check address must not be null*/
;;;919    	assert(fhaFile != EMPTY_OBJECT);
;;;920    
;;;921    	DBG_FUNC("[7816_4] _7816_4_getParentFile: Read file header from given file address '%2' \n", fhaFile);
;;;922    
;;;923    	/*Reading file header*/
;;;924    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;925    
;;;926    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getParentFile() returns %2 \n", fhFile.fhaParent);
;;;927    	return  fhFile.fhaParent; // PArent file
;;;928    }
;;;929    
;;;930    /*
;;;931    * It returns the Sibling of given File (DF/EF)
;;;932    *
;;;933    * @param fhaFile: Address of file header
;;;934    *
;;;935    * @return sibling file header address
;;;936    * @precondition: fhaFile must be a valid file header address
;;;937    */
;;;938    tFileHeaderAddr	_7816_4_getSiblingFile(IN_ARG tFileHeaderAddr fhaFile) {
;;;939    
;;;940    	tFileHeader fhFile; // Stores file header info.
;;;941    
;;;942    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSiblingFile() \n");
;;;943    
;;;944    	/*check address must not be null*/
;;;945    	assert(fhaFile != EMPTY_OBJECT);
;;;946    
;;;947    	DBG_FUNC("[7816_4] _7816_4_getSiblingFile: Read file header from given file address '%2' \n", fhaFile);
;;;948    
;;;949    	/*Reading file header*/
;;;950    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;951    
;;;952    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSiblingFile() returns %2 \n", fhFile.fhaSibling);
;;;953    	return fhFile.fhaSibling; // Sibling file
;;;954    }
;;;955    
;;;956    /*
;;;957    * It compares the given record with presented RAM data
;;;958    * 
;;;959    * @param fhaFile: Record file header address
;;;960    * @param umbRecordNo: Record to search
;;;961    * @param umbRecordOffset: Offset from where compare starts
;;;962    * @param pumbData: Data to compare
;;;963    * @param umbDataLength: Length of data to compare
;;;964    * 
;;;965    * @return TRUE if given data string present in record, otherwise FALSE.
;;;966    */
;;;967    boolean _7816_4_compareWithRecord(tFileHeaderAddr fhaFile, uMonoByte umbRecordNo, uMonoByte umbRecordOffset, puMonoByte pumbData, uMonoByte umbDataLength) {
;;;968    
;;;969    	uMonoByte		umbIndex;
;;;970    	uMonoByte		umbRecordLength;
;;;971    	uDiByte			udbFileOffset;
;;;972    	tFileHeader		fhFile;
;;;973    
;;;974    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_compareWithRecord() \n");
;;;975    
;;;976    	/*check address must not be null*/
;;;977    	assert(fhaFile != EMPTY_OBJECT);
;;;978    
;;;979    	/*Read file header*/
;;;980    	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
;;;981    
;;;982    	DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Searching record %1 of File %2\n", umbRecordNo, fhFile.udbFileId);
;;;983    
;;;984    	umbRecordLength = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;985    
;;;986    	/*Caculate actual record no. from logical record no. and then calculate offset*/
;;;987    	udbFileOffset = (((fhFile.FileSpecific.EF.fileData.ofRecordFile.umbLastUpdatedRecord + umbRecordNo - 2) % fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec) * umbRecordLength) + umbRecordOffset;
;;;988    
;;;989    	for (umbIndex = 0x00; umbIndex <= (umbRecordLength - (umbRecordOffset + umbDataLength)); umbIndex++) {// traverse through each byte of record 
;;;990    
;;;991    		/*Compare memory data with given pattern*/
;;;992    		if (TRUE == mm_cmpRam(fhFile.FileSpecific.EF.maFileData, pumbData, udbFileOffset + umbIndex, umbDataLength)) { // if record data matched
;;;993    
;;;994    			DBG_FUNC("[7816_4] _7816_4_compareWithRecord: Data found inside the record\n");
;;;995    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns TRUE %1\n", TRUE);
;;;996    			return TRUE;
;;;997    		}
;;;998    	}
;;;999    
;;;1000   		DBG_FUNC_EXIT("<<[7816_4] _7816_4_compareWithRecord() returns FALSE %1\n", FALSE);
;;;1001   		return FALSE;
;;;1002   }
;;;1003   
;;;1004   /*
;;;1005   * It retrieves the Card Life Cycle State
;;;1006   *
;;;1007   * @return tCardLifeCycleState card state
;;;1008   */
;;;1009   tCardLifeCycleState _7186_4_getCardState(void) {
;;;1010   	
;;;1011   	uMonoByte umbState = 0x00;
;;;1012   
;;;1013   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_getCardState()\n");
;;;1014   
;;;1015   	/*Read Card life cycle state*/
;;;1016   	baseReadNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
;;;1017   
;;;1018   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_getCardState() retruns %1\n", umbState);
;;;1019   
;;;1020   	return (tCardLifeCycleState)umbState;
;;;1021   }
;;;1022   
;;;1023   /*
;;;1024   * It changes the Card Life Cycle State
;;;1025   *
;;;1026   * @param umbState (tCardLifeCycleState): new card state 
;;;1027   */
;;;1028   void _7186_4_changeCardState(uMonoByte umbState) {
;;;1029   
;;;1030   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_changeCardState()\n");
;;;1031   
;;;1032   	/*Update Card life cycle state*/
;;;1033   	baseWriteNBytes(ADDRESS_CARD_STATE, &umbState, SIZE_OF_CARD_STATE);
;;;1034   
;;;1035   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_changeCardState() \n");
;;;1036   }
;;;1037   
;;;1038   /*
;;;1039   * It searches the given File ID up in Hierarchy till we hit deadend i.e. MF or ADF
;;;1040   *
;;;1041   * @param udbFileId: file to search
;;;1042   * @param fhaCurrentDf: DF from where search starts
;;;1043   *
;;;1044   * @return File header address if found, otherwise NO_FILE_PRESENT
;;;1045   */
;;;1046   tFileHeaderAddr  _7186_4_searchFileUpInHierarchy(IN_ARG uDiByte udbFileId, IN_ARG tFileHeaderAddr fhaCurrentDf) {
;;;1047   
;;;1048   	tFileHeaderAddr fhaFile;
;;;1049   	DBG_FUNC_ENTRY(">>[7816_4] _7186_4_searchFileUpInHierarchy()\n");
;;;1050   
;;;1051   	/*keep checking the file from current DF to root df (i.e. MF or ADF)*/
;;;1052   	while (NO_FILE_PRESENT != fhaCurrentDf) { //if there is still parent file.
;;;1053   
;;;1054   		/*search for given file ID*/
;;;1055   		_7816_4_ifFileExists(udbFileId, fhaCurrentDf, MODE_FIND_FID, &fhaFile);
;;;1056   
;;;1057   		if (fhaFile != NO_FILE_PRESENT) { // check if file found
;;;1058   
;;;1059   			/*get out of the loop*/
;;;1060   			break;
;;;1061   		}
;;;1062   
;;;1063   		/*get parent of current file header*/
;;;1064   		fhaCurrentDf = _7816_4_getParentFile(fhaCurrentDf);
;;;1065   	}
;;;1066   
;;;1067   	DBG_FUNC_EXIT("<<[7816_4] _7186_4_searchFileUpInHierarchy() returns %2\n", fhaFile);
;;;1068   	return fhaFile;
;;;1069   }
;;;1070   
;;;1071   /*
;;;1072   * It tells the security condition on presented file for given operation
;;;1073   *
;;;1074   * @param fhaFile: Presented File whose security to check
;;;1075   * @param amOperation: operation to perform  on file
;;;1076   *
;;;1077   * @returns PIN_**** (check constants.h) PIN_NEVER for Never
;;;1078   *										PIN_ALWAYS for Always and
;;;1079   *										XY for key reference (PIN_APP_1 - PIN_APP_8, PIN_ADM_1 - PIN_ADM_5, PIN_SECOND_APP_1 - PIN_SECOND_APP_8)
;;;1080   */
;;;1081   uMonoByte _7816_4_getSecurityCondition(IN_ARG tFileHeaderAddr fhaFile, tAccessMode amOperation) {
;;;1082   
;;;1083   	uMonoByte		umbIndex;
;;;1084   	uMonoByte		umbReturnCode = PIN_NEVER;
;;;1085   	tArrInfo		aiTargetFile;
;;;1086   
;;;1087   	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_getSecurityCondition() \n");
;;;1088   
;;;1089   	/*get ARR file ID and record*/
;;;1090   	_7816_4_getArrInfomation(fhaFile, &aiTargetFile);
;;;1091   
;;;1092   	/*Check ARR file from parent of given file*/
;;;1093   	fhaFile = _7816_4_getParentFile(fhaFile);
;;;1094   
;;;1095   	DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: Search for EFarr file %2 \n", aiTargetFile.udbArrFile);
;;;1096   
;;;1097   	/*searching EFarr file*/
;;;1098   	fhaFile = _7186_4_searchFileUpInHierarchy(aiTargetFile.udbArrFile, fhaFile);
;;;1099   
;;;1100   	/*if file not found*/
;;;1101   	assert(NO_FILE_PRESENT != fhaFile);
;;;1102   
;;;1103   	/*ARR file must be a linear fixed file*/
;;;1104   	assert(IS(LF, _7816_4_getFileDescriptor(fhaFile)));
;;;1105   
;;;1106   	/*if file doesnt have enough records to read the given record*/
;;;1107   	assert(aiTargetFile.umbArrRec <= _7816_4_getNoOfRecords(fhaFile));
;;;1108   
;;;1109   	/*Read the whole record in working array buffer "gumbWorkingBuffer"*/
;;;1110   	_7816_4_readUpdateRecordFile(fhaFile, gumbWorkingBuffer, aiTargetFile.umbArrRec, ACC_MODE_FILE_READ);
;;;1111   
;;;1112   	/*start searching given Access mode in the working buffer*/
;;;1113   	umbIndex = 0x00;
;;;1114   	while (umbIndex < (_7816_4_getRecordLength(fhaFile) - LENGTH_MINIMUM_FOR_AM_SC_DO)) {
;;;1115   
;;;1116   		/*Access condition of increase operation only come inside TAG_SECURITY_AMDO_INSTRUCTION*/
;;;1117   		if (gumbWorkingBuffer[umbIndex] == TAG_SECURITY_AMDO_INSTRUCTION) {
;;;1118   
;;;1119   			assert(gumbWorkingBuffer[umbIndex + 0x01] == LENGTH_ACCESS_MODE_DATA_OBJECT);
;;;1120   			umbIndex += 0x03; // skip to SC_DO
;;;1121   
;;;1122   			if ((amOperation == ACC_MODE_FILE_INCREASE) && (gumbWorkingBuffer[umbIndex - 0x01] == INS_INCREASE)) { // check if value contains Increase instruction and Operation is increase
;;;1123   				break; //Access mode found
;;;1124   			}
;;;1125   
;;;1126   		}
;;;1127   		else if (gumbWorkingBuffer[umbIndex] == TAG_SECURITY_AMDO_ACCESS_MODE_BYTE) { // TAG_SECURITY_AMDO_ACCESS_MODE_BYTE for Read/Update/deactivate and Activate
;;;1128   
;;;1129   			assert(gumbWorkingBuffer[umbIndex + 1] == LENGTH_ACCESS_MODE_DATA_OBJECT);
;;;1130   			umbIndex += 0x03; // skip to SC_DO
;;;1131   
;;;1132   			if ((ACC_MODE_FILE_INCREASE != amOperation) && (gumbWorkingBuffer[umbIndex - 0x01] & (0x01 << amOperation))) { // check if corresponding access mode bit set acc. to requested operation
;;;1133   				break;//Access mode found
;;;1134   			}
;;;1135   
;;;1136   		}
;;;1137   		else {
;;;1138   			DBG_WARN("[7816_4] _7816_4_getSecurityCondition: Invalid tag %1 in ARR record\n", gumbWorkingBuffer[umbIndex]);
;;;1139   			umbIndex = 0x00;
;;;1140   			break;//Access mode not found
;;;1141   		}
;;;1142   
;;;1143   		umbIndex += gumbWorkingBuffer[umbIndex + 1] + 0x02; // Skip SC_DO of current access mode
;;;1144   	}
;;;1145   
;;;1146   	/*if access mode found*/
;;;1147   	if (umbIndex) {
;;;1148   
;;;1149   		DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: Access Mode Data object found \n");
;;;1150   
;;;1151   		/*parse security condition*/
;;;1152   		if (TAG_SECURITY_SCDO_ALWAYS == gumbWorkingBuffer[umbIndex]) { // Always Access mode data object
;;;1153   
;;;1154   			DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: SC_DO indicates ALWAYS\n");
;;;1155   			umbReturnCode = PIN_ALWAYS;
;;;1156   		}
;;;1157   		else if (TAG_SECURITY_SCDO_CRT == gumbWorkingBuffer[umbIndex]) { //Control Reference Template
;;;1158   
;;;1159   			/*extract key reference*/
;;;1160   			assert(0x06 == gumbWorkingBuffer[umbIndex + 0x01]);
;;;1161   			assert(TAG_KEY_REFERENCE == gumbWorkingBuffer[umbIndex + 0x02]);
;;;1162   			assert(LENGTH_KEY_REFERENCE == gumbWorkingBuffer[umbIndex + 0x03]);
;;;1163   
;;;1164   			DBG_FUNC("[7816_4] _7816_4_getSecurityCondition: SC_DO indicates Key reference %1\n", gumbWorkingBuffer[umbIndex + 0x04]);
;;;1165   			umbReturnCode = gumbWorkingBuffer[umbIndex + 0x04];
;;;1166   
;;;1167   		} // NEVER access mode data object or other SC_DO: results in PIN_NEVER
;;;1168   
;;;1169   	}// If access mode is not found: results in PIN_NEVER
;;;1170   
;;;1171   	DBG_FUNC_EXIT("<<[7816_4] _7816_4_getSecurityCondition() returns %1\n", umbReturnCode);
;;;1172   	return umbReturnCode;
;;;1173   }
;;;1174   /*
;;;1175   * It searches for given Address in the ADF List file, and return its AID.
;;;1176   * 
;;;1177   * @param fhaADF: Contains address of ADF.
;;;1178   * @param pumbAid: contains an array.
;;;1179   * 
;;;1180   * @return If Address matches return AID. 
;;;1181   *		  if Address doesnt match, return false 00.
;;;1182   */ 
;;;1183   boolean _7816_4_getAidOfAdf(tFileHeaderAddr fhaADF, puMonoByte pumbAid)
;;;1184   {
;;;1185   	uMonoByte	      umbFileRecord;
;;;1186   	uMonoByte	      umbRecord;
;;;1187   	tFileHeaderAddr   fhaFile;
;;;1188   	/*Check address must not be NULL*/
;;;1189   	assert(fhaADF != NULL);
        0x00003f80:    a00b        ..      ADR      r0,{pc}+0x30 ; 0x3fb0
        0x00003f82:    490a        .I      LDR      r1,[pc,#40] ; [0x3fac] = 0x86a2
        0x00003f84:    4a07        .J      LDR      r2,[pc,#28] ; [0x3fa4] = 0x4a5
        0x00003f86:    f003fbb3    ....    BL       __aeabi_assert ; 0x76f0
        0x00003f8a:    4806        .H      LDR      r0,[pc,#24] ; [0x3fa4] = 0x4a5
;;;1190   	assert(pumbAid != NULL);
        0x00003f8c:    1c42        B.      ADDS     r2,r0,#1
        0x00003f8e:    4806        .H      LDR      r0,[pc,#24] ; [0x3fa8] = 0x856d
        0x00003f90:    4906        .I      LDR      r1,[pc,#24] ; [0x3fac] = 0x86a2
        0x00003f92:    f003fbad    ....    BL       __aeabi_assert ; 0x76f0
        0x00003f96:    46c0        .F      MOV      r8,r8
    $d.49
    __arm_cp.25_0
        0x00003f98:    0000a004    ....    DCD    40964
    __arm_cp.25_1
        0x00003f9c:    00007f49    I...    DCD    32585
    __arm_cp.25_2
        0x00003fa0:    00006f10    .o..    DCD    28432
    __arm_cp.25_3
        0x00003fa4:    000004a5    ....    DCD    1189
    __arm_cp.25_4
        0x00003fa8:    0000856d    m...    DCD    34157
    __arm_cp.25_5
        0x00003fac:    000086a2    ....    DCD    34466
        0x00003fb0:    41616866    fhaA    DCD    1096902758
        0x00003fb4:    21204644    DF !    DCD    555763268
        0x00003fb8:    554e203d    = NU    DCD    1431183421
        0x00003fbc:    00004c4c    LL..    DCD    19532
    $t.0
    _7816_4_remainingAttemptsOfPin
;;; Core/7816_4/source\PinManagement.c
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
        0x00003fc0:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00003fc2:    b084        ..      SUB      sp,sp,#0x10
        0x00003fc4:    460c        .F      MOV      r4,r1
        0x00003fc6:    ad03        ..      ADD      r5,sp,#0xc
        0x00003fc8:    aa02        ..      ADD      r2,sp,#8
        0x00003fca:    4629        )F      MOV      r1,r5
        0x00003fcc:    f000f812    ....    BL       _7816_4_searchForKeyRef ; 0x3ff4
        0x00003fd0:    4602        .F      MOV      r2,r0
        0x00003fd2:    8828        (.      LDRH     r0,[r5,#0]
;;; Core/7816_4/source\PinManagement.c
        0x00003fd4:    466d        mF      MOV      r5,sp
        0x00003fd6:    2300        .#      MOVS     r3,#0
        0x00003fd8:    4629        )F      MOV      r1,r5
        0x00003fda:    f7fff907    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
        0x00003fde:    2c00        .,      CMP      r4,#0
        0x00003fe0:    d003        ..      BEQ      0x3fea ; _7816_4_remainingAttemptsOfPin + 42
        0x00003fe2:    1d68        h.      ADDS     r0,r5,#5
        0x00003fe4:    7800        .x      LDRB     r0,[r0,#0]
        0x00003fe6:    b004        ..      ADD      sp,sp,#0x10
        0x00003fe8:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00003fea:    1ca8        ..      ADDS     r0,r5,#2
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
        0x00003fec:    7800        .x      LDRB     r0,[r0,#0]
        0x00003fee:    b004        ..      ADD      sp,sp,#0x10
        0x00003ff0:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00003ff2:    46c0        .F      MOV      r8,r8
    _7816_4_searchForKeyRef
;;; Core/7816_4/source\PinManagement.c (22)
        0x00003ff4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00003ff6:    b087        ..      SUB      sp,sp,#0x1c
        0x00003ff8:    4616        .F      MOV      r6,r2
        0x00003ffa:    460d        .F      MOV      r5,r1
        0x00003ffc:    a906        ..      ADD      r1,sp,#0x18
        0x00003ffe:    7008        .p      STRB     r0,[r1,#0]
        0x00004000:    a805        ..      ADD      r0,sp,#0x14
        0x00004002:    2400        .$      MOVS     r4,#0
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
        0x00004004:    7004        .p      STRB     r4,[r0,#0]
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
        0x00004006:    f7feffd5    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x0000400a:    4601        .F      MOV      r1,r0
        0x0000400c:    4821        !H      LDR      r0,[pc,#132] ; [0x4094] = 0x7f49
        0x0000400e:    4622        "F      MOV      r2,r4
        0x00004010:    4633        3F      MOV      r3,r6
        0x00004012:    f7fff88f    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
        0x00004016:    8831        1.      LDRH     r1,[r6,#0]
        0x00004018:    4f1f        .O      LDR      r7,[pc,#124] ; [0x4098] = 0x6f11
        0x0000401a:    4638        8F      MOV      r0,r7
        0x0000401c:    4622        "F      MOV      r2,r4
        0x0000401e:    462b        +F      MOV      r3,r5
        0x00004020:    f7fff888    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
        0x00004024:    8831        1.      LDRH     r1,[r6,#0]
        0x00004026:    1c78        x.      ADDS     r0,r7,#1
        0x00004028:    4622        "F      MOV      r2,r4
        0x0000402a:    4633        3F      MOV      r3,r6
        0x0000402c:    f7fff882    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
        0x00004030:    8828        (.      LDRH     r0,[r5,#0]
        0x00004032:    2800        .(      CMP      r0,#0
        0x00004034:    d01a        ..      BEQ      0x406c ; _7816_4_searchForKeyRef + 120
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
        0x00004036:    8831        1.      LDRH     r1,[r6,#0]
        0x00004038:    2900        .)      CMP      r1,#0
        0x0000403a:    d01c        ..      BEQ      0x4076 ; _7816_4_searchForKeyRef + 130
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
        0x0000403c:    f7fffa5a    ..Z.    BL       _7816_4_getRecordLength ; 0x34f4
        0x00004040:    2808        .(      CMP      r0,#8
        0x00004042:    d11d        ..      BNE      0x4080 ; _7816_4_searchForKeyRef + 140
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
        0x00004044:    8830        0.      LDRH     r0,[r6,#0]
        0x00004046:    f7fffa55    ..U.    BL       _7816_4_getRecordLength ; 0x34f4
        0x0000404a:    2808        .(      CMP      r0,#8
        0x0000404c:    d11d        ..      BNE      0x408a ; _7816_4_searchForKeyRef + 150
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
        0x0000404e:    8828        (.      LDRH     r0,[r5,#0]
        0x00004050:    ad05        ..      ADD      r5,sp,#0x14
        0x00004052:    2107        .!      MOVS     r1,#7
        0x00004054:    2201        ."      MOVS     r2,#1
        0x00004056:    9400        ..      STR      r4,[sp,#0]
        0x00004058:    9201        ..      STR      r2,[sp,#4]
        0x0000405a:    9102        ..      STR      r1,[sp,#8]
        0x0000405c:    9503        ..      STR      r5,[sp,#0xc]
        0x0000405e:    a906        ..      ADD      r1,sp,#0x18
        0x00004060:    4623        #F      MOV      r3,r4
        0x00004062:    f7fffaf3    ....    BL       _7816_4_SearchRecordFile ; 0x364c
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
        0x00004066:    7828        (x      LDRB     r0,[r5,#0]
        0x00004068:    b007        ..      ADD      sp,sp,#0x1c
        0x0000406a:    bdf0        ..      POP      {r4-r7,pc}
        0x0000406c:    a018        ..      ADR      r0,{pc}+0x64 ; 0x40d0
        0x0000406e:    490c        .I      LDR      r1,[pc,#48] ; [0x40a0] = 0x8958
        0x00004070:    2226        &"      MOVS     r2,#0x26
        0x00004072:    f003fb3d    ..=.    BL       __aeabi_assert ; 0x76f0
        0x00004076:    a00c        ..      ADR      r0,{pc}+0x32 ; 0x40a8
        0x00004078:    4909        .I      LDR      r1,[pc,#36] ; [0x40a0] = 0x8958
        0x0000407a:    2227        '"      MOVS     r2,#0x27
        0x0000407c:    f003fb38    ..8.    BL       __aeabi_assert ; 0x76f0
        0x00004080:    4806        .H      LDR      r0,[pc,#24] ; [0x409c] = 0x87b2
        0x00004082:    4907        .I      LDR      r1,[pc,#28] ; [0x40a0] = 0x8958
        0x00004084:    2228        ("      MOVS     r2,#0x28
        0x00004086:    f003fb33    ..3.    BL       __aeabi_assert ; 0x76f0
        0x0000408a:    4806        .H      LDR      r0,[pc,#24] ; [0x40a4] = 0x87fd
        0x0000408c:    4904        .I      LDR      r1,[pc,#16] ; [0x40a0] = 0x8958
        0x0000408e:    2229        )"      MOVS     r2,#0x29
        0x00004090:    f003fb2e    ....    BL       __aeabi_assert ; 0x76f0
    $d.1
    __arm_cp.1_0
        0x00004094:    00007f49    I...    DCD    32585
    __arm_cp.1_1
        0x00004098:    00006f11    .o..    DCD    28433
    __arm_cp.1_2
        0x0000409c:    000087b2    ....    DCD    34738
    __arm_cp.1_3
        0x000040a0:    00008958    X...    DCD    35160
    __arm_cp.1_4
        0x000040a4:    000087fd    ....    DCD    34813
        0x000040a8:    465f4f4e    NO_F    DCD    1180651342
        0x000040ac:    5f454c49    ILE_    DCD    1598377033
        0x000040b0:    53455250    PRES    DCD    1397051984
        0x000040b4:    20544e45    ENT     DCD    542395973
        0x000040b8:    2a203d21    != *    DCD    706755873
        0x000040bc:    61686670    pfha    DCD    1634231920
        0x000040c0:    5679654b    KeyV    DCD    1450796363
        0x000040c4:    65756c61    alue    DCD    1702194273
        0x000040c8:    6c694673    sFil    DCD    1818838643
        0x000040cc:    00000065    e...    DCD    101
        0x000040d0:    465f4f4e    NO_F    DCD    1180651342
        0x000040d4:    5f454c49    ILE_    DCD    1598377033
        0x000040d8:    53455250    PRES    DCD    1397051984
        0x000040dc:    20544e45    ENT     DCD    542395973
        0x000040e0:    2a203d21    != *    DCD    706755873
        0x000040e4:    61686670    pfha    DCD    1634231920
        0x000040e8:    4379654b    KeyC    DCD    1132029259
        0x000040ec:    69666e6f    onfi    DCD    1768320623
        0x000040f0:    6c694667    gFil    DCD    1818838631
        0x000040f4:    00000065    e...    DCD    101
    $t.2
    _7816_4_isPinActive
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
        0x000040f8:    b510        ..      PUSH     {r4,lr}
        0x000040fa:    b084        ..      SUB      sp,sp,#0x10
        0x000040fc:    ac03        ..      ADD      r4,sp,#0xc
        0x000040fe:    aa02        ..      ADD      r2,sp,#8
        0x00004100:    4621        !F      MOV      r1,r4
        0x00004102:    f7ffff77    ..w.    BL       _7816_4_searchForKeyRef ; 0x3ff4
        0x00004106:    4602        .F      MOV      r2,r0
        0x00004108:    8820         .      LDRH     r0,[r4,#0]
;;; Core/7816_4/source\PinManagement.c
        0x0000410a:    466c        lF      MOV      r4,sp
        0x0000410c:    2300        .#      MOVS     r3,#0
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
        0x0000410e:    4621        !F      MOV      r1,r4
        0x00004110:    f7fff86c    ..l.    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
        0x00004114:    79a0        .y      LDRB     r0,[r4,#6]
        0x00004116:    b004        ..      ADD      sp,sp,#0x10
        0x00004118:    bd10        ..      POP      {r4,pc}
        0x0000411a:    46c0        .F      MOV      r8,r8
    _7816_4_isInvalidReferenceData
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
        0x0000411c:    2170        p!      MOVS     r1,#0x70
        0x0000411e:    4001        .@      ANDS     r1,r1,r0
        0x00004120:    3180        .1      ADDS     r1,r1,#0x80
        0x00004122:    2980        .)      CMP      r1,#0x80
        0x00004124:    d109        ..      BNE      0x413a ; _7816_4_isInvalidReferenceData + 30
;;; Core/7816_4/source\PinManagement.c
        0x00004126:    210f        .!      MOVS     r1,#0xf
        0x00004128:    4008        .@      ANDS     r0,r0,r1
        0x0000412a:    2100        .!      MOVS     r1,#0
        0x0000412c:    280f        .(      CMP      r0,#0xf
        0x0000412e:    d805        ..      BHI      0x413c ; _7816_4_isInvalidReferenceData + 32
        0x00004130:    2201        ."      MOVS     r2,#1
        0x00004132:    4082        .@      LSLS     r2,r2,r0
        0x00004134:    4802        .H      LDR      r0,[pc,#8] ; [0x4140] = 0x8201
        0x00004136:    4202        .B      TST      r2,r0
        0x00004138:    d000        ..      BEQ      0x413c ; _7816_4_isInvalidReferenceData + 32
        0x0000413a:    21ff        .!      MOVS     r1,#0xff
        0x0000413c:    4608        .F      MOV      r0,r1
        0x0000413e:    4770        pG      BX       lr
    $d.3
    __arm_cp.3_0
        0x00004140:    00008201    ....    DCD    33281
    $t.4
    _7816_4_setKeyRef
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
;;;115    
;;;116    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isInvalidReferenceData()\n");
;;;117    
;;;118    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Checking Key reference value %1\n", umbReferenceData);
;;;119    
;;;120    	/*Check validation of Key Reference Data*/
;;;121    	if ((0x00 == (umbReferenceData & MASK_HIGHER_NIBBLE))
;;;122    		||
;;;123    		(0x80 == (umbReferenceData & MASK_HIGHER_NIBBLE))) {
;;;124    
;;;125    		umbReferenceData &= MASK_LOWER_NIBBLE;
;;;126    
;;;127    		/*Check below if its not an invalid Key reference*/
;;;128    		if ((0x00 != umbReferenceData)
;;;129    			&&
;;;130    			(0x09 != umbReferenceData)
;;;131    			&&
;;;132    			(0x0F != umbReferenceData)) {
;;;133    
;;;134    			/*Presented key reference is valid*/
;;;135    			DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is valid\n");
;;;136    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns FALSE %1\n", FALSE);
;;;137    			return FALSE;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is invalid\n");
;;;142    
;;;143    	/*In current implementation Universal PIN 'PIN_UNIVERSAL' is also treated as invalid key reference*/
;;;144    	/*If control is here it means present reference data is invalid */
;;;145    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns TRUE %1\n", TRUE);
;;;146    	return TRUE;
;;;147    
;;;148    }
;;;149    
;;;150    /*
;;;151    * Set the corresponding bit in give Pin data variable as per key reference
;;;152    *
;;;153    * @param uqbPinData: PIN data
;;;154    * @param umbKeyRef: Key reference
;;;155    *
;;;156    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;157    */
;;;158    void _7816_4_setKeyRef(ptPinData ppdPinData, uMonoByte umbKeyRef) {
;;;159    
;;;160    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setKeyRef() \n");
;;;161    	/*
;;;162    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;163    	*/
;;;164    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
        0x00004144:    1e4a        J.      SUBS     r2,r1,#1
        0x00004146:    2a8d        .*      CMP      r2,#0x8d
        0x00004148:    d900        ..      BLS      0x414c ; _7816_4_setKeyRef + 8
        0x0000414a:    e0a2        ..      B        0x4292 ; _7816_4_setKeyRef + 334
;;; Core/7816_4/source\PinManagement.c
        0x0000414c:    0052        R.      LSLS     r2,r2,#1
        0x0000414e:    46c0        .F      MOV      r8,r8
        0x00004150:    447a        zD      ADD      r2,r2,pc
        0x00004152:    8892        ..      LDRH     r2,[r2,#4]
        0x00004154:    0052        R.      LSLS     r2,r2,#1
        0x00004156:    4497        .D      ADD      pc,pc,r2
    $d.5
        0x00004158:    008d008d    ....    DCD    9240717
        0x0000415c:    008d008d    ....    DCD    9240717
        0x00004160:    008d008d    ....    DCD    9240717
        0x00004164:    008d008d    ....    DCD    9240717
        0x00004168:    008d009c    ....    DCD    9240732
        0x0000416c:    008d008d    ....    DCD    9240717
        0x00004170:    008d008d    ....    DCD    9240717
        0x00004174:    009c009c    ....    DCD    10223772
        0x00004178:    009c009c    ....    DCD    10223772
        0x0000417c:    009c009c    ....    DCD    10223772
        0x00004180:    009c009c    ....    DCD    10223772
        0x00004184:    009c009c    ....    DCD    10223772
        0x00004188:    009c009c    ....    DCD    10223772
        0x0000418c:    009c009c    ....    DCD    10223772
        0x00004190:    009c009c    ....    DCD    10223772
        0x00004194:    009c009c    ....    DCD    10223772
        0x00004198:    009c009c    ....    DCD    10223772
        0x0000419c:    009c009c    ....    DCD    10223772
        0x000041a0:    009c009c    ....    DCD    10223772
        0x000041a4:    009c009c    ....    DCD    10223772
        0x000041a8:    009c009c    ....    DCD    10223772
        0x000041ac:    009c009c    ....    DCD    10223772
        0x000041b0:    009c009c    ....    DCD    10223772
        0x000041b4:    009c009c    ....    DCD    10223772
        0x000041b8:    009c009c    ....    DCD    10223772
        0x000041bc:    009c009c    ....    DCD    10223772
        0x000041c0:    009c009c    ....    DCD    10223772
        0x000041c4:    009c009c    ....    DCD    10223772
        0x000041c8:    009c009c    ....    DCD    10223772
        0x000041cc:    009c009c    ....    DCD    10223772
        0x000041d0:    009c009c    ....    DCD    10223772
        0x000041d4:    009c009c    ....    DCD    10223772
        0x000041d8:    009c009c    ....    DCD    10223772
        0x000041dc:    009c009c    ....    DCD    10223772
        0x000041e0:    009c009c    ....    DCD    10223772
        0x000041e4:    009c009c    ....    DCD    10223772
        0x000041e8:    009c009c    ....    DCD    10223772
        0x000041ec:    009c009c    ....    DCD    10223772
        0x000041f0:    009c009c    ....    DCD    10223772
        0x000041f4:    009c009c    ....    DCD    10223772
        0x000041f8:    009c009c    ....    DCD    10223772
        0x000041fc:    009c009c    ....    DCD    10223772
        0x00004200:    009c009c    ....    DCD    10223772
        0x00004204:    009c009c    ....    DCD    10223772
        0x00004208:    009c009c    ....    DCD    10223772
        0x0000420c:    009c009c    ....    DCD    10223772
        0x00004210:    009c009c    ....    DCD    10223772
        0x00004214:    009c009c    ....    DCD    10223772
        0x00004218:    009c009c    ....    DCD    10223772
        0x0000421c:    009c009c    ....    DCD    10223772
        0x00004220:    009c009c    ....    DCD    10223772
        0x00004224:    009c009c    ....    DCD    10223772
        0x00004228:    009c009c    ....    DCD    10223772
        0x0000422c:    009c009c    ....    DCD    10223772
        0x00004230:    009c009c    ....    DCD    10223772
        0x00004234:    009c009c    ....    DCD    10223772
        0x00004238:    009c009c    ....    DCD    10223772
        0x0000423c:    009c009c    ....    DCD    10223772
        0x00004240:    009c009c    ....    DCD    10223772
        0x00004244:    009c009c    ....    DCD    10223772
        0x00004248:    009c009c    ....    DCD    10223772
        0x0000424c:    009c009c    ....    DCD    10223772
        0x00004250:    009c009c    ....    DCD    10223772
        0x00004254:    009c009c    ....    DCD    10223772
        0x00004258:    008d008d    ....    DCD    9240717
        0x0000425c:    008d008d    ....    DCD    9240717
        0x00004260:    008d008d    ....    DCD    9240717
        0x00004264:    008d008d    ....    DCD    9240717
        0x00004268:    008d009c    ....    DCD    9240732
        0x0000426c:    008d008d    ....    DCD    9240717
        0x00004270:    008d008d    ....    DCD    9240717
    $t.6
        0x00004274:    2981        .)      CMP      r1,#0x81
        0x00004276:    d302        ..      BCC      0x427e ; _7816_4_setKeyRef + 314
        0x00004278:    2270        p"      MOVS     r2,#0x70
        0x0000427a:    43d2        .C      MVNS     r2,r2
        0x0000427c:    e001        ..      B        0x4282 ; _7816_4_setKeyRef + 318
        0x0000427e:    2200        ."      MOVS     r2,#0
        0x00004280:    43d2        .C      MVNS     r2,r2
        0x00004282:    1851        Q.      ADDS     r1,r2,r1
        0x00004284:    b2c9        ..      UXTB     r1,r1
        0x00004286:    2201        ."      MOVS     r2,#1
        0x00004288:    408a        .@      LSLS     r2,r2,r1
        0x0000428a:    6801        .h      LDR      r1,[r0,#0]
        0x0000428c:    4311        .C      ORRS     r1,r1,r2
        0x0000428e:    6001        .`      STR      r1,[r0,#0]
        0x00004290:    4770        pG      BX       lr
        0x00004292:    4802        .H      LDR      r0,[pc,#8] ; [0x429c] = 0x86be
        0x00004294:    4902        .I      LDR      r1,[pc,#8] ; [0x42a0] = 0x8958
        0x00004296:    22aa        ."      MOVS     r2,#0xaa
        0x00004298:    f003fa2a    ..*.    BL       __aeabi_assert ; 0x76f0
    $d.7
    __arm_cp.4_0
        0x0000429c:    000086be    ....    DCD    34494
    __arm_cp.4_1
        0x000042a0:    00008958    X...    DCD    35160
    $t.8
    _7816_4_isKeyRefVerified
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
;;;115    
;;;116    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isInvalidReferenceData()\n");
;;;117    
;;;118    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Checking Key reference value %1\n", umbReferenceData);
;;;119    
;;;120    	/*Check validation of Key Reference Data*/
;;;121    	if ((0x00 == (umbReferenceData & MASK_HIGHER_NIBBLE))
;;;122    		||
;;;123    		(0x80 == (umbReferenceData & MASK_HIGHER_NIBBLE))) {
;;;124    
;;;125    		umbReferenceData &= MASK_LOWER_NIBBLE;
;;;126    
;;;127    		/*Check below if its not an invalid Key reference*/
;;;128    		if ((0x00 != umbReferenceData)
;;;129    			&&
;;;130    			(0x09 != umbReferenceData)
;;;131    			&&
;;;132    			(0x0F != umbReferenceData)) {
;;;133    
;;;134    			/*Presented key reference is valid*/
;;;135    			DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is valid\n");
;;;136    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns FALSE %1\n", FALSE);
;;;137    			return FALSE;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is invalid\n");
;;;142    
;;;143    	/*In current implementation Universal PIN 'PIN_UNIVERSAL' is also treated as invalid key reference*/
;;;144    	/*If control is here it means present reference data is invalid */
;;;145    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns TRUE %1\n", TRUE);
;;;146    	return TRUE;
;;;147    
;;;148    }
;;;149    
;;;150    /*
;;;151    * Set the corresponding bit in give Pin data variable as per key reference
;;;152    *
;;;153    * @param uqbPinData: PIN data
;;;154    * @param umbKeyRef: Key reference
;;;155    *
;;;156    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;157    */
;;;158    void _7816_4_setKeyRef(ptPinData ppdPinData, uMonoByte umbKeyRef) {
;;;159    
;;;160    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setKeyRef() \n");
;;;161    	/*
;;;162    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;163    	*/
;;;164    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;165    			||\
;;;166    			((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;167    			||\
;;;168    			((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;169    			||\
;;;170    			((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;171    
;;;172    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;173    
;;;174    		umbKeyRef -= PIN_APP_1;
;;;175    	}
;;;176    	else { //81-88 and 8A-8E
;;;177    
;;;178    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;179    	}
;;;180    
;;;181    	/*Set corresponding bit*/
;;;182    	(*ppdPinData) |= (0x01 << umbKeyRef);
;;;183    
;;;184    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setKeyRef() \n");
;;;185    }
;;;186    
;;;187    /*
;;;188    * Returns the the verification status of given key reference
;;;189    *
;;;190    * @param umbKeyRef: Key reference
;;;191    *
;;;192    * @return ACC_VERIFIED if pin verified, otherwise ACC_NOT_VERIFIED 
;;;193    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E, 8A-8E and 90
;;;194    */
;;;195    tAccessResult _7816_4_isKeyRefVerified(uMonoByte umbKeyRef) {
;;;196    
;;;197    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isKeyRefVerified() \n");
;;;198    	/*
;;;199    	* Ensure keys must be within 01-08, 81-88, 0A-0E, 8A-8E inclusive and 90
;;;200    	*/
;;;201    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
        0x000042a4:    1e41        A.      SUBS     r1,r0,#1
        0x000042a6:    298f        .)      CMP      r1,#0x8f
        0x000042a8:    d900        ..      BLS      0x42ac ; _7816_4_isKeyRefVerified + 8
        0x000042aa:    e0a6        ..      B        0x43fa ; _7816_4_isKeyRefVerified + 342
;;; Core/7816_4/source\PinManagement.c
        0x000042ac:    0049        I.      LSLS     r1,r1,#1
        0x000042ae:    46c0        .F      MOV      r8,r8
        0x000042b0:    4479        yD      ADD      r1,r1,pc
        0x000042b2:    8889        ..      LDRH     r1,[r1,#4]
        0x000042b4:    0049        I.      LSLS     r1,r1,#1
        0x000042b6:    448f        .D      ADD      pc,pc,r1
    $d.9
        0x000042b8:    008f008f    ....    DCD    9371791
        0x000042bc:    008f008f    ....    DCD    9371791
        0x000042c0:    008f008f    ....    DCD    9371791
        0x000042c4:    008f008f    ....    DCD    9371791
        0x000042c8:    008f00a0    ....    DCD    9371808
        0x000042cc:    008f008f    ....    DCD    9371791
        0x000042d0:    008f008f    ....    DCD    9371791
        0x000042d4:    00a000a0    ....    DCD    10485920
        0x000042d8:    00a000a0    ....    DCD    10485920
        0x000042dc:    00a000a0    ....    DCD    10485920
        0x000042e0:    00a000a0    ....    DCD    10485920
        0x000042e4:    00a000a0    ....    DCD    10485920
        0x000042e8:    00a000a0    ....    DCD    10485920
        0x000042ec:    00a000a0    ....    DCD    10485920
        0x000042f0:    00a000a0    ....    DCD    10485920
        0x000042f4:    00a000a0    ....    DCD    10485920
        0x000042f8:    00a000a0    ....    DCD    10485920
        0x000042fc:    00a000a0    ....    DCD    10485920
        0x00004300:    00a000a0    ....    DCD    10485920
        0x00004304:    00a000a0    ....    DCD    10485920
        0x00004308:    00a000a0    ....    DCD    10485920
        0x0000430c:    00a000a0    ....    DCD    10485920
        0x00004310:    00a000a0    ....    DCD    10485920
        0x00004314:    00a000a0    ....    DCD    10485920
        0x00004318:    00a000a0    ....    DCD    10485920
        0x0000431c:    00a000a0    ....    DCD    10485920
        0x00004320:    00a000a0    ....    DCD    10485920
        0x00004324:    00a000a0    ....    DCD    10485920
        0x00004328:    00a000a0    ....    DCD    10485920
        0x0000432c:    00a000a0    ....    DCD    10485920
        0x00004330:    00a000a0    ....    DCD    10485920
        0x00004334:    00a000a0    ....    DCD    10485920
        0x00004338:    00a000a0    ....    DCD    10485920
        0x0000433c:    00a000a0    ....    DCD    10485920
        0x00004340:    00a000a0    ....    DCD    10485920
        0x00004344:    00a000a0    ....    DCD    10485920
        0x00004348:    00a000a0    ....    DCD    10485920
        0x0000434c:    00a000a0    ....    DCD    10485920
        0x00004350:    00a000a0    ....    DCD    10485920
        0x00004354:    00a000a0    ....    DCD    10485920
        0x00004358:    00a000a0    ....    DCD    10485920
        0x0000435c:    00a000a0    ....    DCD    10485920
        0x00004360:    00a000a0    ....    DCD    10485920
        0x00004364:    00a000a0    ....    DCD    10485920
        0x00004368:    00a000a0    ....    DCD    10485920
        0x0000436c:    00a000a0    ....    DCD    10485920
        0x00004370:    00a000a0    ....    DCD    10485920
        0x00004374:    00a000a0    ....    DCD    10485920
        0x00004378:    00a000a0    ....    DCD    10485920
        0x0000437c:    00a000a0    ....    DCD    10485920
        0x00004380:    00a000a0    ....    DCD    10485920
        0x00004384:    00a000a0    ....    DCD    10485920
        0x00004388:    00a000a0    ....    DCD    10485920
        0x0000438c:    00a000a0    ....    DCD    10485920
        0x00004390:    00a000a0    ....    DCD    10485920
        0x00004394:    00a000a0    ....    DCD    10485920
        0x00004398:    00a000a0    ....    DCD    10485920
        0x0000439c:    00a000a0    ....    DCD    10485920
        0x000043a0:    00a000a0    ....    DCD    10485920
        0x000043a4:    00a000a0    ....    DCD    10485920
        0x000043a8:    00a000a0    ....    DCD    10485920
        0x000043ac:    00a000a0    ....    DCD    10485920
        0x000043b0:    00a000a0    ....    DCD    10485920
        0x000043b4:    00a000a0    ....    DCD    10485920
        0x000043b8:    008f008f    ....    DCD    9371791
        0x000043bc:    008f008f    ....    DCD    9371791
        0x000043c0:    008f008f    ....    DCD    9371791
        0x000043c4:    008f008f    ....    DCD    9371791
        0x000043c8:    008f00a0    ....    DCD    9371808
        0x000043cc:    008f008f    ....    DCD    9371791
        0x000043d0:    008f008f    ....    DCD    9371791
        0x000043d4:    008f00a0    ....    DCD    9371808
    $t.10
        0x000043d8:    2881        .(      CMP      r0,#0x81
        0x000043da:    d302        ..      BCC      0x43e2 ; _7816_4_isKeyRefVerified + 318
        0x000043dc:    2170        p!      MOVS     r1,#0x70
        0x000043de:    43c9        .C      MVNS     r1,r1
        0x000043e0:    e001        ..      B        0x43e6 ; _7816_4_isKeyRefVerified + 322
        0x000043e2:    2100        .!      MOVS     r1,#0
        0x000043e4:    43c9        .C      MVNS     r1,r1
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
;;;115    
;;;116    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isInvalidReferenceData()\n");
;;;117    
;;;118    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Checking Key reference value %1\n", umbReferenceData);
;;;119    
;;;120    	/*Check validation of Key Reference Data*/
;;;121    	if ((0x00 == (umbReferenceData & MASK_HIGHER_NIBBLE))
;;;122    		||
;;;123    		(0x80 == (umbReferenceData & MASK_HIGHER_NIBBLE))) {
;;;124    
;;;125    		umbReferenceData &= MASK_LOWER_NIBBLE;
;;;126    
;;;127    		/*Check below if its not an invalid Key reference*/
;;;128    		if ((0x00 != umbReferenceData)
;;;129    			&&
;;;130    			(0x09 != umbReferenceData)
;;;131    			&&
;;;132    			(0x0F != umbReferenceData)) {
;;;133    
;;;134    			/*Presented key reference is valid*/
;;;135    			DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is valid\n");
;;;136    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns FALSE %1\n", FALSE);
;;;137    			return FALSE;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is invalid\n");
;;;142    
;;;143    	/*In current implementation Universal PIN 'PIN_UNIVERSAL' is also treated as invalid key reference*/
;;;144    	/*If control is here it means present reference data is invalid */
;;;145    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns TRUE %1\n", TRUE);
;;;146    	return TRUE;
;;;147    
;;;148    }
;;;149    
;;;150    /*
;;;151    * Set the corresponding bit in give Pin data variable as per key reference
;;;152    *
;;;153    * @param uqbPinData: PIN data
;;;154    * @param umbKeyRef: Key reference
;;;155    *
;;;156    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;157    */
;;;158    void _7816_4_setKeyRef(ptPinData ppdPinData, uMonoByte umbKeyRef) {
;;;159    
;;;160    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setKeyRef() \n");
;;;161    	/*
;;;162    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;163    	*/
;;;164    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;165    			||\
;;;166    			((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;167    			||\
;;;168    			((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;169    			||\
;;;170    			((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;171    
;;;172    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;173    
;;;174    		umbKeyRef -= PIN_APP_1;
;;;175    	}
;;;176    	else { //81-88 and 8A-8E
;;;177    
;;;178    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;179    	}
;;;180    
;;;181    	/*Set corresponding bit*/
;;;182    	(*ppdPinData) |= (0x01 << umbKeyRef);
;;;183    
;;;184    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setKeyRef() \n");
;;;185    }
;;;186    
;;;187    /*
;;;188    * Returns the the verification status of given key reference
;;;189    *
;;;190    * @param umbKeyRef: Key reference
;;;191    *
;;;192    * @return ACC_VERIFIED if pin verified, otherwise ACC_NOT_VERIFIED 
;;;193    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E, 8A-8E and 90
;;;194    */
;;;195    tAccessResult _7816_4_isKeyRefVerified(uMonoByte umbKeyRef) {
;;;196    
;;;197    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isKeyRefVerified() \n");
;;;198    	/*
;;;199    	* Ensure keys must be within 01-08, 81-88, 0A-0E, 8A-8E inclusive and 90
;;;200    	*/
;;;201    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;202    		|| \
;;;203    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;204    		|| \
;;;205    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;206    		|| \
;;;207    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10))
;;;208    		|| \
;;;209    		(PIN_ALWAYS == umbKeyRef) );
;;;210    
;;;211    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Checking verification status of PIN/Key %1\n", umbKeyRef);
;;;212    
;;;213    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
        0x000043e6:    1808        ..      ADDS     r0,r1,r0
;;;214    
;;;215    		umbKeyRef -= PIN_APP_1;
;;;216    	}
;;;217    	else { //81-88, 8A-8E and 90
;;;218    
;;;219    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;220    	}
;;;221    
;;;222    	/*Set corresponding bit*/
;;;223    	if (pdPinStatus & (0x01 << umbKeyRef)) {
        0x000043e8:    b2c0        ..      UXTB     r0,r0
        0x000043ea:    4906        .I      LDR      r1,[pc,#24] ; [0x4404] = 0x20000004
        0x000043ec:    6809        .h      LDR      r1,[r1,#0]
        0x000043ee:    40c1        .@      LSRS     r1,r1,r0
        0x000043f0:    2201        ."      MOVS     r2,#1
        0x000043f2:    400a        .@      ANDS     r2,r2,r1
        0x000043f4:    4250        PB      RSBS     r0,r2,#0
        0x000043f6:    4150        PA      ADCS     r0,r0,r2
;;;224    		DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin has been verified\n");
;;;225    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() returns ACC_VERIFIED %1\n", ACC_VERIFIED);
;;;226    		return ACC_VERIFIED;
;;;227    	}
;;;228    
;;;229    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin verified\n");
;;;230    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() \n");
;;;231    	return ACC_NOT_VERIFIED;
;;;232    }
        0x000043f8:    4770        pG      BX       lr
        0x000043fa:    4803        .H      LDR      r0,[pc,#12] ; [0x4408] = 0x8847
        0x000043fc:    4903        .I      LDR      r1,[pc,#12] ; [0x440c] = 0x8958
        0x000043fe:    22d1        ."      MOVS     r2,#0xd1
        0x00004400:    f003f976    ..v.    BL       __aeabi_assert ; 0x76f0
    $d.11
    __arm_cp.5_0
        0x00004404:    20000004    ...     DCD    536870916
    __arm_cp.5_1
        0x00004408:    00008847    G...    DCD    34887
    __arm_cp.5_2
        0x0000440c:    00008958    X...    DCD    35160
    $t.12
    _7816_4_markKeyAsVerified
;;;233    
;;;234    /*
;;;235    * Update the status of given PIN as verified
;;;236    * 
;;;237    * @param umbKeyRef: Key reference
;;;238    * 
;;;239    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;240    */
;;;241    void _7816_4_markKeyAsVerified(uMonoByte umbKeyRef) {
        0x00004410:    b580        ..      PUSH     {r7,lr}
        0x00004412:    4601        .F      MOV      r1,r0
        0x00004414:    1e40        @.      SUBS     r0,r0,#1
        0x00004416:    288d        .(      CMP      r0,#0x8d
        0x00004418:    d900        ..      BLS      0x441c ; _7816_4_markKeyAsVerified + 12
        0x0000441a:    e097        ..      B        0x454c ; _7816_4_markKeyAsVerified + 316
;;; Core/7816_4/source\PinManagement.c
        0x0000441c:    0040        @.      LSLS     r0,r0,#1
        0x0000441e:    46c0        .F      MOV      r8,r8
        0x00004420:    4478        xD      ADD      r0,r0,pc
        0x00004422:    8880        ..      LDRH     r0,[r0,#4]
        0x00004424:    0040        @.      LSLS     r0,r0,#1
        0x00004426:    4487        .D      ADD      pc,pc,r0
    $d.13
        0x00004428:    008d008d    ....    DCD    9240717
        0x0000442c:    008d008d    ....    DCD    9240717
        0x00004430:    008d008d    ....    DCD    9240717
        0x00004434:    008d008d    ....    DCD    9240717
        0x00004438:    008d0091    ....    DCD    9240721
        0x0000443c:    008d008d    ....    DCD    9240717
        0x00004440:    008d008d    ....    DCD    9240717
        0x00004444:    00910091    ....    DCD    9502865
        0x00004448:    00910091    ....    DCD    9502865
        0x0000444c:    00910091    ....    DCD    9502865
        0x00004450:    00910091    ....    DCD    9502865
        0x00004454:    00910091    ....    DCD    9502865
        0x00004458:    00910091    ....    DCD    9502865
        0x0000445c:    00910091    ....    DCD    9502865
        0x00004460:    00910091    ....    DCD    9502865
        0x00004464:    00910091    ....    DCD    9502865
        0x00004468:    00910091    ....    DCD    9502865
        0x0000446c:    00910091    ....    DCD    9502865
        0x00004470:    00910091    ....    DCD    9502865
        0x00004474:    00910091    ....    DCD    9502865
        0x00004478:    00910091    ....    DCD    9502865
        0x0000447c:    00910091    ....    DCD    9502865
        0x00004480:    00910091    ....    DCD    9502865
        0x00004484:    00910091    ....    DCD    9502865
        0x00004488:    00910091    ....    DCD    9502865
        0x0000448c:    00910091    ....    DCD    9502865
        0x00004490:    00910091    ....    DCD    9502865
        0x00004494:    00910091    ....    DCD    9502865
        0x00004498:    00910091    ....    DCD    9502865
        0x0000449c:    00910091    ....    DCD    9502865
        0x000044a0:    00910091    ....    DCD    9502865
        0x000044a4:    00910091    ....    DCD    9502865
        0x000044a8:    00910091    ....    DCD    9502865
        0x000044ac:    00910091    ....    DCD    9502865
        0x000044b0:    00910091    ....    DCD    9502865
        0x000044b4:    00910091    ....    DCD    9502865
        0x000044b8:    00910091    ....    DCD    9502865
        0x000044bc:    00910091    ....    DCD    9502865
        0x000044c0:    00910091    ....    DCD    9502865
        0x000044c4:    00910091    ....    DCD    9502865
        0x000044c8:    00910091    ....    DCD    9502865
        0x000044cc:    00910091    ....    DCD    9502865
        0x000044d0:    00910091    ....    DCD    9502865
        0x000044d4:    00910091    ....    DCD    9502865
        0x000044d8:    00910091    ....    DCD    9502865
        0x000044dc:    00910091    ....    DCD    9502865
        0x000044e0:    00910091    ....    DCD    9502865
        0x000044e4:    00910091    ....    DCD    9502865
        0x000044e8:    00910091    ....    DCD    9502865
        0x000044ec:    00910091    ....    DCD    9502865
        0x000044f0:    00910091    ....    DCD    9502865
        0x000044f4:    00910091    ....    DCD    9502865
        0x000044f8:    00910091    ....    DCD    9502865
        0x000044fc:    00910091    ....    DCD    9502865
        0x00004500:    00910091    ....    DCD    9502865
        0x00004504:    00910091    ....    DCD    9502865
        0x00004508:    00910091    ....    DCD    9502865
        0x0000450c:    00910091    ....    DCD    9502865
        0x00004510:    00910091    ....    DCD    9502865
        0x00004514:    00910091    ....    DCD    9502865
        0x00004518:    00910091    ....    DCD    9502865
        0x0000451c:    00910091    ....    DCD    9502865
        0x00004520:    00910091    ....    DCD    9502865
        0x00004524:    00910091    ....    DCD    9502865
        0x00004528:    008d008d    ....    DCD    9240717
        0x0000452c:    008d008d    ....    DCD    9240717
        0x00004530:    008d008d    ....    DCD    9240717
        0x00004534:    008d008d    ....    DCD    9240717
        0x00004538:    008d0091    ....    DCD    9240721
        0x0000453c:    008d008d    ....    DCD    9240717
        0x00004540:    008d008d    ....    DCD    9240717
    $t.14
        0x00004544:    4804        .H      LDR      r0,[pc,#16] ; [0x4558] = 0x20000004
        0x00004546:    f7fffdfd    ....    BL       _7816_4_setKeyRef ; 0x4144
        0x0000454a:    bd80        ..      POP      {r7,pc}
        0x0000454c:    4803        .H      LDR      r0,[pc,#12] ; [0x455c] = 0x86be
        0x0000454e:    4904        .I      LDR      r1,[pc,#16] ; [0x4560] = 0x8958
        0x00004550:    22ff        ."      MOVS     r2,#0xff
        0x00004552:    f003f8cd    ....    BL       __aeabi_assert ; 0x76f0
        0x00004556:    46c0        .F      MOV      r8,r8
    $d.15
    __arm_cp.6_0
        0x00004558:    20000004    ...     DCD    536870916
    __arm_cp.6_1
        0x0000455c:    000086be    ....    DCD    34494
    __arm_cp.6_2
        0x00004560:    00008958    X...    DCD    35160
    $t.16
    _7816_4_verifyPin
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
;;;115    
;;;116    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isInvalidReferenceData()\n");
;;;117    
;;;118    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Checking Key reference value %1\n", umbReferenceData);
;;;119    
;;;120    	/*Check validation of Key Reference Data*/
;;;121    	if ((0x00 == (umbReferenceData & MASK_HIGHER_NIBBLE))
;;;122    		||
;;;123    		(0x80 == (umbReferenceData & MASK_HIGHER_NIBBLE))) {
;;;124    
;;;125    		umbReferenceData &= MASK_LOWER_NIBBLE;
;;;126    
;;;127    		/*Check below if its not an invalid Key reference*/
;;;128    		if ((0x00 != umbReferenceData)
;;;129    			&&
;;;130    			(0x09 != umbReferenceData)
;;;131    			&&
;;;132    			(0x0F != umbReferenceData)) {
;;;133    
;;;134    			/*Presented key reference is valid*/
;;;135    			DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is valid\n");
;;;136    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns FALSE %1\n", FALSE);
;;;137    			return FALSE;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is invalid\n");
;;;142    
;;;143    	/*In current implementation Universal PIN 'PIN_UNIVERSAL' is also treated as invalid key reference*/
;;;144    	/*If control is here it means present reference data is invalid */
;;;145    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns TRUE %1\n", TRUE);
;;;146    	return TRUE;
;;;147    
;;;148    }
;;;149    
;;;150    /*
;;;151    * Set the corresponding bit in give Pin data variable as per key reference
;;;152    *
;;;153    * @param uqbPinData: PIN data
;;;154    * @param umbKeyRef: Key reference
;;;155    *
;;;156    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;157    */
;;;158    void _7816_4_setKeyRef(ptPinData ppdPinData, uMonoByte umbKeyRef) {
;;;159    
;;;160    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setKeyRef() \n");
;;;161    	/*
;;;162    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;163    	*/
;;;164    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;165    			||\
;;;166    			((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;167    			||\
;;;168    			((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;169    			||\
;;;170    			((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;171    
;;;172    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;173    
;;;174    		umbKeyRef -= PIN_APP_1;
;;;175    	}
;;;176    	else { //81-88 and 8A-8E
;;;177    
;;;178    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;179    	}
;;;180    
;;;181    	/*Set corresponding bit*/
;;;182    	(*ppdPinData) |= (0x01 << umbKeyRef);
;;;183    
;;;184    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setKeyRef() \n");
;;;185    }
;;;186    
;;;187    /*
;;;188    * Returns the the verification status of given key reference
;;;189    *
;;;190    * @param umbKeyRef: Key reference
;;;191    *
;;;192    * @return ACC_VERIFIED if pin verified, otherwise ACC_NOT_VERIFIED 
;;;193    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E, 8A-8E and 90
;;;194    */
;;;195    tAccessResult _7816_4_isKeyRefVerified(uMonoByte umbKeyRef) {
;;;196    
;;;197    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isKeyRefVerified() \n");
;;;198    	/*
;;;199    	* Ensure keys must be within 01-08, 81-88, 0A-0E, 8A-8E inclusive and 90
;;;200    	*/
;;;201    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;202    		|| \
;;;203    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;204    		|| \
;;;205    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;206    		|| \
;;;207    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10))
;;;208    		|| \
;;;209    		(PIN_ALWAYS == umbKeyRef) );
;;;210    
;;;211    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Checking verification status of PIN/Key %1\n", umbKeyRef);
;;;212    
;;;213    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;214    
;;;215    		umbKeyRef -= PIN_APP_1;
;;;216    	}
;;;217    	else { //81-88, 8A-8E and 90
;;;218    
;;;219    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;220    	}
;;;221    
;;;222    	/*Set corresponding bit*/
;;;223    	if (pdPinStatus & (0x01 << umbKeyRef)) {
;;;224    		DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin has been verified\n");
;;;225    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() returns ACC_VERIFIED %1\n", ACC_VERIFIED);
;;;226    		return ACC_VERIFIED;
;;;227    	}
;;;228    
;;;229    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin verified\n");
;;;230    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() \n");
;;;231    	return ACC_NOT_VERIFIED;
;;;232    }
;;;233    
;;;234    /*
;;;235    * Update the status of given PIN as verified
;;;236    * 
;;;237    * @param umbKeyRef: Key reference
;;;238    * 
;;;239    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;240    */
;;;241    void _7816_4_markKeyAsVerified(uMonoByte umbKeyRef) {
;;;242    
;;;243    
;;;244    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_markKeyAsVerified() \n");
;;;245    
;;;246    	/*
;;;247    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;248    	*/
;;;249    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;250    		|| \
;;;251    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;252    		|| \
;;;253    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;254    		|| \
;;;255    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;256    
;;;257    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: Before setting the Key reference %1 bit, pin value is %4\n", umbKeyRef, pdPinStatus);
;;;258    
;;;259    	/*Set Bit of given Key ref*/
;;;260    	_7816_4_setKeyRef(&pdPinStatus, umbKeyRef);
;;;261    
;;;262    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: After Setting Pin status value is %4\n", pdPinStatus);
;;;263    
;;;264    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_markKeyAsVerified() \n");
;;;265    }
;;;266    
;;;267    /*
;;;268    * It implements the Verify Pin function
;;;269    *
;;;270    * @param umbKeyReference: identifies the key reference, upon which operation to perform
;;;271    * @param psExpected: What state does Requester expect from the PIN to perform an operation
;;;272    * @param pumbPin: Stores presented pin value
;;;273    * @param poFor: Pin operation  PIN_OP_VERIFY or PIN_OP_VERIFY_COUNTER
;;;274    *
;;;275    * @return tPinStatusCode tells if operation succedded or not
;;;276    * @precondition: assuming length of pumbPin is enough to read data
;;;277    */
;;;278    tPinStatusCode _7816_4_verifyPin(IN_ARG uMonoByte	umbKeyReference,
;;;279    								IN_ARG tPinState	psExpected,
;;;280    								IN_ARG puMonoByte	pumbPin,
;;;281    								IN_ARG tPinOperation poFor) {
        0x00004564:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00004566:    b087        ..      SUB      sp,sp,#0x1c
        0x00004568:    461e        .F      MOV      r6,r3
        0x0000456a:    9202        ..      STR      r2,[sp,#8]
        0x0000456c:    460f        .F      MOV      r7,r1
        0x0000456e:    4604        .F      MOV      r4,r0
        0x00004570:    a905        ..      ADD      r1,sp,#0x14
        0x00004572:    aa06        ..      ADD      r2,sp,#0x18
        0x00004574:    f7fffd3e    ..>.    BL       _7816_4_searchForKeyRef ; 0x3ff4
        0x00004578:    2800        .(      CMP      r0,#0
        0x0000457a:    d00f        ..      BEQ      0x459c ; _7816_4_verifyPin + 56
;;; Core/7816_4/source\PinManagement.c
        0x0000457c:    4605        .F      MOV      r5,r0
        0x0000457e:    a805        ..      ADD      r0,sp,#0x14
        0x00004580:    8800        ..      LDRH     r0,[r0,#0]
        0x00004582:    a903        ..      ADD      r1,sp,#0xc
        0x00004584:    2300        .#      MOVS     r3,#0
        0x00004586:    462a        *F      MOV      r2,r5
        0x00004588:    f7fefe30    ..0.    BL       _7816_4_readUpdateRecordFile ; 0x31ec
        0x0000458c:    2e05        ..      CMP      r6,#5
        0x0000458e:    d109        ..      BNE      0x45a4 ; _7816_4_verifyPin + 64
        0x00004590:    a803        ..      ADD      r0,sp,#0xc
        0x00004592:    7880        .x      LDRB     r0,[r0,#2]
        0x00004594:    1d07        ..      ADDS     r7,r0,#4
        0x00004596:    b2f8        ..      UXTB     r0,r7
        0x00004598:    b007        ..      ADD      sp,sp,#0x1c
        0x0000459a:    bdf0        ..      POP      {r4-r7,pc}
        0x0000459c:    2701        .'      MOVS     r7,#1
        0x0000459e:    b2f8        ..      UXTB     r0,r7
        0x000045a0:    b007        ..      ADD      sp,sp,#0x1c
        0x000045a2:    bdf0        ..      POP      {r4-r7,pc}
        0x000045a4:    a803        ..      ADD      r0,sp,#0xc
        0x000045a6:    7980        .y      LDRB     r0,[r0,#6]
        0x000045a8:    42b8        .B      CMP      r0,r7
        0x000045aa:    d128        (.      BNE      0x45fe ; _7816_4_verifyPin + 154
        0x000045ac:    a803        ..      ADD      r0,sp,#0xc
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
;;;115    
;;;116    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isInvalidReferenceData()\n");
;;;117    
;;;118    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Checking Key reference value %1\n", umbReferenceData);
;;;119    
;;;120    	/*Check validation of Key Reference Data*/
;;;121    	if ((0x00 == (umbReferenceData & MASK_HIGHER_NIBBLE))
;;;122    		||
;;;123    		(0x80 == (umbReferenceData & MASK_HIGHER_NIBBLE))) {
;;;124    
;;;125    		umbReferenceData &= MASK_LOWER_NIBBLE;
;;;126    
;;;127    		/*Check below if its not an invalid Key reference*/
;;;128    		if ((0x00 != umbReferenceData)
;;;129    			&&
;;;130    			(0x09 != umbReferenceData)
;;;131    			&&
;;;132    			(0x0F != umbReferenceData)) {
;;;133    
;;;134    			/*Presented key reference is valid*/
;;;135    			DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is valid\n");
;;;136    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns FALSE %1\n", FALSE);
;;;137    			return FALSE;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is invalid\n");
;;;142    
;;;143    	/*In current implementation Universal PIN 'PIN_UNIVERSAL' is also treated as invalid key reference*/
;;;144    	/*If control is here it means present reference data is invalid */
;;;145    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns TRUE %1\n", TRUE);
;;;146    	return TRUE;
;;;147    
;;;148    }
;;;149    
;;;150    /*
;;;151    * Set the corresponding bit in give Pin data variable as per key reference
;;;152    *
;;;153    * @param uqbPinData: PIN data
;;;154    * @param umbKeyRef: Key reference
;;;155    *
;;;156    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;157    */
;;;158    void _7816_4_setKeyRef(ptPinData ppdPinData, uMonoByte umbKeyRef) {
;;;159    
;;;160    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setKeyRef() \n");
;;;161    	/*
;;;162    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;163    	*/
;;;164    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;165    			||\
;;;166    			((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;167    			||\
;;;168    			((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;169    			||\
;;;170    			((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;171    
;;;172    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;173    
;;;174    		umbKeyRef -= PIN_APP_1;
;;;175    	}
;;;176    	else { //81-88 and 8A-8E
;;;177    
;;;178    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;179    	}
;;;180    
;;;181    	/*Set corresponding bit*/
;;;182    	(*ppdPinData) |= (0x01 << umbKeyRef);
;;;183    
;;;184    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setKeyRef() \n");
;;;185    }
;;;186    
;;;187    /*
;;;188    * Returns the the verification status of given key reference
;;;189    *
;;;190    * @param umbKeyRef: Key reference
;;;191    *
;;;192    * @return ACC_VERIFIED if pin verified, otherwise ACC_NOT_VERIFIED 
;;;193    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E, 8A-8E and 90
;;;194    */
;;;195    tAccessResult _7816_4_isKeyRefVerified(uMonoByte umbKeyRef) {
;;;196    
;;;197    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isKeyRefVerified() \n");
;;;198    	/*
;;;199    	* Ensure keys must be within 01-08, 81-88, 0A-0E, 8A-8E inclusive and 90
;;;200    	*/
;;;201    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;202    		|| \
;;;203    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;204    		|| \
;;;205    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;206    		|| \
;;;207    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10))
;;;208    		|| \
;;;209    		(PIN_ALWAYS == umbKeyRef) );
;;;210    
;;;211    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Checking verification status of PIN/Key %1\n", umbKeyRef);
;;;212    
;;;213    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;214    
;;;215    		umbKeyRef -= PIN_APP_1;
;;;216    	}
;;;217    	else { //81-88, 8A-8E and 90
;;;218    
;;;219    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;220    	}
;;;221    
;;;222    	/*Set corresponding bit*/
;;;223    	if (pdPinStatus & (0x01 << umbKeyRef)) {
;;;224    		DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin has been verified\n");
;;;225    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() returns ACC_VERIFIED %1\n", ACC_VERIFIED);
;;;226    		return ACC_VERIFIED;
;;;227    	}
;;;228    
;;;229    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin verified\n");
;;;230    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() \n");
;;;231    	return ACC_NOT_VERIFIED;
;;;232    }
;;;233    
;;;234    /*
;;;235    * Update the status of given PIN as verified
;;;236    * 
;;;237    * @param umbKeyRef: Key reference
;;;238    * 
;;;239    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;240    */
;;;241    void _7816_4_markKeyAsVerified(uMonoByte umbKeyRef) {
;;;242    
;;;243    
;;;244    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_markKeyAsVerified() \n");
;;;245    
;;;246    	/*
;;;247    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;248    	*/
;;;249    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;250    		|| \
;;;251    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;252    		|| \
;;;253    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;254    		|| \
;;;255    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;256    
;;;257    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: Before setting the Key reference %1 bit, pin value is %4\n", umbKeyRef, pdPinStatus);
;;;258    
;;;259    	/*Set Bit of given Key ref*/
;;;260    	_7816_4_setKeyRef(&pdPinStatus, umbKeyRef);
;;;261    
;;;262    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: After Setting Pin status value is %4\n", pdPinStatus);
;;;263    
;;;264    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_markKeyAsVerified() \n");
;;;265    }
;;;266    
;;;267    /*
;;;268    * It implements the Verify Pin function
;;;269    *
;;;270    * @param umbKeyReference: identifies the key reference, upon which operation to perform
;;;271    * @param psExpected: What state does Requester expect from the PIN to perform an operation
;;;272    * @param pumbPin: Stores presented pin value
;;;273    * @param poFor: Pin operation  PIN_OP_VERIFY or PIN_OP_VERIFY_COUNTER
;;;274    *
;;;275    * @return tPinStatusCode tells if operation succedded or not
;;;276    * @precondition: assuming length of pumbPin is enough to read data
;;;277    */
;;;278    tPinStatusCode _7816_4_verifyPin(IN_ARG uMonoByte	umbKeyReference,
;;;279    								IN_ARG tPinState	psExpected,
;;;280    								IN_ARG puMonoByte	pumbPin,
;;;281    								IN_ARG tPinOperation poFor) {
;;;282    
;;;283    	uMonoByte		umbKeyConfigRecord;
;;;284    	tFileHeaderAddr fhaKeyValuesFile;
;;;285    	tFileHeaderAddr fhaKeyConfigFile;
;;;286    	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;287    
;;;288    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_verifyPin() \n");
;;;289    
;;;290    	DBG_FUNC("[7816_4] _7816_4_verifyPin: Key Reference %1\n", umbKeyReference);
;;;291    
;;;292    	/*Search for given key reference and Key files*/
;;;293    	if (RECORD_UNDEFINED == (umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile))) {
;;;294    
;;;295    		/*Given Key reference is not available in Key config file*/
;;;296    		DBG_ERR("[7816_4] _7816_4_verifyPin: Key reference not found\n");
;;;297    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_FOUND);
;;;298    		return PIN_SC_NOT_FOUND;
;;;299    	}
;;;300    
;;;301    	/*read the whole record*/
;;;302    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;303    
;;;304    	if (PIN_OP_VERIFY_COUNTER == poFor) {
;;;305    		
;;;306    		/*Request to return PIN retry counter only*/
;;;307    		DBG_WARN("[7816_4] _7816_4_verifyPin: For Pin verification %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;308    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;309    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;310    	}
;;;311    
;;;312    	/*Check if Current Pin state is not equal to expected one*/
;;;313    	if (psExpected != umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE]) {
;;;314    
;;;315    		/*Current state of Pin is different than expected one*/
;;;316    		DBG_ERR("[7816_4] _7816_4_verifyPin: PIN has invalid state %1 expected %1\n", umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE], psExpected);
;;;317    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_INVALID_STATE);
;;;318    		return PIN_SC_INVALID_STATE;
;;;319    	}
;;;320    
;;;321    	/*Check if retry limit exceeds*/
;;;322    	if (0x00 == umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]) { // if remaining attempts are zero
        0x000045ae:    7880        .x      LDRB     r0,[r0,#2]
        0x000045b0:    2800        .(      CMP      r0,#0
        0x000045b2:    d028        (.      BEQ      0x4606 ; _7816_4_verifyPin + 162
;;;323    
;;;324    		/*No retry attempts left as per key config data*/
;;;325    		DBG_ERR("[7816_4] _7816_4_verifyPin: Retry attempts for corresponding operation exceeds\n");
;;;326    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_BLOCKED);
;;;327    		return PIN_SC_BLOCKED;
;;;328    	}
;;;329    
;;;330    	DBG_FUNC("[7816_4] _7816_4_verifyPin: There are still few attempts left\n");
;;;331    
;;;332    	/*Decrement the retry counter*/
;;;333    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]--;
        0x000045b4:    1e40        @.      SUBS     r0,r0,#1
        0x000045b6:    ae03        ..      ADD      r6,sp,#0xc
        0x000045b8:    70b0        .p      STRB     r0,[r6,#2]
        0x000045ba:    a805        ..      ADD      r0,sp,#0x14
;;;334    
;;;335    	/*update the whole record with decremented counter*/
;;;336    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
        0x000045bc:    8800        ..      LDRH     r0,[r0,#0]
        0x000045be:    2301        .#      MOVS     r3,#1
        0x000045c0:    4631        1F      MOV      r1,r6
        0x000045c2:    462a        *F      MOV      r2,r5
        0x000045c4:    f7fefe12    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;337    
;;;338    	/*Verify the presented pin*/
;;;339    	if (FALSE == _7816_4_compareWithRecord(fhaKeyValuesFile, umbConfigData[OFFSET_KEY_CONFIG_VERIFY_PIN_VALUE_RECORD], OFFSET_START, pumbPin, LENGTH_PIN_VALUE)) { // if pin doesnt match
        0x000045c8:    7831        1x      LDRB     r1,[r6,#0]
        0x000045ca:    a806        ..      ADD      r0,sp,#0x18
        0x000045cc:    8800        ..      LDRH     r0,[r0,#0]
        0x000045ce:    2208        ."      MOVS     r2,#8
        0x000045d0:    9200        ..      STR      r2,[sp,#0]
        0x000045d2:    2700        .'      MOVS     r7,#0
        0x000045d4:    463a        :F      MOV      r2,r7
        0x000045d6:    9b02        ..      LDR      r3,[sp,#8]
        0x000045d8:    f7fff934    ..4.    BL       _7816_4_compareWithRecord ; 0x3844
        0x000045dc:    2800        .(      CMP      r0,#0
        0x000045de:    d0d7        ..      BEQ      0x4590 ; _7816_4_verifyPin + 44
        0x000045e0:    a903        ..      ADD      r1,sp,#0xc
;;;340    
;;;341    		/*PIN verification failed*/
;;;342    		DBG_ERR("[7816_4] _7816_4_verifyPin: Pin verification failed. %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;343    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;344    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;345    	}
;;;346    
;;;347    	DBG_FUNC("[7816_4] _7816_4_verifyPin: Pin Verified. Reset the Verify counter\n");
;;;348    
;;;349    	/*Reset the Verify counter*/
;;;350    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER] = umbConfigData[OFFSET_KEY_CONFIG_VERIFY_LIMIT];
        0x000045e2:    7848        Hx      LDRB     r0,[r1,#1]
        0x000045e4:    7088        .p      STRB     r0,[r1,#2]
        0x000045e6:    a805        ..      ADD      r0,sp,#0x14
;;;351    
;;;352    	/*update the key config file after resetting counters*/
;;;353    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
        0x000045e8:    8800        ..      LDRH     r0,[r0,#0]
        0x000045ea:    2301        .#      MOVS     r3,#1
        0x000045ec:    462a        *F      MOV      r2,r5
        0x000045ee:    f7fefdfd    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;354    	
;;;355    	/*Mark the requested PIN as verified*/
;;;356    	_7816_4_markKeyAsVerified(umbKeyReference);
        0x000045f2:    4620         F      MOV      r0,r4
        0x000045f4:    f7ffff0c    ....    BL       _7816_4_markKeyAsVerified ; 0x4410
;;;357    
;;;358    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() \n");
;;;359    
;;;360    	return PIN_SC_VERIFIED;
;;;361    }
        0x000045f8:    b2f8        ..      UXTB     r0,r7
        0x000045fa:    b007        ..      ADD      sp,sp,#0x1c
        0x000045fc:    bdf0        ..      POP      {r4-r7,pc}
        0x000045fe:    2702        .'      MOVS     r7,#2
        0x00004600:    b2f8        ..      UXTB     r0,r7
        0x00004602:    b007        ..      ADD      sp,sp,#0x1c
        0x00004604:    bdf0        ..      POP      {r4-r7,pc}
        0x00004606:    2703        .'      MOVS     r7,#3
        0x00004608:    b2f8        ..      UXTB     r0,r7
        0x0000460a:    b007        ..      ADD      sp,sp,#0x1c
        0x0000460c:    bdf0        ..      POP      {r4-r7,pc}
    _7816_4_changeUnblockPin
        0x0000460e:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00004610:    b089        ..      SUB      sp,sp,#0x24
        0x00004612:    4604        .F      MOV      r4,r0
        0x00004614:    380a        .8      SUBS     r0,r0,#0xa
        0x00004616:    2502        .%      MOVS     r5,#2
        0x00004618:    2805        .(      CMP      r0,#5
        0x0000461a:    d303        ..      BCC      0x4624 ; _7816_4_changeUnblockPin + 22
        0x0000461c:    4620         F      MOV      r0,r4
        0x0000461e:    388a        .8      SUBS     r0,r0,#0x8a
        0x00004620:    2805        .(      CMP      r0,#5
        0x00004622:    d202        ..      BCS      0x462a ; _7816_4_changeUnblockPin + 28
        0x00004624:    b2e8        ..      UXTB     r0,r5
        0x00004626:    b009        ..      ADD      sp,sp,#0x24
        0x00004628:    bdf0        ..      POP      {r4-r7,pc}
;;; Core/7816_4/source\PinManagement.c
        0x0000462a:    4617        .F      MOV      r7,r2
        0x0000462c:    460e        .F      MOV      r6,r1
        0x0000462e:    9303        ..      STR      r3,[sp,#0xc]
        0x00004630:    a907        ..      ADD      r1,sp,#0x1c
        0x00004632:    aa08        ..      ADD      r2,sp,#0x20
        0x00004634:    4620         F      MOV      r0,r4
        0x00004636:    f7fffcdd    ....    BL       _7816_4_searchForKeyRef ; 0x3ff4
        0x0000463a:    2800        .(      CMP      r0,#0
        0x0000463c:    d014        ..      BEQ      0x4668 ; _7816_4_changeUnblockPin + 90
        0x0000463e:    4602        .F      MOV      r2,r0
        0x00004640:    a807        ..      ADD      r0,sp,#0x1c
        0x00004642:    8800        ..      LDRH     r0,[r0,#0]
        0x00004644:    a905        ..      ADD      r1,sp,#0x14
        0x00004646:    2300        .#      MOVS     r3,#0
        0x00004648:    9202        ..      STR      r2,[sp,#8]
        0x0000464a:    9304        ..      STR      r3,[sp,#0x10]
        0x0000464c:    f7fefdce    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
        0x00004650:    2e04        ..      CMP      r6,#4
        0x00004652:    d001        ..      BEQ      0x4658 ; _7816_4_changeUnblockPin + 74
        0x00004654:    2003        .       MOVS     r0,#3
        0x00004656:    9004        ..      STR      r0,[sp,#0x10]
        0x00004658:    2e06        ..      CMP      r6,#6
        0x0000465a:    d109        ..      BNE      0x4670 ; _7816_4_changeUnblockPin + 98
        0x0000465c:    a805        ..      ADD      r0,sp,#0x14
        0x0000465e:    7940        @y      LDRB     r0,[r0,#5]
        0x00004660:    1d05        ..      ADDS     r5,r0,#4
        0x00004662:    b2e8        ..      UXTB     r0,r5
        0x00004664:    b009        ..      ADD      sp,sp,#0x24
        0x00004666:    bdf0        ..      POP      {r4-r7,pc}
        0x00004668:    2501        .%      MOVS     r5,#1
        0x0000466a:    b2e8        ..      UXTB     r0,r5
        0x0000466c:    b009        ..      ADD      sp,sp,#0x24
        0x0000466e:    bdf0        ..      POP      {r4-r7,pc}
        0x00004670:    a805        ..      ADD      r0,sp,#0x14
        0x00004672:    2e04        ..      CMP      r6,#4
        0x00004674:    d102        ..      BNE      0x467c ; _7816_4_changeUnblockPin + 110
        0x00004676:    7980        .y      LDRB     r0,[r0,#6]
        0x00004678:    2801        .(      CMP      r0,#1
        0x0000467a:    d0d3        ..      BEQ      0x4624 ; _7816_4_changeUnblockPin + 22
        0x0000467c:    9e04        ..      LDR      r6,[sp,#0x10]
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
;;;115    
;;;116    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isInvalidReferenceData()\n");
;;;117    
;;;118    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Checking Key reference value %1\n", umbReferenceData);
;;;119    
;;;120    	/*Check validation of Key Reference Data*/
;;;121    	if ((0x00 == (umbReferenceData & MASK_HIGHER_NIBBLE))
;;;122    		||
;;;123    		(0x80 == (umbReferenceData & MASK_HIGHER_NIBBLE))) {
;;;124    
;;;125    		umbReferenceData &= MASK_LOWER_NIBBLE;
;;;126    
;;;127    		/*Check below if its not an invalid Key reference*/
;;;128    		if ((0x00 != umbReferenceData)
;;;129    			&&
;;;130    			(0x09 != umbReferenceData)
;;;131    			&&
;;;132    			(0x0F != umbReferenceData)) {
;;;133    
;;;134    			/*Presented key reference is valid*/
;;;135    			DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is valid\n");
;;;136    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns FALSE %1\n", FALSE);
;;;137    			return FALSE;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is invalid\n");
;;;142    
;;;143    	/*In current implementation Universal PIN 'PIN_UNIVERSAL' is also treated as invalid key reference*/
;;;144    	/*If control is here it means present reference data is invalid */
;;;145    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns TRUE %1\n", TRUE);
;;;146    	return TRUE;
;;;147    
;;;148    }
;;;149    
;;;150    /*
;;;151    * Set the corresponding bit in give Pin data variable as per key reference
;;;152    *
;;;153    * @param uqbPinData: PIN data
;;;154    * @param umbKeyRef: Key reference
;;;155    *
;;;156    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;157    */
;;;158    void _7816_4_setKeyRef(ptPinData ppdPinData, uMonoByte umbKeyRef) {
;;;159    
;;;160    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setKeyRef() \n");
;;;161    	/*
;;;162    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;163    	*/
;;;164    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;165    			||\
;;;166    			((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;167    			||\
;;;168    			((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;169    			||\
;;;170    			((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;171    
;;;172    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;173    
;;;174    		umbKeyRef -= PIN_APP_1;
;;;175    	}
;;;176    	else { //81-88 and 8A-8E
;;;177    
;;;178    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;179    	}
;;;180    
;;;181    	/*Set corresponding bit*/
;;;182    	(*ppdPinData) |= (0x01 << umbKeyRef);
;;;183    
;;;184    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setKeyRef() \n");
;;;185    }
;;;186    
;;;187    /*
;;;188    * Returns the the verification status of given key reference
;;;189    *
;;;190    * @param umbKeyRef: Key reference
;;;191    *
;;;192    * @return ACC_VERIFIED if pin verified, otherwise ACC_NOT_VERIFIED 
;;;193    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E, 8A-8E and 90
;;;194    */
;;;195    tAccessResult _7816_4_isKeyRefVerified(uMonoByte umbKeyRef) {
;;;196    
;;;197    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isKeyRefVerified() \n");
;;;198    	/*
;;;199    	* Ensure keys must be within 01-08, 81-88, 0A-0E, 8A-8E inclusive and 90
;;;200    	*/
;;;201    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;202    		|| \
;;;203    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;204    		|| \
;;;205    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;206    		|| \
;;;207    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10))
;;;208    		|| \
;;;209    		(PIN_ALWAYS == umbKeyRef) );
;;;210    
;;;211    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Checking verification status of PIN/Key %1\n", umbKeyRef);
;;;212    
;;;213    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;214    
;;;215    		umbKeyRef -= PIN_APP_1;
;;;216    	}
;;;217    	else { //81-88, 8A-8E and 90
;;;218    
;;;219    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;220    	}
;;;221    
;;;222    	/*Set corresponding bit*/
;;;223    	if (pdPinStatus & (0x01 << umbKeyRef)) {
;;;224    		DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin has been verified\n");
;;;225    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() returns ACC_VERIFIED %1\n", ACC_VERIFIED);
;;;226    		return ACC_VERIFIED;
;;;227    	}
;;;228    
;;;229    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin verified\n");
;;;230    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() \n");
;;;231    	return ACC_NOT_VERIFIED;
;;;232    }
;;;233    
;;;234    /*
;;;235    * Update the status of given PIN as verified
;;;236    * 
;;;237    * @param umbKeyRef: Key reference
;;;238    * 
;;;239    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;240    */
;;;241    void _7816_4_markKeyAsVerified(uMonoByte umbKeyRef) {
;;;242    
;;;243    
;;;244    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_markKeyAsVerified() \n");
;;;245    
;;;246    	/*
;;;247    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;248    	*/
;;;249    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;250    		|| \
;;;251    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;252    		|| \
;;;253    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;254    		|| \
;;;255    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;256    
;;;257    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: Before setting the Key reference %1 bit, pin value is %4\n", umbKeyRef, pdPinStatus);
;;;258    
;;;259    	/*Set Bit of given Key ref*/
;;;260    	_7816_4_setKeyRef(&pdPinStatus, umbKeyRef);
;;;261    
;;;262    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: After Setting Pin status value is %4\n", pdPinStatus);
;;;263    
;;;264    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_markKeyAsVerified() \n");
;;;265    }
;;;266    
;;;267    /*
;;;268    * It implements the Verify Pin function
;;;269    *
;;;270    * @param umbKeyReference: identifies the key reference, upon which operation to perform
;;;271    * @param psExpected: What state does Requester expect from the PIN to perform an operation
;;;272    * @param pumbPin: Stores presented pin value
;;;273    * @param poFor: Pin operation  PIN_OP_VERIFY or PIN_OP_VERIFY_COUNTER
;;;274    *
;;;275    * @return tPinStatusCode tells if operation succedded or not
;;;276    * @precondition: assuming length of pumbPin is enough to read data
;;;277    */
;;;278    tPinStatusCode _7816_4_verifyPin(IN_ARG uMonoByte	umbKeyReference,
;;;279    								IN_ARG tPinState	psExpected,
;;;280    								IN_ARG puMonoByte	pumbPin,
;;;281    								IN_ARG tPinOperation poFor) {
;;;282    
;;;283    	uMonoByte		umbKeyConfigRecord;
;;;284    	tFileHeaderAddr fhaKeyValuesFile;
;;;285    	tFileHeaderAddr fhaKeyConfigFile;
;;;286    	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;287    
;;;288    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_verifyPin() \n");
;;;289    
;;;290    	DBG_FUNC("[7816_4] _7816_4_verifyPin: Key Reference %1\n", umbKeyReference);
;;;291    
;;;292    	/*Search for given key reference and Key files*/
;;;293    	if (RECORD_UNDEFINED == (umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile))) {
;;;294    
;;;295    		/*Given Key reference is not available in Key config file*/
;;;296    		DBG_ERR("[7816_4] _7816_4_verifyPin: Key reference not found\n");
;;;297    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_FOUND);
;;;298    		return PIN_SC_NOT_FOUND;
;;;299    	}
;;;300    
;;;301    	/*read the whole record*/
;;;302    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;303    
;;;304    	if (PIN_OP_VERIFY_COUNTER == poFor) {
;;;305    		
;;;306    		/*Request to return PIN retry counter only*/
;;;307    		DBG_WARN("[7816_4] _7816_4_verifyPin: For Pin verification %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;308    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;309    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;310    	}
;;;311    
;;;312    	/*Check if Current Pin state is not equal to expected one*/
;;;313    	if (psExpected != umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE]) {
;;;314    
;;;315    		/*Current state of Pin is different than expected one*/
;;;316    		DBG_ERR("[7816_4] _7816_4_verifyPin: PIN has invalid state %1 expected %1\n", umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE], psExpected);
;;;317    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_INVALID_STATE);
;;;318    		return PIN_SC_INVALID_STATE;
;;;319    	}
;;;320    
;;;321    	/*Check if retry limit exceeds*/
;;;322    	if (0x00 == umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]) { // if remaining attempts are zero
;;;323    
;;;324    		/*No retry attempts left as per key config data*/
;;;325    		DBG_ERR("[7816_4] _7816_4_verifyPin: Retry attempts for corresponding operation exceeds\n");
;;;326    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_BLOCKED);
;;;327    		return PIN_SC_BLOCKED;
;;;328    	}
;;;329    
;;;330    	DBG_FUNC("[7816_4] _7816_4_verifyPin: There are still few attempts left\n");
;;;331    
;;;332    	/*Decrement the retry counter*/
;;;333    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]--;
;;;334    
;;;335    	/*update the whole record with decremented counter*/
;;;336    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
;;;337    
;;;338    	/*Verify the presented pin*/
;;;339    	if (FALSE == _7816_4_compareWithRecord(fhaKeyValuesFile, umbConfigData[OFFSET_KEY_CONFIG_VERIFY_PIN_VALUE_RECORD], OFFSET_START, pumbPin, LENGTH_PIN_VALUE)) { // if pin doesnt match
;;;340    
;;;341    		/*PIN verification failed*/
;;;342    		DBG_ERR("[7816_4] _7816_4_verifyPin: Pin verification failed. %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;343    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;344    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;345    	}
;;;346    
;;;347    	DBG_FUNC("[7816_4] _7816_4_verifyPin: Pin Verified. Reset the Verify counter\n");
;;;348    
;;;349    	/*Reset the Verify counter*/
;;;350    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER] = umbConfigData[OFFSET_KEY_CONFIG_VERIFY_LIMIT];
;;;351    
;;;352    	/*update the key config file after resetting counters*/
;;;353    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
;;;354    	
;;;355    	/*Mark the requested PIN as verified*/
;;;356    	_7816_4_markKeyAsVerified(umbKeyReference);
;;;357    
;;;358    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() \n");
;;;359    
;;;360    	return PIN_SC_VERIFIED;
;;;361    }
;;;362    
;;;363    /*
;;;364    * It implements the Change and Unblock Pin function
;;;365    * 
;;;366    * @param umbKeyReference: identifies the key reference, upon which operation to perform.
;;;367    * @param poMode: Pin operation
;;;368    * @param pumbPin: Stores Current pin value in case of PIN_OP_CHANGE operation
;;;369    *					Stores Unblock PIN value in case of PIN_OP_UNBLOCK operation
;;;370    * @param pumbNewKey: New key to set corresponding to given key reference
;;;371    * 
;;;372    * @return tPinStatusCode tells if operation succedded or not
;;;373    * @precondition: assuming length of pumbPin and pumbNewKey is enough to read data
;;;374    */
;;;375    tPinStatusCode _7816_4_changeUnblockPin(IN_ARG uMonoByte umbKeyReference, 
;;;376    										IN_ARG tPinOperation poMode, 
;;;377    										IN_ARG puMonoByte pumbPin, 
;;;378    										IN_ARG puMonoByte pumbNewKey) {
;;;379    	uMonoByte		umbConfigIndex;
;;;380    	uMonoByte		umbKeyConfigRecord;
;;;381    	tFileHeaderAddr fhaKeyValuesFile;
;;;382    	tFileHeaderAddr fhaKeyConfigFile;
;;;383    	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;384    
;;;385    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_changeUnblockPin() \n");
;;;386    	
;;;387    	if (((PIN_ADM_1 <= umbKeyReference) && (PIN_ADM_5 >= umbKeyReference))
;;;388    		||
;;;389    		((PIN_ADM_6 <= umbKeyReference) && (PIN_ADM_10 >= umbKeyReference))) {
;;;390    
;;;391    		/*Change/Unblock PIN command can not be applicable for ADM */
;;;392    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: ADM PIN can not be changed \n");
;;;393    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_INVALID_STATE);
;;;394    		return PIN_SC_INVALID_STATE;
;;;395    	}
;;;396    
;;;397    	/*Search for given key reference and Key files*/
;;;398    	if (RECORD_UNDEFINED == (umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile))) {
;;;399    
;;;400    		/*Given Key reference is not available in Key config file*/
;;;401    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: Key reference not found\n");
;;;402    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_NOT_FOUND);
;;;403    		return PIN_SC_NOT_FOUND;
;;;404    	}
;;;405    
;;;406    	if (PIN_OP_CHANGE == poMode) { //Operation Change PIN
;;;407    
;;;408    		DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Requested operation is Change PIN\n");
;;;409    		umbConfigIndex = OFFSET_KEY_CONFIG_VERIFY_PIN;
;;;410    	}
;;;411    	else { //Operation Unblock PIN
;;;412    
;;;413    		DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Requested operation is Unblock PIN\n");
;;;414    		umbConfigIndex = OFFSET_KEY_CONFIG_UNBLOCK_PIN;
;;;415    	}
;;;416    
;;;417    	/*read the whole record*/
;;;418    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;419    
;;;420    	if (PIN_OP_UNBLOCK_COUNTER == poMode) {
;;;421    
;;;422    		/*Remaining attempts of Unblock PIN verification */
;;;423    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: For Unblock Pin verification %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER]);
;;;424    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER]));
;;;425    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER]);
;;;426    	}
;;;427    
;;;428    	if ((PIN_OP_CHANGE == poMode) && (PIN_DISABLED == umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE])) { //If operation is Change PIN then check if its disable or not
;;;429    
;;;430    		/*Pin is already disabled, it needs to be enabled before performing the operation*/
;;;431    
;;;432    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: PIN has been disabled\n");
;;;433    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_INVALID_STATE);
;;;434    		return PIN_SC_INVALID_STATE;
;;;435    	}
;;;436    
;;;437    	/*Check if retry limit exceeds*/
;;;438    	if (0x00 == umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]) { // if remaining attempts are zero
        0x0000467e:    1cb1        ..      ADDS     r1,r6,#2
        0x00004680:    a805        ..      ADD      r0,sp,#0x14
        0x00004682:    5c40        @\      LDRB     r0,[r0,r1]
        0x00004684:    2800        .(      CMP      r0,#0
        0x00004686:    d036        6.      BEQ      0x46f6 ; _7816_4_changeUnblockPin + 232
;;;439    
;;;440    		/*No retry attempts left as per key config data*/
;;;441    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: Retry attempts for corresponding operation exceeds\n");
;;;442    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_BLOCKED);
;;;443    		return PIN_SC_BLOCKED;
;;;444    	}
;;;445    
;;;446    	DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: There are still few attempts left\n");
;;;447    
;;;448    	/*Decrement the retry counter*/
;;;449    	umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]--;
        0x00004688:    1e40        @.      SUBS     r0,r0,#1
        0x0000468a:    ad05        ..      ADD      r5,sp,#0x14
        0x0000468c:    9101        ..      STR      r1,[sp,#4]
        0x0000468e:    5468        hT      STRB     r0,[r5,r1]
        0x00004690:    a807        ..      ADD      r0,sp,#0x1c
;;;450    
;;;451    	/*update the whole record with decremented counter*/
;;;452    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
        0x00004692:    8800        ..      LDRH     r0,[r0,#0]
        0x00004694:    2301        .#      MOVS     r3,#1
        0x00004696:    4629        )F      MOV      r1,r5
        0x00004698:    9a02        ..      LDR      r2,[sp,#8]
        0x0000469a:    f7fefda7    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;453    
;;;454    	/*Verify the presented pin*/
;;;455    	if (FALSE == _7816_4_compareWithRecord(fhaKeyValuesFile, umbConfigData[umbConfigIndex + OFFSET_RELATIVE_PIN_VALUE_RECORD], OFFSET_START, pumbPin, LENGTH_PIN_VALUE)) { // if pin doesnt match
        0x0000469e:    19a8        ..      ADDS     r0,r5,r6
        0x000046a0:    7801        .x      LDRB     r1,[r0,#0]
        0x000046a2:    a808        ..      ADD      r0,sp,#0x20
        0x000046a4:    8800        ..      LDRH     r0,[r0,#0]
        0x000046a6:    2208        ."      MOVS     r2,#8
        0x000046a8:    9200        ..      STR      r2,[sp,#0]
        0x000046aa:    2500        .%      MOVS     r5,#0
        0x000046ac:    462a        *F      MOV      r2,r5
        0x000046ae:    463b        ;F      MOV      r3,r7
        0x000046b0:    f7fff8c8    ....    BL       _7816_4_compareWithRecord ; 0x3844
        0x000046b4:    2800        .(      CMP      r0,#0
        0x000046b6:    d022        ".      BEQ      0x46fe ; _7816_4_changeUnblockPin + 240
        0x000046b8:    9604        ..      STR      r6,[sp,#0x10]
        0x000046ba:    ae05        ..      ADD      r6,sp,#0x14
;;;456    
;;;457    		/*PIN verification failed*/
;;;458    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: Pin verification failed. %1 attempts left\n", umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]);
;;;459    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", (PIN_SC_NOT_VERIFIED + umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]));
;;;460    		return (PIN_SC_NOT_VERIFIED + umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]);
;;;461    		
;;;462    	}
;;;463    
;;;464    	DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Pin Verified. Update the new pin and reset the verify and unblock counters\n");
;;;465    
;;;466    	/*Update the new pin*/
;;;467    	_7816_4_readUpdateRecordFile(fhaKeyValuesFile, pumbNewKey, umbConfigData[OFFSET_KEY_CONFIG_VERIFY_PIN_VALUE_RECORD], ACC_MODE_FILE_UPDATE);
        0x000046bc:    7832        2x      LDRB     r2,[r6,#0]
        0x000046be:    a808        ..      ADD      r0,sp,#0x20
        0x000046c0:    8800        ..      LDRH     r0,[r0,#0]
        0x000046c2:    2701        .'      MOVS     r7,#1
        0x000046c4:    9903        ..      LDR      r1,[sp,#0xc]
        0x000046c6:    463b        ;F      MOV      r3,r7
        0x000046c8:    f7fefd90    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;468    
;;;469    	/*Reset the Verify and unblock counters*/
;;;470    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER] = umbConfigData[OFFSET_KEY_CONFIG_VERIFY_LIMIT]; // reset the verify counter
        0x000046cc:    7870        px      LDRB     r0,[r6,#1]
        0x000046ce:    70b0        .p      STRB     r0,[r6,#2]
;;;471    	umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER] = umbConfigData[umbConfigIndex + OFFSET_RELATIVE_LIMIT]; // reset the Unblock/verify counter
        0x000046d0:    9804        ..      LDR      r0,[sp,#0x10]
        0x000046d2:    1980        ..      ADDS     r0,r0,r6
        0x000046d4:    7840        @x      LDRB     r0,[r0,#1]
        0x000046d6:    9901        ..      LDR      r1,[sp,#4]
        0x000046d8:    5470        pT      STRB     r0,[r6,r1]
;;;472    	
;;;473    	
;;;474    	/*Update the state of key after unblocking*/
;;;475    	DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Enable the pin while unblocking the card\n");
;;;476    	umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE] = PIN_ENABLED;
        0x000046da:    71b5        .q      STRB     r5,[r6,#6]
        0x000046dc:    a807        ..      ADD      r0,sp,#0x1c
;;;477    
;;;478    	/*update the key config file after resetting counters*/
;;;479    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
        0x000046de:    8800        ..      LDRH     r0,[r0,#0]
        0x000046e0:    4631        1F      MOV      r1,r6
        0x000046e2:    9a02        ..      LDR      r2,[sp,#8]
        0x000046e4:    463b        ;F      MOV      r3,r7
        0x000046e6:    f7fefd81    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;480    
;;;481    	/*Mark the requested PIN as verified*/
;;;482    	_7816_4_markKeyAsVerified(umbKeyReference);
        0x000046ea:    4620         F      MOV      r0,r4
        0x000046ec:    f7fffe90    ....    BL       _7816_4_markKeyAsVerified ; 0x4410
;;;483    
;;;484    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() \n");
;;;485    	return PIN_SC_VERIFIED;
;;;486    }
        0x000046f0:    b2e8        ..      UXTB     r0,r5
        0x000046f2:    b009        ..      ADD      sp,sp,#0x24
        0x000046f4:    bdf0        ..      POP      {r4-r7,pc}
        0x000046f6:    2503        .%      MOVS     r5,#3
        0x000046f8:    b2e8        ..      UXTB     r0,r5
        0x000046fa:    b009        ..      ADD      sp,sp,#0x24
        0x000046fc:    bdf0        ..      POP      {r4-r7,pc}
        0x000046fe:    a805        ..      ADD      r0,sp,#0x14
        0x00004700:    9901        ..      LDR      r1,[sp,#4]
        0x00004702:    5c40        @\      LDRB     r0,[r0,r1]
        0x00004704:    1d05        ..      ADDS     r5,r0,#4
        0x00004706:    b2e8        ..      UXTB     r0,r5
        0x00004708:    b009        ..      ADD      sp,sp,#0x24
        0x0000470a:    bdf0        ..      POP      {r4-r7,pc}
    _7816_4_changePinState
;;;487    
;;;488    /*
;;;489    * It implements the Enable & Disable PIN function
;;;490    *
;;;491    * @param umbKeyReference: identifies the key reference, upon which operation to perform.
;;;492    * @param poMode: Pin operation : PIN_OP_ENABLE or PIN_OP_DISABLE
;;;493    * @param pumbPin: Pin value presented
;;;494    *
;;;495    * @return tPinStatusCode tells if operation succedded or not
;;;496    * @precondition: assuming length of array pumbPin is enough to read data, operation can only be PIN_OP_ENABLE or PIN_OP_DISABLE
;;;497    */
;;;498    tPinStatusCode _7816_4_changePinState(	IN_ARG	uMonoByte		umbKeyReference,
;;;499    										IN_ARG	tPinOperation	poCommand,
;;;500    										IN_ARG	puMonoByte		pumbPin) {
        0x0000470c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000470e:    b085        ..      SUB      sp,sp,#0x14
        0x00004710:    1e4e        N.      SUBS     r6,r1,#1
        0x00004712:    2e02        ..      CMP      r6,#2
        0x00004714:    d227        '.      BCS      0x4766 ; _7816_4_changePinState + 90
;;; Core/7816_4/source\PinManagement.c
        0x00004716:    4605        .F      MOV      r5,r0
        0x00004718:    4271        qB      RSBS     r1,r6,#0
        0x0000471a:    4171        qA      ADCS     r1,r1,r6
        0x0000471c:    2300        .#      MOVS     r3,#0
        0x0000471e:    f7ffff21    ..!.    BL       _7816_4_verifyPin ; 0x4564
        0x00004722:    4604        .F      MOV      r4,r0
        0x00004724:    2800        .(      CMP      r0,#0
        0x00004726:    d002        ..      BEQ      0x472e ; _7816_4_changePinState + 34
        0x00004728:    4620         F      MOV      r0,r4
        0x0000472a:    b005        ..      ADD      sp,sp,#0x14
        0x0000472c:    bdf0        ..      POP      {r4-r7,pc}
        0x0000472e:    af04        ..      ADD      r7,sp,#0x10
        0x00004730:    9700        ..      STR      r7,[sp,#0]
        0x00004732:    aa03        ..      ADD      r2,sp,#0xc
        0x00004734:    4628        (F      MOV      r0,r5
        0x00004736:    4639        9F      MOV      r1,r7
        0x00004738:    f7fffc5c    ..\.    BL       _7816_4_searchForKeyRef ; 0x3ff4
        0x0000473c:    4605        .F      MOV      r5,r0
        0x0000473e:    8838        8.      LDRH     r0,[r7,#0]
        0x00004740:    af01        ..      ADD      r7,sp,#4
        0x00004742:    2300        .#      MOVS     r3,#0
        0x00004744:    4639        9F      MOV      r1,r7
        0x00004746:    462a        *F      MOV      r2,r5
        0x00004748:    f7fefd50    ..P.    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;1      #include"7816_4.h"
;;;2      
;;;3      #define RECORD_FOUND												(0x01)
;;;4      #define POS_BIT_PIN_SECOND_APP_1									(0x10)
;;;5      #define DEFAULT_ALWAYS												(0x80000000)
;;;6      
;;;7      /*It stores verifications status of different key references*/
;;;8      tPinData	pdPinStatus = DEFAULT_ALWAYS;
;;;9      /*
;;;10     * Search Key config file for given key reference and get file addresses
;;;11     *
;;;12     * @param umbKeyReference: Key reference to search
;;;13     * @param pfhaKeyConfigFile: will contain address of Key Config file
;;;14     * @param pfhaKeyValuesFile: will contain address of Key Values file
;;;15     *
;;;16     * @return Record no. if Key reference found, otherwise RECORD_UNDEFINED
;;;17     *
;;;18     * @pre Prop. PIN files must be created
;;;19     */
;;;20     static uMonoByte _7816_4_searchForKeyRef(IN_ARG uMonoByte umbKeyReference,
;;;21     	OUT_ARG ptFileHeaderAddr pfhaKeyConfigFile,
;;;22     	OUT_ARG ptFileHeaderAddr pfhaKeyValuesFile) {
;;;23     
;;;24     	uMonoByte umbKeyConfigRecord = RECORD_UNDEFINED;
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_searchForKeyRef() \n");
;;;27     
;;;28     	/*Get file address of Prop. DF*/
;;;29     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, pfhaKeyValuesFile);
;;;30     
;;;31     	/*Get file address of Prop. Key Config file*/
;;;32     	_7816_4_ifFileExists(FID_PROP_KEYS_CONFIG, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyConfigFile);
;;;33     
;;;34     	/*Get file address of Prop. Key Value file*/
;;;35     	_7816_4_ifFileExists(FID_PROP_KEYS_VALUE, *pfhaKeyValuesFile, MODE_FIND_FID, pfhaKeyValuesFile);
;;;36     
;;;37     
;;;38     	assert(NO_FILE_PRESENT != *pfhaKeyConfigFile); // ensure key config file is created
;;;39     	assert(NO_FILE_PRESENT != *pfhaKeyValuesFile); // ensure keys value file is created
;;;40     	assert(LENGTH_RECORD_OF_KEY_CONFIG == _7816_4_getRecordLength(*pfhaKeyConfigFile)); // ensure the record size of key config file
;;;41     	assert(LENGTH_RECORD_OF_KEY_VALUE == _7816_4_getRecordLength(*pfhaKeyValuesFile)); // ensure the record size of key value file
;;;42     
;;;43     	DBG_FUNC("[7816_4] _7816_4_searchForKeyRef: Search for key reference %1 in Key Config file\n", umbKeyReference);
;;;44     
;;;45     	/*Search for given key reference*/
;;;46     	_7816_4_SearchRecordFile(*pfhaKeyConfigFile, &umbKeyReference, 0x01, SEARCH_RECORD_FORWARD, SEARCH_FIRST_OCCURRENCE, RECORD_FIRST, OFFSET_KEY_CONFIG_KEY_REFERENCE, &umbKeyConfigRecord);
;;;47     
;;;48     	DBG_FUNC_EXIT("<<[7816_4] _7816_4_searchForKeyRef() returns %1\n", umbKeyConfigRecord);
;;;49     
;;;50     	/*either it will contain Record no. or RECORD_UNDEFINED*/
;;;51     	return umbKeyConfigRecord;
;;;52     }
;;;53     
;;;54     /*
;;;55     * It returns the remaining attempts of given key reference
;;;56     *
;;;57     * @param umbKeyRef: Key reference
;;;58     * @param poFor: P
;;;59     *
;;;60     * @return remaining attempts
;;;61     * @precondition umbKeyReference must be valid key reference
;;;62     */
;;;63     uMonoByte _7816_4_remainingAttemptsOfPin(IN_ARG uMonoByte umbKeyReference, IN_ARG tPinOperation poFor) {
;;;64     
;;;65     	uMonoByte		umbKeyConfigRecord;
;;;66     	tFileHeaderAddr fhaKeyConfigFile;
;;;67     	tFileHeaderAddr fhaKeyValuesFile;
;;;68     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;69     	
;;;70     	/*Search for given key reference and Key files*/
;;;71     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;72     
;;;73     	/*read the whole record*/
;;;74     	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;75     	
;;;76     	if (PIN_OP_VERIFY == poFor) {// remaining attempts of Verify PIN
;;;77     		return umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER];
;;;78     	}
;;;79     	else { // remaining attempts of Unblock PIN
;;;80     		return umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER];
;;;81     	}
;;;82     }
;;;83     
;;;84     /*
;;;85     * It returns the activation status of the corresponding pin
;;;86     *
;;;87     * @param umbKeyRef: Key reference
;;;88     *
;;;89     * @return Enabled pin: PIN_ENABLED otherwise PIN_DISABLED
;;;90     */
;;;91     tPinState _7816_4_isPinActive(uMonoByte umbKeyReference) {
;;;92     
;;;93     	uMonoByte		umbKeyConfigRecord;
;;;94     	tFileHeaderAddr fhaKeyConfigFile;
;;;95     	tFileHeaderAddr fhaKeyValuesFile;
;;;96     	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;97     
;;;98     	/*Search for given key reference and Key files*/
;;;99     	umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;100    
;;;101    	/*read the whole record*/
;;;102    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;103    
;;;104    	return umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE];
;;;105    }
;;;106    
;;;107    /*
;;;108    * Check the reference data or P2 parameter if its invalid acc. to 102221
;;;109    *
;;;110    * @param umbReferenceData: Key reference data
;;;111    *
;;;112    * @retruns TRUE if key reference is invalid, FALSE if its not
;;;113    */
;;;114    boolean _7816_4_isInvalidReferenceData(uMonoByte umbReferenceData) {
;;;115    
;;;116    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isInvalidReferenceData()\n");
;;;117    
;;;118    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Checking Key reference value %1\n", umbReferenceData);
;;;119    
;;;120    	/*Check validation of Key Reference Data*/
;;;121    	if ((0x00 == (umbReferenceData & MASK_HIGHER_NIBBLE))
;;;122    		||
;;;123    		(0x80 == (umbReferenceData & MASK_HIGHER_NIBBLE))) {
;;;124    
;;;125    		umbReferenceData &= MASK_LOWER_NIBBLE;
;;;126    
;;;127    		/*Check below if its not an invalid Key reference*/
;;;128    		if ((0x00 != umbReferenceData)
;;;129    			&&
;;;130    			(0x09 != umbReferenceData)
;;;131    			&&
;;;132    			(0x0F != umbReferenceData)) {
;;;133    
;;;134    			/*Presented key reference is valid*/
;;;135    			DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is valid\n");
;;;136    			DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns FALSE %1\n", FALSE);
;;;137    			return FALSE;
;;;138    		}
;;;139    	}
;;;140    
;;;141    	DBG_FUNC("[7816_4] _7816_4_isInvalidReferenceData: Presented key reference is invalid\n");
;;;142    
;;;143    	/*In current implementation Universal PIN 'PIN_UNIVERSAL' is also treated as invalid key reference*/
;;;144    	/*If control is here it means present reference data is invalid */
;;;145    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isInvalidReferenceData() returns TRUE %1\n", TRUE);
;;;146    	return TRUE;
;;;147    
;;;148    }
;;;149    
;;;150    /*
;;;151    * Set the corresponding bit in give Pin data variable as per key reference
;;;152    *
;;;153    * @param uqbPinData: PIN data
;;;154    * @param umbKeyRef: Key reference
;;;155    *
;;;156    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;157    */
;;;158    void _7816_4_setKeyRef(ptPinData ppdPinData, uMonoByte umbKeyRef) {
;;;159    
;;;160    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_setKeyRef() \n");
;;;161    	/*
;;;162    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;163    	*/
;;;164    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;165    			||\
;;;166    			((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;167    			||\
;;;168    			((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;169    			||\
;;;170    			((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;171    
;;;172    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;173    
;;;174    		umbKeyRef -= PIN_APP_1;
;;;175    	}
;;;176    	else { //81-88 and 8A-8E
;;;177    
;;;178    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;179    	}
;;;180    
;;;181    	/*Set corresponding bit*/
;;;182    	(*ppdPinData) |= (0x01 << umbKeyRef);
;;;183    
;;;184    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_setKeyRef() \n");
;;;185    }
;;;186    
;;;187    /*
;;;188    * Returns the the verification status of given key reference
;;;189    *
;;;190    * @param umbKeyRef: Key reference
;;;191    *
;;;192    * @return ACC_VERIFIED if pin verified, otherwise ACC_NOT_VERIFIED 
;;;193    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E, 8A-8E and 90
;;;194    */
;;;195    tAccessResult _7816_4_isKeyRefVerified(uMonoByte umbKeyRef) {
;;;196    
;;;197    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_isKeyRefVerified() \n");
;;;198    	/*
;;;199    	* Ensure keys must be within 01-08, 81-88, 0A-0E, 8A-8E inclusive and 90
;;;200    	*/
;;;201    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;202    		|| \
;;;203    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;204    		|| \
;;;205    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;206    		|| \
;;;207    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10))
;;;208    		|| \
;;;209    		(PIN_ALWAYS == umbKeyRef) );
;;;210    
;;;211    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Checking verification status of PIN/Key %1\n", umbKeyRef);
;;;212    
;;;213    	if (umbKeyRef < PIN_SECOND_APP_1) { //01-08 and 0A-0E
;;;214    
;;;215    		umbKeyRef -= PIN_APP_1;
;;;216    	}
;;;217    	else { //81-88, 8A-8E and 90
;;;218    
;;;219    		umbKeyRef = POS_BIT_PIN_SECOND_APP_1 + umbKeyRef - PIN_SECOND_APP_1;
;;;220    	}
;;;221    
;;;222    	/*Set corresponding bit*/
;;;223    	if (pdPinStatus & (0x01 << umbKeyRef)) {
;;;224    		DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin has been verified\n");
;;;225    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() returns ACC_VERIFIED %1\n", ACC_VERIFIED);
;;;226    		return ACC_VERIFIED;
;;;227    	}
;;;228    
;;;229    	DBG_FUNC("[7816_4] _7816_4_isKeyRefVerified: Pin verified\n");
;;;230    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_isKeyRefVerified() \n");
;;;231    	return ACC_NOT_VERIFIED;
;;;232    }
;;;233    
;;;234    /*
;;;235    * Update the status of given PIN as verified
;;;236    * 
;;;237    * @param umbKeyRef: Key reference
;;;238    * 
;;;239    * @precondition Must be a valid key reference i.e. 01-08, 81-88, 0A-0E and 8A-8E
;;;240    */
;;;241    void _7816_4_markKeyAsVerified(uMonoByte umbKeyRef) {
;;;242    
;;;243    
;;;244    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_markKeyAsVerified() \n");
;;;245    
;;;246    	/*
;;;247    	* Ensure keys must be within 01-08, 81-88, 0A-0E and 8A-8E inclusive
;;;248    	*/
;;;249    	assert(((PIN_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_APP_8))\
;;;250    		|| \
;;;251    		((PIN_SECOND_APP_1 <= umbKeyRef) && (umbKeyRef <= PIN_SECOND_APP_8))\
;;;252    		|| \
;;;253    		((PIN_ADM_1 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_5))\
;;;254    		|| \
;;;255    		((PIN_ADM_6 <= umbKeyRef) && (umbKeyRef <= PIN_ADM_10)));
;;;256    
;;;257    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: Before setting the Key reference %1 bit, pin value is %4\n", umbKeyRef, pdPinStatus);
;;;258    
;;;259    	/*Set Bit of given Key ref*/
;;;260    	_7816_4_setKeyRef(&pdPinStatus, umbKeyRef);
;;;261    
;;;262    	DBG_FUNC("[7816_4] _7816_4_markKeyAsVerified: After Setting Pin status value is %4\n", pdPinStatus);
;;;263    
;;;264    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_markKeyAsVerified() \n");
;;;265    }
;;;266    
;;;267    /*
;;;268    * It implements the Verify Pin function
;;;269    *
;;;270    * @param umbKeyReference: identifies the key reference, upon which operation to perform
;;;271    * @param psExpected: What state does Requester expect from the PIN to perform an operation
;;;272    * @param pumbPin: Stores presented pin value
;;;273    * @param poFor: Pin operation  PIN_OP_VERIFY or PIN_OP_VERIFY_COUNTER
;;;274    *
;;;275    * @return tPinStatusCode tells if operation succedded or not
;;;276    * @precondition: assuming length of pumbPin is enough to read data
;;;277    */
;;;278    tPinStatusCode _7816_4_verifyPin(IN_ARG uMonoByte	umbKeyReference,
;;;279    								IN_ARG tPinState	psExpected,
;;;280    								IN_ARG puMonoByte	pumbPin,
;;;281    								IN_ARG tPinOperation poFor) {
;;;282    
;;;283    	uMonoByte		umbKeyConfigRecord;
;;;284    	tFileHeaderAddr fhaKeyValuesFile;
;;;285    	tFileHeaderAddr fhaKeyConfigFile;
;;;286    	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;287    
;;;288    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_verifyPin() \n");
;;;289    
;;;290    	DBG_FUNC("[7816_4] _7816_4_verifyPin: Key Reference %1\n", umbKeyReference);
;;;291    
;;;292    	/*Search for given key reference and Key files*/
;;;293    	if (RECORD_UNDEFINED == (umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile))) {
;;;294    
;;;295    		/*Given Key reference is not available in Key config file*/
;;;296    		DBG_ERR("[7816_4] _7816_4_verifyPin: Key reference not found\n");
;;;297    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_FOUND);
;;;298    		return PIN_SC_NOT_FOUND;
;;;299    	}
;;;300    
;;;301    	/*read the whole record*/
;;;302    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;303    
;;;304    	if (PIN_OP_VERIFY_COUNTER == poFor) {
;;;305    		
;;;306    		/*Request to return PIN retry counter only*/
;;;307    		DBG_WARN("[7816_4] _7816_4_verifyPin: For Pin verification %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;308    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;309    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;310    	}
;;;311    
;;;312    	/*Check if Current Pin state is not equal to expected one*/
;;;313    	if (psExpected != umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE]) {
;;;314    
;;;315    		/*Current state of Pin is different than expected one*/
;;;316    		DBG_ERR("[7816_4] _7816_4_verifyPin: PIN has invalid state %1 expected %1\n", umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE], psExpected);
;;;317    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_INVALID_STATE);
;;;318    		return PIN_SC_INVALID_STATE;
;;;319    	}
;;;320    
;;;321    	/*Check if retry limit exceeds*/
;;;322    	if (0x00 == umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]) { // if remaining attempts are zero
;;;323    
;;;324    		/*No retry attempts left as per key config data*/
;;;325    		DBG_ERR("[7816_4] _7816_4_verifyPin: Retry attempts for corresponding operation exceeds\n");
;;;326    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_BLOCKED);
;;;327    		return PIN_SC_BLOCKED;
;;;328    	}
;;;329    
;;;330    	DBG_FUNC("[7816_4] _7816_4_verifyPin: There are still few attempts left\n");
;;;331    
;;;332    	/*Decrement the retry counter*/
;;;333    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]--;
;;;334    
;;;335    	/*update the whole record with decremented counter*/
;;;336    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
;;;337    
;;;338    	/*Verify the presented pin*/
;;;339    	if (FALSE == _7816_4_compareWithRecord(fhaKeyValuesFile, umbConfigData[OFFSET_KEY_CONFIG_VERIFY_PIN_VALUE_RECORD], OFFSET_START, pumbPin, LENGTH_PIN_VALUE)) { // if pin doesnt match
;;;340    
;;;341    		/*PIN verification failed*/
;;;342    		DBG_ERR("[7816_4] _7816_4_verifyPin: Pin verification failed. %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;343    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() returns %1\n", PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;344    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER]);
;;;345    	}
;;;346    
;;;347    	DBG_FUNC("[7816_4] _7816_4_verifyPin: Pin Verified. Reset the Verify counter\n");
;;;348    
;;;349    	/*Reset the Verify counter*/
;;;350    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER] = umbConfigData[OFFSET_KEY_CONFIG_VERIFY_LIMIT];
;;;351    
;;;352    	/*update the key config file after resetting counters*/
;;;353    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
;;;354    	
;;;355    	/*Mark the requested PIN as verified*/
;;;356    	_7816_4_markKeyAsVerified(umbKeyReference);
;;;357    
;;;358    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_verifyPin() \n");
;;;359    
;;;360    	return PIN_SC_VERIFIED;
;;;361    }
;;;362    
;;;363    /*
;;;364    * It implements the Change and Unblock Pin function
;;;365    * 
;;;366    * @param umbKeyReference: identifies the key reference, upon which operation to perform.
;;;367    * @param poMode: Pin operation
;;;368    * @param pumbPin: Stores Current pin value in case of PIN_OP_CHANGE operation
;;;369    *					Stores Unblock PIN value in case of PIN_OP_UNBLOCK operation
;;;370    * @param pumbNewKey: New key to set corresponding to given key reference
;;;371    * 
;;;372    * @return tPinStatusCode tells if operation succedded or not
;;;373    * @precondition: assuming length of pumbPin and pumbNewKey is enough to read data
;;;374    */
;;;375    tPinStatusCode _7816_4_changeUnblockPin(IN_ARG uMonoByte umbKeyReference, 
;;;376    										IN_ARG tPinOperation poMode, 
;;;377    										IN_ARG puMonoByte pumbPin, 
;;;378    										IN_ARG puMonoByte pumbNewKey) {
;;;379    	uMonoByte		umbConfigIndex;
;;;380    	uMonoByte		umbKeyConfigRecord;
;;;381    	tFileHeaderAddr fhaKeyValuesFile;
;;;382    	tFileHeaderAddr fhaKeyConfigFile;
;;;383    	uMonoByte		umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;384    
;;;385    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_changeUnblockPin() \n");
;;;386    	
;;;387    	if (((PIN_ADM_1 <= umbKeyReference) && (PIN_ADM_5 >= umbKeyReference))
;;;388    		||
;;;389    		((PIN_ADM_6 <= umbKeyReference) && (PIN_ADM_10 >= umbKeyReference))) {
;;;390    
;;;391    		/*Change/Unblock PIN command can not be applicable for ADM */
;;;392    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: ADM PIN can not be changed \n");
;;;393    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_INVALID_STATE);
;;;394    		return PIN_SC_INVALID_STATE;
;;;395    	}
;;;396    
;;;397    	/*Search for given key reference and Key files*/
;;;398    	if (RECORD_UNDEFINED == (umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile))) {
;;;399    
;;;400    		/*Given Key reference is not available in Key config file*/
;;;401    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: Key reference not found\n");
;;;402    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_NOT_FOUND);
;;;403    		return PIN_SC_NOT_FOUND;
;;;404    	}
;;;405    
;;;406    	if (PIN_OP_CHANGE == poMode) { //Operation Change PIN
;;;407    
;;;408    		DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Requested operation is Change PIN\n");
;;;409    		umbConfigIndex = OFFSET_KEY_CONFIG_VERIFY_PIN;
;;;410    	}
;;;411    	else { //Operation Unblock PIN
;;;412    
;;;413    		DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Requested operation is Unblock PIN\n");
;;;414    		umbConfigIndex = OFFSET_KEY_CONFIG_UNBLOCK_PIN;
;;;415    	}
;;;416    
;;;417    	/*read the whole record*/
;;;418    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;419    
;;;420    	if (PIN_OP_UNBLOCK_COUNTER == poMode) {
;;;421    
;;;422    		/*Remaining attempts of Unblock PIN verification */
;;;423    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: For Unblock Pin verification %1 attempts left\n", umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER]);
;;;424    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER]));
;;;425    		return (PIN_SC_NOT_VERIFIED + umbConfigData[OFFSET_KEY_CONFIG_UNBLOCK_COUNTER]);
;;;426    	}
;;;427    
;;;428    	if ((PIN_OP_CHANGE == poMode) && (PIN_DISABLED == umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE])) { //If operation is Change PIN then check if its disable or not
;;;429    
;;;430    		/*Pin is already disabled, it needs to be enabled before performing the operation*/
;;;431    
;;;432    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: PIN has been disabled\n");
;;;433    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_INVALID_STATE);
;;;434    		return PIN_SC_INVALID_STATE;
;;;435    	}
;;;436    
;;;437    	/*Check if retry limit exceeds*/
;;;438    	if (0x00 == umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]) { // if remaining attempts are zero
;;;439    
;;;440    		/*No retry attempts left as per key config data*/
;;;441    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: Retry attempts for corresponding operation exceeds\n");
;;;442    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", PIN_SC_BLOCKED);
;;;443    		return PIN_SC_BLOCKED;
;;;444    	}
;;;445    
;;;446    	DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: There are still few attempts left\n");
;;;447    
;;;448    	/*Decrement the retry counter*/
;;;449    	umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]--;
;;;450    
;;;451    	/*update the whole record with decremented counter*/
;;;452    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
;;;453    
;;;454    	/*Verify the presented pin*/
;;;455    	if (FALSE == _7816_4_compareWithRecord(fhaKeyValuesFile, umbConfigData[umbConfigIndex + OFFSET_RELATIVE_PIN_VALUE_RECORD], OFFSET_START, pumbPin, LENGTH_PIN_VALUE)) { // if pin doesnt match
;;;456    
;;;457    		/*PIN verification failed*/
;;;458    		DBG_ERR("[7816_4] _7816_4_changeUnblockPin: Pin verification failed. %1 attempts left\n", umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]);
;;;459    		DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() returns %1\n", (PIN_SC_NOT_VERIFIED + umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]));
;;;460    		return (PIN_SC_NOT_VERIFIED + umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER]);
;;;461    		
;;;462    	}
;;;463    
;;;464    	DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Pin Verified. Update the new pin and reset the verify and unblock counters\n");
;;;465    
;;;466    	/*Update the new pin*/
;;;467    	_7816_4_readUpdateRecordFile(fhaKeyValuesFile, pumbNewKey, umbConfigData[OFFSET_KEY_CONFIG_VERIFY_PIN_VALUE_RECORD], ACC_MODE_FILE_UPDATE);
;;;468    
;;;469    	/*Reset the Verify and unblock counters*/
;;;470    	umbConfigData[OFFSET_KEY_CONFIG_VERIFY_COUNTER] = umbConfigData[OFFSET_KEY_CONFIG_VERIFY_LIMIT]; // reset the verify counter
;;;471    	umbConfigData[umbConfigIndex + OFFSET_RELATIVE_COUNTER] = umbConfigData[umbConfigIndex + OFFSET_RELATIVE_LIMIT]; // reset the Unblock/verify counter
;;;472    	
;;;473    	
;;;474    	/*Update the state of key after unblocking*/
;;;475    	DBG_FUNC("[7816_4] _7816_4_changeUnblockPin: Enable the pin while unblocking the card\n");
;;;476    	umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE] = PIN_ENABLED;
;;;477    
;;;478    	/*update the key config file after resetting counters*/
;;;479    	_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
;;;480    
;;;481    	/*Mark the requested PIN as verified*/
;;;482    	_7816_4_markKeyAsVerified(umbKeyReference);
;;;483    
;;;484    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_changeUnblockPin() \n");
;;;485    	return PIN_SC_VERIFIED;
;;;486    }
;;;487    
;;;488    /*
;;;489    * It implements the Enable & Disable PIN function
;;;490    *
;;;491    * @param umbKeyReference: identifies the key reference, upon which operation to perform.
;;;492    * @param poMode: Pin operation : PIN_OP_ENABLE or PIN_OP_DISABLE
;;;493    * @param pumbPin: Pin value presented
;;;494    *
;;;495    * @return tPinStatusCode tells if operation succedded or not
;;;496    * @precondition: assuming length of array pumbPin is enough to read data, operation can only be PIN_OP_ENABLE or PIN_OP_DISABLE
;;;497    */
;;;498    tPinStatusCode _7816_4_changePinState(	IN_ARG	uMonoByte		umbKeyReference,
;;;499    										IN_ARG	tPinOperation	poCommand,
;;;500    										IN_ARG	puMonoByte		pumbPin) {
;;;501    	uMonoByte			umbKeyConfigRecord;
;;;502    	tPinState			psVal;
;;;503    	tPinStatusCode		pscReturned;
;;;504    	tFileHeaderAddr		fhaKeyConfigFile;
;;;505    	tFileHeaderAddr		fhaKeyValuesFile;
;;;506    	uMonoByte			umbConfigData[LENGTH_RECORD_OF_KEY_CONFIG];
;;;507    
;;;508    	assert((PIN_OP_ENABLE == poCommand)||(PIN_OP_DISABLE == poCommand));
        0x0000474c:    1e70        p.      SUBS     r0,r6,#1
        0x0000474e:    4186        .A      SBCS     r6,r6,r0
;;;509    
;;;510    	DBG_FUNC_ENTRY(">>[7816_4] _7816_4_changePinState() \n");
;;;511    
;;;512    	/*verify the PIN first before changing the pin state*/
;;;513    	if (poCommand == PIN_OP_ENABLE) { // If operation is Enable Pin command
;;;514    
;;;515    		DBG_FUNC("[7816_4] _7816_4_changePinState: Request to Enable the Pin \n");
;;;516    
;;;517    		/*Verify PIN, Pin state must be disabled, so that command can enable it successfully*/
;;;518    		pscReturned = _7816_4_verifyPin(umbKeyReference, PIN_DISABLED, pumbPin, PIN_OP_VERIFY);
;;;519    
;;;520    		/*new pin state*/
;;;521    		psVal = PIN_ENABLED;
;;;522    	}
;;;523    	else { // Operation is disable pin command
;;;524    
;;;525    		DBG_FUNC("[7816_4] _7816_4_changePinState: Request to Disable the Pin \n");
;;;526    
;;;527    		/*Verify PIN, Pin state must be Enabled, so that command can disable it successfully*/
;;;528    		pscReturned = _7816_4_verifyPin(umbKeyReference, PIN_ENABLED, pumbPin, PIN_OP_VERIFY);
;;;529    
;;;530    		/*new pin state*/
;;;531    		psVal = PIN_DISABLED;
;;;532    	}
;;;533    
;;;534    	if (PIN_SC_VERIFIED == pscReturned) {
;;;535    
;;;536    		/*Search the key reference in key config file and retreieve the record no.*/
;;;537    		umbKeyConfigRecord = _7816_4_searchForKeyRef(umbKeyReference, &fhaKeyConfigFile, &fhaKeyValuesFile);
;;;538    
;;;539    		/*read the whole record*/
;;;540    		_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_READ);
;;;541    
;;;542    		/*Update the new PIN state*/
;;;543    		umbConfigData[OFFSET_KEY_CONFIG_PIN_STATE] = psVal;
        0x00004750:    71be        .q      STRB     r6,[r7,#6]
;;;544    
;;;545    		DBG_FUNC("[7816_4] _7816_4_changePinState: Updating the Pin state to %1 \n", psVal);
;;;546    
;;;547    		/*Update the whole record, after changing pin state*/
;;;548    		_7816_4_readUpdateRecordFile(fhaKeyConfigFile, umbConfigData, umbKeyConfigRecord, ACC_MODE_FILE_UPDATE);
        0x00004752:    9800        ..      LDR      r0,[sp,#0]
        0x00004754:    8800        ..      LDRH     r0,[r0,#0]
        0x00004756:    2301        .#      MOVS     r3,#1
        0x00004758:    4639        9F      MOV      r1,r7
        0x0000475a:    462a        *F      MOV      r2,r5
        0x0000475c:    f7fefd46    ..F.    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;549    
;;;550    	}
;;;551    	DBG_FUNC_EXIT("<<[7816_4] _7816_4_changePinState() \n");
;;;552    
;;;553    	return pscReturned;
        0x00004760:    4620         F      MOV      r0,r4
        0x00004762:    b005        ..      ADD      sp,sp,#0x14
        0x00004764:    bdf0        ..      POP      {r4-r7,pc}
        0x00004766:    207f        .       MOVS     r0,#0x7f
        0x00004768:    0082        ..      LSLS     r2,r0,#2
        0x0000476a:    a002        ..      ADR      r0,{pc}+0xa ; 0x4774
        0x0000476c:    4910        .I      LDR      r1,[pc,#64] ; [0x47b0] = 0x8958
        0x0000476e:    f002ffbf    ....    BL       __aeabi_assert ; 0x76f0
        0x00004772:    46c0        .F      MOV      r8,r8
    $d.17
        0x00004774:    4e495028    (PIN    DCD    1313427496
        0x00004778:    5f504f5f    _OP_    DCD    1599098719
        0x0000477c:    42414e45    ENAB    DCD    1111576133
        0x00004780:    3d20454c    LE =    DCD    1025525068
        0x00004784:    6f70203d    = po    DCD    1869619261
        0x00004788:    6d6d6f43    Comm    DCD    1835888451
        0x0000478c:    29646e61    and)    DCD    694447713
        0x00004790:    50287c7c    ||(P    DCD    1344830588
        0x00004794:    4f5f4e49    IN_O    DCD    1331646025
        0x00004798:    49445f50    P_DI    DCD    1229217616
        0x0000479c:    4c424153    SABL    DCD    1279410515
        0x000047a0:    3d3d2045    E ==    DCD    1027416133
        0x000047a4:    436f7020     poC    DCD    1131376672
        0x000047a8:    616d6d6f    omma    DCD    1634561391
        0x000047ac:    0029646e    nd).    DCD    2712686
    __arm_cp.9_1
        0x000047b0:    00008958    X...    DCD    35160
    $t.0
    _7816_9_createFileHeader
;;; Core/7816_9/source\7816_9.c
;;;14     {
        0x000047b4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000047b6:    b089        ..      SUB      sp,sp,#0x24
        0x000047b8:    4605        .F      MOV      r5,r0
        0x000047ba:    980f        ..      LDR      r0,[sp,#0x3c]
        0x000047bc:    9008        ..      STR      r0,[sp,#0x20]
        0x000047be:    980e        ..      LDR      r0,[sp,#0x38]
        0x000047c0:    9007        ..      STR      r0,[sp,#0x1c]
        0x000047c2:    a804        ..      ADD      r0,sp,#0x10
        0x000047c4:    c00e        ..      STM      r0!,{r1-r3}
        0x000047c6:    2014        .       MOVS     r0,#0x14
        0x000047c8:    2600        .&      MOVS     r6,#0
        0x000047ca:    4631        1F      MOV      r1,r6
        0x000047cc:    f7fcfadc    ....    BL       mm_alloc ; 0xd88
        0x000047d0:    2800        .(      CMP      r0,#0
        0x000047d2:    d031        1.      BEQ      0x4838 ; _7816_9_createFileHeader + 132
;;; Core/7816_9/source\7816_9.c
        0x000047d4:    2101        .!      MOVS     r1,#1
        0x000047d6:    9103        ..      STR      r1,[sp,#0xc]
;;;1      #include "7816_9.h"
;;;2      
;;;3      
;;;4      /*
;;;5      * Create file header under give DF
;;;6      *
;;;7      * @param fhaFile: Directory file under which given file to be created
;;;8      * @param fhFile: Structure of File to be created
;;;9      *
;;;10     * @returns address of memory block if file created, otherwise EMPTY_OBJECT
;;;11     * @precondition: fhaFile must be DF type
;;;12     */
;;;13     tFileHeaderAddr _7816_9_createFileHeader(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileHeader fhFile)
;;;14     {
;;;15     	/*stores file header address*/
;;;16     	tFileHeaderAddr fhaSiblingFile;
;;;17     
;;;18     	/*Allocates memory*/
;;;19     	tFileHeaderAddr fhaCreatedFile;
;;;20     
;;;21     	DBG_FUNC_ENTRY(">>[7816_9] _7816_9_createFileHeader() \n");
;;;22     
;;;23     	fhaCreatedFile = mm_alloc(sizeof(tFileHeader), 0x00);
;;;24     
;;;25     	if (NO_FREE_MEMORY == fhaCreatedFile) //if address is not invalid one
;;;26     	{
;;;27     		DBG_FUNC_EXIT("<<[7816_9] _7816_9_createFileHeader() returns '00'\n");
;;;28     		return EMPTY_OBJECT;
;;;29     	}
;;;30     
;;;31     	/*file is created successfully*/
;;;32     	/*Update the header of file*/
;;;33     	mm_ReadUpdate(fhaCreatedFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
        0x000047d8:    9100        ..      STR      r1,[sp,#0]
        0x000047da:    af04        ..      ADD      r7,sp,#0x10
        0x000047dc:    2414        .$      MOVS     r4,#0x14
        0x000047de:    9002        ..      STR      r0,[sp,#8]
        0x000047e0:    4639        9F      MOV      r1,r7
        0x000047e2:    4632        2F      MOV      r2,r6
        0x000047e4:    4623        #F      MOV      r3,r4
        0x000047e6:    f7fcfbbf    ....    BL       mm_ReadUpdate ; 0xf68
;;;34     
;;;35     	DBG_FUNC("[7816_9] _7816_9_createFileHeader: File header updated on new created file header address %2\n", fhaCreatedFile);
;;;36     
;;;37     	/*Read DF file header to check where to write created file header address*/
;;;38     	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x000047ea:    9600        ..      STR      r6,[sp,#0]
        0x000047ec:    4628        (F      MOV      r0,r5
        0x000047ee:    4639        9F      MOV      r1,r7
        0x000047f0:    4632        2F      MOV      r2,r6
        0x000047f2:    4623        #F      MOV      r3,r4
        0x000047f4:    f7fcfbb8    ....    BL       mm_ReadUpdate ; 0xf68
;;;39     
;;;40     	DBG_FUNC("[7816_9] _7816_9_createFileHeader: Adding newly created file in File System under given File %2\n", fhFile.udbFileId);
;;;41     
;;;42     	/*check if DF contains child or not*/
;;;43     	if (NO_FILE_PRESENT == fhFile.FileSpecific.DF.fhaChild) { //DF doesnt have any child
        0x000047f8:    89b8        ..      LDRH     r0,[r7,#0xc]
        0x000047fa:    2800        .(      CMP      r0,#0
        0x000047fc:    d00f        ..      BEQ      0x481e ; _7816_9_createFileHeader + 106
        0x000047fe:    9f02        ..      LDR      r7,[sp,#8]
        0x00004800:    4605        .F      MOV      r5,r0
;;;44     
;;;45     		DBG_FUNC("[7816_9] _7816_9_createFileHeader: This is first child of given DF %2\n", fhaFile);
;;;46     
;;;47     		/*stores address of created file*/
;;;48     		fhFile.FileSpecific.DF.fhaChild = fhaCreatedFile;
;;;49     	}
;;;50     	else { //DF contains child
;;;51     
;;;52     		DBG_FUNC("[7816_9] _7816_9_createFileHeader: DF already contains atleast one child\n");
;;;53     
;;;54     		/*get Child file header address*/
;;;55     		fhaSiblingFile = fhFile.FileSpecific.DF.fhaChild;
;;;56     
;;;57     		DBG_FUNC("[7816_9] _7816_9_createFileHeader: Adding newly created EF as a sibling of last child\n");
;;;58     
;;;59     		do {
;;;60     			/*save current header address*/
;;;61     			fhaFile = fhaSiblingFile;
;;;62     
;;;63     			/*Created file would be child of given DF*/
;;;64     			mm_ReadUpdate(fhaSiblingFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_READ);
        0x00004802:    9600        ..      STR      r6,[sp,#0]
        0x00004804:    b280        ..      UXTH     r0,r0
        0x00004806:    ac04        ..      ADD      r4,sp,#0x10
        0x00004808:    2314        .#      MOVS     r3,#0x14
        0x0000480a:    4621        !F      MOV      r1,r4
        0x0000480c:    4632        2F      MOV      r2,r6
        0x0000480e:    f7fcfbab    ....    BL       mm_ReadUpdate ; 0xf68
;;;65     
;;;66     			/*Get sibling o*/
;;;67     			fhaSiblingFile = fhFile.fhaSibling;
        0x00004812:    88e0        ..      LDRH     r0,[r4,#6]
;;;68     
;;;69     		} while (fhaSiblingFile != NO_FILE_PRESENT); // loop until no sibling found
        0x00004814:    2800        .(      CMP      r0,#0
        0x00004816:    d1f3        ..      BNE      0x4800 ; _7816_9_createFileHeader + 76
        0x00004818:    a804        ..      ADD      r0,sp,#0x10
;;;70     
;;;71     		DBG_FUNC("[7816_9] _7816_9_createFileHeader: Adding newly created EF %2 as a sibling of last child %2\n", fhaCreatedFile, fhaSiblingFile);
;;;72     
;;;73     		/*Store address of created file as sibling*/
;;;74     		fhFile.fhaSibling = fhaCreatedFile;
        0x0000481a:    80c7        ..      STRH     r7,[r0,#6]
        0x0000481c:    e003        ..      B        0x4826 ; _7816_9_createFileHeader + 114
        0x0000481e:    a804        ..      ADD      r0,sp,#0x10
        0x00004820:    9902        ..      LDR      r1,[sp,#8]
        0x00004822:    460f        .F      MOV      r7,r1
        0x00004824:    8181        ..      STRH     r1,[r0,#0xc]
;;;75     	}
;;;76     
;;;77     	/*Update File header which contains updated sibling/Parent */
;;;78     	mm_ReadUpdate(fhaFile, (puMonoByte)&fhFile, OFFSET_START, sizeof(tFileHeader), MEM_MODE_UPDATE);
        0x00004826:    9803        ..      LDR      r0,[sp,#0xc]
        0x00004828:    9000        ..      STR      r0,[sp,#0]
        0x0000482a:    b2a8        ..      UXTH     r0,r5
        0x0000482c:    a904        ..      ADD      r1,sp,#0x10
        0x0000482e:    2200        ."      MOVS     r2,#0
        0x00004830:    2314        .#      MOVS     r3,#0x14
        0x00004832:    f7fcfb99    ....    BL       mm_ReadUpdate ; 0xf68
        0x00004836:    4638        8F      MOV      r0,r7
;;;79     
;;;80     	DBG_FUNC_EXIT("<<[7816_9] _7816_9_createFileHeader() returns '%2'\n", fhaCreatedFile);
;;;81     
;;;82     	/*Address of newly created file*/
;;;83     	return fhaCreatedFile;
;;;84     }
        0x00004838:    b009        ..      ADD      sp,sp,#0x24
        0x0000483a:    bdf0        ..      POP      {r4-r7,pc}
    fvComp128Three
;;; Core/Algorithms/source\algo_comp128.c
;;;78     {
        0x0000483c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000483e:    b09f        ..      SUB      sp,sp,#0x7c
        0x00004840:    9201        ..      STR      r2,[sp,#4]
        0x00004842:    7803        .x      LDRB     r3,[r0,#0]
        0x00004844:    aa0f        ..      ADD      r2,sp,#0x3c
        0x00004846:    73d3        .s      STRB     r3,[r2,#0xf]
        0x00004848:    7847        Gx      LDRB     r7,[r0,#1]
        0x0000484a:    7397        .s      STRB     r7,[r2,#0xe]
        0x0000484c:    7886        .x      LDRB     r6,[r0,#2]
        0x0000484e:    7356        Vs      STRB     r6,[r2,#0xd]
        0x00004850:    78c5        .x      LDRB     r5,[r0,#3]
        0x00004852:    7315        .s      STRB     r5,[r2,#0xc]
        0x00004854:    7904        .y      LDRB     r4,[r0,#4]
        0x00004856:    940a        ..      STR      r4,[sp,#0x28]
        0x00004858:    72d4        .r      STRB     r4,[r2,#0xb]
        0x0000485a:    780c        .x      LDRB     r4,[r1,#0]
        0x0000485c:    405c        \@      EORS     r4,r4,r3
        0x0000485e:    ab0b        ..      ADD      r3,sp,#0x2c
        0x00004860:    73dc        .s      STRB     r4,[r3,#0xf]
        0x00004862:    784c        Lx      LDRB     r4,[r1,#1]
        0x00004864:    407c        |@      EORS     r4,r4,r7
        0x00004866:    739c        .s      STRB     r4,[r3,#0xe]
        0x00004868:    788c        .x      LDRB     r4,[r1,#2]
        0x0000486a:    4074        t@      EORS     r4,r4,r6
        0x0000486c:    735c        \s      STRB     r4,[r3,#0xd]
        0x0000486e:    78cc        .x      LDRB     r4,[r1,#3]
        0x00004870:    406c        l@      EORS     r4,r4,r5
        0x00004872:    731c        .s      STRB     r4,[r3,#0xc]
        0x00004874:    790c        .y      LDRB     r4,[r1,#4]
        0x00004876:    9d0a        ..      LDR      r5,[sp,#0x28]
        0x00004878:    406c        l@      EORS     r4,r4,r5
        0x0000487a:    72dc        .r      STRB     r4,[r3,#0xb]
        0x0000487c:    7946        Fy      LDRB     r6,[r0,#5]
        0x0000487e:    7296        .r      STRB     r6,[r2,#0xa]
        0x00004880:    7987        .y      LDRB     r7,[r0,#6]
        0x00004882:    7257        Wr      STRB     r7,[r2,#9]
        0x00004884:    79c4        .y      LDRB     r4,[r0,#7]
        0x00004886:    7214        .r      STRB     r4,[r2,#8]
        0x00004888:    7a05        .z      LDRB     r5,[r0,#8]
        0x0000488a:    9509        ..      STR      r5,[sp,#0x24]
        0x0000488c:    71d5        .q      STRB     r5,[r2,#7]
        0x0000488e:    7a45        Ez      LDRB     r5,[r0,#9]
        0x00004890:    950a        ..      STR      r5,[sp,#0x28]
        0x00004892:    7195        .q      STRB     r5,[r2,#6]
        0x00004894:    794d        My      LDRB     r5,[r1,#5]
        0x00004896:    4075        u@      EORS     r5,r5,r6
        0x00004898:    729d        .r      STRB     r5,[r3,#0xa]
        0x0000489a:    798d        .y      LDRB     r5,[r1,#6]
        0x0000489c:    407d        }@      EORS     r5,r5,r7
        0x0000489e:    725d        ]r      STRB     r5,[r3,#9]
        0x000048a0:    79cd        .y      LDRB     r5,[r1,#7]
        0x000048a2:    4065        e@      EORS     r5,r5,r4
        0x000048a4:    721d        .r      STRB     r5,[r3,#8]
        0x000048a6:    7a0c        .z      LDRB     r4,[r1,#8]
        0x000048a8:    9d09        ..      LDR      r5,[sp,#0x24]
        0x000048aa:    406c        l@      EORS     r4,r4,r5
        0x000048ac:    71dc        .q      STRB     r4,[r3,#7]
        0x000048ae:    7a84        .z      LDRB     r4,[r0,#0xa]
        0x000048b0:    7154        Tq      STRB     r4,[r2,#5]
        0x000048b2:    7ac7        .z      LDRB     r7,[r0,#0xb]
        0x000048b4:    7117        .q      STRB     r7,[r2,#4]
        0x000048b6:    7b05        .{      LDRB     r5,[r0,#0xc]
        0x000048b8:    9508        ..      STR      r5,[sp,#0x20]
        0x000048ba:    70d5        .p      STRB     r5,[r2,#3]
        0x000048bc:    7b45        E{      LDRB     r5,[r0,#0xd]
        0x000048be:    9509        ..      STR      r5,[sp,#0x24]
        0x000048c0:    7095        .p      STRB     r5,[r2,#2]
        0x000048c2:    7a4d        Mz      LDRB     r5,[r1,#9]
        0x000048c4:    9e0a        ..      LDR      r6,[sp,#0x28]
        0x000048c6:    4075        u@      EORS     r5,r5,r6
        0x000048c8:    719d        .q      STRB     r5,[r3,#6]
        0x000048ca:    7a8d        .z      LDRB     r5,[r1,#0xa]
        0x000048cc:    4065        e@      EORS     r5,r5,r4
        0x000048ce:    715d        ]q      STRB     r5,[r3,#5]
        0x000048d0:    7acc        .z      LDRB     r4,[r1,#0xb]
        0x000048d2:    407c        |@      EORS     r4,r4,r7
        0x000048d4:    711c        .q      STRB     r4,[r3,#4]
        0x000048d6:    7b0c        .{      LDRB     r4,[r1,#0xc]
        0x000048d8:    9d08        ..      LDR      r5,[sp,#0x20]
        0x000048da:    406c        l@      EORS     r4,r4,r5
        0x000048dc:    70dc        .p      STRB     r4,[r3,#3]
        0x000048de:    7b4c        L{      LDRB     r4,[r1,#0xd]
        0x000048e0:    9d09        ..      LDR      r5,[sp,#0x24]
        0x000048e2:    406c        l@      EORS     r4,r4,r5
        0x000048e4:    709c        .p      STRB     r4,[r3,#2]
        0x000048e6:    7b84        .{      LDRB     r4,[r0,#0xe]
        0x000048e8:    7054        Tp      STRB     r4,[r2,#1]
        0x000048ea:    7b8d        .{      LDRB     r5,[r1,#0xe]
        0x000048ec:    4065        e@      EORS     r5,r5,r4
        0x000048ee:    705d        ]p      STRB     r5,[r3,#1]
        0x000048f0:    7bc0        .{      LDRB     r0,[r0,#0xf]
        0x000048f2:    7010        .p      STRB     r0,[r2,#0]
        0x000048f4:    7bc9        .{      LDRB     r1,[r1,#0xf]
        0x000048f6:    4041        A@      EORS     r1,r1,r0
        0x000048f8:    7019        .p      STRB     r1,[r3,#0]
        0x000048fa:    a817        ..      ADD      r0,sp,#0x5c
;;; Core/Algorithms/source\algo_comp128.c
        0x000048fc:    3010        .0      ADDS     r0,r0,#0x10
        0x000048fe:    9002        ..      STR      r0,[sp,#8]
        0x00004900:    2000        .       MOVS     r0,#0
        0x00004902:    4fb0        .O      LDR      r7,[pc,#704] ; [0x4bc4] = 0x7ef0
        0x00004904:    9006        ..      STR      r0,[sp,#0x18]
        0x00004906:    9003        ..      STR      r0,[sp,#0xc]
        0x00004908:    a817        ..      ADD      r0,sp,#0x5c
        0x0000490a:    a90f        ..      ADD      r1,sp,#0x3c
        0x0000490c:    2610        .&      MOVS     r6,#0x10
        0x0000490e:    4632        2F      MOV      r2,r6
        0x00004910:    f7fcf855    ..U.    BL       mem_cpyFwd ; 0x9be
        0x00004914:    a90b        ..      ADD      r1,sp,#0x2c
        0x00004916:    9802        ..      LDR      r0,[sp,#8]
        0x00004918:    4632        2F      MOV      r2,r6
        0x0000491a:    f7fcf850    ..P.    BL       mem_cpyFwd ; 0x9be
        0x0000491e:    9d06        ..      LDR      r5,[sp,#0x18]
        0x00004920:    48a9        .H      LDR      r0,[pc,#676] ; [0x4bc8] = 0x7df0
        0x00004922:    a917        ..      ADD      r1,sp,#0x5c
;;;1      #include "Algorithms.h"
;;;2      
;;;3      /*function definitions */
;;;4      const uMonoByte L1[256] =
;;;5      {
;;;7      };
;;;8      		
;;;9      const uMonoByte M11[256] =
;;;10     {
;;;12     };
;;;13     
;;;14     
;;;15     /*
;;;16      * Compression function for Comp 128 Two and three algorithm.
;;;17      *
;;;18      * @param          A     array contains A parameter
;;;19      * <BR>
;;;20      * @param          B     array contains B parameter
;;;21      * <BR>
;;;22      * @param          C     array contains C parameters
;;;23      */
;;;24     static void CompF( uMonoByte *A, uMonoByte *B, uMonoByte *C ) 
;;;25     {
;;;26     	uMonoByte Y[ 32 ], Z[ 16 ];
;;;27     	uMonoByte i, j, k;
;;;28     
;;;29     	mem_cpy(Y, B, (uMonoByte) 16);
;;;30     	mem_cpy( Y+16,A, (uMonoByte) 16);
;;;31     	  
;;;32     	for ( k = 0; k < 5; k++ ) 
;;;33     	{
;;;34     	   	for ( j = 0; j < 16; j++ ) 
;;;35     	   	{
;;;36     	   		Z[ j ] = L1[ Y[ j ] ^ ( M11[ ( Y[ j + 16 ] ) ] ) ];
        0x00004924:    7c0a        .|      LDRB     r2,[r1,#0x10]
        0x00004926:    5cba        .\      LDRB     r2,[r7,r2]
        0x00004928:    780b        .x      LDRB     r3,[r1,#0]
        0x0000492a:    4053        S@      EORS     r3,r3,r2
        0x0000492c:    5cc3        .\      LDRB     r3,[r0,r3]
        0x0000492e:    aa13        ..      ADD      r2,sp,#0x4c
        0x00004930:    7013        .p      STRB     r3,[r2,#0]
        0x00004932:    7c4b        K|      LDRB     r3,[r1,#0x11]
        0x00004934:    5cfb        .\      LDRB     r3,[r7,r3]
        0x00004936:    784c        Lx      LDRB     r4,[r1,#1]
        0x00004938:    405c        \@      EORS     r4,r4,r3
        0x0000493a:    5d03        .]      LDRB     r3,[r0,r4]
        0x0000493c:    7053        Sp      STRB     r3,[r2,#1]
        0x0000493e:    7c8b        .|      LDRB     r3,[r1,#0x12]
        0x00004940:    5cfb        .\      LDRB     r3,[r7,r3]
        0x00004942:    788c        .x      LDRB     r4,[r1,#2]
        0x00004944:    405c        \@      EORS     r4,r4,r3
        0x00004946:    5d03        .]      LDRB     r3,[r0,r4]
        0x00004948:    7093        .p      STRB     r3,[r2,#2]
        0x0000494a:    7ccb        .|      LDRB     r3,[r1,#0x13]
        0x0000494c:    5cfb        .\      LDRB     r3,[r7,r3]
        0x0000494e:    78cc        .x      LDRB     r4,[r1,#3]
        0x00004950:    405c        \@      EORS     r4,r4,r3
        0x00004952:    5d03        .]      LDRB     r3,[r0,r4]
        0x00004954:    70d3        .p      STRB     r3,[r2,#3]
        0x00004956:    7d0b        .}      LDRB     r3,[r1,#0x14]
        0x00004958:    5cfb        .\      LDRB     r3,[r7,r3]
        0x0000495a:    790c        .y      LDRB     r4,[r1,#4]
        0x0000495c:    405c        \@      EORS     r4,r4,r3
        0x0000495e:    5d03        .]      LDRB     r3,[r0,r4]
        0x00004960:    7113        .q      STRB     r3,[r2,#4]
        0x00004962:    7d4b        K}      LDRB     r3,[r1,#0x15]
        0x00004964:    5cfb        .\      LDRB     r3,[r7,r3]
        0x00004966:    794c        Ly      LDRB     r4,[r1,#5]
        0x00004968:    405c        \@      EORS     r4,r4,r3
        0x0000496a:    5d03        .]      LDRB     r3,[r0,r4]
        0x0000496c:    7153        Sq      STRB     r3,[r2,#5]
        0x0000496e:    7d8b        .}      LDRB     r3,[r1,#0x16]
        0x00004970:    5cfb        .\      LDRB     r3,[r7,r3]
        0x00004972:    798c        .y      LDRB     r4,[r1,#6]
        0x00004974:    405c        \@      EORS     r4,r4,r3
        0x00004976:    5d03        .]      LDRB     r3,[r0,r4]
        0x00004978:    7193        .q      STRB     r3,[r2,#6]
        0x0000497a:    7dcb        .}      LDRB     r3,[r1,#0x17]
        0x0000497c:    5cfb        .\      LDRB     r3,[r7,r3]
        0x0000497e:    79cc        .y      LDRB     r4,[r1,#7]
        0x00004980:    405c        \@      EORS     r4,r4,r3
        0x00004982:    5d03        .]      LDRB     r3,[r0,r4]
        0x00004984:    71d3        .q      STRB     r3,[r2,#7]
        0x00004986:    7e0b        .~      LDRB     r3,[r1,#0x18]
        0x00004988:    5cfb        .\      LDRB     r3,[r7,r3]
        0x0000498a:    7a0c        .z      LDRB     r4,[r1,#8]
        0x0000498c:    405c        \@      EORS     r4,r4,r3
        0x0000498e:    5d03        .]      LDRB     r3,[r0,r4]
        0x00004990:    7213        .r      STRB     r3,[r2,#8]
        0x00004992:    7e4b        K~      LDRB     r3,[r1,#0x19]
        0x00004994:    5cfb        .\      LDRB     r3,[r7,r3]
        0x00004996:    7a4c        Lz      LDRB     r4,[r1,#9]
        0x00004998:    405c        \@      EORS     r4,r4,r3
        0x0000499a:    5d03        .]      LDRB     r3,[r0,r4]
        0x0000499c:    7253        Sr      STRB     r3,[r2,#9]
        0x0000499e:    7e8b        .~      LDRB     r3,[r1,#0x1a]
        0x000049a0:    5cfb        .\      LDRB     r3,[r7,r3]
        0x000049a2:    7a8c        .z      LDRB     r4,[r1,#0xa]
        0x000049a4:    405c        \@      EORS     r4,r4,r3
        0x000049a6:    5d03        .]      LDRB     r3,[r0,r4]
        0x000049a8:    7293        .r      STRB     r3,[r2,#0xa]
        0x000049aa:    7ecb        .~      LDRB     r3,[r1,#0x1b]
        0x000049ac:    5cfb        .\      LDRB     r3,[r7,r3]
        0x000049ae:    7acc        .z      LDRB     r4,[r1,#0xb]
        0x000049b0:    405c        \@      EORS     r4,r4,r3
        0x000049b2:    5d03        .]      LDRB     r3,[r0,r4]
        0x000049b4:    72d3        .r      STRB     r3,[r2,#0xb]
        0x000049b6:    7f0b        ..      LDRB     r3,[r1,#0x1c]
        0x000049b8:    5cfb        .\      LDRB     r3,[r7,r3]
        0x000049ba:    7b0c        .{      LDRB     r4,[r1,#0xc]
        0x000049bc:    405c        \@      EORS     r4,r4,r3
        0x000049be:    5d03        .]      LDRB     r3,[r0,r4]
        0x000049c0:    7313        .s      STRB     r3,[r2,#0xc]
        0x000049c2:    7f4b        K.      LDRB     r3,[r1,#0x1d]
        0x000049c4:    5cfb        .\      LDRB     r3,[r7,r3]
        0x000049c6:    7b4c        L{      LDRB     r4,[r1,#0xd]
        0x000049c8:    405c        \@      EORS     r4,r4,r3
        0x000049ca:    5d03        .]      LDRB     r3,[r0,r4]
        0x000049cc:    7353        Ss      STRB     r3,[r2,#0xd]
        0x000049ce:    7f8b        ..      LDRB     r3,[r1,#0x1e]
        0x000049d0:    5cfb        .\      LDRB     r3,[r7,r3]
        0x000049d2:    7b8c        .{      LDRB     r4,[r1,#0xe]
        0x000049d4:    405c        \@      EORS     r4,r4,r3
        0x000049d6:    5d03        .]      LDRB     r3,[r0,r4]
        0x000049d8:    7393        .s      STRB     r3,[r2,#0xe]
        0x000049da:    7fcb        ..      LDRB     r3,[r1,#0x1f]
        0x000049dc:    5cfb        .\      LDRB     r3,[r7,r3]
        0x000049de:    7bc9        .{      LDRB     r1,[r1,#0xf]
        0x000049e0:    4059        Y@      EORS     r1,r1,r3
        0x000049e2:    5c41        A\      LDRB     r1,[r0,r1]
        0x000049e4:    73d1        .s      STRB     r1,[r2,#0xf]
        0x000049e6:    2101        .!      MOVS     r1,#1
        0x000049e8:    4608        .F      MOV      r0,r1
        0x000049ea:    40a8        .@      LSLS     r0,r0,r5
        0x000049ec:    9005        ..      STR      r0,[sp,#0x14]
        0x000049ee:    2004        .       MOVS     r0,#4
        0x000049f0:    9004        ..      STR      r0,[sp,#0x10]
        0x000049f2:    1b42        B.      SUBS     r2,r0,r5
        0x000049f4:    4091        .@      LSLS     r1,r1,r2
        0x000049f6:    950a        ..      STR      r5,[sp,#0x28]
        0x000049f8:    1c6e        n.      ADDS     r6,r5,#1
        0x000049fa:    9806        ..      LDR      r0,[sp,#0x18]
        0x000049fc:    4604        .F      MOV      r4,r0
        0x000049fe:    4602        .F      MOV      r2,r0
        0x00004a00:    9609        ..      STR      r6,[sp,#0x24]
        0x00004a02:    9108        ..      STR      r1,[sp,#0x20]
        0x00004a04:    9207        ..      STR      r2,[sp,#0x1c]
        0x00004a06:    9a06        ..      LDR      r2,[sp,#0x18]
        0x00004a08:    4615        .F      MOV      r5,r2
;;;37     	   	}
;;;38     			
;;;39     	   	for ( i = 0; i < ( 1 << k ); i++ ) 
;;;40     	    {
;;;41     	    	for ( j = 0; j < ( 1 << ( 4-k ) ); j++ ) 
;;;42     	    	{
;;;43     	     		Y[ ( ( 2 * j + 1 ) << k ) + i ] = L1[ ( ( Y[ ( j << k ) + i + 16 ] ) ^ ( M11[ Z[ ( j << k ) + i] ] ) ) ];
        0x00004a0a:    462f        /F      MOV      r7,r5
        0x00004a0c:    9b0a        ..      LDR      r3,[sp,#0x28]
        0x00004a0e:    409f        .@      LSLS     r7,r7,r3
        0x00004a10:    193e        >.      ADDS     r6,r7,r4
        0x00004a12:    af13        ..      ADD      r7,sp,#0x4c
        0x00004a14:    5dbf        .]      LDRB     r7,[r7,r6]
        0x00004a16:    486b        kH      LDR      r0,[pc,#428] ; [0x4bc4] = 0x7ef0
        0x00004a18:    5dc0        .]      LDRB     r0,[r0,r7]
        0x00004a1a:    a917        ..      ADD      r1,sp,#0x5c
        0x00004a1c:    1876        v.      ADDS     r6,r6,r1
        0x00004a1e:    7c36        6|      LDRB     r6,[r6,#0x10]
        0x00004a20:    4046        F@      EORS     r6,r6,r0
        0x00004a22:    4869        iH      LDR      r0,[pc,#420] ; [0x4bc8] = 0x7df0
        0x00004a24:    5d80        .]      LDRB     r0,[r0,r6]
        0x00004a26:    006e        n.      LSLS     r6,r5,#1
        0x00004a28:    1c76        v.      ADDS     r6,r6,#1
        0x00004a2a:    409e        .@      LSLS     r6,r6,r3
        0x00004a2c:    1936        6.      ADDS     r6,r6,r4
        0x00004a2e:    5588        .U      STRB     r0,[r1,r6]
        0x00004a30:    9e09        ..      LDR      r6,[sp,#0x24]
;;;44     				Y[ ( j << ( k + 1 ) ) + i ] = Z[ ( j << k ) + i ];
        0x00004a32:    40b5        .@      LSLS     r5,r5,r6
        0x00004a34:    1928        (.      ADDS     r0,r5,r4
        0x00004a36:    540f        .T      STRB     r7,[r1,r0]
        0x00004a38:    9908        ..      LDR      r1,[sp,#0x20]
        0x00004a3a:    1c52        R.      ADDS     r2,r2,#1
        0x00004a3c:    b2d5        ..      UXTB     r5,r2
        0x00004a3e:    42a9        .B      CMP      r1,r5
        0x00004a40:    dce3        ..      BGT      0x4a0a ; fvComp128Three + 462
        0x00004a42:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x00004a44:    1c52        R.      ADDS     r2,r2,#1
        0x00004a46:    b2d4        ..      UXTB     r4,r2
        0x00004a48:    9805        ..      LDR      r0,[sp,#0x14]
        0x00004a4a:    42a0        .B      CMP      r0,r4
        0x00004a4c:    dcda        ..      BGT      0x4a04 ; fvComp128Three + 456
        0x00004a4e:    2e05        ..      CMP      r6,#5
        0x00004a50:    4635        5F      MOV      r5,r6
        0x00004a52:    4f5c        \O      LDR      r7,[pc,#368] ; [0x4bc4] = 0x7ef0
        0x00004a54:    485c        \H      LDR      r0,[pc,#368] ; [0x4bc8] = 0x7df0
        0x00004a56:    d000        ..      BEQ      0x4a5a ; fvComp128Three + 542
        0x00004a58:    e763        c.      B        0x4922 ; fvComp128Three + 230
        0x00004a5a:    a80f        ..      ADD      r0,sp,#0x3c
        0x00004a5c:    2400        .$      MOVS     r4,#0
        0x00004a5e:    2210        ."      MOVS     r2,#0x10
;;;45     	      	}
;;;46     	    }
;;;47     	}
;;;48     
;;;49     //	halInitBuffer(C, (uDiByte) 16);
;;;50     	mem_set(C,0x00,(uDiByte) 16);
        0x00004a60:    4621        !F      MOV      r1,r4
        0x00004a62:    9209        ..      STR      r2,[sp,#0x24]
        0x00004a64:    f7fcf876    ..v.    BL       mem_set ; 0xb54
        0x00004a68:    2026        &       MOVS     r0,#0x26
        0x00004a6a:    940a        ..      STR      r4,[sp,#0x28]
        0x00004a6c:    ab0f        ..      ADD      r3,sp,#0x3c
        0x00004a6e:    5d1a        .]      LDRB     r2,[r3,r4]
;;;51     	// now compute the 16- byte output, C
;;;52     	for ( i = 0; i < 16; i++ ) 
;;;53     	{
;;;54     		uMonoByte temp = i<<3;
;;;55     	   	for ( j = 0; j < 8; j++ )  
;;;56     		{
;;;57     			C[ i ] = (uMonoByte)(C[ i ] ^ ( ( ( Y[ ( ( 19 *( temp + j + 1 ) ) & 0xFF ) >> 3 ] >> ( ( 3 *j + 3 ) & 0x07 ) ) & 1 ) << j ) );
        0x00004a70:    4601        .F      MOV      r1,r0
        0x00004a72:    3924        $9      SUBS     r1,r1,#0x24
        0x00004a74:    241e        .$      MOVS     r4,#0x1e
        0x00004a76:    400c        .@      ANDS     r4,r4,r1
        0x00004a78:    a917        ..      ADD      r1,sp,#0x5c
        0x00004a7a:    5d0c        .]      LDRB     r4,[r1,r4]
        0x00004a7c:    0724        $.      LSLS     r4,r4,#28
        0x00004a7e:    0fe4        ..      LSRS     r4,r4,#31
        0x00004a80:    4054        T@      EORS     r4,r4,r2
        0x00004a82:    4605        .F      MOV      r5,r0
        0x00004a84:    3d22        "=      SUBS     r5,r5,#0x22
        0x00004a86:    221f        ."      MOVS     r2,#0x1f
        0x00004a88:    4015        .@      ANDS     r5,r5,r2
        0x00004a8a:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004a8c:    096d        m.      LSRS     r5,r5,#5
        0x00004a8e:    2602        .&      MOVS     r6,#2
        0x00004a90:    9608        ..      STR      r6,[sp,#0x20]
        0x00004a92:    4035        5@      ANDS     r5,r5,r6
        0x00004a94:    4065        e@      EORS     r5,r5,r4
        0x00004a96:    4604        .F      MOV      r4,r0
        0x00004a98:    3c1f        .<      SUBS     r4,r4,#0x1f
        0x00004a9a:    4014        .@      ANDS     r4,r4,r2
        0x00004a9c:    5d0c        .]      LDRB     r4,[r1,r4]
        0x00004a9e:    0064        d.      LSLS     r4,r4,#1
        0x00004aa0:    9e04        ..      LDR      r6,[sp,#0x10]
        0x00004aa2:    4034        4@      ANDS     r4,r4,r6
        0x00004aa4:    406c        l@      EORS     r4,r4,r5
        0x00004aa6:    4605        .F      MOV      r5,r0
        0x00004aa8:    3d1d        .=      SUBS     r5,r5,#0x1d
        0x00004aaa:    4015        .@      ANDS     r5,r5,r2
        0x00004aac:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004aae:    086d        m.      LSRS     r5,r5,#1
        0x00004ab0:    2608        .&      MOVS     r6,#8
        0x00004ab2:    4035        5@      ANDS     r5,r5,r6
        0x00004ab4:    4065        e@      EORS     r5,r5,r4
        0x00004ab6:    4604        .F      MOV      r4,r0
        0x00004ab8:    3c1b        .<      SUBS     r4,r4,#0x1b
        0x00004aba:    4014        .@      ANDS     r4,r4,r2
        0x00004abc:    5d0c        .]      LDRB     r4,[r1,r4]
        0x00004abe:    08e4        ..      LSRS     r4,r4,#3
        0x00004ac0:    9f09        ..      LDR      r7,[sp,#0x24]
        0x00004ac2:    403c        <@      ANDS     r4,r4,r7
        0x00004ac4:    406c        l@      EORS     r4,r4,r5
        0x00004ac6:    4605        .F      MOV      r5,r0
        0x00004ac8:    3d18        .=      SUBS     r5,r5,#0x18
        0x00004aca:    4015        .@      ANDS     r5,r5,r2
        0x00004acc:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004ace:    00ed        ..      LSLS     r5,r5,#3
        0x00004ad0:    2720         '      MOVS     r7,#0x20
        0x00004ad2:    9707        ..      STR      r7,[sp,#0x1c]
        0x00004ad4:    403d        =@      ANDS     r5,r5,r7
        0x00004ad6:    4065        e@      EORS     r5,r5,r4
        0x00004ad8:    4604        .F      MOV      r4,r0
        0x00004ada:    3c16        .<      SUBS     r4,r4,#0x16
        0x00004adc:    4014        .@      ANDS     r4,r4,r2
        0x00004ade:    5d0c        .]      LDRB     r4,[r1,r4]
        0x00004ae0:    0064        d.      LSLS     r4,r4,#1
        0x00004ae2:    2740        @'      MOVS     r7,#0x40
        0x00004ae4:    9705        ..      STR      r7,[sp,#0x14]
        0x00004ae6:    403c        <@      ANDS     r4,r4,r7
        0x00004ae8:    406c        l@      EORS     r4,r4,r5
        0x00004aea:    4605        .F      MOV      r5,r0
        0x00004aec:    3d13        .=      SUBS     r5,r5,#0x13
        0x00004aee:    4015        .@      ANDS     r5,r5,r2
        0x00004af0:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004af2:    01ed        ..      LSLS     r5,r5,#7
        0x00004af4:    4065        e@      EORS     r5,r5,r4
        0x00004af6:    9c0a        ..      LDR      r4,[sp,#0x28]
        0x00004af8:    551d        .U      STRB     r5,[r3,r4]
        0x00004afa:    9c0a        ..      LDR      r4,[sp,#0x28]
        0x00004afc:    191b        ..      ADDS     r3,r3,r4
        0x00004afe:    785c        \x      LDRB     r4,[r3,#1]
        0x00004b00:    4605        .F      MOV      r5,r0
        0x00004b02:    3d11        .=      SUBS     r5,r5,#0x11
        0x00004b04:    4015        .@      ANDS     r5,r5,r2
        0x00004b06:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004b08:    072d        -.      LSLS     r5,r5,#28
        0x00004b0a:    0fed        ..      LSRS     r5,r5,#31
        0x00004b0c:    4065        e@      EORS     r5,r5,r4
        0x00004b0e:    4604        .F      MOV      r4,r0
        0x00004b10:    3c0f        .<      SUBS     r4,r4,#0xf
        0x00004b12:    4014        .@      ANDS     r4,r4,r2
        0x00004b14:    5d0c        .]      LDRB     r4,[r1,r4]
        0x00004b16:    0964        d.      LSRS     r4,r4,#5
        0x00004b18:    9f08        ..      LDR      r7,[sp,#0x20]
        0x00004b1a:    403c        <@      ANDS     r4,r4,r7
        0x00004b1c:    406c        l@      EORS     r4,r4,r5
        0x00004b1e:    4605        .F      MOV      r5,r0
        0x00004b20:    3d0c        .=      SUBS     r5,r5,#0xc
        0x00004b22:    4015        .@      ANDS     r5,r5,r2
        0x00004b24:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004b26:    006d        m.      LSLS     r5,r5,#1
        0x00004b28:    9f04        ..      LDR      r7,[sp,#0x10]
        0x00004b2a:    403d        =@      ANDS     r5,r5,r7
        0x00004b2c:    4065        e@      EORS     r5,r5,r4
        0x00004b2e:    4604        .F      MOV      r4,r0
        0x00004b30:    3c0a        .<      SUBS     r4,r4,#0xa
        0x00004b32:    4014        .@      ANDS     r4,r4,r2
        0x00004b34:    5d0c        .]      LDRB     r4,[r1,r4]
        0x00004b36:    0864        d.      LSRS     r4,r4,#1
        0x00004b38:    4034        4@      ANDS     r4,r4,r6
        0x00004b3a:    406c        l@      EORS     r4,r4,r5
        0x00004b3c:    4605        .F      MOV      r5,r0
        0x00004b3e:    3d08        .=      SUBS     r5,r5,#8
        0x00004b40:    4015        .@      ANDS     r5,r5,r2
        0x00004b42:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004b44:    08ed        ..      LSRS     r5,r5,#3
        0x00004b46:    9e09        ..      LDR      r6,[sp,#0x24]
        0x00004b48:    4035        5@      ANDS     r5,r5,r6
        0x00004b4a:    4065        e@      EORS     r5,r5,r4
        0x00004b4c:    1f44        D.      SUBS     r4,r0,#5
        0x00004b4e:    4014        .@      ANDS     r4,r4,r2
        0x00004b50:    5d0c        .]      LDRB     r4,[r1,r4]
        0x00004b52:    00e4        ..      LSLS     r4,r4,#3
        0x00004b54:    9e07        ..      LDR      r6,[sp,#0x1c]
        0x00004b56:    4034        4@      ANDS     r4,r4,r6
        0x00004b58:    406c        l@      EORS     r4,r4,r5
        0x00004b5a:    1ec5        ..      SUBS     r5,r0,#3
        0x00004b5c:    4015        .@      ANDS     r5,r5,r2
        0x00004b5e:    5d4d        M]      LDRB     r5,[r1,r5]
        0x00004b60:    006d        m.      LSLS     r5,r5,#1
        0x00004b62:    9e05        ..      LDR      r6,[sp,#0x14]
        0x00004b64:    4035        5@      ANDS     r5,r5,r6
        0x00004b66:    4065        e@      EORS     r5,r5,r4
        0x00004b68:    9c0a        ..      LDR      r4,[sp,#0x28]
        0x00004b6a:    4002        .@      ANDS     r2,r2,r0
        0x00004b6c:    5c89        .\      LDRB     r1,[r1,r2]
        0x00004b6e:    01c9        ..      LSLS     r1,r1,#7
        0x00004b70:    4069        i@      EORS     r1,r1,r5
        0x00004b72:    7059        Yp      STRB     r1,[r3,#1]
        0x00004b74:    3026        &0      ADDS     r0,r0,#0x26
        0x00004b76:    1ca4        ..      ADDS     r4,r4,#2
        0x00004b78:    2c10        .,      CMP      r4,#0x10
        0x00004b7a:    d000        ..      BEQ      0x4b7e ; fvComp128Three + 834
        0x00004b7c:    e775        u.      B        0x4a6a ; fvComp128Three + 558
        0x00004b7e:    9903        ..      LDR      r1,[sp,#0xc]
;;;58     	    }
;;;59     	}  
;;;60     
;;;61     }/* End of CompF */
;;;62     
;;;63     
;;;64     /*
;;;65      * Perform A3A8-algorithm Comp128 Three.
;;;66      *
;;;67      * @pre Random data must be coppied to first 16 bytes of common buffer.
;;;68      * @pre 16 bytes of Ki value must be copied in common buffer starting 16th offset .
;;;69      *
;;;70      * @post SRES valued coppied to first 4 bytes of common buffer.
;;;71      * @post 8 bytes ok KC key valued coppied in common buffer starting 4th offset
;;;72     * @param  pumbRand: Random data
;;;73     * @param  pumbArray: Ki
;;;74     * @param  pumbOutput: 4 bytes SRES and last 8 bytes are Kc
;;;75      * @return void
;;;76      */
;;;77     void fvComp128Three(puMonoByte pumbRandData, puMonoByte pumbKiArray, puMonoByte pumbOutput)
;;;78     {
;;;79         uMonoByte umbRandomNo[ 0x10 ], umbKeyArray[0x10];
;;;80     	uMonoByte umbLoop;
;;;81     	// the initial value of R is the input challenge RAND
;;;82     	for ( umbLoop = 0x00; umbLoop < 0x10; umbLoop++ )
;;;83     	{
;;;84     	    /*Copy 16 bytes of R Parameter form Input buffer
;;;85     		First 16 bytes of input buffer contains Randam data */
;;;86     	    umbRandomNo[ 0x0F - umbLoop ] = pumbRandData[ umbLoop ];
;;;87     		
;;;88     		/*Calculate 16 bytes of K parameter
;;;89     		InputBuffer[16-31] contains 16 bytes of Ki data */
;;;90     	  	umbKeyArray[  0x0F - umbLoop ] = (uMonoByte)( (*(pumbKiArray + (umbLoop))) ^ pumbRandData[ umbLoop ]);
;;;91     	}
;;;92     
;;;93     	/*compute eight rounds of the compression function */
;;;94     	for ( umbLoop = 0x00; umbLoop < 0x08; umbLoop++ )
        0x00004b80:    1c48        H.      ADDS     r0,r1,#1
        0x00004b82:    2907        .)      CMP      r1,#7
        0x00004b84:    4f0f        .O      LDR      r7,[pc,#60] ; [0x4bc4] = 0x7ef0
        0x00004b86:    d200        ..      BCS      0x4b8a ; fvComp128Three + 846
        0x00004b88:    e6bd        ..      B        0x4906 ; fvComp128Three + 202
;;;95     	{
;;;96     	    CompF( umbKeyArray, umbRandomNo, umbRandomNo );
;;;97     	}
;;;98     	
;;;99     	/*Copy 4 bytes of SRES value in input buffer
;;;100    	SRES[umbLoop]=R[15-umbLoop] */
;;;101    	for ( umbLoop = 0x00; umbLoop < 0x04; umbLoop++ )
;;;102    	{
;;;103    		pumbOutput[umbLoop] = umbRandomNo[ 0x0F - umbLoop ];
        0x00004b8a:    9812        ..      LDR      r0,[sp,#0x48]
        0x00004b8c:    9a01        ..      LDR      r2,[sp,#4]
        0x00004b8e:    70d0        .p      STRB     r0,[r2,#3]
        0x00004b90:    9810        ..      LDR      r0,[sp,#0x40]
        0x00004b92:    71d0        .q      STRB     r0,[r2,#7]
        0x00004b94:    a80f        ..      ADD      r0,sp,#0x3c
        0x00004b96:    7bc1        .{      LDRB     r1,[r0,#0xf]
        0x00004b98:    7011        .p      STRB     r1,[r2,#0]
        0x00004b9a:    7b81        .{      LDRB     r1,[r0,#0xe]
        0x00004b9c:    7051        Qp      STRB     r1,[r2,#1]
        0x00004b9e:    7b41        A{      LDRB     r1,[r0,#0xd]
        0x00004ba0:    7091        .p      STRB     r1,[r2,#2]
;;;104    	}
;;;105    	
;;;106    	/*Copy 8 bytes of KC data in input buffer from 4th offset
;;;107    	KC[umbLoop] = R[0x07-umbLoop] */
;;;108    	for ( umbLoop = 0x00; umbLoop < 0x08; umbLoop++ )
;;;109    	{
;;;110    		pumbOutput[umbLoop + 0x04] = umbRandomNo[ 0x07 - umbLoop ];
        0x00004ba2:    79c1        .y      LDRB     r1,[r0,#7]
        0x00004ba4:    7111        .q      STRB     r1,[r2,#4]
        0x00004ba6:    7981        .y      LDRB     r1,[r0,#6]
        0x00004ba8:    7151        Qq      STRB     r1,[r2,#5]
        0x00004baa:    7941        Ay      LDRB     r1,[r0,#5]
        0x00004bac:    7191        .q      STRB     r1,[r2,#6]
        0x00004bae:    78c1        .x      LDRB     r1,[r0,#3]
        0x00004bb0:    7211        .r      STRB     r1,[r2,#8]
        0x00004bb2:    7881        .x      LDRB     r1,[r0,#2]
        0x00004bb4:    7251        Qr      STRB     r1,[r2,#9]
        0x00004bb6:    7840        @x      LDRB     r0,[r0,#1]
        0x00004bb8:    7290        .r      STRB     r0,[r2,#0xa]
        0x00004bba:    980f        ..      LDR      r0,[sp,#0x3c]
        0x00004bbc:    72d0        .r      STRB     r0,[r2,#0xb]
;;;111    	}
;;;112    
;;;113    }/* End of fvComp128Three */
        0x00004bbe:    b01f        ..      ADD      sp,sp,#0x7c
        0x00004bc0:    bdf0        ..      POP      {r4-r7,pc}
        0x00004bc2:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x00004bc4:    00007ef0    .~..    DCD    32496
    __arm_cp.0_1
        0x00004bc8:    00007df0    .}..    DCD    32240
    $t.0
    f1
;;; Core/Algorithms/source\algo_milenage.c
;;;33     {
        0x00004bcc:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00004bce:    b0a1        ..      SUB      sp,sp,#0x84
        0x00004bd0:    9313        ..      STR      r3,[sp,#0x4c]
        0x00004bd2:    4615        .F      MOV      r5,r2
        0x00004bd4:    460e        .F      MOV      r6,r1
;;;34     	uMonoByte temp[16];
;;;35     	uMonoByte in1[16];
;;;36     	uMonoByte out1[16];
;;;37     	uMonoByte rijndaelInput[16];
;;;38     	uMonoByte i;
;;;39     	RijndaelKeySchedule(k);
        0x00004bd6:    f000fd0d    ....    BL       RijndaelKeySchedule ; 0x55f4
;;;40     	for (i = 0; i < 16; i++)
;;;41     		rijndaelInput[i] = rand[i] ^ op_c[i];
        0x00004bda:    7830        0x      LDRB     r0,[r6,#0]
        0x00004bdc:    9f26        &.      LDR      r7,[sp,#0x98]
        0x00004bde:    7839        9x      LDRB     r1,[r7,#0]
        0x00004be0:    4041        A@      EORS     r1,r1,r0
        0x00004be2:    ac14        ..      ADD      r4,sp,#0x50
        0x00004be4:    7021        !p      STRB     r1,[r4,#0]
        0x00004be6:    7870        px      LDRB     r0,[r6,#1]
        0x00004be8:    7879        yx      LDRB     r1,[r7,#1]
        0x00004bea:    4041        A@      EORS     r1,r1,r0
        0x00004bec:    7061        ap      STRB     r1,[r4,#1]
        0x00004bee:    78b0        .x      LDRB     r0,[r6,#2]
        0x00004bf0:    78b9        .x      LDRB     r1,[r7,#2]
        0x00004bf2:    4041        A@      EORS     r1,r1,r0
        0x00004bf4:    70a1        .p      STRB     r1,[r4,#2]
        0x00004bf6:    78f0        .x      LDRB     r0,[r6,#3]
        0x00004bf8:    78f9        .x      LDRB     r1,[r7,#3]
        0x00004bfa:    4041        A@      EORS     r1,r1,r0
        0x00004bfc:    70e1        .p      STRB     r1,[r4,#3]
        0x00004bfe:    7930        0y      LDRB     r0,[r6,#4]
        0x00004c00:    7939        9y      LDRB     r1,[r7,#4]
        0x00004c02:    4041        A@      EORS     r1,r1,r0
        0x00004c04:    7121        !q      STRB     r1,[r4,#4]
        0x00004c06:    7970        py      LDRB     r0,[r6,#5]
        0x00004c08:    7979        yy      LDRB     r1,[r7,#5]
        0x00004c0a:    4041        A@      EORS     r1,r1,r0
        0x00004c0c:    7161        aq      STRB     r1,[r4,#5]
        0x00004c0e:    79b0        .y      LDRB     r0,[r6,#6]
        0x00004c10:    79b9        .y      LDRB     r1,[r7,#6]
        0x00004c12:    4041        A@      EORS     r1,r1,r0
        0x00004c14:    71a1        .q      STRB     r1,[r4,#6]
        0x00004c16:    79f0        .y      LDRB     r0,[r6,#7]
        0x00004c18:    79f9        .y      LDRB     r1,[r7,#7]
        0x00004c1a:    4041        A@      EORS     r1,r1,r0
        0x00004c1c:    71e1        .q      STRB     r1,[r4,#7]
        0x00004c1e:    7a30        0z      LDRB     r0,[r6,#8]
        0x00004c20:    7a39        9z      LDRB     r1,[r7,#8]
        0x00004c22:    4041        A@      EORS     r1,r1,r0
        0x00004c24:    7221        !r      STRB     r1,[r4,#8]
        0x00004c26:    7a70        pz      LDRB     r0,[r6,#9]
        0x00004c28:    7a79        yz      LDRB     r1,[r7,#9]
        0x00004c2a:    4041        A@      EORS     r1,r1,r0
        0x00004c2c:    7261        ar      STRB     r1,[r4,#9]
        0x00004c2e:    7ab0        .z      LDRB     r0,[r6,#0xa]
        0x00004c30:    7ab9        .z      LDRB     r1,[r7,#0xa]
        0x00004c32:    4041        A@      EORS     r1,r1,r0
        0x00004c34:    72a1        .r      STRB     r1,[r4,#0xa]
        0x00004c36:    7af0        .z      LDRB     r0,[r6,#0xb]
        0x00004c38:    7af9        .z      LDRB     r1,[r7,#0xb]
        0x00004c3a:    4041        A@      EORS     r1,r1,r0
        0x00004c3c:    72e1        .r      STRB     r1,[r4,#0xb]
        0x00004c3e:    7b30        0{      LDRB     r0,[r6,#0xc]
        0x00004c40:    7b39        9{      LDRB     r1,[r7,#0xc]
        0x00004c42:    4041        A@      EORS     r1,r1,r0
        0x00004c44:    7321        !s      STRB     r1,[r4,#0xc]
        0x00004c46:    7b70        p{      LDRB     r0,[r6,#0xd]
        0x00004c48:    7b79        y{      LDRB     r1,[r7,#0xd]
        0x00004c4a:    4041        A@      EORS     r1,r1,r0
        0x00004c4c:    7361        as      STRB     r1,[r4,#0xd]
        0x00004c4e:    7bb0        .{      LDRB     r0,[r6,#0xe]
        0x00004c50:    7bb9        .{      LDRB     r1,[r7,#0xe]
        0x00004c52:    4041        A@      EORS     r1,r1,r0
        0x00004c54:    73a1        .s      STRB     r1,[r4,#0xe]
        0x00004c56:    7bf0        .{      LDRB     r0,[r6,#0xf]
        0x00004c58:    7bf9        .{      LDRB     r1,[r7,#0xf]
        0x00004c5a:    4041        A@      EORS     r1,r1,r0
        0x00004c5c:    73e1        .s      STRB     r1,[r4,#0xf]
        0x00004c5e:    ae1d        ..      ADD      r6,sp,#0x74
;;;42     	RijndaelEncrypt(rijndaelInput, temp);
        0x00004c60:    4620         F      MOV      r0,r4
        0x00004c62:    4631        1F      MOV      r1,r6
        0x00004c64:    f000fed2    ....    BL       RijndaelEncrypt ; 0x5a0c
;;;43     	for (i = 0; i < 6; i++)
;;;44     	{
;;;45     		in1[i] = sqn[i];
        0x00004c68:    7829        )x      LDRB     r1,[r5,#0]
;;;46     		in1[i + 8] = sqn[i];
;;;47     	}
;;;48     	for (i = 0; i < 2; i++)
;;;49     	{
;;;50     		in1[i + 6] = amf[i];
;;;51     		in1[i + 14] = amf[i];
;;;52     	}
;;;53     	/* XOR op_c and in1, rotate by r1=64, and XOR *
;;;54     	* on the constant c1 (which is all zeroes) */
;;;55     	for (i = 0; i < 16; i++)
;;;56     		rijndaelInput[(i + 8) % 16] = in1[i] ^ op_c[i];
        0x00004c6a:    910a        ..      STR      r1,[sp,#0x28]
        0x00004c6c:    7a38        8z      LDRB     r0,[r7,#8]
        0x00004c6e:    4048        H@      EORS     r0,r0,r1
        0x00004c70:    9b1d        ..      LDR      r3,[sp,#0x74]
        0x00004c72:    4043        C@      EORS     r3,r3,r0
        0x00004c74:    79f8        .y      LDRB     r0,[r7,#7]
        0x00004c76:    9010        ..      STR      r0,[sp,#0x40]
        0x00004c78:    79b8        .y      LDRB     r0,[r7,#6]
        0x00004c7a:    900f        ..      STR      r0,[sp,#0x3c]
        0x00004c7c:    7978        xy      LDRB     r0,[r7,#5]
        0x00004c7e:    900e        ..      STR      r0,[sp,#0x38]
        0x00004c80:    7938        8y      LDRB     r0,[r7,#4]
        0x00004c82:    900d        ..      STR      r0,[sp,#0x34]
        0x00004c84:    78f8        .x      LDRB     r0,[r7,#3]
        0x00004c86:    900c        ..      STR      r0,[sp,#0x30]
        0x00004c88:    78b8        .x      LDRB     r0,[r7,#2]
        0x00004c8a:    900b        ..      STR      r0,[sp,#0x2c]
        0x00004c8c:    7878        xx      LDRB     r0,[r7,#1]
        0x00004c8e:    9009        ..      STR      r0,[sp,#0x24]
        0x00004c90:    7838        8x      LDRB     r0,[r7,#0]
        0x00004c92:    9008        ..      STR      r0,[sp,#0x20]
        0x00004c94:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x00004c96:    9007        ..      STR      r0,[sp,#0x1c]
        0x00004c98:    9813        ..      LDR      r0,[sp,#0x4c]
        0x00004c9a:    7841        Ax      LDRB     r1,[r0,#1]
        0x00004c9c:    9106        ..      STR      r1,[sp,#0x18]
        0x00004c9e:    7bb9        .{      LDRB     r1,[r7,#0xe]
        0x00004ca0:    9104        ..      STR      r1,[sp,#0x10]
        0x00004ca2:    7800        .x      LDRB     r0,[r0,#0]
        0x00004ca4:    9003        ..      STR      r0,[sp,#0xc]
        0x00004ca6:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x00004ca8:    9002        ..      STR      r0,[sp,#8]
        0x00004caa:    4628        (F      MOV      r0,r5
        0x00004cac:    7969        iy      LDRB     r1,[r5,#5]
        0x00004cae:    9101        ..      STR      r1,[sp,#4]
        0x00004cb0:    7b39        9{      LDRB     r1,[r7,#0xc]
        0x00004cb2:    9100        ..      STR      r1,[sp,#0]
        0x00004cb4:    7929        )y      LDRB     r1,[r5,#4]
        0x00004cb6:    9113        ..      STR      r1,[sp,#0x4c]
        0x00004cb8:    7afd        .z      LDRB     r5,[r7,#0xb]
        0x00004cba:    78c1        .x      LDRB     r1,[r0,#3]
        0x00004cbc:    9112        ..      STR      r1,[sp,#0x48]
        0x00004cbe:    7aba        .z      LDRB     r2,[r7,#0xa]
        0x00004cc0:    7881        .x      LDRB     r1,[r0,#2]
        0x00004cc2:    9111        ..      STR      r1,[sp,#0x44]
        0x00004cc4:    4601        .F      MOV      r1,r0
        0x00004cc6:    7a78        xz      LDRB     r0,[r7,#9]
        0x00004cc8:    7849        Ix      LDRB     r1,[r1,#1]
        0x00004cca:    9105        ..      STR      r1,[sp,#0x14]
        0x00004ccc:    7023        #p      STRB     r3,[r4,#0]
        0x00004cce:    4048        H@      EORS     r0,r0,r1
        0x00004cd0:    7873        sx      LDRB     r3,[r6,#1]
        0x00004cd2:    4043        C@      EORS     r3,r3,r0
        0x00004cd4:    7063        cp      STRB     r3,[r4,#1]
        0x00004cd6:    9811        ..      LDR      r0,[sp,#0x44]
        0x00004cd8:    4042        B@      EORS     r2,r2,r0
        0x00004cda:    78b0        .x      LDRB     r0,[r6,#2]
        0x00004cdc:    4050        P@      EORS     r0,r0,r2
        0x00004cde:    70a0        .p      STRB     r0,[r4,#2]
        0x00004ce0:    9812        ..      LDR      r0,[sp,#0x48]
        0x00004ce2:    4045        E@      EORS     r5,r5,r0
        0x00004ce4:    78f0        .x      LDRB     r0,[r6,#3]
        0x00004ce6:    4068        h@      EORS     r0,r0,r5
        0x00004ce8:    70e0        .p      STRB     r0,[r4,#3]
        0x00004cea:    9813        ..      LDR      r0,[sp,#0x4c]
        0x00004cec:    9900        ..      LDR      r1,[sp,#0]
        0x00004cee:    4041        A@      EORS     r1,r1,r0
;;;57     	/* XOR on the value temp computed before */
;;;58     	for (i = 0; i < 16; i++)
;;;59     		rijndaelInput[i] ^= temp[i];
        0x00004cf0:    981e        ..      LDR      r0,[sp,#0x78]
        0x00004cf2:    4048        H@      EORS     r0,r0,r1
        0x00004cf4:    7120         q      STRB     r0,[r4,#4]
        0x00004cf6:    9d01        ..      LDR      r5,[sp,#4]
        0x00004cf8:    9902        ..      LDR      r1,[sp,#8]
        0x00004cfa:    4069        i@      EORS     r1,r1,r5
        0x00004cfc:    7970        py      LDRB     r0,[r6,#5]
        0x00004cfe:    4048        H@      EORS     r0,r0,r1
        0x00004d00:    7160        `q      STRB     r0,[r4,#5]
        0x00004d02:    9b03        ..      LDR      r3,[sp,#0xc]
        0x00004d04:    9904        ..      LDR      r1,[sp,#0x10]
        0x00004d06:    4059        Y@      EORS     r1,r1,r3
        0x00004d08:    79b0        .y      LDRB     r0,[r6,#6]
        0x00004d0a:    4048        H@      EORS     r0,r0,r1
        0x00004d0c:    71a0        .q      STRB     r0,[r4,#6]
        0x00004d0e:    9a06        ..      LDR      r2,[sp,#0x18]
        0x00004d10:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00004d12:    4051        Q@      EORS     r1,r1,r2
        0x00004d14:    79f0        .y      LDRB     r0,[r6,#7]
        0x00004d16:    4048        H@      EORS     r0,r0,r1
        0x00004d18:    71e0        .q      STRB     r0,[r4,#7]
        0x00004d1a:    980a        ..      LDR      r0,[sp,#0x28]
        0x00004d1c:    9908        ..      LDR      r1,[sp,#0x20]
        0x00004d1e:    4041        A@      EORS     r1,r1,r0
        0x00004d20:    981f        ..      LDR      r0,[sp,#0x7c]
        0x00004d22:    4048        H@      EORS     r0,r0,r1
        0x00004d24:    7220         r      STRB     r0,[r4,#8]
        0x00004d26:    9909        ..      LDR      r1,[sp,#0x24]
        0x00004d28:    9805        ..      LDR      r0,[sp,#0x14]
        0x00004d2a:    4041        A@      EORS     r1,r1,r0
        0x00004d2c:    7a70        pz      LDRB     r0,[r6,#9]
        0x00004d2e:    4048        H@      EORS     r0,r0,r1
        0x00004d30:    7260        `r      STRB     r0,[r4,#9]
        0x00004d32:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00004d34:    9811        ..      LDR      r0,[sp,#0x44]
        0x00004d36:    4041        A@      EORS     r1,r1,r0
        0x00004d38:    7ab0        .z      LDRB     r0,[r6,#0xa]
        0x00004d3a:    4048        H@      EORS     r0,r0,r1
        0x00004d3c:    72a0        .r      STRB     r0,[r4,#0xa]
        0x00004d3e:    990c        ..      LDR      r1,[sp,#0x30]
        0x00004d40:    9812        ..      LDR      r0,[sp,#0x48]
        0x00004d42:    4041        A@      EORS     r1,r1,r0
        0x00004d44:    7af0        .z      LDRB     r0,[r6,#0xb]
        0x00004d46:    4048        H@      EORS     r0,r0,r1
        0x00004d48:    72e0        .r      STRB     r0,[r4,#0xb]
        0x00004d4a:    990d        ..      LDR      r1,[sp,#0x34]
        0x00004d4c:    9813        ..      LDR      r0,[sp,#0x4c]
        0x00004d4e:    4041        A@      EORS     r1,r1,r0
        0x00004d50:    9820         .      LDR      r0,[sp,#0x80]
        0x00004d52:    4048        H@      EORS     r0,r0,r1
        0x00004d54:    7320         s      STRB     r0,[r4,#0xc]
        0x00004d56:    990e        ..      LDR      r1,[sp,#0x38]
        0x00004d58:    4069        i@      EORS     r1,r1,r5
        0x00004d5a:    7b70        p{      LDRB     r0,[r6,#0xd]
        0x00004d5c:    4048        H@      EORS     r0,r0,r1
        0x00004d5e:    7360        `s      STRB     r0,[r4,#0xd]
        0x00004d60:    990f        ..      LDR      r1,[sp,#0x3c]
        0x00004d62:    4059        Y@      EORS     r1,r1,r3
        0x00004d64:    7bb0        .{      LDRB     r0,[r6,#0xe]
        0x00004d66:    4048        H@      EORS     r0,r0,r1
        0x00004d68:    73a0        .s      STRB     r0,[r4,#0xe]
        0x00004d6a:    9910        ..      LDR      r1,[sp,#0x40]
        0x00004d6c:    4051        Q@      EORS     r1,r1,r2
        0x00004d6e:    7bf0        .{      LDRB     r0,[r6,#0xf]
        0x00004d70:    4048        H@      EORS     r0,r0,r1
        0x00004d72:    73e0        .s      STRB     r0,[r4,#0xf]
        0x00004d74:    ad18        ..      ADD      r5,sp,#0x60
;;;60     
;;;61     	RijndaelEncrypt(rijndaelInput, out1);
        0x00004d76:    4620         F      MOV      r0,r4
        0x00004d78:    4629        )F      MOV      r1,r5
        0x00004d7a:    f000fe47    ..G.    BL       RijndaelEncrypt ; 0x5a0c
;;;62     	for (i = 0; i < 16; i++)
;;;63     		out1[i] ^= op_c[i];
        0x00004d7e:    7838        8x      LDRB     r0,[r7,#0]
        0x00004d80:    9918        ..      LDR      r1,[sp,#0x60]
        0x00004d82:    4041        A@      EORS     r1,r1,r0
        0x00004d84:    7029        )p      STRB     r1,[r5,#0]
        0x00004d86:    7878        xx      LDRB     r0,[r7,#1]
        0x00004d88:    7869        ix      LDRB     r1,[r5,#1]
        0x00004d8a:    4041        A@      EORS     r1,r1,r0
        0x00004d8c:    7069        ip      STRB     r1,[r5,#1]
        0x00004d8e:    78b8        .x      LDRB     r0,[r7,#2]
        0x00004d90:    78a9        .x      LDRB     r1,[r5,#2]
        0x00004d92:    4041        A@      EORS     r1,r1,r0
        0x00004d94:    70a9        .p      STRB     r1,[r5,#2]
        0x00004d96:    78f8        .x      LDRB     r0,[r7,#3]
        0x00004d98:    78e9        .x      LDRB     r1,[r5,#3]
        0x00004d9a:    4041        A@      EORS     r1,r1,r0
        0x00004d9c:    70e9        .p      STRB     r1,[r5,#3]
        0x00004d9e:    7938        8y      LDRB     r0,[r7,#4]
        0x00004da0:    9919        ..      LDR      r1,[sp,#0x64]
        0x00004da2:    4041        A@      EORS     r1,r1,r0
        0x00004da4:    7129        )q      STRB     r1,[r5,#4]
        0x00004da6:    7978        xy      LDRB     r0,[r7,#5]
        0x00004da8:    7969        iy      LDRB     r1,[r5,#5]
        0x00004daa:    4041        A@      EORS     r1,r1,r0
        0x00004dac:    7169        iq      STRB     r1,[r5,#5]
        0x00004dae:    79b8        .y      LDRB     r0,[r7,#6]
        0x00004db0:    79a9        .y      LDRB     r1,[r5,#6]
        0x00004db2:    4041        A@      EORS     r1,r1,r0
        0x00004db4:    71a9        .q      STRB     r1,[r5,#6]
        0x00004db6:    79f8        .y      LDRB     r0,[r7,#7]
        0x00004db8:    79e9        .y      LDRB     r1,[r5,#7]
        0x00004dba:    4041        A@      EORS     r1,r1,r0
        0x00004dbc:    71e9        .q      STRB     r1,[r5,#7]
;;;64     	for (i = 0; i < 8; i++)
;;;65     		mac_a[i] = out1[i];
        0x00004dbe:    9818        ..      LDR      r0,[sp,#0x60]
        0x00004dc0:    9919        ..      LDR      r1,[sp,#0x64]
        0x00004dc2:    9a27        '.      LDR      r2,[sp,#0x9c]
        0x00004dc4:    7111        .q      STRB     r1,[r2,#4]
        0x00004dc6:    0e03        ..      LSRS     r3,r0,#24
        0x00004dc8:    70d3        .p      STRB     r3,[r2,#3]
        0x00004dca:    0c03        ..      LSRS     r3,r0,#16
        0x00004dcc:    7093        .p      STRB     r3,[r2,#2]
        0x00004dce:    0a03        ..      LSRS     r3,r0,#8
        0x00004dd0:    7053        Sp      STRB     r3,[r2,#1]
        0x00004dd2:    7010        .p      STRB     r0,[r2,#0]
        0x00004dd4:    0e08        ..      LSRS     r0,r1,#24
        0x00004dd6:    71d0        .q      STRB     r0,[r2,#7]
        0x00004dd8:    0c08        ..      LSRS     r0,r1,#16
        0x00004dda:    7190        .q      STRB     r0,[r2,#6]
        0x00004ddc:    0a08        ..      LSRS     r0,r1,#8
        0x00004dde:    7150        Pq      STRB     r0,[r2,#5]
;;;66     	return;
;;;67     } /* end of function f1 */
        0x00004de0:    b021        !.      ADD      sp,sp,#0x84
        0x00004de2:    bdf0        ..      POP      {r4-r7,pc}
    f2345
;;;68     
;;;69     /*-------------------------------------------------------------------
;;;70      * Algorithms f2-f5
;;;71      *-------------------------------------------------------------------
;;;72      *
;;;73      * Takes key K and random challenge RAND, and returns response RES,
;;;74      * confidentiality key CK, integrity key IK and anonymity key AK.
;;;75      *
;;;76      *-----------------------------------------------------------------*/
;;;77     void f2345(puMonoByte k, puMonoByte rand, puMonoByte op_c, puMonoByte res, puMonoByte ck, puMonoByte ik, puMonoByte ak)
;;;78     {
        0x00004de4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00004de6:    b08d        ..      SUB      sp,sp,#0x34
        0x00004de8:    9300        ..      STR      r3,[sp,#0]
        0x00004dea:    4614        .F      MOV      r4,r2
        0x00004dec:    460e        .F      MOV      r6,r1
;;;79     	
;;;80     	uMonoByte temp[16];
;;;81     	uMonoByte out[16];
;;;82     	uMonoByte rijndaelInput[16];
;;;83     	uMonoByte i;
;;;84     	RijndaelKeySchedule(k);
        0x00004dee:    f000fc01    ....    BL       RijndaelKeySchedule ; 0x55f4
;;;85     	for (i = 0; i < 16; i++)
;;;86     		rijndaelInput[i] = rand[i] ^ op_c[i];
        0x00004df2:    7830        0x      LDRB     r0,[r6,#0]
        0x00004df4:    7821        !x      LDRB     r1,[r4,#0]
        0x00004df6:    4041        A@      EORS     r1,r1,r0
        0x00004df8:    ad01        ..      ADD      r5,sp,#4
        0x00004dfa:    7029        )p      STRB     r1,[r5,#0]
        0x00004dfc:    7870        px      LDRB     r0,[r6,#1]
        0x00004dfe:    7861        ax      LDRB     r1,[r4,#1]
        0x00004e00:    4041        A@      EORS     r1,r1,r0
        0x00004e02:    7069        ip      STRB     r1,[r5,#1]
        0x00004e04:    78b0        .x      LDRB     r0,[r6,#2]
        0x00004e06:    78a1        .x      LDRB     r1,[r4,#2]
        0x00004e08:    4041        A@      EORS     r1,r1,r0
        0x00004e0a:    70a9        .p      STRB     r1,[r5,#2]
        0x00004e0c:    78f0        .x      LDRB     r0,[r6,#3]
        0x00004e0e:    78e1        .x      LDRB     r1,[r4,#3]
        0x00004e10:    4041        A@      EORS     r1,r1,r0
        0x00004e12:    70e9        .p      STRB     r1,[r5,#3]
        0x00004e14:    7930        0y      LDRB     r0,[r6,#4]
        0x00004e16:    7921        !y      LDRB     r1,[r4,#4]
        0x00004e18:    4041        A@      EORS     r1,r1,r0
        0x00004e1a:    7129        )q      STRB     r1,[r5,#4]
        0x00004e1c:    7970        py      LDRB     r0,[r6,#5]
        0x00004e1e:    7961        ay      LDRB     r1,[r4,#5]
        0x00004e20:    4041        A@      EORS     r1,r1,r0
        0x00004e22:    7169        iq      STRB     r1,[r5,#5]
        0x00004e24:    79b0        .y      LDRB     r0,[r6,#6]
        0x00004e26:    79a1        .y      LDRB     r1,[r4,#6]
        0x00004e28:    4041        A@      EORS     r1,r1,r0
        0x00004e2a:    71a9        .q      STRB     r1,[r5,#6]
        0x00004e2c:    79f0        .y      LDRB     r0,[r6,#7]
        0x00004e2e:    79e1        .y      LDRB     r1,[r4,#7]
        0x00004e30:    4041        A@      EORS     r1,r1,r0
        0x00004e32:    71e9        .q      STRB     r1,[r5,#7]
        0x00004e34:    7a30        0z      LDRB     r0,[r6,#8]
        0x00004e36:    7a21        !z      LDRB     r1,[r4,#8]
        0x00004e38:    4041        A@      EORS     r1,r1,r0
        0x00004e3a:    7229        )r      STRB     r1,[r5,#8]
        0x00004e3c:    7a70        pz      LDRB     r0,[r6,#9]
        0x00004e3e:    7a61        az      LDRB     r1,[r4,#9]
        0x00004e40:    4041        A@      EORS     r1,r1,r0
        0x00004e42:    7269        ir      STRB     r1,[r5,#9]
        0x00004e44:    7ab0        .z      LDRB     r0,[r6,#0xa]
        0x00004e46:    7aa1        .z      LDRB     r1,[r4,#0xa]
        0x00004e48:    4041        A@      EORS     r1,r1,r0
        0x00004e4a:    72a9        .r      STRB     r1,[r5,#0xa]
        0x00004e4c:    7af0        .z      LDRB     r0,[r6,#0xb]
        0x00004e4e:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x00004e50:    4041        A@      EORS     r1,r1,r0
        0x00004e52:    72e9        .r      STRB     r1,[r5,#0xb]
        0x00004e54:    7b30        0{      LDRB     r0,[r6,#0xc]
        0x00004e56:    7b21        !{      LDRB     r1,[r4,#0xc]
        0x00004e58:    4041        A@      EORS     r1,r1,r0
        0x00004e5a:    7329        )s      STRB     r1,[r5,#0xc]
        0x00004e5c:    7b70        p{      LDRB     r0,[r6,#0xd]
        0x00004e5e:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x00004e60:    4041        A@      EORS     r1,r1,r0
        0x00004e62:    7369        is      STRB     r1,[r5,#0xd]
        0x00004e64:    7bb0        .{      LDRB     r0,[r6,#0xe]
        0x00004e66:    7ba1        .{      LDRB     r1,[r4,#0xe]
        0x00004e68:    4041        A@      EORS     r1,r1,r0
        0x00004e6a:    73a9        .s      STRB     r1,[r5,#0xe]
        0x00004e6c:    7bf0        .{      LDRB     r0,[r6,#0xf]
        0x00004e6e:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x00004e70:    4041        A@      EORS     r1,r1,r0
        0x00004e72:    73e9        .s      STRB     r1,[r5,#0xf]
        0x00004e74:    af09        ..      ADD      r7,sp,#0x24
;;;87     	RijndaelEncrypt(rijndaelInput, temp);
        0x00004e76:    4628        (F      MOV      r0,r5
        0x00004e78:    4639        9F      MOV      r1,r7
        0x00004e7a:    f000fdc7    ....    BL       RijndaelEncrypt ; 0x5a0c
;;;88     	/* To obtain output block OUT2: XOR OPc and TEMP, *
;;;89     	* rotate by r2=0, and XOR on the constant c2 (which *
;;;90     	* is all zeroes except that the last bit is 1). */
;;;91     	for (i = 0; i < 16; i++)
;;;92     		rijndaelInput[i] = temp[i] ^ op_c[i];
        0x00004e7e:    7820         x      LDRB     r0,[r4,#0]
        0x00004e80:    9909        ..      LDR      r1,[sp,#0x24]
        0x00004e82:    4041        A@      EORS     r1,r1,r0
        0x00004e84:    7029        )p      STRB     r1,[r5,#0]
        0x00004e86:    7878        xx      LDRB     r0,[r7,#1]
        0x00004e88:    7861        ax      LDRB     r1,[r4,#1]
        0x00004e8a:    4041        A@      EORS     r1,r1,r0
        0x00004e8c:    7069        ip      STRB     r1,[r5,#1]
        0x00004e8e:    78b8        .x      LDRB     r0,[r7,#2]
        0x00004e90:    78a1        .x      LDRB     r1,[r4,#2]
        0x00004e92:    4041        A@      EORS     r1,r1,r0
        0x00004e94:    70a9        .p      STRB     r1,[r5,#2]
        0x00004e96:    78f8        .x      LDRB     r0,[r7,#3]
        0x00004e98:    78e1        .x      LDRB     r1,[r4,#3]
        0x00004e9a:    4041        A@      EORS     r1,r1,r0
        0x00004e9c:    70e9        .p      STRB     r1,[r5,#3]
        0x00004e9e:    7920         y      LDRB     r0,[r4,#4]
        0x00004ea0:    990a        ..      LDR      r1,[sp,#0x28]
        0x00004ea2:    4041        A@      EORS     r1,r1,r0
        0x00004ea4:    7129        )q      STRB     r1,[r5,#4]
        0x00004ea6:    7978        xy      LDRB     r0,[r7,#5]
        0x00004ea8:    7961        ay      LDRB     r1,[r4,#5]
        0x00004eaa:    4041        A@      EORS     r1,r1,r0
        0x00004eac:    7169        iq      STRB     r1,[r5,#5]
        0x00004eae:    79b8        .y      LDRB     r0,[r7,#6]
        0x00004eb0:    79a1        .y      LDRB     r1,[r4,#6]
        0x00004eb2:    4041        A@      EORS     r1,r1,r0
        0x00004eb4:    71a9        .q      STRB     r1,[r5,#6]
        0x00004eb6:    79f8        .y      LDRB     r0,[r7,#7]
        0x00004eb8:    79e1        .y      LDRB     r1,[r4,#7]
        0x00004eba:    4041        A@      EORS     r1,r1,r0
        0x00004ebc:    71e9        .q      STRB     r1,[r5,#7]
        0x00004ebe:    7a20         z      LDRB     r0,[r4,#8]
        0x00004ec0:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00004ec2:    4041        A@      EORS     r1,r1,r0
        0x00004ec4:    7229        )r      STRB     r1,[r5,#8]
        0x00004ec6:    7a78        xz      LDRB     r0,[r7,#9]
        0x00004ec8:    7a61        az      LDRB     r1,[r4,#9]
        0x00004eca:    4041        A@      EORS     r1,r1,r0
        0x00004ecc:    7269        ir      STRB     r1,[r5,#9]
        0x00004ece:    7ab8        .z      LDRB     r0,[r7,#0xa]
        0x00004ed0:    7aa1        .z      LDRB     r1,[r4,#0xa]
        0x00004ed2:    4041        A@      EORS     r1,r1,r0
        0x00004ed4:    72a9        .r      STRB     r1,[r5,#0xa]
        0x00004ed6:    7af8        .z      LDRB     r0,[r7,#0xb]
        0x00004ed8:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x00004eda:    4041        A@      EORS     r1,r1,r0
        0x00004edc:    72e9        .r      STRB     r1,[r5,#0xb]
        0x00004ede:    7b20         {      LDRB     r0,[r4,#0xc]
        0x00004ee0:    990c        ..      LDR      r1,[sp,#0x30]
        0x00004ee2:    4041        A@      EORS     r1,r1,r0
        0x00004ee4:    7329        )s      STRB     r1,[r5,#0xc]
        0x00004ee6:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x00004ee8:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x00004eea:    4041        A@      EORS     r1,r1,r0
        0x00004eec:    7369        is      STRB     r1,[r5,#0xd]
        0x00004eee:    7bb8        .{      LDRB     r0,[r7,#0xe]
        0x00004ef0:    7ba1        .{      LDRB     r1,[r4,#0xe]
        0x00004ef2:    4041        A@      EORS     r1,r1,r0
        0x00004ef4:    73a9        .s      STRB     r1,[r5,#0xe]
        0x00004ef6:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x00004ef8:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x00004efa:    4041        A@      EORS     r1,r1,r0
        0x00004efc:    2001        .       MOVS     r0,#1
;;;93     	rijndaelInput[15] ^= 1;
        0x00004efe:    4048        H@      EORS     r0,r0,r1
        0x00004f00:    73e8        .s      STRB     r0,[r5,#0xf]
        0x00004f02:    ae05        ..      ADD      r6,sp,#0x14
;;;94     	RijndaelEncrypt(rijndaelInput, out);
        0x00004f04:    4628        (F      MOV      r0,r5
        0x00004f06:    4631        1F      MOV      r1,r6
        0x00004f08:    f000fd80    ....    BL       RijndaelEncrypt ; 0x5a0c
;;;95     	for (i = 0; i < 16; i++)
;;;96     		out[i] ^= op_c[i];
        0x00004f0c:    7820         x      LDRB     r0,[r4,#0]
        0x00004f0e:    9905        ..      LDR      r1,[sp,#0x14]
        0x00004f10:    4041        A@      EORS     r1,r1,r0
        0x00004f12:    7031        1p      STRB     r1,[r6,#0]
        0x00004f14:    7860        `x      LDRB     r0,[r4,#1]
        0x00004f16:    7871        qx      LDRB     r1,[r6,#1]
        0x00004f18:    4041        A@      EORS     r1,r1,r0
        0x00004f1a:    7071        qp      STRB     r1,[r6,#1]
        0x00004f1c:    78a0        .x      LDRB     r0,[r4,#2]
        0x00004f1e:    78b1        .x      LDRB     r1,[r6,#2]
        0x00004f20:    4041        A@      EORS     r1,r1,r0
        0x00004f22:    70b1        .p      STRB     r1,[r6,#2]
        0x00004f24:    78e0        .x      LDRB     r0,[r4,#3]
        0x00004f26:    78f1        .x      LDRB     r1,[r6,#3]
        0x00004f28:    4041        A@      EORS     r1,r1,r0
        0x00004f2a:    70f1        .p      STRB     r1,[r6,#3]
        0x00004f2c:    7920         y      LDRB     r0,[r4,#4]
        0x00004f2e:    9906        ..      LDR      r1,[sp,#0x18]
        0x00004f30:    4041        A@      EORS     r1,r1,r0
        0x00004f32:    7131        1q      STRB     r1,[r6,#4]
        0x00004f34:    7960        `y      LDRB     r0,[r4,#5]
        0x00004f36:    7971        qy      LDRB     r1,[r6,#5]
        0x00004f38:    4041        A@      EORS     r1,r1,r0
        0x00004f3a:    7171        qq      STRB     r1,[r6,#5]
        0x00004f3c:    79a0        .y      LDRB     r0,[r4,#6]
        0x00004f3e:    79b1        .y      LDRB     r1,[r6,#6]
        0x00004f40:    4041        A@      EORS     r1,r1,r0
        0x00004f42:    71b1        .q      STRB     r1,[r6,#6]
        0x00004f44:    79e0        .y      LDRB     r0,[r4,#7]
        0x00004f46:    79f1        .y      LDRB     r1,[r6,#7]
        0x00004f48:    4041        A@      EORS     r1,r1,r0
        0x00004f4a:    71f1        .q      STRB     r1,[r6,#7]
        0x00004f4c:    7a20         z      LDRB     r0,[r4,#8]
        0x00004f4e:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00004f50:    4041        A@      EORS     r1,r1,r0
        0x00004f52:    7231        1r      STRB     r1,[r6,#8]
        0x00004f54:    7a60        `z      LDRB     r0,[r4,#9]
        0x00004f56:    7a71        qz      LDRB     r1,[r6,#9]
        0x00004f58:    4041        A@      EORS     r1,r1,r0
        0x00004f5a:    7271        qr      STRB     r1,[r6,#9]
        0x00004f5c:    7aa0        .z      LDRB     r0,[r4,#0xa]
        0x00004f5e:    7ab1        .z      LDRB     r1,[r6,#0xa]
        0x00004f60:    4041        A@      EORS     r1,r1,r0
        0x00004f62:    72b1        .r      STRB     r1,[r6,#0xa]
        0x00004f64:    7ae0        .z      LDRB     r0,[r4,#0xb]
        0x00004f66:    7af1        .z      LDRB     r1,[r6,#0xb]
        0x00004f68:    4041        A@      EORS     r1,r1,r0
        0x00004f6a:    72f1        .r      STRB     r1,[r6,#0xb]
        0x00004f6c:    7b20         {      LDRB     r0,[r4,#0xc]
        0x00004f6e:    9908        ..      LDR      r1,[sp,#0x20]
        0x00004f70:    4041        A@      EORS     r1,r1,r0
        0x00004f72:    7331        1s      STRB     r1,[r6,#0xc]
        0x00004f74:    7b60        `{      LDRB     r0,[r4,#0xd]
        0x00004f76:    7b71        q{      LDRB     r1,[r6,#0xd]
        0x00004f78:    4041        A@      EORS     r1,r1,r0
        0x00004f7a:    7371        qs      STRB     r1,[r6,#0xd]
        0x00004f7c:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x00004f7e:    7bb1        .{      LDRB     r1,[r6,#0xe]
        0x00004f80:    4041        A@      EORS     r1,r1,r0
        0x00004f82:    73b1        .s      STRB     r1,[r6,#0xe]
        0x00004f84:    7be0        .{      LDRB     r0,[r4,#0xf]
        0x00004f86:    7bf1        .{      LDRB     r1,[r6,#0xf]
        0x00004f88:    4041        A@      EORS     r1,r1,r0
        0x00004f8a:    73f1        .s      STRB     r1,[r6,#0xf]
;;;97     	for (i = 0; i < 8; i++)
;;;98     		res[i] = out[i + 8];
        0x00004f8c:    9807        ..      LDR      r0,[sp,#0x1c]
        0x00004f8e:    9908        ..      LDR      r1,[sp,#0x20]
        0x00004f90:    9b00        ..      LDR      r3,[sp,#0]
        0x00004f92:    7119        .q      STRB     r1,[r3,#4]
        0x00004f94:    0e02        ..      LSRS     r2,r0,#24
        0x00004f96:    70da        .p      STRB     r2,[r3,#3]
        0x00004f98:    0c02        ..      LSRS     r2,r0,#16
        0x00004f9a:    709a        .p      STRB     r2,[r3,#2]
        0x00004f9c:    0a02        ..      LSRS     r2,r0,#8
        0x00004f9e:    705a        Zp      STRB     r2,[r3,#1]
        0x00004fa0:    7018        .p      STRB     r0,[r3,#0]
        0x00004fa2:    0e08        ..      LSRS     r0,r1,#24
        0x00004fa4:    71d8        .q      STRB     r0,[r3,#7]
        0x00004fa6:    0c08        ..      LSRS     r0,r1,#16
        0x00004fa8:    7198        .q      STRB     r0,[r3,#6]
        0x00004faa:    0a08        ..      LSRS     r0,r1,#8
        0x00004fac:    7158        Xq      STRB     r0,[r3,#5]
        0x00004fae:    9814        ..      LDR      r0,[sp,#0x50]
        0x00004fb0:    2206        ."      MOVS     r2,#6
;;;99     	for (i = 0; i < 6; i++)
;;;100    		ak[i] = out[i];
        0x00004fb2:    4631        1F      MOV      r1,r6
        0x00004fb4:    f002fbda    ....    BL       __aeabi_memcpy ; 0x776c
;;;101    	/* To obtain output block OUT3: XOR OPc and TEMP, *
;;;102    	* rotate by r3=32, and XOR on the constant c3 (which *
;;;103    	* is all zeroes except that the next to last bit is 1). */
;;;104    	for (i = 0; i < 16; i++)
;;;105    		rijndaelInput[(i + 12) % 16] = temp[i] ^ op_c[i];
        0x00004fb8:    7820         x      LDRB     r0,[r4,#0]
        0x00004fba:    9909        ..      LDR      r1,[sp,#0x24]
        0x00004fbc:    4041        A@      EORS     r1,r1,r0
        0x00004fbe:    7329        )s      STRB     r1,[r5,#0xc]
        0x00004fc0:    7878        xx      LDRB     r0,[r7,#1]
        0x00004fc2:    7861        ax      LDRB     r1,[r4,#1]
        0x00004fc4:    4041        A@      EORS     r1,r1,r0
        0x00004fc6:    7369        is      STRB     r1,[r5,#0xd]
        0x00004fc8:    78b8        .x      LDRB     r0,[r7,#2]
        0x00004fca:    78a1        .x      LDRB     r1,[r4,#2]
        0x00004fcc:    4041        A@      EORS     r1,r1,r0
        0x00004fce:    73a9        .s      STRB     r1,[r5,#0xe]
        0x00004fd0:    7920         y      LDRB     r0,[r4,#4]
        0x00004fd2:    990a        ..      LDR      r1,[sp,#0x28]
        0x00004fd4:    4041        A@      EORS     r1,r1,r0
        0x00004fd6:    7029        )p      STRB     r1,[r5,#0]
        0x00004fd8:    7978        xy      LDRB     r0,[r7,#5]
        0x00004fda:    7961        ay      LDRB     r1,[r4,#5]
        0x00004fdc:    4041        A@      EORS     r1,r1,r0
        0x00004fde:    7069        ip      STRB     r1,[r5,#1]
        0x00004fe0:    78f9        .x      LDRB     r1,[r7,#3]
        0x00004fe2:    78e0        .x      LDRB     r0,[r4,#3]
        0x00004fe4:    79ba        .y      LDRB     r2,[r7,#6]
        0x00004fe6:    79a3        .y      LDRB     r3,[r4,#6]
        0x00004fe8:    4053        S@      EORS     r3,r3,r2
        0x00004fea:    70ab        .p      STRB     r3,[r5,#2]
        0x00004fec:    79fa        .y      LDRB     r2,[r7,#7]
        0x00004fee:    79e3        .y      LDRB     r3,[r4,#7]
        0x00004ff0:    4053        S@      EORS     r3,r3,r2
        0x00004ff2:    70eb        .p      STRB     r3,[r5,#3]
        0x00004ff4:    7a22        "z      LDRB     r2,[r4,#8]
        0x00004ff6:    9b0b        ..      LDR      r3,[sp,#0x2c]
        0x00004ff8:    4053        S@      EORS     r3,r3,r2
        0x00004ffa:    712b        +q      STRB     r3,[r5,#4]
        0x00004ffc:    7a7a        zz      LDRB     r2,[r7,#9]
        0x00004ffe:    7a63        cz      LDRB     r3,[r4,#9]
        0x00005000:    4053        S@      EORS     r3,r3,r2
        0x00005002:    716b        kq      STRB     r3,[r5,#5]
        0x00005004:    7aba        .z      LDRB     r2,[r7,#0xa]
        0x00005006:    7aa3        .z      LDRB     r3,[r4,#0xa]
        0x00005008:    4053        S@      EORS     r3,r3,r2
        0x0000500a:    71ab        .q      STRB     r3,[r5,#6]
        0x0000500c:    7afa        .z      LDRB     r2,[r7,#0xb]
        0x0000500e:    7ae3        .z      LDRB     r3,[r4,#0xb]
        0x00005010:    4053        S@      EORS     r3,r3,r2
        0x00005012:    71eb        .q      STRB     r3,[r5,#7]
        0x00005014:    4048        H@      EORS     r0,r0,r1
        0x00005016:    2102        .!      MOVS     r1,#2
        0x00005018:    4041        A@      EORS     r1,r1,r0
        0x0000501a:    73e9        .s      STRB     r1,[r5,#0xf]
        0x0000501c:    7b20         {      LDRB     r0,[r4,#0xc]
        0x0000501e:    990c        ..      LDR      r1,[sp,#0x30]
        0x00005020:    4041        A@      EORS     r1,r1,r0
        0x00005022:    7229        )r      STRB     r1,[r5,#8]
        0x00005024:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x00005026:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x00005028:    4041        A@      EORS     r1,r1,r0
        0x0000502a:    7269        ir      STRB     r1,[r5,#9]
        0x0000502c:    7bb8        .{      LDRB     r0,[r7,#0xe]
        0x0000502e:    7ba1        .{      LDRB     r1,[r4,#0xe]
        0x00005030:    4041        A@      EORS     r1,r1,r0
        0x00005032:    72a9        .r      STRB     r1,[r5,#0xa]
        0x00005034:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x00005036:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x00005038:    4041        A@      EORS     r1,r1,r0
        0x0000503a:    72e9        .r      STRB     r1,[r5,#0xb]
;;;106    	rijndaelInput[15] ^= 2;
;;;107    	RijndaelEncrypt(rijndaelInput, out);
        0x0000503c:    4628        (F      MOV      r0,r5
        0x0000503e:    4631        1F      MOV      r1,r6
        0x00005040:    f000fce4    ....    BL       RijndaelEncrypt ; 0x5a0c
;;;108    	for (i = 0; i < 16; i++)
;;;109    		out[i] ^= op_c[i];
        0x00005044:    7820         x      LDRB     r0,[r4,#0]
        0x00005046:    9905        ..      LDR      r1,[sp,#0x14]
        0x00005048:    4041        A@      EORS     r1,r1,r0
        0x0000504a:    7031        1p      STRB     r1,[r6,#0]
        0x0000504c:    7860        `x      LDRB     r0,[r4,#1]
        0x0000504e:    7871        qx      LDRB     r1,[r6,#1]
        0x00005050:    4041        A@      EORS     r1,r1,r0
        0x00005052:    7071        qp      STRB     r1,[r6,#1]
        0x00005054:    78a0        .x      LDRB     r0,[r4,#2]
        0x00005056:    78b1        .x      LDRB     r1,[r6,#2]
        0x00005058:    4041        A@      EORS     r1,r1,r0
        0x0000505a:    70b1        .p      STRB     r1,[r6,#2]
        0x0000505c:    78e0        .x      LDRB     r0,[r4,#3]
        0x0000505e:    78f1        .x      LDRB     r1,[r6,#3]
        0x00005060:    4041        A@      EORS     r1,r1,r0
        0x00005062:    70f1        .p      STRB     r1,[r6,#3]
        0x00005064:    7920         y      LDRB     r0,[r4,#4]
        0x00005066:    9906        ..      LDR      r1,[sp,#0x18]
        0x00005068:    4041        A@      EORS     r1,r1,r0
        0x0000506a:    7131        1q      STRB     r1,[r6,#4]
        0x0000506c:    7960        `y      LDRB     r0,[r4,#5]
        0x0000506e:    7971        qy      LDRB     r1,[r6,#5]
        0x00005070:    4041        A@      EORS     r1,r1,r0
        0x00005072:    7171        qq      STRB     r1,[r6,#5]
        0x00005074:    79a0        .y      LDRB     r0,[r4,#6]
        0x00005076:    79b1        .y      LDRB     r1,[r6,#6]
        0x00005078:    4041        A@      EORS     r1,r1,r0
        0x0000507a:    71b1        .q      STRB     r1,[r6,#6]
        0x0000507c:    79e0        .y      LDRB     r0,[r4,#7]
        0x0000507e:    79f1        .y      LDRB     r1,[r6,#7]
        0x00005080:    4041        A@      EORS     r1,r1,r0
        0x00005082:    71f1        .q      STRB     r1,[r6,#7]
        0x00005084:    7a20         z      LDRB     r0,[r4,#8]
        0x00005086:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00005088:    4041        A@      EORS     r1,r1,r0
        0x0000508a:    7231        1r      STRB     r1,[r6,#8]
        0x0000508c:    7a60        `z      LDRB     r0,[r4,#9]
        0x0000508e:    7a71        qz      LDRB     r1,[r6,#9]
        0x00005090:    4041        A@      EORS     r1,r1,r0
        0x00005092:    7271        qr      STRB     r1,[r6,#9]
        0x00005094:    7aa0        .z      LDRB     r0,[r4,#0xa]
        0x00005096:    7ab1        .z      LDRB     r1,[r6,#0xa]
        0x00005098:    4041        A@      EORS     r1,r1,r0
        0x0000509a:    72b1        .r      STRB     r1,[r6,#0xa]
        0x0000509c:    7ae0        .z      LDRB     r0,[r4,#0xb]
        0x0000509e:    7af1        .z      LDRB     r1,[r6,#0xb]
        0x000050a0:    4041        A@      EORS     r1,r1,r0
        0x000050a2:    72f1        .r      STRB     r1,[r6,#0xb]
        0x000050a4:    7b20         {      LDRB     r0,[r4,#0xc]
        0x000050a6:    9908        ..      LDR      r1,[sp,#0x20]
        0x000050a8:    4041        A@      EORS     r1,r1,r0
        0x000050aa:    7331        1s      STRB     r1,[r6,#0xc]
        0x000050ac:    7b60        `{      LDRB     r0,[r4,#0xd]
        0x000050ae:    7b71        q{      LDRB     r1,[r6,#0xd]
        0x000050b0:    4041        A@      EORS     r1,r1,r0
        0x000050b2:    7371        qs      STRB     r1,[r6,#0xd]
        0x000050b4:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x000050b6:    7bb1        .{      LDRB     r1,[r6,#0xe]
        0x000050b8:    4041        A@      EORS     r1,r1,r0
        0x000050ba:    73b1        .s      STRB     r1,[r6,#0xe]
        0x000050bc:    7be0        .{      LDRB     r0,[r4,#0xf]
        0x000050be:    7bf1        .{      LDRB     r1,[r6,#0xf]
        0x000050c0:    4041        A@      EORS     r1,r1,r0
        0x000050c2:    73f1        .s      STRB     r1,[r6,#0xf]
        0x000050c4:    9812        ..      LDR      r0,[sp,#0x48]
        0x000050c6:    2210        ."      MOVS     r2,#0x10
;;;110    	for (i = 0; i < 16; i++)
;;;111    		ck[i] = out[i];
        0x000050c8:    9200        ..      STR      r2,[sp,#0]
        0x000050ca:    4631        1F      MOV      r1,r6
        0x000050cc:    f002fb4e    ..N.    BL       __aeabi_memcpy ; 0x776c
;;;112    	/* To obtain output block OUT4: XOR OPc and TEMP, *
;;;113    	* rotate by r4=64, and XOR on the constant c4 (which *
;;;114    	* is all zeroes except that the 2nd from last bit is 1). */
;;;115    	for (i = 0; i < 16; i++)
;;;116    		rijndaelInput[(i + 8) % 16] = temp[i] ^ op_c[i];
        0x000050d0:    7820         x      LDRB     r0,[r4,#0]
        0x000050d2:    9909        ..      LDR      r1,[sp,#0x24]
        0x000050d4:    4041        A@      EORS     r1,r1,r0
        0x000050d6:    7229        )r      STRB     r1,[r5,#8]
        0x000050d8:    7878        xx      LDRB     r0,[r7,#1]
        0x000050da:    7861        ax      LDRB     r1,[r4,#1]
        0x000050dc:    4041        A@      EORS     r1,r1,r0
        0x000050de:    7269        ir      STRB     r1,[r5,#9]
        0x000050e0:    78b8        .x      LDRB     r0,[r7,#2]
        0x000050e2:    78a1        .x      LDRB     r1,[r4,#2]
        0x000050e4:    4041        A@      EORS     r1,r1,r0
        0x000050e6:    72a9        .r      STRB     r1,[r5,#0xa]
        0x000050e8:    78f8        .x      LDRB     r0,[r7,#3]
        0x000050ea:    78e1        .x      LDRB     r1,[r4,#3]
        0x000050ec:    4041        A@      EORS     r1,r1,r0
        0x000050ee:    72e9        .r      STRB     r1,[r5,#0xb]
        0x000050f0:    7920         y      LDRB     r0,[r4,#4]
        0x000050f2:    990a        ..      LDR      r1,[sp,#0x28]
        0x000050f4:    4041        A@      EORS     r1,r1,r0
        0x000050f6:    7329        )s      STRB     r1,[r5,#0xc]
        0x000050f8:    7978        xy      LDRB     r0,[r7,#5]
        0x000050fa:    7961        ay      LDRB     r1,[r4,#5]
        0x000050fc:    4041        A@      EORS     r1,r1,r0
        0x000050fe:    7369        is      STRB     r1,[r5,#0xd]
        0x00005100:    79b8        .y      LDRB     r0,[r7,#6]
        0x00005102:    79a1        .y      LDRB     r1,[r4,#6]
        0x00005104:    4041        A@      EORS     r1,r1,r0
        0x00005106:    73a9        .s      STRB     r1,[r5,#0xe]
        0x00005108:    7a20         z      LDRB     r0,[r4,#8]
        0x0000510a:    990b        ..      LDR      r1,[sp,#0x2c]
        0x0000510c:    4041        A@      EORS     r1,r1,r0
        0x0000510e:    7029        )p      STRB     r1,[r5,#0]
        0x00005110:    7a78        xz      LDRB     r0,[r7,#9]
        0x00005112:    7a61        az      LDRB     r1,[r4,#9]
        0x00005114:    4041        A@      EORS     r1,r1,r0
        0x00005116:    7069        ip      STRB     r1,[r5,#1]
        0x00005118:    7ab8        .z      LDRB     r0,[r7,#0xa]
        0x0000511a:    7aa1        .z      LDRB     r1,[r4,#0xa]
        0x0000511c:    4041        A@      EORS     r1,r1,r0
        0x0000511e:    70a9        .p      STRB     r1,[r5,#2]
        0x00005120:    7af8        .z      LDRB     r0,[r7,#0xb]
        0x00005122:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x00005124:    4041        A@      EORS     r1,r1,r0
        0x00005126:    70e9        .p      STRB     r1,[r5,#3]
        0x00005128:    79f8        .y      LDRB     r0,[r7,#7]
        0x0000512a:    79e1        .y      LDRB     r1,[r4,#7]
        0x0000512c:    4041        A@      EORS     r1,r1,r0
        0x0000512e:    2004        .       MOVS     r0,#4
        0x00005130:    4048        H@      EORS     r0,r0,r1
        0x00005132:    73e8        .s      STRB     r0,[r5,#0xf]
        0x00005134:    7b20         {      LDRB     r0,[r4,#0xc]
        0x00005136:    990c        ..      LDR      r1,[sp,#0x30]
        0x00005138:    4041        A@      EORS     r1,r1,r0
        0x0000513a:    7129        )q      STRB     r1,[r5,#4]
        0x0000513c:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x0000513e:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x00005140:    4041        A@      EORS     r1,r1,r0
        0x00005142:    7169        iq      STRB     r1,[r5,#5]
        0x00005144:    7bb8        .{      LDRB     r0,[r7,#0xe]
        0x00005146:    7ba1        .{      LDRB     r1,[r4,#0xe]
        0x00005148:    4041        A@      EORS     r1,r1,r0
        0x0000514a:    71a9        .q      STRB     r1,[r5,#6]
        0x0000514c:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x0000514e:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x00005150:    4041        A@      EORS     r1,r1,r0
        0x00005152:    71e9        .q      STRB     r1,[r5,#7]
;;;117    	rijndaelInput[15] ^= 4;
;;;118    	RijndaelEncrypt(rijndaelInput, out);
        0x00005154:    4628        (F      MOV      r0,r5
        0x00005156:    4631        1F      MOV      r1,r6
        0x00005158:    f000fc58    ..X.    BL       RijndaelEncrypt ; 0x5a0c
;;;119    	for (i = 0; i < 16; i++)
;;;120    		out[i] ^= op_c[i];
        0x0000515c:    7820         x      LDRB     r0,[r4,#0]
        0x0000515e:    9905        ..      LDR      r1,[sp,#0x14]
        0x00005160:    4041        A@      EORS     r1,r1,r0
        0x00005162:    7031        1p      STRB     r1,[r6,#0]
        0x00005164:    7860        `x      LDRB     r0,[r4,#1]
        0x00005166:    7871        qx      LDRB     r1,[r6,#1]
        0x00005168:    4041        A@      EORS     r1,r1,r0
        0x0000516a:    7071        qp      STRB     r1,[r6,#1]
        0x0000516c:    78a0        .x      LDRB     r0,[r4,#2]
        0x0000516e:    78b1        .x      LDRB     r1,[r6,#2]
        0x00005170:    4041        A@      EORS     r1,r1,r0
        0x00005172:    70b1        .p      STRB     r1,[r6,#2]
        0x00005174:    78e0        .x      LDRB     r0,[r4,#3]
        0x00005176:    78f1        .x      LDRB     r1,[r6,#3]
        0x00005178:    4041        A@      EORS     r1,r1,r0
        0x0000517a:    70f1        .p      STRB     r1,[r6,#3]
        0x0000517c:    7920         y      LDRB     r0,[r4,#4]
        0x0000517e:    9906        ..      LDR      r1,[sp,#0x18]
        0x00005180:    4041        A@      EORS     r1,r1,r0
        0x00005182:    7131        1q      STRB     r1,[r6,#4]
        0x00005184:    7960        `y      LDRB     r0,[r4,#5]
        0x00005186:    7971        qy      LDRB     r1,[r6,#5]
        0x00005188:    4041        A@      EORS     r1,r1,r0
        0x0000518a:    7171        qq      STRB     r1,[r6,#5]
        0x0000518c:    79a0        .y      LDRB     r0,[r4,#6]
        0x0000518e:    79b1        .y      LDRB     r1,[r6,#6]
        0x00005190:    4041        A@      EORS     r1,r1,r0
        0x00005192:    71b1        .q      STRB     r1,[r6,#6]
        0x00005194:    79e0        .y      LDRB     r0,[r4,#7]
        0x00005196:    79f1        .y      LDRB     r1,[r6,#7]
        0x00005198:    4041        A@      EORS     r1,r1,r0
        0x0000519a:    71f1        .q      STRB     r1,[r6,#7]
        0x0000519c:    7a20         z      LDRB     r0,[r4,#8]
        0x0000519e:    9907        ..      LDR      r1,[sp,#0x1c]
        0x000051a0:    4041        A@      EORS     r1,r1,r0
        0x000051a2:    7231        1r      STRB     r1,[r6,#8]
        0x000051a4:    7a60        `z      LDRB     r0,[r4,#9]
        0x000051a6:    7a71        qz      LDRB     r1,[r6,#9]
        0x000051a8:    4041        A@      EORS     r1,r1,r0
        0x000051aa:    7271        qr      STRB     r1,[r6,#9]
        0x000051ac:    7aa0        .z      LDRB     r0,[r4,#0xa]
        0x000051ae:    7ab1        .z      LDRB     r1,[r6,#0xa]
        0x000051b0:    4041        A@      EORS     r1,r1,r0
        0x000051b2:    72b1        .r      STRB     r1,[r6,#0xa]
        0x000051b4:    7ae0        .z      LDRB     r0,[r4,#0xb]
        0x000051b6:    7af1        .z      LDRB     r1,[r6,#0xb]
        0x000051b8:    4041        A@      EORS     r1,r1,r0
        0x000051ba:    72f1        .r      STRB     r1,[r6,#0xb]
        0x000051bc:    7b20         {      LDRB     r0,[r4,#0xc]
        0x000051be:    9908        ..      LDR      r1,[sp,#0x20]
        0x000051c0:    4041        A@      EORS     r1,r1,r0
        0x000051c2:    7331        1s      STRB     r1,[r6,#0xc]
        0x000051c4:    7b60        `{      LDRB     r0,[r4,#0xd]
        0x000051c6:    7b71        q{      LDRB     r1,[r6,#0xd]
        0x000051c8:    4041        A@      EORS     r1,r1,r0
        0x000051ca:    7371        qs      STRB     r1,[r6,#0xd]
        0x000051cc:    7ba0        .{      LDRB     r0,[r4,#0xe]
        0x000051ce:    7bb1        .{      LDRB     r1,[r6,#0xe]
        0x000051d0:    4041        A@      EORS     r1,r1,r0
        0x000051d2:    73b1        .s      STRB     r1,[r6,#0xe]
        0x000051d4:    7be0        .{      LDRB     r0,[r4,#0xf]
        0x000051d6:    7bf1        .{      LDRB     r1,[r6,#0xf]
        0x000051d8:    4041        A@      EORS     r1,r1,r0
        0x000051da:    73f1        .s      STRB     r1,[r6,#0xf]
        0x000051dc:    9813        ..      LDR      r0,[sp,#0x4c]
;;;121    	for (i = 0; i < 16; i++)
;;;122    		ik[i] = out[i];
        0x000051de:    4631        1F      MOV      r1,r6
        0x000051e0:    9a00        ..      LDR      r2,[sp,#0]
        0x000051e2:    f002fac3    ....    BL       __aeabi_memcpy ; 0x776c
;;;123    	return;
;;;124    } /* end of function f2345 */
        0x000051e6:    b00d        ..      ADD      sp,sp,#0x34
        0x000051e8:    bdf0        ..      POP      {r4-r7,pc}
    f1star
;;;125    
;;;126    /*-------------------------------------------------------------------
;;;127     * Algorithm f1*
;;;128     *-------------------------------------------------------------------
;;;129     *
;;;130     * Computes resynch authentication code MAC-S from key K, random
;;;131     * challenge RAND, sequence number SQN and authentication management
;;;132     * field AMF.
;;;133     *
;;;134     *-----------------------------------------------------------------*/
;;;135    void f1star(puMonoByte k, puMonoByte rand, puMonoByte sqn, puMonoByte amf, puMonoByte op_c, puMonoByte mac_s)
;;;136    {
        0x000051ea:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000051ec:    b0a1        ..      SUB      sp,sp,#0x84
        0x000051ee:    9314        ..      STR      r3,[sp,#0x50]
        0x000051f0:    4615        .F      MOV      r5,r2
        0x000051f2:    460e        .F      MOV      r6,r1
;;;137    	uMonoByte temp[16];
;;;138    	uMonoByte in1[16];
;;;139    	uMonoByte out1[16];
;;;140    	uMonoByte rijndaelInput[16];
;;;141    	uMonoByte i; 
;;;142    	RijndaelKeySchedule(k);
        0x000051f4:    f000f9fe    ....    BL       RijndaelKeySchedule ; 0x55f4
;;;143    	for (i = 0; i < 16; i++)
;;;144    		rijndaelInput[i] = rand[i] ^ op_c[i];
        0x000051f8:    7830        0x      LDRB     r0,[r6,#0]
        0x000051fa:    9f26        &.      LDR      r7,[sp,#0x98]
        0x000051fc:    7839        9x      LDRB     r1,[r7,#0]
        0x000051fe:    4041        A@      EORS     r1,r1,r0
        0x00005200:    ac15        ..      ADD      r4,sp,#0x54
        0x00005202:    7021        !p      STRB     r1,[r4,#0]
        0x00005204:    7870        px      LDRB     r0,[r6,#1]
        0x00005206:    7879        yx      LDRB     r1,[r7,#1]
        0x00005208:    4041        A@      EORS     r1,r1,r0
        0x0000520a:    7061        ap      STRB     r1,[r4,#1]
        0x0000520c:    78b0        .x      LDRB     r0,[r6,#2]
        0x0000520e:    78b9        .x      LDRB     r1,[r7,#2]
        0x00005210:    4041        A@      EORS     r1,r1,r0
        0x00005212:    70a1        .p      STRB     r1,[r4,#2]
        0x00005214:    78f0        .x      LDRB     r0,[r6,#3]
        0x00005216:    78f9        .x      LDRB     r1,[r7,#3]
        0x00005218:    4041        A@      EORS     r1,r1,r0
        0x0000521a:    70e1        .p      STRB     r1,[r4,#3]
        0x0000521c:    7930        0y      LDRB     r0,[r6,#4]
        0x0000521e:    7939        9y      LDRB     r1,[r7,#4]
        0x00005220:    4041        A@      EORS     r1,r1,r0
        0x00005222:    7121        !q      STRB     r1,[r4,#4]
        0x00005224:    7970        py      LDRB     r0,[r6,#5]
        0x00005226:    7979        yy      LDRB     r1,[r7,#5]
        0x00005228:    4041        A@      EORS     r1,r1,r0
        0x0000522a:    7161        aq      STRB     r1,[r4,#5]
        0x0000522c:    79b0        .y      LDRB     r0,[r6,#6]
        0x0000522e:    79b9        .y      LDRB     r1,[r7,#6]
        0x00005230:    4041        A@      EORS     r1,r1,r0
        0x00005232:    71a1        .q      STRB     r1,[r4,#6]
        0x00005234:    79f0        .y      LDRB     r0,[r6,#7]
        0x00005236:    79f9        .y      LDRB     r1,[r7,#7]
        0x00005238:    4041        A@      EORS     r1,r1,r0
        0x0000523a:    71e1        .q      STRB     r1,[r4,#7]
        0x0000523c:    7a30        0z      LDRB     r0,[r6,#8]
        0x0000523e:    7a39        9z      LDRB     r1,[r7,#8]
        0x00005240:    4041        A@      EORS     r1,r1,r0
        0x00005242:    7221        !r      STRB     r1,[r4,#8]
        0x00005244:    7a70        pz      LDRB     r0,[r6,#9]
        0x00005246:    7a79        yz      LDRB     r1,[r7,#9]
        0x00005248:    4041        A@      EORS     r1,r1,r0
        0x0000524a:    7261        ar      STRB     r1,[r4,#9]
        0x0000524c:    7ab0        .z      LDRB     r0,[r6,#0xa]
        0x0000524e:    7ab9        .z      LDRB     r1,[r7,#0xa]
        0x00005250:    4041        A@      EORS     r1,r1,r0
        0x00005252:    72a1        .r      STRB     r1,[r4,#0xa]
        0x00005254:    7af0        .z      LDRB     r0,[r6,#0xb]
        0x00005256:    7af9        .z      LDRB     r1,[r7,#0xb]
        0x00005258:    4041        A@      EORS     r1,r1,r0
        0x0000525a:    72e1        .r      STRB     r1,[r4,#0xb]
        0x0000525c:    7b30        0{      LDRB     r0,[r6,#0xc]
        0x0000525e:    7b39        9{      LDRB     r1,[r7,#0xc]
        0x00005260:    4041        A@      EORS     r1,r1,r0
        0x00005262:    7321        !s      STRB     r1,[r4,#0xc]
        0x00005264:    7b70        p{      LDRB     r0,[r6,#0xd]
        0x00005266:    7b79        y{      LDRB     r1,[r7,#0xd]
        0x00005268:    4041        A@      EORS     r1,r1,r0
        0x0000526a:    7361        as      STRB     r1,[r4,#0xd]
        0x0000526c:    7bb0        .{      LDRB     r0,[r6,#0xe]
        0x0000526e:    7bb9        .{      LDRB     r1,[r7,#0xe]
        0x00005270:    4041        A@      EORS     r1,r1,r0
        0x00005272:    73a1        .s      STRB     r1,[r4,#0xe]
        0x00005274:    7bf0        .{      LDRB     r0,[r6,#0xf]
        0x00005276:    7bf9        .{      LDRB     r1,[r7,#0xf]
        0x00005278:    4041        A@      EORS     r1,r1,r0
        0x0000527a:    73e1        .s      STRB     r1,[r4,#0xf]
        0x0000527c:    ae1d        ..      ADD      r6,sp,#0x74
;;;145    	RijndaelEncrypt(rijndaelInput, temp);
        0x0000527e:    4620         F      MOV      r0,r4
        0x00005280:    4631        1F      MOV      r1,r6
        0x00005282:    f000fbc3    ....    BL       RijndaelEncrypt ; 0x5a0c
;;;146    	for (i = 0; i < 6; i++)
;;;147    	{
;;;148    		in1[i] = sqn[i];
        0x00005286:    7829        )x      LDRB     r1,[r5,#0]
;;;149    		in1[i + 8] = sqn[i];
;;;150    	}
;;;151    	for (i = 0; i < 2; i++)
;;;152    	{
;;;153    		in1[i + 6] = amf[i];
;;;154    		in1[i + 14] = amf[i];
;;;155    	}
;;;156    	/* XOR op_c and in1, rotate by r1=64, and XOR *
;;;157    	* on the constant c1 (which is all zeroes) */
;;;158    	for (i = 0; i < 16; i++)
;;;159    		rijndaelInput[(i + 8) % 16] = in1[i] ^ op_c[i];
        0x00005288:    910b        ..      STR      r1,[sp,#0x2c]
        0x0000528a:    7a38        8z      LDRB     r0,[r7,#8]
        0x0000528c:    4048        H@      EORS     r0,r0,r1
        0x0000528e:    9b1d        ..      LDR      r3,[sp,#0x74]
        0x00005290:    4043        C@      EORS     r3,r3,r0
        0x00005292:    79f8        .y      LDRB     r0,[r7,#7]
        0x00005294:    9011        ..      STR      r0,[sp,#0x44]
        0x00005296:    79b8        .y      LDRB     r0,[r7,#6]
        0x00005298:    9010        ..      STR      r0,[sp,#0x40]
        0x0000529a:    7978        xy      LDRB     r0,[r7,#5]
        0x0000529c:    900f        ..      STR      r0,[sp,#0x3c]
        0x0000529e:    7938        8y      LDRB     r0,[r7,#4]
        0x000052a0:    900e        ..      STR      r0,[sp,#0x38]
        0x000052a2:    78f8        .x      LDRB     r0,[r7,#3]
        0x000052a4:    900d        ..      STR      r0,[sp,#0x34]
        0x000052a6:    78b8        .x      LDRB     r0,[r7,#2]
        0x000052a8:    900c        ..      STR      r0,[sp,#0x30]
        0x000052aa:    7878        xx      LDRB     r0,[r7,#1]
        0x000052ac:    900a        ..      STR      r0,[sp,#0x28]
        0x000052ae:    7838        8x      LDRB     r0,[r7,#0]
        0x000052b0:    9009        ..      STR      r0,[sp,#0x24]
        0x000052b2:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x000052b4:    9008        ..      STR      r0,[sp,#0x20]
        0x000052b6:    9814        ..      LDR      r0,[sp,#0x50]
        0x000052b8:    7841        Ax      LDRB     r1,[r0,#1]
        0x000052ba:    9107        ..      STR      r1,[sp,#0x1c]
        0x000052bc:    7bb9        .{      LDRB     r1,[r7,#0xe]
        0x000052be:    9105        ..      STR      r1,[sp,#0x14]
        0x000052c0:    7800        .x      LDRB     r0,[r0,#0]
        0x000052c2:    9004        ..      STR      r0,[sp,#0x10]
        0x000052c4:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x000052c6:    9003        ..      STR      r0,[sp,#0xc]
        0x000052c8:    4628        (F      MOV      r0,r5
        0x000052ca:    7969        iy      LDRB     r1,[r5,#5]
        0x000052cc:    9102        ..      STR      r1,[sp,#8]
        0x000052ce:    7b39        9{      LDRB     r1,[r7,#0xc]
        0x000052d0:    9101        ..      STR      r1,[sp,#4]
        0x000052d2:    7929        )y      LDRB     r1,[r5,#4]
        0x000052d4:    9114        ..      STR      r1,[sp,#0x50]
        0x000052d6:    7afd        .z      LDRB     r5,[r7,#0xb]
        0x000052d8:    78c1        .x      LDRB     r1,[r0,#3]
        0x000052da:    9113        ..      STR      r1,[sp,#0x4c]
        0x000052dc:    7aba        .z      LDRB     r2,[r7,#0xa]
        0x000052de:    7881        .x      LDRB     r1,[r0,#2]
        0x000052e0:    9112        ..      STR      r1,[sp,#0x48]
        0x000052e2:    4601        .F      MOV      r1,r0
        0x000052e4:    7a78        xz      LDRB     r0,[r7,#9]
        0x000052e6:    7849        Ix      LDRB     r1,[r1,#1]
        0x000052e8:    9106        ..      STR      r1,[sp,#0x18]
        0x000052ea:    7023        #p      STRB     r3,[r4,#0]
        0x000052ec:    4048        H@      EORS     r0,r0,r1
        0x000052ee:    7873        sx      LDRB     r3,[r6,#1]
        0x000052f0:    4043        C@      EORS     r3,r3,r0
        0x000052f2:    7063        cp      STRB     r3,[r4,#1]
        0x000052f4:    9812        ..      LDR      r0,[sp,#0x48]
        0x000052f6:    4042        B@      EORS     r2,r2,r0
        0x000052f8:    78b0        .x      LDRB     r0,[r6,#2]
        0x000052fa:    4050        P@      EORS     r0,r0,r2
        0x000052fc:    70a0        .p      STRB     r0,[r4,#2]
        0x000052fe:    9813        ..      LDR      r0,[sp,#0x4c]
        0x00005300:    4045        E@      EORS     r5,r5,r0
        0x00005302:    78f0        .x      LDRB     r0,[r6,#3]
        0x00005304:    4068        h@      EORS     r0,r0,r5
        0x00005306:    70e0        .p      STRB     r0,[r4,#3]
        0x00005308:    9814        ..      LDR      r0,[sp,#0x50]
        0x0000530a:    9901        ..      LDR      r1,[sp,#4]
        0x0000530c:    4041        A@      EORS     r1,r1,r0
;;;160    	/* XOR on the value temp computed before */
;;;161    	for (i = 0; i < 16; i++)
;;;162    		rijndaelInput[i] ^= temp[i];
        0x0000530e:    981e        ..      LDR      r0,[sp,#0x78]
        0x00005310:    4048        H@      EORS     r0,r0,r1
        0x00005312:    7120         q      STRB     r0,[r4,#4]
        0x00005314:    9d02        ..      LDR      r5,[sp,#8]
        0x00005316:    9903        ..      LDR      r1,[sp,#0xc]
        0x00005318:    4069        i@      EORS     r1,r1,r5
        0x0000531a:    7970        py      LDRB     r0,[r6,#5]
        0x0000531c:    4048        H@      EORS     r0,r0,r1
        0x0000531e:    7160        `q      STRB     r0,[r4,#5]
        0x00005320:    9b04        ..      LDR      r3,[sp,#0x10]
        0x00005322:    9905        ..      LDR      r1,[sp,#0x14]
        0x00005324:    4059        Y@      EORS     r1,r1,r3
        0x00005326:    79b0        .y      LDRB     r0,[r6,#6]
        0x00005328:    4048        H@      EORS     r0,r0,r1
        0x0000532a:    71a0        .q      STRB     r0,[r4,#6]
        0x0000532c:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x0000532e:    9908        ..      LDR      r1,[sp,#0x20]
        0x00005330:    4051        Q@      EORS     r1,r1,r2
        0x00005332:    79f0        .y      LDRB     r0,[r6,#7]
        0x00005334:    4048        H@      EORS     r0,r0,r1
        0x00005336:    71e0        .q      STRB     r0,[r4,#7]
        0x00005338:    980b        ..      LDR      r0,[sp,#0x2c]
        0x0000533a:    9909        ..      LDR      r1,[sp,#0x24]
        0x0000533c:    4041        A@      EORS     r1,r1,r0
        0x0000533e:    981f        ..      LDR      r0,[sp,#0x7c]
        0x00005340:    4048        H@      EORS     r0,r0,r1
        0x00005342:    7220         r      STRB     r0,[r4,#8]
        0x00005344:    990a        ..      LDR      r1,[sp,#0x28]
        0x00005346:    9806        ..      LDR      r0,[sp,#0x18]
        0x00005348:    4041        A@      EORS     r1,r1,r0
        0x0000534a:    7a70        pz      LDRB     r0,[r6,#9]
        0x0000534c:    4048        H@      EORS     r0,r0,r1
        0x0000534e:    7260        `r      STRB     r0,[r4,#9]
        0x00005350:    990c        ..      LDR      r1,[sp,#0x30]
        0x00005352:    9812        ..      LDR      r0,[sp,#0x48]
        0x00005354:    4041        A@      EORS     r1,r1,r0
        0x00005356:    7ab0        .z      LDRB     r0,[r6,#0xa]
        0x00005358:    4048        H@      EORS     r0,r0,r1
        0x0000535a:    72a0        .r      STRB     r0,[r4,#0xa]
        0x0000535c:    990d        ..      LDR      r1,[sp,#0x34]
        0x0000535e:    9813        ..      LDR      r0,[sp,#0x4c]
        0x00005360:    4041        A@      EORS     r1,r1,r0
        0x00005362:    7af0        .z      LDRB     r0,[r6,#0xb]
        0x00005364:    4048        H@      EORS     r0,r0,r1
        0x00005366:    72e0        .r      STRB     r0,[r4,#0xb]
        0x00005368:    990e        ..      LDR      r1,[sp,#0x38]
        0x0000536a:    9814        ..      LDR      r0,[sp,#0x50]
        0x0000536c:    4041        A@      EORS     r1,r1,r0
        0x0000536e:    9820         .      LDR      r0,[sp,#0x80]
        0x00005370:    4048        H@      EORS     r0,r0,r1
        0x00005372:    7320         s      STRB     r0,[r4,#0xc]
        0x00005374:    990f        ..      LDR      r1,[sp,#0x3c]
        0x00005376:    4069        i@      EORS     r1,r1,r5
        0x00005378:    7b70        p{      LDRB     r0,[r6,#0xd]
        0x0000537a:    4048        H@      EORS     r0,r0,r1
        0x0000537c:    7360        `s      STRB     r0,[r4,#0xd]
        0x0000537e:    9910        ..      LDR      r1,[sp,#0x40]
        0x00005380:    4059        Y@      EORS     r1,r1,r3
        0x00005382:    7bb0        .{      LDRB     r0,[r6,#0xe]
        0x00005384:    4048        H@      EORS     r0,r0,r1
        0x00005386:    73a0        .s      STRB     r0,[r4,#0xe]
        0x00005388:    9911        ..      LDR      r1,[sp,#0x44]
        0x0000538a:    4051        Q@      EORS     r1,r1,r2
        0x0000538c:    7bf0        .{      LDRB     r0,[r6,#0xf]
        0x0000538e:    4048        H@      EORS     r0,r0,r1
        0x00005390:    73e0        .s      STRB     r0,[r4,#0xf]
        0x00005392:    ad19        ..      ADD      r5,sp,#0x64
;;;163    
;;;164    	RijndaelEncrypt(rijndaelInput, out1);
        0x00005394:    4620         F      MOV      r0,r4
        0x00005396:    4629        )F      MOV      r1,r5
        0x00005398:    f000fb38    ..8.    BL       RijndaelEncrypt ; 0x5a0c
;;;165    	for (i = 0; i < 16; i++)
;;;166    		out1[i] ^= op_c[i];
        0x0000539c:    7a38        8z      LDRB     r0,[r7,#8]
        0x0000539e:    991b        ..      LDR      r1,[sp,#0x6c]
        0x000053a0:    4041        A@      EORS     r1,r1,r0
        0x000053a2:    7229        )r      STRB     r1,[r5,#8]
        0x000053a4:    7a78        xz      LDRB     r0,[r7,#9]
        0x000053a6:    7a69        iz      LDRB     r1,[r5,#9]
        0x000053a8:    4041        A@      EORS     r1,r1,r0
        0x000053aa:    7269        ir      STRB     r1,[r5,#9]
        0x000053ac:    7ab8        .z      LDRB     r0,[r7,#0xa]
        0x000053ae:    7aa9        .z      LDRB     r1,[r5,#0xa]
        0x000053b0:    4041        A@      EORS     r1,r1,r0
        0x000053b2:    72a9        .r      STRB     r1,[r5,#0xa]
        0x000053b4:    7af8        .z      LDRB     r0,[r7,#0xb]
        0x000053b6:    7ae9        .z      LDRB     r1,[r5,#0xb]
        0x000053b8:    4041        A@      EORS     r1,r1,r0
        0x000053ba:    72e9        .r      STRB     r1,[r5,#0xb]
        0x000053bc:    7b38        8{      LDRB     r0,[r7,#0xc]
        0x000053be:    991c        ..      LDR      r1,[sp,#0x70]
        0x000053c0:    4041        A@      EORS     r1,r1,r0
        0x000053c2:    7329        )s      STRB     r1,[r5,#0xc]
        0x000053c4:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x000053c6:    7b69        i{      LDRB     r1,[r5,#0xd]
        0x000053c8:    4041        A@      EORS     r1,r1,r0
        0x000053ca:    7369        is      STRB     r1,[r5,#0xd]
        0x000053cc:    7bb8        .{      LDRB     r0,[r7,#0xe]
        0x000053ce:    7ba9        .{      LDRB     r1,[r5,#0xe]
        0x000053d0:    4041        A@      EORS     r1,r1,r0
        0x000053d2:    73a9        .s      STRB     r1,[r5,#0xe]
        0x000053d4:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x000053d6:    7bea        .{      LDRB     r2,[r5,#0xf]
        0x000053d8:    4042        B@      EORS     r2,r2,r0
        0x000053da:    73ea        .s      STRB     r2,[r5,#0xf]
;;;167    	for (i = 0; i < 8; i++)
;;;168    		mac_s[i] = out1[i + 8];
        0x000053dc:    7a28        (z      LDRB     r0,[r5,#8]
        0x000053de:    9014        ..      STR      r0,[sp,#0x50]
        0x000053e0:    7a6b        kz      LDRB     r3,[r5,#9]
        0x000053e2:    7aac        .z      LDRB     r4,[r5,#0xa]
        0x000053e4:    7aee        .z      LDRB     r6,[r5,#0xb]
        0x000053e6:    7b2f        /{      LDRB     r7,[r5,#0xc]
        0x000053e8:    7b6d        m{      LDRB     r5,[r5,#0xd]
        0x000053ea:    9827        '.      LDR      r0,[sp,#0x9c]
        0x000053ec:    71c2        .q      STRB     r2,[r0,#7]
        0x000053ee:    7181        .q      STRB     r1,[r0,#6]
        0x000053f0:    7145        Eq      STRB     r5,[r0,#5]
        0x000053f2:    7107        .q      STRB     r7,[r0,#4]
        0x000053f4:    70c6        .p      STRB     r6,[r0,#3]
        0x000053f6:    7084        .p      STRB     r4,[r0,#2]
        0x000053f8:    7043        Cp      STRB     r3,[r0,#1]
        0x000053fa:    9914        ..      LDR      r1,[sp,#0x50]
        0x000053fc:    7001        .p      STRB     r1,[r0,#0]
;;;169    	return;
;;;170    } /* end of function f1star */
        0x000053fe:    b021        !.      ADD      sp,sp,#0x84
        0x00005400:    bdf0        ..      POP      {r4-r7,pc}
    f5star
;;;171    
;;;172    /*-------------------------------------------------------------------
;;;173     * Algorithm f5*
;;;174     *-------------------------------------------------------------------
;;;175     *
;;;176     * Takes key K and random challenge RAND, and returns resynch
;;;177     * anonymity key AK.
;;;178     *
;;;179     *-----------------------------------------------------------------*/
;;;180    void f5star(puMonoByte k, puMonoByte rand, puMonoByte op_c, puMonoByte ak)
;;;181    {
        0x00005402:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00005404:    b08d        ..      SUB      sp,sp,#0x34
        0x00005406:    461c        .F      MOV      r4,r3
        0x00005408:    4615        .F      MOV      r5,r2
        0x0000540a:    460f        .F      MOV      r7,r1
;;;182    	
;;;183    	uMonoByte temp[16];
;;;184    	uMonoByte out[16];
;;;185    	uMonoByte rijndaelInput[16];
;;;186    	uMonoByte i;
;;;187    	RijndaelKeySchedule(k);
        0x0000540c:    f000f8f2    ....    BL       RijndaelKeySchedule ; 0x55f4
;;;188    	for (i = 0; i < 16; i++)
;;;189    		rijndaelInput[i] = rand[i] ^ op_c[i];
        0x00005410:    7838        8x      LDRB     r0,[r7,#0]
        0x00005412:    7829        )x      LDRB     r1,[r5,#0]
        0x00005414:    4041        A@      EORS     r1,r1,r0
        0x00005416:    ae01        ..      ADD      r6,sp,#4
        0x00005418:    7031        1p      STRB     r1,[r6,#0]
        0x0000541a:    7878        xx      LDRB     r0,[r7,#1]
        0x0000541c:    7869        ix      LDRB     r1,[r5,#1]
        0x0000541e:    4041        A@      EORS     r1,r1,r0
        0x00005420:    7071        qp      STRB     r1,[r6,#1]
        0x00005422:    78b8        .x      LDRB     r0,[r7,#2]
        0x00005424:    78a9        .x      LDRB     r1,[r5,#2]
        0x00005426:    4041        A@      EORS     r1,r1,r0
        0x00005428:    70b1        .p      STRB     r1,[r6,#2]
        0x0000542a:    78f8        .x      LDRB     r0,[r7,#3]
        0x0000542c:    78e9        .x      LDRB     r1,[r5,#3]
        0x0000542e:    4041        A@      EORS     r1,r1,r0
        0x00005430:    70f1        .p      STRB     r1,[r6,#3]
        0x00005432:    7938        8y      LDRB     r0,[r7,#4]
        0x00005434:    7929        )y      LDRB     r1,[r5,#4]
        0x00005436:    4041        A@      EORS     r1,r1,r0
        0x00005438:    7131        1q      STRB     r1,[r6,#4]
        0x0000543a:    7978        xy      LDRB     r0,[r7,#5]
        0x0000543c:    7969        iy      LDRB     r1,[r5,#5]
        0x0000543e:    4041        A@      EORS     r1,r1,r0
        0x00005440:    7171        qq      STRB     r1,[r6,#5]
        0x00005442:    79b8        .y      LDRB     r0,[r7,#6]
        0x00005444:    79a9        .y      LDRB     r1,[r5,#6]
        0x00005446:    4041        A@      EORS     r1,r1,r0
        0x00005448:    71b1        .q      STRB     r1,[r6,#6]
        0x0000544a:    79f8        .y      LDRB     r0,[r7,#7]
        0x0000544c:    79e9        .y      LDRB     r1,[r5,#7]
        0x0000544e:    4041        A@      EORS     r1,r1,r0
        0x00005450:    71f1        .q      STRB     r1,[r6,#7]
        0x00005452:    7a38        8z      LDRB     r0,[r7,#8]
        0x00005454:    7a29        )z      LDRB     r1,[r5,#8]
        0x00005456:    4041        A@      EORS     r1,r1,r0
        0x00005458:    7231        1r      STRB     r1,[r6,#8]
        0x0000545a:    7a78        xz      LDRB     r0,[r7,#9]
        0x0000545c:    7a69        iz      LDRB     r1,[r5,#9]
        0x0000545e:    4041        A@      EORS     r1,r1,r0
        0x00005460:    7271        qr      STRB     r1,[r6,#9]
        0x00005462:    7ab8        .z      LDRB     r0,[r7,#0xa]
        0x00005464:    7aa9        .z      LDRB     r1,[r5,#0xa]
        0x00005466:    4041        A@      EORS     r1,r1,r0
        0x00005468:    72b1        .r      STRB     r1,[r6,#0xa]
        0x0000546a:    7af8        .z      LDRB     r0,[r7,#0xb]
        0x0000546c:    7ae9        .z      LDRB     r1,[r5,#0xb]
        0x0000546e:    4041        A@      EORS     r1,r1,r0
        0x00005470:    72f1        .r      STRB     r1,[r6,#0xb]
        0x00005472:    7b38        8{      LDRB     r0,[r7,#0xc]
        0x00005474:    7b29        ){      LDRB     r1,[r5,#0xc]
        0x00005476:    4041        A@      EORS     r1,r1,r0
        0x00005478:    7331        1s      STRB     r1,[r6,#0xc]
        0x0000547a:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x0000547c:    7b69        i{      LDRB     r1,[r5,#0xd]
        0x0000547e:    4041        A@      EORS     r1,r1,r0
        0x00005480:    7371        qs      STRB     r1,[r6,#0xd]
        0x00005482:    7bb8        .{      LDRB     r0,[r7,#0xe]
        0x00005484:    7ba9        .{      LDRB     r1,[r5,#0xe]
        0x00005486:    4041        A@      EORS     r1,r1,r0
        0x00005488:    73b1        .s      STRB     r1,[r6,#0xe]
        0x0000548a:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x0000548c:    7be9        .{      LDRB     r1,[r5,#0xf]
        0x0000548e:    4041        A@      EORS     r1,r1,r0
        0x00005490:    73f1        .s      STRB     r1,[r6,#0xf]
        0x00005492:    af09        ..      ADD      r7,sp,#0x24
;;;190    	RijndaelEncrypt(rijndaelInput, temp);
        0x00005494:    4630        0F      MOV      r0,r6
        0x00005496:    4639        9F      MOV      r1,r7
        0x00005498:    f000fab8    ....    BL       RijndaelEncrypt ; 0x5a0c
;;;191    	/* To obtain output block OUT5: XOR OPc and TEMP, *
;;;192    	* rotate by r5=96, and XOR on the constant c5 (which *
;;;193    	* is all zeroes except that the 3rd from last bit is 1). */
;;;194    	for (i = 0; i < 16; i++)
;;;195    		rijndaelInput[(i + 4) % 16] = temp[i] ^ op_c[i];
        0x0000549c:    7828        (x      LDRB     r0,[r5,#0]
        0x0000549e:    9909        ..      LDR      r1,[sp,#0x24]
        0x000054a0:    4041        A@      EORS     r1,r1,r0
        0x000054a2:    7131        1q      STRB     r1,[r6,#4]
        0x000054a4:    7878        xx      LDRB     r0,[r7,#1]
        0x000054a6:    7869        ix      LDRB     r1,[r5,#1]
        0x000054a8:    4041        A@      EORS     r1,r1,r0
        0x000054aa:    7171        qq      STRB     r1,[r6,#5]
        0x000054ac:    78b8        .x      LDRB     r0,[r7,#2]
        0x000054ae:    78a9        .x      LDRB     r1,[r5,#2]
        0x000054b0:    4041        A@      EORS     r1,r1,r0
        0x000054b2:    71b1        .q      STRB     r1,[r6,#6]
        0x000054b4:    78f8        .x      LDRB     r0,[r7,#3]
        0x000054b6:    78e9        .x      LDRB     r1,[r5,#3]
        0x000054b8:    4041        A@      EORS     r1,r1,r0
        0x000054ba:    71f1        .q      STRB     r1,[r6,#7]
        0x000054bc:    7928        (y      LDRB     r0,[r5,#4]
        0x000054be:    990a        ..      LDR      r1,[sp,#0x28]
        0x000054c0:    4041        A@      EORS     r1,r1,r0
        0x000054c2:    7231        1r      STRB     r1,[r6,#8]
        0x000054c4:    7978        xy      LDRB     r0,[r7,#5]
        0x000054c6:    7969        iy      LDRB     r1,[r5,#5]
        0x000054c8:    4041        A@      EORS     r1,r1,r0
        0x000054ca:    7271        qr      STRB     r1,[r6,#9]
        0x000054cc:    79b8        .y      LDRB     r0,[r7,#6]
        0x000054ce:    79a9        .y      LDRB     r1,[r5,#6]
        0x000054d0:    4041        A@      EORS     r1,r1,r0
        0x000054d2:    72b1        .r      STRB     r1,[r6,#0xa]
        0x000054d4:    79f8        .y      LDRB     r0,[r7,#7]
        0x000054d6:    79e9        .y      LDRB     r1,[r5,#7]
        0x000054d8:    4041        A@      EORS     r1,r1,r0
        0x000054da:    72f1        .r      STRB     r1,[r6,#0xb]
        0x000054dc:    7a28        (z      LDRB     r0,[r5,#8]
        0x000054de:    990b        ..      LDR      r1,[sp,#0x2c]
        0x000054e0:    4041        A@      EORS     r1,r1,r0
        0x000054e2:    7331        1s      STRB     r1,[r6,#0xc]
        0x000054e4:    7a78        xz      LDRB     r0,[r7,#9]
        0x000054e6:    7a69        iz      LDRB     r1,[r5,#9]
        0x000054e8:    4041        A@      EORS     r1,r1,r0
        0x000054ea:    7371        qs      STRB     r1,[r6,#0xd]
        0x000054ec:    7ab8        .z      LDRB     r0,[r7,#0xa]
        0x000054ee:    7aa9        .z      LDRB     r1,[r5,#0xa]
        0x000054f0:    4041        A@      EORS     r1,r1,r0
        0x000054f2:    73b1        .s      STRB     r1,[r6,#0xe]
        0x000054f4:    7b28        ({      LDRB     r0,[r5,#0xc]
        0x000054f6:    990c        ..      LDR      r1,[sp,#0x30]
        0x000054f8:    4041        A@      EORS     r1,r1,r0
        0x000054fa:    7ae8        .z      LDRB     r0,[r5,#0xb]
        0x000054fc:    7afa        .z      LDRB     r2,[r7,#0xb]
        0x000054fe:    7031        1p      STRB     r1,[r6,#0]
        0x00005500:    4042        B@      EORS     r2,r2,r0
        0x00005502:    2008        .       MOVS     r0,#8
        0x00005504:    4050        P@      EORS     r0,r0,r2
        0x00005506:    73f0        .s      STRB     r0,[r6,#0xf]
        0x00005508:    7b78        x{      LDRB     r0,[r7,#0xd]
        0x0000550a:    7b69        i{      LDRB     r1,[r5,#0xd]
        0x0000550c:    4041        A@      EORS     r1,r1,r0
        0x0000550e:    7071        qp      STRB     r1,[r6,#1]
        0x00005510:    7bb8        .{      LDRB     r0,[r7,#0xe]
        0x00005512:    7ba9        .{      LDRB     r1,[r5,#0xe]
        0x00005514:    4041        A@      EORS     r1,r1,r0
        0x00005516:    70b1        .p      STRB     r1,[r6,#2]
        0x00005518:    7bf8        .{      LDRB     r0,[r7,#0xf]
        0x0000551a:    7be9        .{      LDRB     r1,[r5,#0xf]
        0x0000551c:    4041        A@      EORS     r1,r1,r0
        0x0000551e:    70f1        .p      STRB     r1,[r6,#3]
        0x00005520:    af05        ..      ADD      r7,sp,#0x14
;;;196    	rijndaelInput[15] ^= 8;
;;;197    	RijndaelEncrypt(rijndaelInput, out);
        0x00005522:    4630        0F      MOV      r0,r6
        0x00005524:    4639        9F      MOV      r1,r7
        0x00005526:    f000fa71    ..q.    BL       RijndaelEncrypt ; 0x5a0c
;;;198    	for (i = 0; i < 16; i++)
;;;199    		out[i] ^= op_c[i];
        0x0000552a:    7828        (x      LDRB     r0,[r5,#0]
        0x0000552c:    9905        ..      LDR      r1,[sp,#0x14]
        0x0000552e:    4041        A@      EORS     r1,r1,r0
        0x00005530:    7039        9p      STRB     r1,[r7,#0]
        0x00005532:    7868        hx      LDRB     r0,[r5,#1]
        0x00005534:    7879        yx      LDRB     r1,[r7,#1]
        0x00005536:    4041        A@      EORS     r1,r1,r0
        0x00005538:    7079        yp      STRB     r1,[r7,#1]
        0x0000553a:    78a8        .x      LDRB     r0,[r5,#2]
        0x0000553c:    78b9        .x      LDRB     r1,[r7,#2]
        0x0000553e:    4041        A@      EORS     r1,r1,r0
        0x00005540:    70b9        .p      STRB     r1,[r7,#2]
        0x00005542:    78e8        .x      LDRB     r0,[r5,#3]
        0x00005544:    78f9        .x      LDRB     r1,[r7,#3]
        0x00005546:    4041        A@      EORS     r1,r1,r0
        0x00005548:    70f9        .p      STRB     r1,[r7,#3]
        0x0000554a:    7928        (y      LDRB     r0,[r5,#4]
        0x0000554c:    9906        ..      LDR      r1,[sp,#0x18]
        0x0000554e:    4041        A@      EORS     r1,r1,r0
        0x00005550:    7139        9q      STRB     r1,[r7,#4]
        0x00005552:    7968        hy      LDRB     r0,[r5,#5]
        0x00005554:    7979        yy      LDRB     r1,[r7,#5]
        0x00005556:    4041        A@      EORS     r1,r1,r0
        0x00005558:    7179        yq      STRB     r1,[r7,#5]
        0x0000555a:    2206        ."      MOVS     r2,#6
;;;200    	for (i = 0; i < 6; i++)
;;;201    		ak[i] = out[i];
        0x0000555c:    4620         F      MOV      r0,r4
        0x0000555e:    4639        9F      MOV      r1,r7
        0x00005560:    f002f904    ....    BL       __aeabi_memcpy ; 0x776c
;;;202    	return;
;;;203    } /* end of function f5star */
        0x00005564:    b00d        ..      ADD      sp,sp,#0x34
        0x00005566:    bdf0        ..      POP      {r4-r7,pc}
    ComputeOPc
;;;204    
;;;205    /*-------------------------------------------------------------------
;;;206     * Function to compute OPc from OP and K. Assumes key schedule has
;;;207     already been performed.
;;;208     *-----------------------------------------------------------------*/
;;;209    void ComputeOPc(uMonoByte OP[16], uMonoByte op_c[16])
;;;210    {
        0x00005568:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x0000556a:    460c        .F      MOV      r4,r1
        0x0000556c:    4605        .F      MOV      r5,r0
;;;211    	uMonoByte i;
;;;212    
;;;213    	RijndaelEncrypt(OP, op_c);
        0x0000556e:    f000fa4d    ..M.    BL       RijndaelEncrypt ; 0x5a0c
;;;214    	for (i = 0; i < 16; i++)
;;;215    		op_c[i] ^= OP[i];
        0x00005572:    7828        (x      LDRB     r0,[r5,#0]
        0x00005574:    7821        !x      LDRB     r1,[r4,#0]
        0x00005576:    4041        A@      EORS     r1,r1,r0
        0x00005578:    7021        !p      STRB     r1,[r4,#0]
        0x0000557a:    7860        `x      LDRB     r0,[r4,#1]
        0x0000557c:    7869        ix      LDRB     r1,[r5,#1]
        0x0000557e:    4041        A@      EORS     r1,r1,r0
        0x00005580:    7061        ap      STRB     r1,[r4,#1]
        0x00005582:    78a0        .x      LDRB     r0,[r4,#2]
        0x00005584:    78a9        .x      LDRB     r1,[r5,#2]
        0x00005586:    4041        A@      EORS     r1,r1,r0
        0x00005588:    70a1        .p      STRB     r1,[r4,#2]
        0x0000558a:    78e0        .x      LDRB     r0,[r4,#3]
        0x0000558c:    78e9        .x      LDRB     r1,[r5,#3]
        0x0000558e:    4041        A@      EORS     r1,r1,r0
        0x00005590:    70e1        .p      STRB     r1,[r4,#3]
        0x00005592:    7920         y      LDRB     r0,[r4,#4]
        0x00005594:    7929        )y      LDRB     r1,[r5,#4]
        0x00005596:    4041        A@      EORS     r1,r1,r0
        0x00005598:    7121        !q      STRB     r1,[r4,#4]
        0x0000559a:    7968        hy      LDRB     r0,[r5,#5]
        0x0000559c:    7961        ay      LDRB     r1,[r4,#5]
        0x0000559e:    4041        A@      EORS     r1,r1,r0
        0x000055a0:    7161        aq      STRB     r1,[r4,#5]
        0x000055a2:    79a8        .y      LDRB     r0,[r5,#6]
        0x000055a4:    79a1        .y      LDRB     r1,[r4,#6]
        0x000055a6:    4041        A@      EORS     r1,r1,r0
        0x000055a8:    71a1        .q      STRB     r1,[r4,#6]
        0x000055aa:    79e8        .y      LDRB     r0,[r5,#7]
        0x000055ac:    79e1        .y      LDRB     r1,[r4,#7]
        0x000055ae:    4041        A@      EORS     r1,r1,r0
        0x000055b0:    71e1        .q      STRB     r1,[r4,#7]
        0x000055b2:    7a28        (z      LDRB     r0,[r5,#8]
        0x000055b4:    7a21        !z      LDRB     r1,[r4,#8]
        0x000055b6:    4041        A@      EORS     r1,r1,r0
        0x000055b8:    7221        !r      STRB     r1,[r4,#8]
        0x000055ba:    7a68        hz      LDRB     r0,[r5,#9]
        0x000055bc:    7a61        az      LDRB     r1,[r4,#9]
        0x000055be:    4041        A@      EORS     r1,r1,r0
        0x000055c0:    7261        ar      STRB     r1,[r4,#9]
        0x000055c2:    7aa8        .z      LDRB     r0,[r5,#0xa]
        0x000055c4:    7aa1        .z      LDRB     r1,[r4,#0xa]
        0x000055c6:    4041        A@      EORS     r1,r1,r0
        0x000055c8:    72a1        .r      STRB     r1,[r4,#0xa]
        0x000055ca:    7ae8        .z      LDRB     r0,[r5,#0xb]
        0x000055cc:    7ae1        .z      LDRB     r1,[r4,#0xb]
        0x000055ce:    4041        A@      EORS     r1,r1,r0
        0x000055d0:    72e1        .r      STRB     r1,[r4,#0xb]
        0x000055d2:    7b28        ({      LDRB     r0,[r5,#0xc]
        0x000055d4:    7b21        !{      LDRB     r1,[r4,#0xc]
        0x000055d6:    4041        A@      EORS     r1,r1,r0
        0x000055d8:    7321        !s      STRB     r1,[r4,#0xc]
        0x000055da:    7b68        h{      LDRB     r0,[r5,#0xd]
        0x000055dc:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x000055de:    4041        A@      EORS     r1,r1,r0
        0x000055e0:    7361        as      STRB     r1,[r4,#0xd]
        0x000055e2:    7ba8        .{      LDRB     r0,[r5,#0xe]
        0x000055e4:    7ba1        .{      LDRB     r1,[r4,#0xe]
        0x000055e6:    4041        A@      EORS     r1,r1,r0
        0x000055e8:    73a1        .s      STRB     r1,[r4,#0xe]
        0x000055ea:    7be8        .{      LDRB     r0,[r5,#0xf]
        0x000055ec:    7be1        .{      LDRB     r1,[r4,#0xf]
        0x000055ee:    4041        A@      EORS     r1,r1,r0
        0x000055f0:    73e1        .s      STRB     r1,[r4,#0xf]
;;;216    	return;
;;;217    } /* end of function ComputeOPc */
        0x000055f2:    bdb0        ..      POP      {r4,r5,r7,pc}
    RijndaelKeySchedule
;;; Core/Algorithms/source\algo_AES.c
;;;50     {
        0x000055f4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000055f6:    b09f        ..      SUB      sp,sp,#0x7c
        0x000055f8:    4607        .F      MOV      r7,r0
;;;51     	uMonoByte roundConst;
;;;52     	uQuadByte i, j;
;;;53     	/* first round key equals key */
;;;54     	for (i = 0; i < 16; i++)
;;;55     		roundKeys[0][i & 0x03][i >> 2] = key[i];
        0x000055fa:    7806        .x      LDRB     r6,[r0,#0]
        0x000055fc:    7841        Ax      LDRB     r1,[r0,#1]
        0x000055fe:    4881        .H      LDR      r0,[pc,#516] ; [0x5804] = 0x200006ec
        0x00005600:    9112        ..      STR      r1,[sp,#0x48]
        0x00005602:    7101        .q      STRB     r1,[r0,#4]
        0x00005604:    78b9        .x      LDRB     r1,[r7,#2]
        0x00005606:    9110        ..      STR      r1,[sp,#0x40]
        0x00005608:    7201        .r      STRB     r1,[r0,#8]
        0x0000560a:    78f9        .x      LDRB     r1,[r7,#3]
        0x0000560c:    910f        ..      STR      r1,[sp,#0x3c]
        0x0000560e:    7301        .s      STRB     r1,[r0,#0xc]
        0x00005610:    793c        <y      LDRB     r4,[r7,#4]
        0x00005612:    797a        zy      LDRB     r2,[r7,#5]
        0x00005614:    79b9        .y      LDRB     r1,[r7,#6]
        0x00005616:    460b        .F      MOV      r3,r1
        0x00005618:    7241        Ar      STRB     r1,[r0,#9]
        0x0000561a:    79f9        .y      LDRB     r1,[r7,#7]
        0x0000561c:    9118        ..      STR      r1,[sp,#0x60]
        0x0000561e:    7341        As      STRB     r1,[r0,#0xd]
        0x00005620:    9611        ..      STR      r6,[sp,#0x44]
        0x00005622:    7006        .p      STRB     r6,[r0,#0]
        0x00005624:    4611        .F      MOV      r1,r2
        0x00005626:    7142        Bq      STRB     r2,[r0,#5]
        0x00005628:    4622        "F      MOV      r2,r4
        0x0000562a:    7044        Dp      STRB     r4,[r0,#1]
        0x0000562c:    7a3d        =z      LDRB     r5,[r7,#8]
        0x0000562e:    7a7c        |z      LDRB     r4,[r7,#9]
        0x00005630:    463e        >F      MOV      r6,r7
        0x00005632:    7abf        .z      LDRB     r7,[r7,#0xa]
        0x00005634:    971d        ..      STR      r7,[sp,#0x74]
        0x00005636:    7287        .r      STRB     r7,[r0,#0xa]
        0x00005638:    7af7        .z      LDRB     r7,[r6,#0xb]
        0x0000563a:    971c        ..      STR      r7,[sp,#0x70]
        0x0000563c:    7387        .s      STRB     r7,[r0,#0xe]
        0x0000563e:    9413        ..      STR      r4,[sp,#0x4c]
        0x00005640:    7184        .q      STRB     r4,[r0,#6]
        0x00005642:    951e        ..      STR      r5,[sp,#0x78]
        0x00005644:    7085        .p      STRB     r5,[r0,#2]
        0x00005646:    7bb4        .{      LDRB     r4,[r6,#0xe]
        0x00005648:    941b        ..      STR      r4,[sp,#0x6c]
        0x0000564a:    72c4        .r      STRB     r4,[r0,#0xb]
        0x0000564c:    7b74        t{      LDRB     r4,[r6,#0xd]
        0x0000564e:    941a        ..      STR      r4,[sp,#0x68]
        0x00005650:    71c4        .q      STRB     r4,[r0,#7]
        0x00005652:    7b34        4{      LDRB     r4,[r6,#0xc]
        0x00005654:    70c4        .p      STRB     r4,[r0,#3]
        0x00005656:    7bf7        .{      LDRB     r7,[r6,#0xf]
        0x00005658:    9719        ..      STR      r7,[sp,#0x64]
        0x0000565a:    73c7        .s      STRB     r7,[r0,#0xf]
        0x0000565c:    2501        .%      MOVS     r5,#1
        0x0000565e:    2600        .&      MOVS     r6,#0
        0x00005660:    9509        ..      STR      r5,[sp,#0x24]
        0x00005662:    9217        ..      STR      r2,[sp,#0x5c]
        0x00005664:    9116        ..      STR      r1,[sp,#0x58]
        0x00005666:    940d        ..      STR      r4,[sp,#0x34]
        0x00005668:    930e        ..      STR      r3,[sp,#0x38]
        0x0000566a:    9919        ..      LDR      r1,[sp,#0x64]
        0x0000566c:    b2c8        ..      UXTB     r0,r1
        0x0000566e:    460a        .F      MOV      r2,r1
        0x00005670:    9119        ..      STR      r1,[sp,#0x64]
        0x00005672:    4d65        eM      LDR      r5,[pc,#404] ; [0x5808] = 0x7ff0
        0x00005674:    5c29        )\      LDRB     r1,[r5,r0]
        0x00005676:    9810        ..      LDR      r0,[sp,#0x40]
        0x00005678:    4041        A@      EORS     r1,r1,r0
        0x0000567a:    460f        .F      MOV      r7,r1
        0x0000567c:    b2e0        ..      UXTB     r0,r4
        0x0000567e:    5c29        )\      LDRB     r1,[r5,r0]
        0x00005680:    980f        ..      LDR      r0,[sp,#0x3c]
        0x00005682:    4041        A@      EORS     r1,r1,r0
        0x00005684:    9115        ..      STR      r1,[sp,#0x54]
        0x00005686:    9818        ..      LDR      r0,[sp,#0x60]
        0x00005688:    4041        A@      EORS     r1,r1,r0
        0x0000568a:    9107        ..      STR      r1,[sp,#0x1c]
        0x0000568c:    981c        ..      LDR      r0,[sp,#0x70]
        0x0000568e:    4048        H@      EORS     r0,r0,r1
        0x00005690:    901c        ..      STR      r0,[sp,#0x70]
        0x00005692:    4042        B@      EORS     r2,r2,r0
        0x00005694:    9208        ..      STR      r2,[sp,#0x20]
        0x00005696:    b2d0        ..      UXTB     r0,r2
        0x00005698:    462a        *F      MOV      r2,r5
        0x0000569a:    5c29        )\      LDRB     r1,[r5,r0]
        0x0000569c:    910b        ..      STR      r1,[sp,#0x2c]
        0x0000569e:    9703        ..      STR      r7,[sp,#0xc]
        0x000056a0:    4638        8F      MOV      r0,r7
        0x000056a2:    4048        H@      EORS     r0,r0,r1
;;;56     	roundConst = 1;
;;;57     	/* now calculate round keys */
;;;58     	for (i = 1; i < 11; i++)
;;;59     	{
;;;60     		roundKeys[i][0][0] = S[roundKeys[i - 1][1][3]]
        0x000056a4:    9010        ..      STR      r0,[sp,#0x40]
        0x000056a6:    4601        .F      MOV      r1,r0
        0x000056a8:    4856        VH      LDR      r0,[pc,#344] ; [0x5804] = 0x200006ec
        0x000056aa:    960c        ..      STR      r6,[sp,#0x30]
        0x000056ac:    1985        ..      ADDS     r5,r0,r6
        0x000056ae:    2028        (       MOVS     r0,#0x28
        0x000056b0:    5429        )T      STRB     r1,[r5,r0]
        0x000056b2:    991b        ..      LDR      r1,[sp,#0x6c]
        0x000056b4:    b2c8        ..      UXTB     r0,r1
        0x000056b6:    5c16        .\      LDRB     r6,[r2,r0]
        0x000056b8:    9812        ..      LDR      r0,[sp,#0x48]
        0x000056ba:    4046        F@      EORS     r6,r6,r0
        0x000056bc:    9614        ..      STR      r6,[sp,#0x50]
        0x000056be:    4638        8F      MOV      r0,r7
        0x000056c0:    405f        _@      EORS     r7,r7,r3
        0x000056c2:    9704        ..      STR      r7,[sp,#0x10]
        0x000056c4:    981d        ..      LDR      r0,[sp,#0x74]
        0x000056c6:    4078        x@      EORS     r0,r0,r7
        0x000056c8:    901d        ..      STR      r0,[sp,#0x74]
        0x000056ca:    4041        A@      EORS     r1,r1,r0
        0x000056cc:    9105        ..      STR      r1,[sp,#0x14]
        0x000056ce:    b2c8        ..      UXTB     r0,r1
        0x000056d0:    5c10        .\      LDRB     r0,[r2,r0]
        0x000056d2:    900a        ..      STR      r0,[sp,#0x28]
        0x000056d4:    4631        1F      MOV      r1,r6
        0x000056d6:    4041        A@      EORS     r1,r1,r0
        0x000056d8:    9112        ..      STR      r1,[sp,#0x48]
        0x000056da:    2024        $       MOVS     r0,#0x24
        0x000056dc:    5429        )T      STRB     r1,[r5,r0]
        0x000056de:    9f1a        ..      LDR      r7,[sp,#0x68]
        0x000056e0:    b2f8        ..      UXTB     r0,r7
        0x000056e2:    971a        ..      STR      r7,[sp,#0x68]
        0x000056e4:    5c13        .\      LDRB     r3,[r2,r0]
        0x000056e6:    9909        ..      LDR      r1,[sp,#0x24]
        0x000056e8:    404b        K@      EORS     r3,r3,r1
        0x000056ea:    9811        ..      LDR      r0,[sp,#0x44]
        0x000056ec:    4043        C@      EORS     r3,r3,r0
        0x000056ee:    461a        .F      MOV      r2,r3
        0x000056f0:    9817        ..      LDR      r0,[sp,#0x5c]
        0x000056f2:    4042        B@      EORS     r2,r2,r0
        0x000056f4:    9200        ..      STR      r2,[sp,#0]
        0x000056f6:    9e1e        ..      LDR      r6,[sp,#0x78]
        0x000056f8:    4056        V@      EORS     r6,r6,r2
        0x000056fa:    961e        ..      STR      r6,[sp,#0x78]
        0x000056fc:    4074        t@      EORS     r4,r4,r6
        0x000056fe:    9402        ..      STR      r4,[sp,#8]
        0x00005700:    b2e0        ..      UXTB     r0,r4
        0x00005702:    4a41        AJ      LDR      r2,[pc,#260] ; [0x5808] = 0x7ff0
        0x00005704:    5c10        .\      LDRB     r0,[r2,r0]
        0x00005706:    9001        ..      STR      r0,[sp,#4]
        0x00005708:    9a15        ..      LDR      r2,[sp,#0x54]
        0x0000570a:    4042        B@      EORS     r2,r2,r0
        0x0000570c:    202c        ,       MOVS     r0,#0x2c
        0x0000570e:    920f        ..      STR      r2,[sp,#0x3c]
        0x00005710:    542a        *T      STRB     r2,[r5,r0]
        0x00005712:    b2c8        ..      UXTB     r0,r1
        0x00005714:    4a3d        =J      LDR      r2,[pc,#244] ; [0x580c] = 0x81e8
        0x00005716:    5c11        .\      LDRB     r1,[r2,r0]
        0x00005718:    9109        ..      STR      r1,[sp,#0x24]
        0x0000571a:    9e14        ..      LDR      r6,[sp,#0x50]
        0x0000571c:    9816        ..      LDR      r0,[sp,#0x58]
        0x0000571e:    4046        F@      EORS     r6,r6,r0
        0x00005720:    9c13        ..      LDR      r4,[sp,#0x4c]
        0x00005722:    4074        t@      EORS     r4,r4,r6
        0x00005724:    4638        8F      MOV      r0,r7
        0x00005726:    4060        `@      EORS     r0,r0,r4
        0x00005728:    b2c7        ..      UXTB     r7,r0
        0x0000572a:    4a37        7J      LDR      r2,[pc,#220] ; [0x5808] = 0x7ff0
        0x0000572c:    5dd2        .]      LDRB     r2,[r2,r7]
        0x0000572e:    404a        J@      EORS     r2,r2,r1
        0x00005730:    9206        ..      STR      r2,[sp,#0x18]
        0x00005732:    4611        .F      MOV      r1,r2
        0x00005734:    4059        Y@      EORS     r1,r1,r3
        0x00005736:    2720         '      MOVS     r7,#0x20
        0x00005738:    9111        ..      STR      r1,[sp,#0x44]
        0x0000573a:    55e9        .U      STRB     r1,[r5,r7]
        0x0000573c:    9915        ..      LDR      r1,[sp,#0x54]
        0x0000573e:    7729        )w      STRB     r1,[r5,#0x1c]
        0x00005740:    9903        ..      LDR      r1,[sp,#0xc]
        0x00005742:    7629        )v      STRB     r1,[r5,#0x18]
        0x00005744:    9914        ..      LDR      r1,[sp,#0x50]
        0x00005746:    7529        )u      STRB     r1,[r5,#0x14]
        0x00005748:    9a18        ..      LDR      r2,[sp,#0x60]
        0x0000574a:    742b        +t      STRB     r3,[r5,#0x10]
;;;61     			^ roundKeys[i - 1][0][0] ^ roundConst;
;;;62     		roundKeys[i][1][0] = S[roundKeys[i - 1][2][3]]
;;;63     			^ roundKeys[i - 1][1][0];
;;;64     		roundKeys[i][2][0] = S[roundKeys[i - 1][3][3]]
;;;65     			^ roundKeys[i - 1][2][0];
;;;66     		roundKeys[i][3][0] = S[roundKeys[i - 1][0][3]]
;;;67     			^ roundKeys[i - 1][3][0];
;;;68     		for (j = 0; j < 4; j++)
;;;69     		{
;;;70     			roundKeys[i][j][1] = roundKeys[i - 1][j][1] ^ roundKeys[i][j][0];
        0x0000574c:    9907        ..      LDR      r1,[sp,#0x1c]
        0x0000574e:    7769        iw      STRB     r1,[r5,#0x1d]
        0x00005750:    9904        ..      LDR      r1,[sp,#0x10]
        0x00005752:    7669        iv      STRB     r1,[r5,#0x19]
        0x00005754:    756e        nu      STRB     r6,[r5,#0x15]
        0x00005756:    9b1c        ..      LDR      r3,[sp,#0x70]
        0x00005758:    77ab        .w      STRB     r3,[r5,#0x1e]
        0x0000575a:    991d        ..      LDR      r1,[sp,#0x74]
        0x0000575c:    76a9        .v      STRB     r1,[r5,#0x1a]
        0x0000575e:    75ac        .u      STRB     r4,[r5,#0x16]
        0x00005760:    9900        ..      LDR      r1,[sp,#0]
        0x00005762:    7469        it      STRB     r1,[r5,#0x11]
        0x00005764:    9e0e        ..      LDR      r6,[sp,#0x38]
        0x00005766:    9908        ..      LDR      r1,[sp,#0x20]
        0x00005768:    77e9        .w      STRB     r1,[r5,#0x1f]
        0x0000576a:    9905        ..      LDR      r1,[sp,#0x14]
        0x0000576c:    76e9        .v      STRB     r1,[r5,#0x1b]
        0x0000576e:    75e8        .u      STRB     r0,[r5,#0x17]
        0x00005770:    981e        ..      LDR      r0,[sp,#0x78]
        0x00005772:    74a8        .t      STRB     r0,[r5,#0x12]
        0x00005774:    9802        ..      LDR      r0,[sp,#8]
        0x00005776:    74e8        .t      STRB     r0,[r5,#0x13]
        0x00005778:    9f17        ..      LDR      r7,[sp,#0x5c]
        0x0000577a:    9801        ..      LDR      r0,[sp,#4]
        0x0000577c:    4042        B@      EORS     r2,r2,r0
        0x0000577e:    9919        ..      LDR      r1,[sp,#0x64]
        0x00005780:    4051        Q@      EORS     r1,r1,r2
        0x00005782:    202f        /       MOVS     r0,#0x2f
        0x00005784:    9119        ..      STR      r1,[sp,#0x64]
        0x00005786:    5429        )T      STRB     r1,[r5,r0]
        0x00005788:    4053        S@      EORS     r3,r3,r2
        0x0000578a:    202e        .       MOVS     r0,#0x2e
        0x0000578c:    931c        ..      STR      r3,[sp,#0x70]
        0x0000578e:    542b        +T      STRB     r3,[r5,r0]
        0x00005790:    202d        -       MOVS     r0,#0x2d
        0x00005792:    9218        ..      STR      r2,[sp,#0x60]
        0x00005794:    542a        *T      STRB     r2,[r5,r0]
        0x00005796:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00005798:    4046        F@      EORS     r6,r6,r0
        0x0000579a:    991b        ..      LDR      r1,[sp,#0x6c]
        0x0000579c:    4071        q@      EORS     r1,r1,r6
        0x0000579e:    202b        +       MOVS     r0,#0x2b
        0x000057a0:    911b        ..      STR      r1,[sp,#0x6c]
        0x000057a2:    5429        )T      STRB     r1,[r5,r0]
        0x000057a4:    991d        ..      LDR      r1,[sp,#0x74]
        0x000057a6:    4071        q@      EORS     r1,r1,r6
        0x000057a8:    202a        *       MOVS     r0,#0x2a
        0x000057aa:    911d        ..      STR      r1,[sp,#0x74]
        0x000057ac:    5429        )T      STRB     r1,[r5,r0]
        0x000057ae:    2029        )       MOVS     r0,#0x29
        0x000057b0:    4633        3F      MOV      r3,r6
        0x000057b2:    542e        .T      STRB     r6,[r5,r0]
        0x000057b4:    980a        ..      LDR      r0,[sp,#0x28]
        0x000057b6:    9a16        ..      LDR      r2,[sp,#0x58]
        0x000057b8:    4042        B@      EORS     r2,r2,r0
        0x000057ba:    991a        ..      LDR      r1,[sp,#0x68]
        0x000057bc:    4051        Q@      EORS     r1,r1,r2
        0x000057be:    2027        '       MOVS     r0,#0x27
        0x000057c0:    911a        ..      STR      r1,[sp,#0x68]
        0x000057c2:    5429        )T      STRB     r1,[r5,r0]
        0x000057c4:    4054        T@      EORS     r4,r4,r2
        0x000057c6:    2026        &       MOVS     r0,#0x26
        0x000057c8:    9413        ..      STR      r4,[sp,#0x4c]
        0x000057ca:    542c        ,T      STRB     r4,[r5,r0]
        0x000057cc:    2025        %       MOVS     r0,#0x25
        0x000057ce:    4611        .F      MOV      r1,r2
        0x000057d0:    542a        *T      STRB     r2,[r5,r0]
        0x000057d2:    9c0d        ..      LDR      r4,[sp,#0x34]
        0x000057d4:    9806        ..      LDR      r0,[sp,#0x18]
        0x000057d6:    4047        G@      EORS     r7,r7,r0
        0x000057d8:    407c        |@      EORS     r4,r4,r7
        0x000057da:    2023        #       MOVS     r0,#0x23
        0x000057dc:    542c        ,T      STRB     r4,[r5,r0]
        0x000057de:    9a1e        ..      LDR      r2,[sp,#0x78]
        0x000057e0:    407a        z@      EORS     r2,r2,r7
        0x000057e2:    2022        "       MOVS     r0,#0x22
        0x000057e4:    921e        ..      STR      r2,[sp,#0x78]
        0x000057e6:    542a        *T      STRB     r2,[r5,r0]
        0x000057e8:    2021        !       MOVS     r0,#0x21
        0x000057ea:    463a        :F      MOV      r2,r7
        0x000057ec:    542f        /T      STRB     r7,[r5,r0]
;;;71     			roundKeys[i][j][2] = roundKeys[i - 1][j][2] ^ roundKeys[i][j][1];
;;;72     			roundKeys[i][j][3] = roundKeys[i - 1][j][3] ^ roundKeys[i][j][2];
;;;73     		}
;;;74     		/* update round constant */
;;;75     		roundConst = Xtime[roundConst];
        0x000057ee:    4807        .H      LDR      r0,[pc,#28] ; [0x580c] = 0x81e8
        0x000057f0:    9d09        ..      LDR      r5,[sp,#0x24]
        0x000057f2:    5d45        E]      LDRB     r5,[r0,r5]
        0x000057f4:    980c        ..      LDR      r0,[sp,#0x30]
        0x000057f6:    3020         0      ADDS     r0,r0,#0x20
        0x000057f8:    4606        .F      MOV      r6,r0
        0x000057fa:    28a0        .(      CMP      r0,#0xa0
        0x000057fc:    d000        ..      BEQ      0x5800 ; RijndaelKeySchedule + 524
        0x000057fe:    e72f        /.      B        0x5660 ; RijndaelKeySchedule + 108
;;;76     	}
;;;77     	return;
;;;78     } /* end of function RijndaelKeySchedule */
        0x00005800:    b01f        ..      ADD      sp,sp,#0x7c
        0x00005802:    bdf0        ..      POP      {r4-r7,pc}
    $d.1
    __arm_cp.0_0
        0x00005804:    200006ec    ...     DCD    536872684
    __arm_cp.0_1
        0x00005808:    00007ff0    ....    DCD    32752
    __arm_cp.0_2
        0x0000580c:    000081e8    ....    DCD    33256
    $t.2
    ByteSub
;;;79     /* Round key addition function */
;;;80     static void KeyAdd(uMonoByte state[4][4], uMonoByte roundKeys[11][4][4], uQuadByte round)
;;;81     {
;;;82     	uQuadByte i, j;
;;;83     	for (i = 0; i < 4; i++)
;;;84     		for (j = 0; j < 4; j++)
;;;85     			state[i][j] ^= roundKeys[round][i][j];
;;;86     	return;
;;;87     }
;;;88     /* Byte substitution transformation */
;;;89     uQuadByte ByteSub(uMonoByte state[4][4])
;;;90     {
;;;91     	uQuadByte i, j;
;;;92     	for (i = 0; i < 4; i++)
;;;93     		for (j = 0; j < 4; j++)
;;;94     			state[i][j] = S[state[i][j]];
        0x00005810:    7802        .x      LDRB     r2,[r0,#0]
;;; Core/Algorithms/source\algo_AES.c (94)
        0x00005812:    4919        .I      LDR      r1,[pc,#100] ; [0x5878] = 0x7ff0
        0x00005814:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005816:    7002        .p      STRB     r2,[r0,#0]
        0x00005818:    7842        Bx      LDRB     r2,[r0,#1]
        0x0000581a:    5c8a        .\      LDRB     r2,[r1,r2]
        0x0000581c:    7042        Bp      STRB     r2,[r0,#1]
        0x0000581e:    7882        .x      LDRB     r2,[r0,#2]
        0x00005820:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005822:    7082        .p      STRB     r2,[r0,#2]
        0x00005824:    78c2        .x      LDRB     r2,[r0,#3]
        0x00005826:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005828:    70c2        .p      STRB     r2,[r0,#3]
        0x0000582a:    7902        .y      LDRB     r2,[r0,#4]
        0x0000582c:    5c8a        .\      LDRB     r2,[r1,r2]
        0x0000582e:    7102        .q      STRB     r2,[r0,#4]
        0x00005830:    7942        By      LDRB     r2,[r0,#5]
        0x00005832:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005834:    7142        Bq      STRB     r2,[r0,#5]
        0x00005836:    7982        .y      LDRB     r2,[r0,#6]
        0x00005838:    5c8a        .\      LDRB     r2,[r1,r2]
        0x0000583a:    7182        .q      STRB     r2,[r0,#6]
        0x0000583c:    79c2        .y      LDRB     r2,[r0,#7]
        0x0000583e:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005840:    71c2        .q      STRB     r2,[r0,#7]
        0x00005842:    7a02        .z      LDRB     r2,[r0,#8]
        0x00005844:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005846:    7202        .r      STRB     r2,[r0,#8]
        0x00005848:    7a42        Bz      LDRB     r2,[r0,#9]
        0x0000584a:    5c8a        .\      LDRB     r2,[r1,r2]
        0x0000584c:    7242        Br      STRB     r2,[r0,#9]
        0x0000584e:    7a82        .z      LDRB     r2,[r0,#0xa]
        0x00005850:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005852:    7282        .r      STRB     r2,[r0,#0xa]
        0x00005854:    7ac2        .z      LDRB     r2,[r0,#0xb]
        0x00005856:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005858:    72c2        .r      STRB     r2,[r0,#0xb]
        0x0000585a:    7b02        .{      LDRB     r2,[r0,#0xc]
        0x0000585c:    5c8a        .\      LDRB     r2,[r1,r2]
        0x0000585e:    7302        .s      STRB     r2,[r0,#0xc]
        0x00005860:    7b42        B{      LDRB     r2,[r0,#0xd]
        0x00005862:    5c8a        .\      LDRB     r2,[r1,r2]
        0x00005864:    7342        Bs      STRB     r2,[r0,#0xd]
        0x00005866:    7b82        .{      LDRB     r2,[r0,#0xe]
        0x00005868:    5c8a        .\      LDRB     r2,[r1,r2]
        0x0000586a:    7382        .s      STRB     r2,[r0,#0xe]
        0x0000586c:    7bc2        .{      LDRB     r2,[r0,#0xf]
        0x0000586e:    5c89        .\      LDRB     r1,[r1,r2]
        0x00005870:    73c1        .s      STRB     r1,[r0,#0xf]
        0x00005872:    2000        .       MOVS     r0,#0
;;;95     
;;;96     	return 0;
        0x00005874:    4770        pG      BX       lr
        0x00005876:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00005878:    00007ff0    ....    DCD    32752
    $t.4
    ShiftRow
;;;97     }
;;;98     /* Row shift transformation */
;;;99     void ShiftRow(uMonoByte state[4][4])
;;;100    {
;;;101    	uMonoByte temp;
;;;102    	/* left rotate row 1 by 1 */
;;;103    	temp = state[1][0];
        0x0000587c:    7901        .y      LDRB     r1,[r0,#4]
;;;104    	state[1][0] = state[1][1];
        0x0000587e:    7942        By      LDRB     r2,[r0,#5]
        0x00005880:    7102        .q      STRB     r2,[r0,#4]
;;;105    	state[1][1] = state[1][2];
        0x00005882:    7982        .y      LDRB     r2,[r0,#6]
        0x00005884:    79c3        .y      LDRB     r3,[r0,#7]
        0x00005886:    7183        .q      STRB     r3,[r0,#6]
        0x00005888:    7142        Bq      STRB     r2,[r0,#5]
;;;106    	state[1][2] = state[1][3];
;;;107    	state[1][3] = temp;
        0x0000588a:    71c1        .q      STRB     r1,[r0,#7]
;;;108    	/* left rotate row 2 by 2 */
;;;109    	temp = state[2][0];
        0x0000588c:    7a01        .z      LDRB     r1,[r0,#8]
;;;110    	state[2][0] = state[2][2];
        0x0000588e:    7a82        .z      LDRB     r2,[r0,#0xa]
        0x00005890:    7202        .r      STRB     r2,[r0,#8]
;;;111    	state[2][2] = temp;
        0x00005892:    7281        .r      STRB     r1,[r0,#0xa]
;;;112    	temp = state[2][1];
        0x00005894:    7a41        Az      LDRB     r1,[r0,#9]
;;;113    	state[2][1] = state[2][3];
        0x00005896:    7ac2        .z      LDRB     r2,[r0,#0xb]
        0x00005898:    7242        Br      STRB     r2,[r0,#9]
;;;114    	state[2][3] = temp;
        0x0000589a:    72c1        .r      STRB     r1,[r0,#0xb]
;;;115    	/* left rotate row 3 by 3 */
;;;116    	temp = state[3][0];
        0x0000589c:    7b01        .{      LDRB     r1,[r0,#0xc]
;;;117    	state[3][0] = state[3][3];
        0x0000589e:    7bc2        .{      LDRB     r2,[r0,#0xf]
        0x000058a0:    7302        .s      STRB     r2,[r0,#0xc]
;;;118    	state[3][3] = state[3][2];
        0x000058a2:    7b82        .{      LDRB     r2,[r0,#0xe]
        0x000058a4:    73c2        .s      STRB     r2,[r0,#0xf]
;;;119    	state[3][2] = state[3][1];
        0x000058a6:    7b42        B{      LDRB     r2,[r0,#0xd]
        0x000058a8:    7382        .s      STRB     r2,[r0,#0xe]
;;;120    	state[3][1] = temp;
        0x000058aa:    7341        As      STRB     r1,[r0,#0xd]
;;;121    	return;
;;;122    }
        0x000058ac:    4770        pG      BX       lr
        0x000058ae:    46c0        .F      MOV      r8,r8
    MixColumn
;;;123    /* MixColumn transformation*/
;;;124    void MixColumn(uMonoByte state[4][4])
;;;125    {
        0x000058b0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000058b2:    b088        ..      SUB      sp,sp,#0x20
        0x000058b4:    4601        .F      MOV      r1,r0
;;;126    	uMonoByte temp, tmp, tmp0;
;;;127    	uQuadByte i;
;;;128    	/* do one column at a time */
;;;129    	for (i = 0; i < 4;i++)
;;;130    	{
;;;131    		temp = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i];
        0x000058b6:    7802        .x      LDRB     r2,[r0,#0]
        0x000058b8:    9206        ..      STR      r2,[sp,#0x18]
        0x000058ba:    7905        .y      LDRB     r5,[r0,#4]
        0x000058bc:    4628        (F      MOV      r0,r5
        0x000058be:    4050        P@      EORS     r0,r0,r2
        0x000058c0:    7a0e        .z      LDRB     r6,[r1,#8]
        0x000058c2:    4603        .F      MOV      r3,r0
        0x000058c4:    4604        .F      MOV      r4,r0
        0x000058c6:    9004        ..      STR      r0,[sp,#0x10]
        0x000058c8:    4073        s@      EORS     r3,r3,r6
        0x000058ca:    9602        ..      STR      r6,[sp,#8]
        0x000058cc:    7b0f        .{      LDRB     r7,[r1,#0xc]
        0x000058ce:    9703        ..      STR      r7,[sp,#0xc]
        0x000058d0:    4638        8F      MOV      r0,r7
        0x000058d2:    4050        P@      EORS     r0,r0,r2
        0x000058d4:    b2c0        ..      UXTB     r0,r0
        0x000058d6:    4a4c        LJ      LDR      r2,[pc,#304] ; [0x5a08] = 0x81e8
        0x000058d8:    5c10        .\      LDRB     r0,[r2,r0]
        0x000058da:    4058        X@      EORS     r0,r0,r3
        0x000058dc:    7308        .s      STRB     r0,[r1,#0xc]
        0x000058de:    4620         F      MOV      r0,r4
        0x000058e0:    4078        x@      EORS     r0,r0,r7
        0x000058e2:    463a        :F      MOV      r2,r7
        0x000058e4:    4072        r@      EORS     r2,r2,r6
        0x000058e6:    b2d2        ..      UXTB     r2,r2
        0x000058e8:    4c47        GL      LDR      r4,[pc,#284] ; [0x5a08] = 0x81e8
        0x000058ea:    5ca2        .\      LDRB     r2,[r4,r2]
        0x000058ec:    4042        B@      EORS     r2,r2,r0
        0x000058ee:    720a        .r      STRB     r2,[r1,#8]
        0x000058f0:    7848        Hx      LDRB     r0,[r1,#1]
        0x000058f2:    9007        ..      STR      r0,[sp,#0x1c]
        0x000058f4:    794a        Jy      LDRB     r2,[r1,#5]
        0x000058f6:    9205        ..      STR      r2,[sp,#0x14]
        0x000058f8:    4042        B@      EORS     r2,r2,r0
        0x000058fa:    7b4e        N{      LDRB     r6,[r1,#0xd]
        0x000058fc:    4610        .F      MOV      r0,r2
        0x000058fe:    4070        p@      EORS     r0,r0,r6
        0x00005900:    7a4c        Lz      LDRB     r4,[r1,#9]
        0x00005902:    9400        ..      STR      r4,[sp,#0]
        0x00005904:    4637        7F      MOV      r7,r6
        0x00005906:    9601        ..      STR      r6,[sp,#4]
        0x00005908:    4067        g@      EORS     r7,r7,r4
        0x0000590a:    b2ff        ..      UXTB     r7,r7
        0x0000590c:    4c3e        >L      LDR      r4,[pc,#248] ; [0x5a08] = 0x81e8
        0x0000590e:    5de7        .]      LDRB     r7,[r4,r7]
        0x00005910:    4047        G@      EORS     r7,r7,r0
        0x00005912:    724f        Or      STRB     r7,[r1,#9]
        0x00005914:    4610        .F      MOV      r0,r2
        0x00005916:    9c00        ..      LDR      r4,[sp,#0]
        0x00005918:    4060        `@      EORS     r0,r0,r4
        0x0000591a:    4637        7F      MOV      r7,r6
        0x0000591c:    9e07        ..      LDR      r6,[sp,#0x1c]
        0x0000591e:    4077        w@      EORS     r7,r7,r6
        0x00005920:    b2ff        ..      UXTB     r7,r7
        0x00005922:    4e39        9N      LDR      r6,[pc,#228] ; [0x5a08] = 0x81e8
        0x00005924:    5df7        .]      LDRB     r7,[r6,r7]
        0x00005926:    4047        G@      EORS     r7,r7,r0
        0x00005928:    734f        Os      STRB     r7,[r1,#0xd]
        0x0000592a:    9e02        ..      LDR      r6,[sp,#8]
        0x0000592c:    406e        n@      EORS     r6,r6,r5
        0x0000592e:    b2f6        ..      UXTB     r6,r6
        0x00005930:    4f35        5O      LDR      r7,[pc,#212] ; [0x5a08] = 0x81e8
        0x00005932:    5dbe        .]      LDRB     r6,[r7,r6]
        0x00005934:    9f03        ..      LDR      r7,[sp,#0xc]
        0x00005936:    407b        {@      EORS     r3,r3,r7
        0x00005938:    405d        ]@      EORS     r5,r5,r3
        0x0000593a:    4075        u@      EORS     r5,r5,r6
        0x0000593c:    710d        .q      STRB     r5,[r1,#4]
        0x0000593e:    9d04        ..      LDR      r5,[sp,#0x10]
        0x00005940:    b2ed        ..      UXTB     r5,r5
        0x00005942:    4f31        1O      LDR      r7,[pc,#196] ; [0x5a08] = 0x81e8
        0x00005944:    5d7d        }]      LDRB     r5,[r7,r5]
        0x00005946:    9e06        ..      LDR      r6,[sp,#0x18]
        0x00005948:    4075        u@      EORS     r5,r5,r6
        0x0000594a:    405d        ]@      EORS     r5,r5,r3
        0x0000594c:    700d        .p      STRB     r5,[r1,#0]
        0x0000594e:    9b01        ..      LDR      r3,[sp,#4]
        0x00005950:    4058        X@      EORS     r0,r0,r3
        0x00005952:    b2d2        ..      UXTB     r2,r2
        0x00005954:    5cba        .\      LDRB     r2,[r7,r2]
        0x00005956:    9b07        ..      LDR      r3,[sp,#0x1c]
        0x00005958:    405a        Z@      EORS     r2,r2,r3
        0x0000595a:    4042        B@      EORS     r2,r2,r0
        0x0000595c:    704a        Jp      STRB     r2,[r1,#1]
        0x0000595e:    9b05        ..      LDR      r3,[sp,#0x14]
        0x00005960:    4622        "F      MOV      r2,r4
        0x00005962:    405a        Z@      EORS     r2,r2,r3
        0x00005964:    b2d2        ..      UXTB     r2,r2
        0x00005966:    5cba        .\      LDRB     r2,[r7,r2]
        0x00005968:    4058        X@      EORS     r0,r0,r3
        0x0000596a:    4050        P@      EORS     r0,r0,r2
        0x0000596c:    7148        Hq      STRB     r0,[r1,#5]
        0x0000596e:    788e        .x      LDRB     r6,[r1,#2]
        0x00005970:    798c        .y      LDRB     r4,[r1,#6]
        0x00005972:    9407        ..      STR      r4,[sp,#0x1c]
        0x00005974:    4074        t@      EORS     r4,r4,r6
        0x00005976:    7a88        .z      LDRB     r0,[r1,#0xa]
        0x00005978:    9006        ..      STR      r0,[sp,#0x18]
        0x0000597a:    4627        'F      MOV      r7,r4
        0x0000597c:    4047        G@      EORS     r7,r7,r0
        0x0000597e:    7b8d        .{      LDRB     r5,[r1,#0xe]
        0x00005980:    463a        :F      MOV      r2,r7
        0x00005982:    406a        j@      EORS     r2,r2,r5
        0x00005984:    b2e0        ..      UXTB     r0,r4
        0x00005986:    4b20         K      LDR      r3,[pc,#128] ; [0x5a08] = 0x81e8
        0x00005988:    5c18        .\      LDRB     r0,[r3,r0]
        0x0000598a:    4070        p@      EORS     r0,r0,r6
        0x0000598c:    4050        P@      EORS     r0,r0,r2
        0x0000598e:    7088        .p      STRB     r0,[r1,#2]
        0x00005990:    406e        n@      EORS     r6,r6,r5
        0x00005992:    b2f0        ..      UXTB     r0,r6
        0x00005994:    4e1c        .N      LDR      r6,[pc,#112] ; [0x5a08] = 0x81e8
        0x00005996:    5c30        0\      LDRB     r0,[r6,r0]
        0x00005998:    4078        x@      EORS     r0,r0,r7
        0x0000599a:    7388        .s      STRB     r0,[r1,#0xe]
        0x0000599c:    406c        l@      EORS     r4,r4,r5
        0x0000599e:    9b06        ..      LDR      r3,[sp,#0x18]
        0x000059a0:    405d        ]@      EORS     r5,r5,r3
        0x000059a2:    b2e8        ..      UXTB     r0,r5
        0x000059a4:    5c30        0\      LDRB     r0,[r6,r0]
        0x000059a6:    4060        `@      EORS     r0,r0,r4
        0x000059a8:    7288        .r      STRB     r0,[r1,#0xa]
        0x000059aa:    9c07        ..      LDR      r4,[sp,#0x1c]
        0x000059ac:    4063        c@      EORS     r3,r3,r4
        0x000059ae:    b2d8        ..      UXTB     r0,r3
        0x000059b0:    5c30        0\      LDRB     r0,[r6,r0]
        0x000059b2:    4062        b@      EORS     r2,r2,r4
        0x000059b4:    4042        B@      EORS     r2,r2,r0
        0x000059b6:    718a        .q      STRB     r2,[r1,#6]
        0x000059b8:    78c8        .x      LDRB     r0,[r1,#3]
        0x000059ba:    9007        ..      STR      r0,[sp,#0x1c]
        0x000059bc:    79cc        .y      LDRB     r4,[r1,#7]
        0x000059be:    4623        #F      MOV      r3,r4
        0x000059c0:    4043        C@      EORS     r3,r3,r0
        0x000059c2:    7acd        .z      LDRB     r5,[r1,#0xb]
        0x000059c4:    461a        .F      MOV      r2,r3
        0x000059c6:    406a        j@      EORS     r2,r2,r5
        0x000059c8:    7bce        .{      LDRB     r6,[r1,#0xf]
        0x000059ca:    4637        7F      MOV      r7,r6
        0x000059cc:    4047        G@      EORS     r7,r7,r0
        0x000059ce:    b2ff        ..      UXTB     r7,r7
        0x000059d0:    480d        .H      LDR      r0,[pc,#52] ; [0x5a08] = 0x81e8
        0x000059d2:    5dc7        .]      LDRB     r7,[r0,r7]
        0x000059d4:    4057        W@      EORS     r7,r7,r2
        0x000059d6:    73cf        .s      STRB     r7,[r1,#0xf]
        0x000059d8:    461f        .F      MOV      r7,r3
        0x000059da:    4077        w@      EORS     r7,r7,r6
        0x000059dc:    4072        r@      EORS     r2,r2,r6
        0x000059de:    406e        n@      EORS     r6,r6,r5
        0x000059e0:    b2f6        ..      UXTB     r6,r6
        0x000059e2:    4809        .H      LDR      r0,[pc,#36] ; [0x5a08] = 0x81e8
        0x000059e4:    5d86        .]      LDRB     r6,[r0,r6]
        0x000059e6:    407e        ~@      EORS     r6,r6,r7
        0x000059e8:    72ce        .r      STRB     r6,[r1,#0xb]
        0x000059ea:    4065        e@      EORS     r5,r5,r4
        0x000059ec:    b2ed        ..      UXTB     r5,r5
        0x000059ee:    5d45        E]      LDRB     r5,[r0,r5]
        0x000059f0:    4054        T@      EORS     r4,r4,r2
        0x000059f2:    406c        l@      EORS     r4,r4,r5
        0x000059f4:    71cc        .q      STRB     r4,[r1,#7]
        0x000059f6:    b2db        ..      UXTB     r3,r3
;;;132    		tmp0 = state[0][i];/* Xtime array does multiply by x in GF2^8 */
;;;133    		tmp = Xtime[state[0][i] ^ state[1][i]];
        0x000059f8:    5cc3        .\      LDRB     r3,[r0,r3]
;;;134    		state[0][i] ^= temp ^ tmp;
        0x000059fa:    9807        ..      LDR      r0,[sp,#0x1c]
        0x000059fc:    4043        C@      EORS     r3,r3,r0
        0x000059fe:    4053        S@      EORS     r3,r3,r2
        0x00005a00:    70cb        .p      STRB     r3,[r1,#3]
;;;135    		tmp = Xtime[state[1][i] ^ state[2][i]];
;;;136    		state[1][i] ^= temp ^ tmp;
;;;137    		tmp = Xtime[state[2][i] ^ state[3][i]];
;;;138    		state[2][i] ^= temp ^ tmp;
;;;139    		tmp = Xtime[state[3][i] ^ tmp0];
;;;140    		state[3][i] ^= temp ^ tmp;
;;;141    	}
;;;142    	return;
;;;143    }
        0x00005a02:    b008        ..      ADD      sp,sp,#0x20
        0x00005a04:    bdf0        ..      POP      {r4-r7,pc}
        0x00005a06:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.3_0
        0x00005a08:    000081e8    ....    DCD    33256
    $t.6
    RijndaelEncrypt
;;;144    /*-------------------------------------------------------------------
;;;145     * Rijndael encryption function. Takes 16-byte input and creates
;;;146     * 16-byte output (using round keys already derived from 16-byte
;;;147     * key).
;;;148     *-----------------------------------------------------------------*/
;;;149    void RijndaelEncrypt(uMonoByte input[16], uMonoByte output[16])
;;;150    {
        0x00005a0c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00005a0e:    b09f        ..      SUB      sp,sp,#0x7c
        0x00005a10:    910d        ..      STR      r1,[sp,#0x34]
        0x00005a12:    4605        .F      MOV      r5,r0
        0x00005a14:    7800        .x      LDRB     r0,[r0,#0]
        0x00005a16:    901a        ..      STR      r0,[sp,#0x68]
;;; Core/Algorithms/source\algo_AES.c
        0x00005a18:    a91b        ..      ADD      r1,sp,#0x6c
        0x00005a1a:    7008        .p      STRB     r0,[r1,#0]
        0x00005a1c:    7928        (y      LDRB     r0,[r5,#4]
        0x00005a1e:    9018        ..      STR      r0,[sp,#0x60]
        0x00005a20:    7048        Hp      STRB     r0,[r1,#1]
        0x00005a22:    7a28        (z      LDRB     r0,[r5,#8]
        0x00005a24:    9012        ..      STR      r0,[sp,#0x48]
        0x00005a26:    7088        .p      STRB     r0,[r1,#2]
        0x00005a28:    4ba8        .K      LDR      r3,[pc,#672] ; [0x5ccc] = 0x200006ec
        0x00005a2a:    7bd9        .{      LDRB     r1,[r3,#0xf]
        0x00005a2c:    7be8        .{      LDRB     r0,[r5,#0xf]
        0x00005a2e:    4048        H@      EORS     r0,r0,r1
        0x00005a30:    9017        ..      STR      r0,[sp,#0x5c]
        0x00005a32:    7b99        .{      LDRB     r1,[r3,#0xe]
        0x00005a34:    7aea        .z      LDRB     r2,[r5,#0xb]
        0x00005a36:    404a        J@      EORS     r2,r2,r1
        0x00005a38:    7b59        Y{      LDRB     r1,[r3,#0xd]
        0x00005a3a:    79e8        .y      LDRB     r0,[r5,#7]
        0x00005a3c:    4048        H@      EORS     r0,r0,r1
        0x00005a3e:    9011        ..      STR      r0,[sp,#0x44]
        0x00005a40:    7b19        .{      LDRB     r1,[r3,#0xc]
        0x00005a42:    78e8        .x      LDRB     r0,[r5,#3]
        0x00005a44:    4048        H@      EORS     r0,r0,r1
        0x00005a46:    9016        ..      STR      r0,[sp,#0x58]
        0x00005a48:    7ad9        .z      LDRB     r1,[r3,#0xb]
        0x00005a4a:    7ba8        .{      LDRB     r0,[r5,#0xe]
        0x00005a4c:    4048        H@      EORS     r0,r0,r1
        0x00005a4e:    9015        ..      STR      r0,[sp,#0x54]
        0x00005a50:    7a99        .z      LDRB     r1,[r3,#0xa]
        0x00005a52:    7aa8        .z      LDRB     r0,[r5,#0xa]
        0x00005a54:    4048        H@      EORS     r0,r0,r1
        0x00005a56:    9014        ..      STR      r0,[sp,#0x50]
        0x00005a58:    7a59        Yz      LDRB     r1,[r3,#9]
        0x00005a5a:    79ac        .y      LDRB     r4,[r5,#6]
        0x00005a5c:    404c        L@      EORS     r4,r4,r1
        0x00005a5e:    7a19        .z      LDRB     r1,[r3,#8]
        0x00005a60:    78ae        .x      LDRB     r6,[r5,#2]
        0x00005a62:    404e        N@      EORS     r6,r6,r1
        0x00005a64:    79d9        .y      LDRB     r1,[r3,#7]
        0x00005a66:    7b68        h{      LDRB     r0,[r5,#0xd]
        0x00005a68:    4048        H@      EORS     r0,r0,r1
        0x00005a6a:    9010        ..      STR      r0,[sp,#0x40]
        0x00005a6c:    7999        .y      LDRB     r1,[r3,#6]
        0x00005a6e:    7a68        hz      LDRB     r0,[r5,#9]
        0x00005a70:    4048        H@      EORS     r0,r0,r1
        0x00005a72:    9013        ..      STR      r0,[sp,#0x4c]
        0x00005a74:    7959        Yy      LDRB     r1,[r3,#5]
        0x00005a76:    7968        hy      LDRB     r0,[r5,#5]
        0x00005a78:    4048        H@      EORS     r0,r0,r1
        0x00005a7a:    9019        ..      STR      r0,[sp,#0x64]
        0x00005a7c:    791f        .y      LDRB     r7,[r3,#4]
        0x00005a7e:    7869        ix      LDRB     r1,[r5,#1]
        0x00005a80:    4079        y@      EORS     r1,r1,r7
        0x00005a82:    78d8        .x      LDRB     r0,[r3,#3]
        0x00005a84:    7b2f        /{      LDRB     r7,[r5,#0xc]
;;;1      #include "Algorithms.h"
;;;2      
;;;3      /*This is AES algorithm, only encryption implemented*/
;;;4      
;;;5      /*-------------------- Rijndael round subkeys ---------------------*/
;;;6      static uMonoByte roundKeys[11][4][4];
;;;7      /*--------------------- Rijndael S box table ----------------------*/
;;;8      const uMonoByte S[256] = {
;;;9       99,124,119,123,242,107,111,197, 48, 1,103, 43,254,215,171,118,
;;;10     202,130,201,125,250, 89, 71,240,173,212,162,175,156,164,114,192,
;;;11     183,253,147, 38, 54, 63,247,204, 52,165,229,241,113,216, 49, 21,
;;;12      4,199, 35,195, 24,150, 5,154, 7, 18,128,226,235, 39,178,117,
;;;13      9,131, 44, 26, 27,110, 90,160, 82, 59,214,179, 41,227, 47,132,
;;;14      83,209, 0,237, 32,252,177, 91,106,203,190, 57, 74, 76, 88,207,
;;;15     208,239,170,251, 67, 77, 51,133, 69,249, 2,127, 80, 60,159,168,
;;;16      81,163, 64,143,146,157, 56,245,188,182,218, 33, 16,255,243,210,
;;;17     205, 12, 19,236, 95,151, 68, 23,196,167,126, 61,100, 93, 25,115,
;;;18      96,129, 79,220, 34, 42,144,136, 70,238,184, 20,222, 94, 11,219,
;;;19     224, 50, 58, 10, 73, 6, 36, 92,194,211,172, 98,145,149,228,121,
;;;20     231,200, 55,109,141,213, 78,169,108, 86,244,234,101,122,174, 8,
;;;21     186,120, 37, 46, 28,166,180,198,232,221,116, 31, 75,189,139,138,
;;;22     112, 62,181,102, 72, 3,246, 14, 97, 53, 87,185,134,193, 29,158,
;;;23     225,248,152, 17,105,217,142,148,155, 30,135,233,206, 85, 40,223,
;;;24     140,161,137, 13,191,230, 66,104, 65,153, 45, 15,176, 84,187, 22,
;;;25     };
;;;26     /*------- This array does the multiplication by x in GF(2^8) ------*/
;;;27     const uMonoByte Xtime[256] = {
;;;28      0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
;;;29      32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
;;;30      64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
;;;31      96, 98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
;;;32     128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
;;;33     160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
;;;34     192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
;;;35     224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
;;;36      27, 25, 31, 29, 19, 17, 23, 21, 11, 9, 15, 13, 3, 1, 7, 5,
;;;37      59, 57, 63, 61, 51, 49, 55, 53, 43, 41, 47, 45, 35, 33, 39, 37,
;;;38      91, 89, 95, 93, 83, 81, 87, 85, 75, 73, 79, 77, 67, 65, 71, 69,
;;;39     123,121,127,125,115,113,119,117,107,105,111,109, 99, 97,103,101,
;;;40     155,153,159,157,147,145,151,149,139,137,143,141,131,129,135,133,
;;;41     187,185,191,189,179,177,183,181,171,169,175,173,163,161,167,165,
;;;42     219,217,223,221,211,209,215,213,203,201,207,205,195,193,199,197,
;;;43     251,249,255,253,243,241,247,245,235,233,239,237,227,225,231,229
;;;44     };
;;;45     /*-------------------------------------------------------------------
;;;46      * Rijndael key schedule function. Takes 16-byte key and creates
;;;47      * all Rijndael's internal subkeys ready for encryption.
;;;48      *-----------------------------------------------------------------*/
;;;49     void RijndaelKeySchedule(uMonoByte key[16])
;;;50     {
;;;51     	uMonoByte roundConst;
;;;52     	uQuadByte i, j;
;;;53     	/* first round key equals key */
;;;54     	for (i = 0; i < 16; i++)
;;;55     		roundKeys[0][i & 0x03][i >> 2] = key[i];
;;;56     	roundConst = 1;
;;;57     	/* now calculate round keys */
;;;58     	for (i = 1; i < 11; i++)
;;;59     	{
;;;60     		roundKeys[i][0][0] = S[roundKeys[i - 1][1][3]]
;;;61     			^ roundKeys[i - 1][0][0] ^ roundConst;
;;;62     		roundKeys[i][1][0] = S[roundKeys[i - 1][2][3]]
;;;63     			^ roundKeys[i - 1][1][0];
;;;64     		roundKeys[i][2][0] = S[roundKeys[i - 1][3][3]]
;;;65     			^ roundKeys[i - 1][2][0];
;;;66     		roundKeys[i][3][0] = S[roundKeys[i - 1][0][3]]
;;;67     			^ roundKeys[i - 1][3][0];
;;;68     		for (j = 0; j < 4; j++)
;;;69     		{
;;;70     			roundKeys[i][j][1] = roundKeys[i - 1][j][1] ^ roundKeys[i][j][0];
;;;71     			roundKeys[i][j][2] = roundKeys[i - 1][j][2] ^ roundKeys[i][j][1];
;;;72     			roundKeys[i][j][3] = roundKeys[i - 1][j][3] ^ roundKeys[i][j][2];
;;;73     		}
;;;74     		/* update round constant */
;;;75     		roundConst = Xtime[roundConst];
;;;76     	}
;;;77     	return;
;;;78     } /* end of function RijndaelKeySchedule */
;;;79     /* Round key addition function */
;;;80     static void KeyAdd(uMonoByte state[4][4], uMonoByte roundKeys[11][4][4], uQuadByte round)
;;;81     {
;;;82     	uQuadByte i, j;
;;;83     	for (i = 0; i < 4; i++)
;;;84     		for (j = 0; j < 4; j++)
;;;85     			state[i][j] ^= roundKeys[round][i][j];
        0x00005a86:    4047        G@      EORS     r7,r7,r0
        0x00005a88:    7898        .x      LDRB     r0,[r3,#2]
        0x00005a8a:    9d12        ..      LDR      r5,[sp,#0x48]
        0x00005a8c:    4068        h@      EORS     r0,r0,r5
        0x00005a8e:    9012        ..      STR      r0,[sp,#0x48]
        0x00005a90:    7858        Xx      LDRB     r0,[r3,#1]
        0x00005a92:    9d18        ..      LDR      r5,[sp,#0x60]
        0x00005a94:    4068        h@      EORS     r0,r0,r5
        0x00005a96:    9018        ..      STR      r0,[sp,#0x60]
        0x00005a98:    7818        .x      LDRB     r0,[r3,#0]
        0x00005a9a:    9b1a        ..      LDR      r3,[sp,#0x68]
        0x00005a9c:    4058        X@      EORS     r0,r0,r3
        0x00005a9e:    901a        ..      STR      r0,[sp,#0x68]
        0x00005aa0:    2000        .       MOVS     r0,#0
        0x00005aa2:    900f        ..      STR      r0,[sp,#0x3c]
        0x00005aa4:    b2f0        ..      UXTB     r0,r6
        0x00005aa6:    4b8a        .K      LDR      r3,[pc,#552] ; [0x5cd0] = 0x7ff0
        0x00005aa8:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005aaa:    ad1b        ..      ADD      r5,sp,#0x6c
        0x00005aac:    72a8        .r      STRB     r0,[r5,#0xa]
        0x00005aae:    9814        ..      LDR      r0,[sp,#0x50]
        0x00005ab0:    b2c0        ..      UXTB     r0,r0
        0x00005ab2:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005ab4:    7228        (r      STRB     r0,[r5,#8]
        0x00005ab6:    b2c8        ..      UXTB     r0,r1
        0x00005ab8:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005aba:    71e8        .q      STRB     r0,[r5,#7]
        0x00005abc:    9810        ..      LDR      r0,[sp,#0x40]
        0x00005abe:    b2c0        ..      UXTB     r0,r0
        0x00005ac0:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005ac2:    71a8        .q      STRB     r0,[r5,#6]
        0x00005ac4:    9813        ..      LDR      r0,[sp,#0x4c]
        0x00005ac6:    b2c0        ..      UXTB     r0,r0
        0x00005ac8:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005aca:    7168        hq      STRB     r0,[r5,#5]
        0x00005acc:    9819        ..      LDR      r0,[sp,#0x64]
        0x00005ace:    b2c0        ..      UXTB     r0,r0
        0x00005ad0:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005ad2:    7128        (q      STRB     r0,[r5,#4]
        0x00005ad4:    b2f8        ..      UXTB     r0,r7
        0x00005ad6:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005ad8:    70e8        .p      STRB     r0,[r5,#3]
        0x00005ada:    9812        ..      LDR      r0,[sp,#0x48]
        0x00005adc:    b2c0        ..      UXTB     r0,r0
        0x00005ade:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005ae0:    70a8        .p      STRB     r0,[r5,#2]
        0x00005ae2:    9818        ..      LDR      r0,[sp,#0x60]
        0x00005ae4:    b2c0        ..      UXTB     r0,r0
        0x00005ae6:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005ae8:    7068        hp      STRB     r0,[r5,#1]
        0x00005aea:    981a        ..      LDR      r0,[sp,#0x68]
        0x00005aec:    b2c0        ..      UXTB     r0,r0
        0x00005aee:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005af0:    7028        (p      STRB     r0,[r5,#0]
        0x00005af2:    b2d0        ..      UXTB     r0,r2
        0x00005af4:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005af6:    73e8        .s      STRB     r0,[r5,#0xf]
        0x00005af8:    9817        ..      LDR      r0,[sp,#0x5c]
        0x00005afa:    b2c0        ..      UXTB     r0,r0
        0x00005afc:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005afe:    7328        (s      STRB     r0,[r5,#0xc]
        0x00005b00:    b2e0        ..      UXTB     r0,r4
        0x00005b02:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005b04:    72e8        .r      STRB     r0,[r5,#0xb]
        0x00005b06:    9815        ..      LDR      r0,[sp,#0x54]
        0x00005b08:    b2c0        ..      UXTB     r0,r0
        0x00005b0a:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005b0c:    7268        hr      STRB     r0,[r5,#9]
        0x00005b0e:    9811        ..      LDR      r0,[sp,#0x44]
        0x00005b10:    b2c0        ..      UXTB     r0,r0
        0x00005b12:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005b14:    73a8        .s      STRB     r0,[r5,#0xe]
        0x00005b16:    9816        ..      LDR      r0,[sp,#0x58]
        0x00005b18:    b2c0        ..      UXTB     r0,r0
        0x00005b1a:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005b1c:    7368        hs      STRB     r0,[r5,#0xd]
        0x00005b1e:    4628        (F      MOV      r0,r5
        0x00005b20:    f7fffec6    ....    BL       MixColumn ; 0x58b0
        0x00005b24:    4869        iH      LDR      r0,[pc,#420] ; [0x5ccc] = 0x200006ec
        0x00005b26:    9f0f        ..      LDR      r7,[sp,#0x3c]
        0x00005b28:    19c0        ..      ADDS     r0,r0,r7
        0x00005b2a:    7c01        .|      LDRB     r1,[r0,#0x10]
        0x00005b2c:    9a1b        ..      LDR      r2,[sp,#0x6c]
        0x00005b2e:    404a        J@      EORS     r2,r2,r1
        0x00005b30:    921a        ..      STR      r2,[sp,#0x68]
        0x00005b32:    702a        *p      STRB     r2,[r5,#0]
        0x00005b34:    7c41        A|      LDRB     r1,[r0,#0x11]
        0x00005b36:    786a        jx      LDRB     r2,[r5,#1]
        0x00005b38:    404a        J@      EORS     r2,r2,r1
        0x00005b3a:    9218        ..      STR      r2,[sp,#0x60]
        0x00005b3c:    706a        jp      STRB     r2,[r5,#1]
        0x00005b3e:    7c81        .|      LDRB     r1,[r0,#0x12]
        0x00005b40:    78aa        .x      LDRB     r2,[r5,#2]
        0x00005b42:    404a        J@      EORS     r2,r2,r1
        0x00005b44:    9212        ..      STR      r2,[sp,#0x48]
        0x00005b46:    70aa        .p      STRB     r2,[r5,#2]
        0x00005b48:    7cc1        .|      LDRB     r1,[r0,#0x13]
        0x00005b4a:    78ea        .x      LDRB     r2,[r5,#3]
        0x00005b4c:    404a        J@      EORS     r2,r2,r1
        0x00005b4e:    920e        ..      STR      r2,[sp,#0x38]
        0x00005b50:    70ea        .p      STRB     r2,[r5,#3]
        0x00005b52:    7d02        .}      LDRB     r2,[r0,#0x14]
        0x00005b54:    991c        ..      LDR      r1,[sp,#0x70]
        0x00005b56:    4051        Q@      EORS     r1,r1,r2
        0x00005b58:    7129        )q      STRB     r1,[r5,#4]
        0x00005b5a:    7d42        B}      LDRB     r2,[r0,#0x15]
        0x00005b5c:    796b        ky      LDRB     r3,[r5,#5]
        0x00005b5e:    4053        S@      EORS     r3,r3,r2
        0x00005b60:    9319        ..      STR      r3,[sp,#0x64]
        0x00005b62:    716b        kq      STRB     r3,[r5,#5]
        0x00005b64:    7d82        .}      LDRB     r2,[r0,#0x16]
        0x00005b66:    79ab        .y      LDRB     r3,[r5,#6]
        0x00005b68:    4053        S@      EORS     r3,r3,r2
        0x00005b6a:    9313        ..      STR      r3,[sp,#0x4c]
        0x00005b6c:    71ab        .q      STRB     r3,[r5,#6]
        0x00005b6e:    7dc2        .}      LDRB     r2,[r0,#0x17]
        0x00005b70:    79eb        .y      LDRB     r3,[r5,#7]
        0x00005b72:    4053        S@      EORS     r3,r3,r2
        0x00005b74:    9310        ..      STR      r3,[sp,#0x40]
        0x00005b76:    71eb        .q      STRB     r3,[r5,#7]
        0x00005b78:    7e02        .~      LDRB     r2,[r0,#0x18]
        0x00005b7a:    9e1d        ..      LDR      r6,[sp,#0x74]
        0x00005b7c:    4056        V@      EORS     r6,r6,r2
        0x00005b7e:    722e        .r      STRB     r6,[r5,#8]
        0x00005b80:    7e42        B~      LDRB     r2,[r0,#0x19]
        0x00005b82:    7a6c        lz      LDRB     r4,[r5,#9]
        0x00005b84:    4054        T@      EORS     r4,r4,r2
        0x00005b86:    726c        lr      STRB     r4,[r5,#9]
        0x00005b88:    7e82        .~      LDRB     r2,[r0,#0x1a]
        0x00005b8a:    7aab        .z      LDRB     r3,[r5,#0xa]
        0x00005b8c:    4053        S@      EORS     r3,r3,r2
        0x00005b8e:    9314        ..      STR      r3,[sp,#0x50]
        0x00005b90:    72ab        .r      STRB     r3,[r5,#0xa]
        0x00005b92:    7ec2        .~      LDRB     r2,[r0,#0x1b]
        0x00005b94:    7aeb        .z      LDRB     r3,[r5,#0xb]
        0x00005b96:    4053        S@      EORS     r3,r3,r2
        0x00005b98:    9315        ..      STR      r3,[sp,#0x54]
        0x00005b9a:    72eb        .r      STRB     r3,[r5,#0xb]
        0x00005b9c:    7f02        ..      LDRB     r2,[r0,#0x1c]
        0x00005b9e:    9b1e        ..      LDR      r3,[sp,#0x78]
        0x00005ba0:    4053        S@      EORS     r3,r3,r2
        0x00005ba2:    9316        ..      STR      r3,[sp,#0x58]
        0x00005ba4:    732b        +s      STRB     r3,[r5,#0xc]
        0x00005ba6:    7f42        B.      LDRB     r2,[r0,#0x1d]
        0x00005ba8:    7b6b        k{      LDRB     r3,[r5,#0xd]
        0x00005baa:    4053        S@      EORS     r3,r3,r2
        0x00005bac:    9311        ..      STR      r3,[sp,#0x44]
        0x00005bae:    736b        ks      STRB     r3,[r5,#0xd]
        0x00005bb0:    7f83        ..      LDRB     r3,[r0,#0x1e]
        0x00005bb2:    7baa        .{      LDRB     r2,[r5,#0xe]
        0x00005bb4:    405a        Z@      EORS     r2,r2,r3
        0x00005bb6:    73aa        .s      STRB     r2,[r5,#0xe]
        0x00005bb8:    7fc0        ..      LDRB     r0,[r0,#0x1f]
        0x00005bba:    7beb        .{      LDRB     r3,[r5,#0xf]
        0x00005bbc:    4043        C@      EORS     r3,r3,r0
        0x00005bbe:    9317        ..      STR      r3,[sp,#0x5c]
        0x00005bc0:    73eb        .s      STRB     r3,[r5,#0xf]
        0x00005bc2:    3710        .7      ADDS     r7,r7,#0x10
        0x00005bc4:    970f        ..      STR      r7,[sp,#0x3c]
        0x00005bc6:    2f90        ./      CMP      r7,#0x90
        0x00005bc8:    9f0e        ..      LDR      r7,[sp,#0x38]
        0x00005bca:    d000        ..      BEQ      0x5bce ; RijndaelEncrypt + 450
        0x00005bcc:    e76a        j.      B        0x5aa4 ; RijndaelEncrypt + 152
        0x00005bce:    20a0        .       MOVS     r0,#0xa0
        0x00005bd0:    4d3e        >M      LDR      r5,[pc,#248] ; [0x5ccc] = 0x200006ec
        0x00005bd2:    5c28        (\      LDRB     r0,[r5,r0]
        0x00005bd4:    900f        ..      STR      r0,[sp,#0x3c]
        0x00005bd6:    b2d0        ..      UXTB     r0,r2
        0x00005bd8:    4b3d        =K      LDR      r3,[pc,#244] ; [0x5cd0] = 0x7ff0
        0x00005bda:    5c1a        .\      LDRB     r2,[r3,r0]
        0x00005bdc:    35a0        .5      ADDS     r5,r5,#0xa0
        0x00005bde:    7be8        .{      LDRB     r0,[r5,#0xf]
        0x00005be0:    4050        P@      EORS     r0,r0,r2
        0x00005be2:    792a        *y      LDRB     r2,[r5,#4]
        0x00005be4:    920c        ..      STR      r2,[sp,#0x30]
        0x00005be6:    7a2a        *z      LDRB     r2,[r5,#8]
        0x00005be8:    920b        ..      STR      r2,[sp,#0x2c]
        0x00005bea:    7b2a        *{      LDRB     r2,[r5,#0xc]
        0x00005bec:    920a        ..      STR      r2,[sp,#0x28]
        0x00005bee:    786a        jx      LDRB     r2,[r5,#1]
        0x00005bf0:    9209        ..      STR      r2,[sp,#0x24]
        0x00005bf2:    796a        jy      LDRB     r2,[r5,#5]
        0x00005bf4:    9208        ..      STR      r2,[sp,#0x20]
        0x00005bf6:    7a6a        jz      LDRB     r2,[r5,#9]
        0x00005bf8:    9207        ..      STR      r2,[sp,#0x1c]
        0x00005bfa:    7b6a        j{      LDRB     r2,[r5,#0xd]
        0x00005bfc:    9206        ..      STR      r2,[sp,#0x18]
        0x00005bfe:    78aa        .x      LDRB     r2,[r5,#2]
        0x00005c00:    9205        ..      STR      r2,[sp,#0x14]
        0x00005c02:    79aa        .y      LDRB     r2,[r5,#6]
        0x00005c04:    9204        ..      STR      r2,[sp,#0x10]
        0x00005c06:    7aaa        .z      LDRB     r2,[r5,#0xa]
        0x00005c08:    9203        ..      STR      r2,[sp,#0xc]
        0x00005c0a:    7baa        .{      LDRB     r2,[r5,#0xe]
        0x00005c0c:    9202        ..      STR      r2,[sp,#8]
        0x00005c0e:    78ea        .x      LDRB     r2,[r5,#3]
        0x00005c10:    9201        ..      STR      r2,[sp,#4]
        0x00005c12:    79ea        .y      LDRB     r2,[r5,#7]
        0x00005c14:    9200        ..      STR      r2,[sp,#0]
        0x00005c16:    7aed        .z      LDRB     r5,[r5,#0xb]
        0x00005c18:    9a0d        ..      LDR      r2,[sp,#0x34]
        0x00005c1a:    73d0        .s      STRB     r0,[r2,#0xf]
        0x00005c1c:    b2e0        ..      UXTB     r0,r4
        0x00005c1e:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c20:    4068        h@      EORS     r0,r0,r5
        0x00005c22:    7390        .s      STRB     r0,[r2,#0xe]
        0x00005c24:    b2c8        ..      UXTB     r0,r1
        0x00005c26:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c28:    9900        ..      LDR      r1,[sp,#0]
        0x00005c2a:    4048        H@      EORS     r0,r0,r1
        0x00005c2c:    7350        Ps      STRB     r0,[r2,#0xd]
        0x00005c2e:    b2f8        ..      UXTB     r0,r7
        0x00005c30:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c32:    9901        ..      LDR      r1,[sp,#4]
        0x00005c34:    4048        H@      EORS     r0,r0,r1
        0x00005c36:    7310        .s      STRB     r0,[r2,#0xc]
        0x00005c38:    9811        ..      LDR      r0,[sp,#0x44]
        0x00005c3a:    b2c0        ..      UXTB     r0,r0
        0x00005c3c:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c3e:    9902        ..      LDR      r1,[sp,#8]
        0x00005c40:    4048        H@      EORS     r0,r0,r1
        0x00005c42:    72d0        .r      STRB     r0,[r2,#0xb]
        0x00005c44:    b2f0        ..      UXTB     r0,r6
        0x00005c46:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c48:    9903        ..      LDR      r1,[sp,#0xc]
        0x00005c4a:    4048        H@      EORS     r0,r0,r1
        0x00005c4c:    7290        .r      STRB     r0,[r2,#0xa]
        0x00005c4e:    9810        ..      LDR      r0,[sp,#0x40]
        0x00005c50:    b2c0        ..      UXTB     r0,r0
        0x00005c52:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c54:    9904        ..      LDR      r1,[sp,#0x10]
        0x00005c56:    4048        H@      EORS     r0,r0,r1
        0x00005c58:    7250        Pr      STRB     r0,[r2,#9]
        0x00005c5a:    9812        ..      LDR      r0,[sp,#0x48]
        0x00005c5c:    b2c0        ..      UXTB     r0,r0
        0x00005c5e:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c60:    9905        ..      LDR      r1,[sp,#0x14]
        0x00005c62:    4048        H@      EORS     r0,r0,r1
        0x00005c64:    7210        .r      STRB     r0,[r2,#8]
        0x00005c66:    9816        ..      LDR      r0,[sp,#0x58]
        0x00005c68:    b2c0        ..      UXTB     r0,r0
        0x00005c6a:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c6c:    9906        ..      LDR      r1,[sp,#0x18]
        0x00005c6e:    4048        H@      EORS     r0,r0,r1
        0x00005c70:    71d0        .q      STRB     r0,[r2,#7]
        0x00005c72:    9815        ..      LDR      r0,[sp,#0x54]
        0x00005c74:    b2c0        ..      UXTB     r0,r0
        0x00005c76:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c78:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00005c7a:    4048        H@      EORS     r0,r0,r1
        0x00005c7c:    7190        .q      STRB     r0,[r2,#6]
        0x00005c7e:    9813        ..      LDR      r0,[sp,#0x4c]
        0x00005c80:    b2c0        ..      UXTB     r0,r0
        0x00005c82:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c84:    9908        ..      LDR      r1,[sp,#0x20]
        0x00005c86:    4048        H@      EORS     r0,r0,r1
        0x00005c88:    7150        Pq      STRB     r0,[r2,#5]
        0x00005c8a:    9818        ..      LDR      r0,[sp,#0x60]
        0x00005c8c:    b2c0        ..      UXTB     r0,r0
        0x00005c8e:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c90:    9909        ..      LDR      r1,[sp,#0x24]
        0x00005c92:    4048        H@      EORS     r0,r0,r1
        0x00005c94:    7110        .q      STRB     r0,[r2,#4]
        0x00005c96:    9817        ..      LDR      r0,[sp,#0x5c]
        0x00005c98:    b2c0        ..      UXTB     r0,r0
        0x00005c9a:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005c9c:    990a        ..      LDR      r1,[sp,#0x28]
        0x00005c9e:    4048        H@      EORS     r0,r0,r1
        0x00005ca0:    70d0        .p      STRB     r0,[r2,#3]
        0x00005ca2:    9814        ..      LDR      r0,[sp,#0x50]
        0x00005ca4:    b2c0        ..      UXTB     r0,r0
        0x00005ca6:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005ca8:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00005caa:    4048        H@      EORS     r0,r0,r1
        0x00005cac:    7090        .p      STRB     r0,[r2,#2]
        0x00005cae:    9819        ..      LDR      r0,[sp,#0x64]
        0x00005cb0:    b2c0        ..      UXTB     r0,r0
        0x00005cb2:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005cb4:    990c        ..      LDR      r1,[sp,#0x30]
        0x00005cb6:    4048        H@      EORS     r0,r0,r1
        0x00005cb8:    7050        Pp      STRB     r0,[r2,#1]
        0x00005cba:    981a        ..      LDR      r0,[sp,#0x68]
        0x00005cbc:    b2c0        ..      UXTB     r0,r0
        0x00005cbe:    5c18        .\      LDRB     r0,[r3,r0]
        0x00005cc0:    990f        ..      LDR      r1,[sp,#0x3c]
        0x00005cc2:    4048        H@      EORS     r0,r0,r1
;;;86     	return;
;;;87     }
;;;88     /* Byte substitution transformation */
;;;89     uQuadByte ByteSub(uMonoByte state[4][4])
;;;90     {
;;;91     	uQuadByte i, j;
;;;92     	for (i = 0; i < 4; i++)
;;;93     		for (j = 0; j < 4; j++)
;;;94     			state[i][j] = S[state[i][j]];
;;;95     
;;;96     	return 0;
;;;97     }
;;;98     /* Row shift transformation */
;;;99     void ShiftRow(uMonoByte state[4][4])
;;;100    {
;;;101    	uMonoByte temp;
;;;102    	/* left rotate row 1 by 1 */
;;;103    	temp = state[1][0];
;;;104    	state[1][0] = state[1][1];
;;;105    	state[1][1] = state[1][2];
;;;106    	state[1][2] = state[1][3];
;;;107    	state[1][3] = temp;
;;;108    	/* left rotate row 2 by 2 */
;;;109    	temp = state[2][0];
;;;110    	state[2][0] = state[2][2];
;;;111    	state[2][2] = temp;
;;;112    	temp = state[2][1];
;;;113    	state[2][1] = state[2][3];
;;;114    	state[2][3] = temp;
;;;115    	/* left rotate row 3 by 3 */
;;;116    	temp = state[3][0];
;;;117    	state[3][0] = state[3][3];
;;;118    	state[3][3] = state[3][2];
;;;119    	state[3][2] = state[3][1];
;;;120    	state[3][1] = temp;
;;;121    	return;
;;;122    }
;;;123    /* MixColumn transformation*/
;;;124    void MixColumn(uMonoByte state[4][4])
;;;125    {
;;;126    	uMonoByte temp, tmp, tmp0;
;;;127    	uQuadByte i;
;;;128    	/* do one column at a time */
;;;129    	for (i = 0; i < 4;i++)
;;;130    	{
;;;131    		temp = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i];
;;;132    		tmp0 = state[0][i];/* Xtime array does multiply by x in GF2^8 */
;;;133    		tmp = Xtime[state[0][i] ^ state[1][i]];
;;;134    		state[0][i] ^= temp ^ tmp;
;;;135    		tmp = Xtime[state[1][i] ^ state[2][i]];
;;;136    		state[1][i] ^= temp ^ tmp;
;;;137    		tmp = Xtime[state[2][i] ^ state[3][i]];
;;;138    		state[2][i] ^= temp ^ tmp;
;;;139    		tmp = Xtime[state[3][i] ^ tmp0];
;;;140    		state[3][i] ^= temp ^ tmp;
;;;141    	}
;;;142    	return;
;;;143    }
;;;144    /*-------------------------------------------------------------------
;;;145     * Rijndael encryption function. Takes 16-byte input and creates
;;;146     * 16-byte output (using round keys already derived from 16-byte
;;;147     * key).
;;;148     *-----------------------------------------------------------------*/
;;;149    void RijndaelEncrypt(uMonoByte input[16], uMonoByte output[16])
;;;150    {
;;;151    	uMonoByte state[4][4];
;;;152    	uQuadByte i, r;
;;;153    	/* initialise state array from input byte string */
;;;154    	for (i = 0; i < 16; i++)
;;;155    		state[i & 0x3][i >> 2] = input[i];
;;;156    	/* add first round_key */
;;;157    	KeyAdd(state, roundKeys, 0);
;;;158    
;;;159    	/* do lots of full rounds */
;;;160    	for (r = 1; r <= 9; r++)
;;;161    	{
;;;162    		ByteSub(state);
;;;163    		ShiftRow(state);
;;;164    		MixColumn(state);
;;;165    		KeyAdd(state, roundKeys, r);
;;;166    	}
;;;167    	/* final round */
;;;168    	ByteSub(state);
;;;169    	ShiftRow(state);
;;;170    	KeyAdd(state, roundKeys, r);
;;;171    	/* produce output byte string from state array */
;;;172    	for (i = 0; i < 16; i++)
;;;173    	{
;;;174    		output[i] = state[i & 0x3][i >> 2];
        0x00005cc4:    7010        .p      STRB     r0,[r2,#0]
;;;175    	}
;;;176    	return;
;;;177    } /* end of function RijndaelEncrypt */
        0x00005cc6:    b01f        ..      ADD      sp,sp,#0x7c
        0x00005cc8:    bdf0        ..      POP      {r4-r7,pc}
        0x00005cca:    46c0        .F      MOV      r8,r8
    $d.7
    __arm_cp.4_0
        0x00005ccc:    200006ec    ...     DCD    536872684
    __arm_cp.4_1
        0x00005cd0:    00007ff0    ....    DCD    32752
    $t.0
    _31102_authenticate
;;; BusinessComponent/Telecom/31_102/source\usim_GenericCommands.c
;;;268    void _31102_authenticate(void) {
        0x00005cd4:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00005cd6:    b0b1        ..      SUB      sp,sp,#0xc4
        0x00005cd8:    48cf        .H      LDR      r0,[pc,#828] ; [0x6018] = 0x41087
        0x00005cda:    900d        ..      STR      r0,[sp,#0x34]
        0x00005cdc:    20a0        .       MOVS     r0,#0xa0
        0x00005cde:    900c        ..      STR      r0,[sp,#0x30]
        0x00005ce0:    4cce        .L      LDR      r4,[pc,#824] ; [0x601c] = 0x2000023e
        0x00005ce2:    78a0        .x      LDRB     r0,[r4,#2]
        0x00005ce4:    2800        .(      CMP      r0,#0
        0x00005ce6:    d000        ..      BEQ      0x5cea ; _31102_authenticate + 22
        0x00005ce8:    e243        C.      B        0x6172 ; 0x6172
        0x00005cea:    2003        .       MOVS     r0,#3
        0x00005cec:    5620         V      LDRSB    r0,[r4,r0]
        0x00005cee:    217d        }!      MOVS     r1,#0x7d
        0x00005cf0:    43c9        .C      MVNS     r1,r1
        0x00005cf2:    4288        .B      CMP      r0,r1
        0x00005cf4:    db00        ..      BLT      0x5cf8 ; _31102_authenticate + 36
        0x00005cf6:    e23c        <.      B        0x6172 ; 0x6172
        0x00005cf8:    7920         y      LDRB     r0,[r4,#4]
        0x00005cfa:    2822        "(      CMP      r0,#0x22
        0x00005cfc:    d000        ..      BEQ      0x5d00 ; _31102_authenticate + 44
        0x00005cfe:    e24e        N.      B        0x619e ; 0x619e
        0x00005d00:    4dc7        .M      LDR      r5,[pc,#796] ; [0x6020] = 0x200006e8
        0x00005d02:    6828        (h      LDR      r0,[r5,#0]
        0x00005d04:    8941        A.      LDRH     r1,[r0,#0xa]
        0x00005d06:    2900        .)      CMP      r1,#0
        0x00005d08:    d100        ..      BNE      0x5d0c ; _31102_authenticate + 56
        0x00005d0a:    e236        6.      B        0x617a ; 0x617a
        0x00005d0c:    88c0        ..      LDRH     r0,[r0,#6]
        0x00005d0e:    4288        .B      CMP      r0,r1
        0x00005d10:    d000        ..      BEQ      0x5d14 ; _31102_authenticate + 64
        0x00005d12:    e232        2.      B        0x617a ; 0x617a
        0x00005d14:    2701        .'      MOVS     r7,#1
        0x00005d16:    4638        8F      MOV      r0,r7
        0x00005d18:    f7fefac4    ....    BL       _7816_4_isKeyRefVerified ; 0x42a4
        0x00005d1c:    2801        .(      CMP      r0,#1
        0x00005d1e:    d100        ..      BNE      0x5d22 ; _31102_authenticate + 78
        0x00005d20:    e243        C.      B        0x61aa ; 0x61aa
        0x00005d22:    6828        (h      LDR      r0,[r5,#0]
        0x00005d24:    8940        @.      LDRH     r0,[r0,#0xa]
        0x00005d26:    a922        ".      ADD      r1,sp,#0x88
        0x00005d28:    f7fef8c0    ....    BL       _7816_4_getAidOfAdf ; 0x3eac
        0x00005d2c:    28ff        .(      CMP      r0,#0xff
        0x00005d2e:    d108        ..      BNE      0x5d42 ; _31102_authenticate + 110
        0x00005d30:    a822        ".      ADD      r0,sp,#0x88
        0x00005d32:    1c40        @.      ADDS     r0,r0,#1
        0x00005d34:    a90c        ..      ADD      r1,sp,#0x30
        0x00005d36:    2207        ."      MOVS     r2,#7
        0x00005d38:    f7fafe97    ....    BL       mem_cmp ; 0xa6a
        0x00005d3c:    4607        .F      MOV      r7,r0
        0x00005d3e:    1e40        @.      SUBS     r0,r0,#1
        0x00005d40:    4187        .A      SBCS     r7,r7,r0
        0x00005d42:    f7fdf937    ..7.    BL       _7816_4_getMfAddress ; 0x2fb4
        0x00005d46:    4601        .F      MOV      r1,r0
        0x00005d48:    48b6        .H      LDR      r0,[pc,#728] ; [0x6024] = 0x7f49
        0x00005d4a:    2200        ."      MOVS     r2,#0
        0x00005d4c:    ad29        ).      ADD      r5,sp,#0xa4
        0x00005d4e:    462b        +F      MOV      r3,r5
        0x00005d50:    f7fdf9f0    ....    BL       _7816_4_ifFileExists ; 0x3134
        0x00005d54:    8829        ).      LDRH     r1,[r5,#0]
        0x00005d56:    2900        .)      CMP      r1,#0
        0x00005d58:    d100        ..      BNE      0x5d5c ; _31102_authenticate + 136
        0x00005d5a:    e22a        *.      B        0x61b2 ; 0x61b2
        0x00005d5c:    48b2        .H      LDR      r0,[pc,#712] ; [0x6028] = 0x6f13
        0x00005d5e:    2500        .%      MOVS     r5,#0
        0x00005d60:    ae28        (.      ADD      r6,sp,#0xa0
        0x00005d62:    462a        *F      MOV      r2,r5
        0x00005d64:    4633        3F      MOV      r3,r6
        0x00005d66:    f7fdf9e5    ....    BL       _7816_4_ifFileExists ; 0x3134
        0x00005d6a:    8830        0.      LDRH     r0,[r6,#0]
        0x00005d6c:    2800        .(      CMP      r0,#0
        0x00005d6e:    d100        ..      BNE      0x5d72 ; _31102_authenticate + 158
        0x00005d70:    e207        ..      B        0x6182 ; 0x6182
        0x00005d72:    f7fdfba5    ....    BL       _7816_4_getFileSize ; 0x34c0
        0x00005d76:    2810        .(      CMP      r0,#0x10
        0x00005d78:    d000        ..      BEQ      0x5d7c ; _31102_authenticate + 168
        0x00005d7a:    e202        ..      B        0x6182 ; 0x6182
        0x00005d7c:    ae28        (.      ADD      r6,sp,#0xa0
        0x00005d7e:    8830        0.      LDRH     r0,[r6,#0]
        0x00005d80:    9500        ..      STR      r5,[sp,#0]
        0x00005d82:    a922        ".      ADD      r1,sp,#0x88
        0x00005d84:    2310        .#      MOVS     r3,#0x10
        0x00005d86:    462a        *F      MOV      r2,r5
        0x00005d88:    f7fdfab0    ....    BL       _7816_4_readUpdateFile ; 0x32ec
        0x00005d8c:    a829        ).      ADD      r0,sp,#0xa4
        0x00005d8e:    8801        ..      LDRH     r1,[r0,#0]
        0x00005d90:    48a5        .H      LDR      r0,[pc,#660] ; [0x6028] = 0x6f13
        0x00005d92:    1c40        @.      ADDS     r0,r0,#1
        0x00005d94:    462a        *F      MOV      r2,r5
        0x00005d96:    4633        3F      MOV      r3,r6
        0x00005d98:    f7fdf9cc    ....    BL       _7816_4_ifFileExists ; 0x3134
        0x00005d9c:    8830        0.      LDRH     r0,[r6,#0]
        0x00005d9e:    2800        .(      CMP      r0,#0
        0x00005da0:    d100        ..      BNE      0x5da4 ; _31102_authenticate + 208
        0x00005da2:    e1f5        ..      B        0x6190 ; 0x6190
        0x00005da4:    f7fdfb8c    ....    BL       _7816_4_getFileSize ; 0x34c0
        0x00005da8:    2810        .(      CMP      r0,#0x10
        0x00005daa:    d000        ..      BEQ      0x5dae ; _31102_authenticate + 218
        0x00005dac:    e1f0        ..      B        0x6190 ; 0x6190
        0x00005dae:    a828        (.      ADD      r0,sp,#0xa0
        0x00005db0:    8800        ..      LDRH     r0,[r0,#0]
        0x00005db2:    9500        ..      STR      r5,[sp,#0]
        0x00005db4:    a910        ..      ADD      r1,sp,#0x40
        0x00005db6:    2610        .&      MOVS     r6,#0x10
        0x00005db8:    462a        *F      MOV      r2,r5
        0x00005dba:    4633        3F      MOV      r3,r6
        0x00005dbc:    f7fdfa96    ....    BL       _7816_4_readUpdateFile ; 0x32ec
        0x00005dc0:    78e0        .x      LDRB     r0,[r4,#3]
        0x00005dc2:    2881        .(      CMP      r0,#0x81
        0x00005dc4:    d000        ..      BEQ      0x5dc8 ; _31102_authenticate + 244
        0x00005dc6:    e1d2        ..      B        0x616e ; 0x616e
        0x00005dc8:    9605        ..      STR      r6,[sp,#0x14]
        0x00005dca:    9707        ..      STR      r7,[sp,#0x1c]
        0x00005dcc:    af16        ..      ADD      r7,sp,#0x58
        0x00005dce:    9702        ..      STR      r7,[sp,#8]
        0x00005dd0:    a818        ..      ADD      r0,sp,#0x60
        0x00005dd2:    9001        ..      STR      r0,[sp,#4]
        0x00005dd4:    a81c        ..      ADD      r0,sp,#0x70
        0x00005dd6:    9000        ..      STR      r0,[sp,#0]
        0x00005dd8:    1da5        ..      ADDS     r5,r4,#6
        0x00005dda:    a822        ".      ADD      r0,sp,#0x88
        0x00005ddc:    900b        ..      STR      r0,[sp,#0x2c]
        0x00005dde:    ae10        ..      ADD      r6,sp,#0x40
        0x00005de0:    ab20         .      ADD      r3,sp,#0x80
        0x00005de2:    4629        )F      MOV      r1,r5
        0x00005de4:    4632        2F      MOV      r2,r6
        0x00005de6:    f7fefffd    ....    BL       f2345 ; 0x4de4
        0x00005dea:    7de0        .}      LDRB     r0,[r4,#0x17]
        0x00005dec:    9916        ..      LDR      r1,[sp,#0x58]
        0x00005dee:    4041        A@      EORS     r1,r1,r0
        0x00005df0:    aa14        ..      ADD      r2,sp,#0x50
        0x00005df2:    7011        .p      STRB     r1,[r2,#0]
        0x00005df4:    7e20         ~      LDRB     r0,[r4,#0x18]
        0x00005df6:    7879        yx      LDRB     r1,[r7,#1]
        0x00005df8:    4041        A@      EORS     r1,r1,r0
        0x00005dfa:    7051        Qp      STRB     r1,[r2,#1]
        0x00005dfc:    7e60        `~      LDRB     r0,[r4,#0x19]
        0x00005dfe:    78b9        .x      LDRB     r1,[r7,#2]
        0x00005e00:    4041        A@      EORS     r1,r1,r0
        0x00005e02:    7091        .p      STRB     r1,[r2,#2]
        0x00005e04:    7ea0        .~      LDRB     r0,[r4,#0x1a]
        0x00005e06:    78f9        .x      LDRB     r1,[r7,#3]
        0x00005e08:    4041        A@      EORS     r1,r1,r0
        0x00005e0a:    70d1        .p      STRB     r1,[r2,#3]
        0x00005e0c:    7ee0        .~      LDRB     r0,[r4,#0x1b]
        0x00005e0e:    9917        ..      LDR      r1,[sp,#0x5c]
        0x00005e10:    4041        A@      EORS     r1,r1,r0
        0x00005e12:    7111        .q      STRB     r1,[r2,#4]
        0x00005e14:    7f20         .      LDRB     r0,[r4,#0x1c]
        0x00005e16:    7979        yy      LDRB     r1,[r7,#5]
        0x00005e18:    4041        A@      EORS     r1,r1,r0
        0x00005e1a:    7151        Qq      STRB     r1,[r2,#5]
        0x00005e1c:    af0e        ..      ADD      r7,sp,#0x38
        0x00005e1e:    9600        ..      STR      r6,[sp,#0]
        0x00005e20:    9701        ..      STR      r7,[sp,#4]
        0x00005e22:    4626        &F      MOV      r6,r4
        0x00005e24:    361d        .6      ADDS     r6,r6,#0x1d
        0x00005e26:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00005e28:    9504        ..      STR      r5,[sp,#0x10]
        0x00005e2a:    4629        )F      MOV      r1,r5
        0x00005e2c:    4633        3F      MOV      r3,r6
        0x00005e2e:    f7fefecd    ....    BL       f1 ; 0x4bcc
        0x00005e32:    341f        .4      ADDS     r4,r4,#0x1f
        0x00005e34:    2208        ."      MOVS     r2,#8
        0x00005e36:    4620         F      MOV      r0,r4
        0x00005e38:    4639        9F      MOV      r1,r7
        0x00005e3a:    9208        ..      STR      r2,[sp,#0x20]
        0x00005e3c:    f7fafe15    ....    BL       mem_cmp ; 0xa6a
        0x00005e40:    2800        .(      CMP      r0,#0
        0x00005e42:    d000        ..      BEQ      0x5e46 ; _31102_authenticate + 370
        0x00005e44:    e1c0        ..      B        0x61c8 ; 0x61c8
;;; BusinessComponent/Telecom/31_102/source\usim_GenericCommands.c
        0x00005e46:    9603        ..      STR      r6,[sp,#0xc]
        0x00005e48:    f7fdf8b4    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x00005e4c:    4601        .F      MOV      r1,r0
        0x00005e4e:    2200        ."      MOVS     r2,#0
        0x00005e50:    ad2b        +.      ADD      r5,sp,#0xac
        0x00005e52:    48ea        .H      LDR      r0,[pc,#936] ; [0x61fc] = 0x7f49
        0x00005e54:    462b        +F      MOV      r3,r5
        0x00005e56:    f7fdf96d    ..m.    BL       _7816_4_ifFileExists ; 0x3134
        0x00005e5a:    8829        ).      LDRH     r1,[r5,#0]
        0x00005e5c:    2900        .)      CMP      r1,#0
        0x00005e5e:    d100        ..      BNE      0x5e62 ; _31102_authenticate + 398
        0x00005e60:    e1b6        ..      B        0x61d0 ; 0x61d0
        0x00005e62:    48e7        .H      LDR      r0,[pc,#924] ; [0x6200] = 0x6f13
        0x00005e64:    1c80        ..      ADDS     r0,r0,#2
        0x00005e66:    2600        .&      MOVS     r6,#0
        0x00005e68:    ad2a        *.      ADD      r5,sp,#0xa8
        0x00005e6a:    4632        2F      MOV      r2,r6
        0x00005e6c:    462b        +F      MOV      r3,r5
        0x00005e6e:    f7fdf961    ..a.    BL       _7816_4_ifFileExists ; 0x3134
        0x00005e72:    8828        (.      LDRH     r0,[r5,#0]
        0x00005e74:    2800        .(      CMP      r0,#0
        0x00005e76:    d100        ..      BNE      0x5e7a ; _31102_authenticate + 422
        0x00005e78:    e1a1        ..      B        0x61be ; 0x61be
        0x00005e7a:    f7fdfb21    ..!.    BL       _7816_4_getFileSize ; 0x34c0
        0x00005e7e:    28c1        .(      CMP      r0,#0xc1
        0x00005e80:    d000        ..      BEQ      0x5e84 ; _31102_authenticate + 432
        0x00005e82:    e19c        ..      B        0x61be ; 0x61be
        0x00005e84:    ac2a        *.      ADD      r4,sp,#0xa8
        0x00005e86:    8820         .      LDRH     r0,[r4,#0]
        0x00005e88:    9600        ..      STR      r6,[sp,#0]
        0x00005e8a:    a92c        ,.      ADD      r1,sp,#0xb0
        0x00005e8c:    910a        ..      STR      r1,[sp,#0x28]
        0x00005e8e:    2301        .#      MOVS     r3,#1
        0x00005e90:    4632        2F      MOV      r2,r6
        0x00005e92:    9309        ..      STR      r3,[sp,#0x24]
        0x00005e94:    f7fdfa2a    ..*.    BL       _7816_4_readUpdateFile ; 0x32ec
        0x00005e98:    8820         .      LDRH     r0,[r4,#0]
        0x00005e9a:    a914        ..      ADD      r1,sp,#0x50
        0x00005e9c:    910b        ..      STR      r1,[sp,#0x2c]
        0x00005e9e:    794a        Jy      LDRB     r2,[r1,#5]
        0x00005ea0:    9600        ..      STR      r6,[sp,#0]
        0x00005ea2:    211f        .!      MOVS     r1,#0x1f
        0x00005ea4:    9106        ..      STR      r1,[sp,#0x18]
        0x00005ea6:    400a        .@      ANDS     r2,r2,r1
        0x00005ea8:    2506        .%      MOVS     r5,#6
        0x00005eaa:    436a        jC      MULS     r2,r5,r2
        0x00005eac:    af2d        -.      ADD      r7,sp,#0xb4
        0x00005eae:    4639        9F      MOV      r1,r7
        0x00005eb0:    462b        +F      MOV      r3,r5
        0x00005eb2:    f7fdfa1b    ....    BL       _7816_4_readUpdateFile ; 0x32ec
        0x00005eb6:    8820         .      LDRH     r0,[r4,#0]
        0x00005eb8:    990a        ..      LDR      r1,[sp,#0x28]
        0x00005eba:    780a        .x      LDRB     r2,[r1,#0]
        0x00005ebc:    9600        ..      STR      r6,[sp,#0]
        0x00005ebe:    436a        jC      MULS     r2,r5,r2
        0x00005ec0:    a92f        /.      ADD      r1,sp,#0xbc
        0x00005ec2:    462b        +F      MOV      r3,r5
        0x00005ec4:    f7fdfa12    ....    BL       _7816_4_readUpdateFile ; 0x32ec
        0x00005ec8:    7839        9x      LDRB     r1,[r7,#0]
        0x00005eca:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00005ecc:    7800        .x      LDRB     r0,[r0,#0]
        0x00005ece:    4288        .B      CMP      r0,r1
        0x00005ed0:    d824        $.      BHI      0x5f1c ; _31102_authenticate + 584
        0x00005ed2:    d35b        [.      BCC      0x5f8c ; _31102_authenticate + 696
        0x00005ed4:    a92d        -.      ADD      r1,sp,#0xb4
        0x00005ed6:    7849        Ix      LDRB     r1,[r1,#1]
        0x00005ed8:    aa14        ..      ADD      r2,sp,#0x50
        0x00005eda:    7852        Rx      LDRB     r2,[r2,#1]
        0x00005edc:    428a        .B      CMP      r2,r1
        0x00005ede:    d81d        ..      BHI      0x5f1c ; _31102_authenticate + 584
        0x00005ee0:    d354        T.      BCC      0x5f8c ; _31102_authenticate + 696
        0x00005ee2:    a92d        -.      ADD      r1,sp,#0xb4
        0x00005ee4:    7889        .x      LDRB     r1,[r1,#2]
        0x00005ee6:    aa14        ..      ADD      r2,sp,#0x50
        0x00005ee8:    7892        .x      LDRB     r2,[r2,#2]
        0x00005eea:    428a        .B      CMP      r2,r1
        0x00005eec:    d816        ..      BHI      0x5f1c ; _31102_authenticate + 584
        0x00005eee:    d34d        M.      BCC      0x5f8c ; _31102_authenticate + 696
        0x00005ef0:    a92d        -.      ADD      r1,sp,#0xb4
        0x00005ef2:    78c9        .x      LDRB     r1,[r1,#3]
        0x00005ef4:    aa14        ..      ADD      r2,sp,#0x50
        0x00005ef6:    78d2        .x      LDRB     r2,[r2,#3]
        0x00005ef8:    428a        .B      CMP      r2,r1
        0x00005efa:    d80f        ..      BHI      0x5f1c ; _31102_authenticate + 584
        0x00005efc:    d346        F.      BCC      0x5f8c ; _31102_authenticate + 696
        0x00005efe:    a92d        -.      ADD      r1,sp,#0xb4
        0x00005f00:    7909        .y      LDRB     r1,[r1,#4]
        0x00005f02:    aa14        ..      ADD      r2,sp,#0x50
        0x00005f04:    7912        .y      LDRB     r2,[r2,#4]
        0x00005f06:    428a        .B      CMP      r2,r1
        0x00005f08:    d808        ..      BHI      0x5f1c ; _31102_authenticate + 584
        0x00005f0a:    d33f        ?.      BCC      0x5f8c ; _31102_authenticate + 696
        0x00005f0c:    a92d        -.      ADD      r1,sp,#0xb4
        0x00005f0e:    7949        Iy      LDRB     r1,[r1,#5]
        0x00005f10:    0949        I.      LSRS     r1,r1,#5
        0x00005f12:    aa14        ..      ADD      r2,sp,#0x50
        0x00005f14:    7952        Ry      LDRB     r2,[r2,#5]
        0x00005f16:    0952        R.      LSRS     r2,r2,#5
        0x00005f18:    428a        .B      CMP      r2,r1
        0x00005f1a:    d937        7.      BLS      0x5f8c ; _31102_authenticate + 696
        0x00005f1c:    a92f        /.      ADD      r1,sp,#0xbc
        0x00005f1e:    7809        .x      LDRB     r1,[r1,#0]
        0x00005f20:    4288        .B      CMP      r0,r1
        0x00005f22:    4cb3        .L      LDR      r4,[pc,#716] ; [0x61f0] = 0x2000023e
        0x00005f24:    9b06        ..      LDR      r3,[sp,#0x18]
        0x00005f26:    d824        $.      BHI      0x5f72 ; _31102_authenticate + 670
        0x00005f28:    d32a        *.      BCC      0x5f80 ; _31102_authenticate + 684
        0x00005f2a:    a82f        /.      ADD      r0,sp,#0xbc
        0x00005f2c:    7840        @x      LDRB     r0,[r0,#1]
        0x00005f2e:    a914        ..      ADD      r1,sp,#0x50
        0x00005f30:    7849        Ix      LDRB     r1,[r1,#1]
        0x00005f32:    4281        .B      CMP      r1,r0
        0x00005f34:    d81d        ..      BHI      0x5f72 ; _31102_authenticate + 670
        0x00005f36:    d323        #.      BCC      0x5f80 ; _31102_authenticate + 684
        0x00005f38:    a82f        /.      ADD      r0,sp,#0xbc
        0x00005f3a:    7880        .x      LDRB     r0,[r0,#2]
        0x00005f3c:    a914        ..      ADD      r1,sp,#0x50
        0x00005f3e:    7889        .x      LDRB     r1,[r1,#2]
        0x00005f40:    4281        .B      CMP      r1,r0
        0x00005f42:    d816        ..      BHI      0x5f72 ; _31102_authenticate + 670
        0x00005f44:    d31c        ..      BCC      0x5f80 ; _31102_authenticate + 684
        0x00005f46:    a82f        /.      ADD      r0,sp,#0xbc
        0x00005f48:    78c0        .x      LDRB     r0,[r0,#3]
        0x00005f4a:    a914        ..      ADD      r1,sp,#0x50
        0x00005f4c:    78c9        .x      LDRB     r1,[r1,#3]
        0x00005f4e:    4281        .B      CMP      r1,r0
        0x00005f50:    d80f        ..      BHI      0x5f72 ; _31102_authenticate + 670
        0x00005f52:    d315        ..      BCC      0x5f80 ; _31102_authenticate + 684
        0x00005f54:    a82f        /.      ADD      r0,sp,#0xbc
;;;1      #include"31_102.h"
;;;2      
;;;3      /*
;;;4      * Macros
;;;5      */
;;;6      #define P2_USIM_GSM_CONTEXT																(0x00)
;;;7      #define P2_USIM_3G_CONTEXT																(0x01)
;;;8      #define P2_APPLICATION_SPECIFIC_3G_CONTEXT												(P2_APPLICATION_SPECIFIC|P2_USIM_3G_CONTEXT)
;;;9      #define P2_APPLICATION_SPECIFIC_GSM_CONTEXT												(P2_APPLICATION_SPECIFIC|P2_USIM_GSM_CONTEXT)
;;;10     #define LENGTH_AUTH_SQN																	(0x06)
;;;11     #define LENGTH_AUTH_AMF																	(0x02)
;;;12     #define LENGTH_AUTH_MAC																	(0x08)
;;;13     #define LENGTH_AUTH_AK																	(0x08)
;;;14     #define LENGTH_BYTE_OF_RANDOM_DATA														(0x01)
;;;15     #define LENGTH_BYTE_OF_AUTN_DATA														(0x01)
;;;16     #define LENGTH_AUTH_RES																	(0x08)
;;;17     #define LENGTH_AUTH_KC																	(0x08)
;;;18     #define LENGTH_AUTH_OPC																	(LENGTH_AUTH_KEY)
;;;19     #define LENGTH_AUTH_CK																	(LENGTH_AUTH_KEY)
;;;20     #define LENGTH_AUTH_IK																	(LENGTH_AUTH_KEY)
;;;21     #define LENGTH_AUTH_AUTN																(LENGTH_AUTH_SQN + LENGTH_AUTH_AMF + LENGTH_AUTH_MAC)
;;;22     #define P3_LENGTH_USIM_AUTHENTICATE														(LENGTH_BYTE_OF_RANDOM_DATA + LENGTH_CHALLENGE_DATA + LENGTH_BYTE_OF_AUTN_DATA + LENGTH_AUTH_AUTN)
;;;23     #define LENGTH_OF_AUTS																	(LENGTH_AUTH_SQN + LENGTH_AUTH_MAC)
;;;24     
;;;25     /*3G context parameters offset in Command data*/
;;;26     #define OFFSET_AUTH_RAND																(LENGTH_BYTE_OF_RANDOM_DATA) // first byte states length of Random Data, hence Random starts from index 01
;;;27     #define	OFFSET_AUTH_AUTN																(OFFSET_AUTH_RAND + LENGTH_CHALLENGE_DATA + LENGTH_BYTE_OF_AUTN_DATA)
;;;28     #define OFFSET_AUTH_SQN_X_AK															(OFFSET_AUTH_AUTN)
;;;29     #define OFFSET_AUTH_AMF																	(OFFSET_AUTH_SQN_X_AK + LENGTH_AUTH_SQN)
;;;30     #define OFFSET_AUTH_MAC																	(OFFSET_AUTH_AMF + LENGTH_AUTH_AMF)
;;;31     
;;;32     /*3G context parameters offset in Response data*/
;;;33     #define OFFSET_AUTH_RESULT_TAG															(0x00)
;;;34     #define OFFSET_AUTH_RES_LENGTH															(OFFSET_AUTH_RESULT_TAG + 0x01)
;;;35     #define OFFSET_AUTH_RES																	(OFFSET_AUTH_RES_LENGTH + 0x01) // first byte states length of Random Data, hence Random starts from index 01
;;;36     #define	OFFSET_AUTH_CK_LENGTH															(OFFSET_AUTH_RES + LENGTH_AUTH_RES)
;;;37     #define OFFSET_AUTH_CK																	(OFFSET_AUTH_CK_LENGTH + 0x01)
;;;38     #define OFFSET_AUTH_IK_LENGTH															(OFFSET_AUTH_CK + LENGTH_AUTH_CK)
;;;39     #define OFFSET_AUTH_IK																	(OFFSET_AUTH_IK_LENGTH + 0x01)
;;;40     #define OFFSET_AUTH_KC_LENGTH															(OFFSET_AUTH_IK + LENGTH_AUTH_IK)
;;;41     #define OFFSET_AUTH_KC																	(OFFSET_AUTH_KC_LENGTH + 0x01)
;;;42     
;;;43     #define LENGTH_AUTH_RESPONSE_WITHOUT_KC													(OFFSET_AUTH_IK + LENGTH_AUTH_IK)
;;;44     #define LENGTH_AUTH_RESPONSE_WITH_KC													(OFFSET_AUTH_KC + LENGTH_AUTH_KC)
;;;45     
;;;46     /*AUTS*/
;;;47     #define OFFSET_AUTH_AUTS_LENGTH															(OFFSET_AUTH_RESULT_TAG + 0x01)
;;;48     #define OFFSET_AUTH_AUTS_CONC_SQNMS														(OFFSET_AUTH_AUTS_LENGTH + 0x01)
;;;49     #define OFFSET_AUTH_AUTS_MACS															(OFFSET_AUTH_AUTS_CONC_SQNMS + LENGTH_AUTH_SQN)
;;;50     #define LENGTH_AUTH_AUTS																(OFFSET_AUTH_AUTS_MACS + LENGTH_AUTH_MAC)
;;;51     
;;;52     
;;;53     
;;;54     #define INDEX_LAST_BYTE_OF_SQN															(0x05)
;;;55     #define MASK_AUTH_SEQ_INDEX																(0x1F)
;;;56     
;;;57     /*6F15 EF SQN array info file offsets*/
;;;58     #define OFFSET_AUTH_EF_SQN_INFO															(0x00)
;;;59     #define OFFSET_AUTH_EF_SQN_FIRST_SEQ													(0x01)
;;;60     
;;;61     #define AUTH_NO_OF_SAVED_SQN															(0x20)
;;;62     #define LENGTH_AUTH_EF_SQN_INFO															(0x01)
;;;63     #define LENGTH_AUTH_EF_SQN_FILE_SIZE													(0xC1) // i.e. 193 = 36 Seqs (each of size 6 bytes) + 1 byte for SQN info
;;;64     
;;;65     #define OFFSET_AUTH_SECOND_HALF															(0x08)
;;;66     #define NAA_IS_USIM_GSM																	(0x00)
;;;67     #define NAA_IS_ISIM																		(0x01)
;;;68     
;;;69     #define LENGTH_MIN_ISIM_AID																(0x07)
;;;70     /*
;;;71     * Check present service number in UST if its available or not
;;;72     * @param umbServiceNo: Service number to check
;;;73     * @pre Service no. must be greater than 1 , ADF must be selected and UST must be available under it
;;;74     * @ret TRUE if its available otherwise FALSE
;;;75     */
;;;76     static boolean _31102_checkServiceInUST(uMonoByte umbServiceNo) {
;;;77     
;;;78     	tFileHeaderAddr fhaUST;
;;;79     	uMonoByte		umbServiceByte;
;;;80     
;;;81     	DBG_FUNC_ENTRY(">>[31_102] _31102_checkServiceInUST() \n");
;;;82     
;;;83     	assert((pccCurrentChannel->fhaCurrentDf != NO_FILE_PRESENT) && (umbServiceNo > 0x00));
;;;84     
;;;85     	/*Get file address of EF UST file*/
;;;86     	_7816_4_ifFileExists(FID_UST, pccCurrentChannel->fhaCurrentDf, MODE_FIND_FID, &fhaUST);
;;;87     
;;;88     	assert(fhaUST != NO_FILE_PRESENT);
;;;89     
;;;90     	/*in order to calculate offset, first decrement the given no. by 1*/
;;;91     	umbServiceNo--;
;;;92     
;;;93     	/*read service corresponding byte*/
;;;94     	_7816_4_readUpdateFile(fhaUST, &umbServiceByte, SHIFT_RIGHT_BY_N_BITS(umbServiceNo, 0x03), 0x01, ACC_MODE_FILE_READ);
;;;95     
;;;96     	/*check if service is set*/
;;;97     	if (umbServiceByte & (SHIFT_LEFT_BY_N_BITS(0x01, (umbServiceNo & 0x07)))) {
;;;98     
;;;99     		DBG_WARN("[31_102] _31102_checkServiceInUST: Requested Service No. %1 is available", (umbServiceNo+1));
;;;100    		DBG_FUNC_EXIT("<<[31_102] _31102_checkServiceInUST() returns FALSE\n");
;;;101    		return TRUE;
;;;102    	}
;;;103    
;;;104    	DBG_WARN("[31_102] _31102_checkServiceInUST: Requested Service No. %1 is not available", (umbServiceNo + 1));
;;;105    	DBG_FUNC_EXIT("<<[31_102] _31102_checkServiceInUST() returns FALSE\n");
;;;106    	return FALSE;
;;;107    }
;;;108    
;;;109    
;;;110    /*
;;;111    * Add two SQNs
;;;112    * @param pumbSQN1: SQN of size 6
;;;113    * @param pumbSQN2: SQN of size 6
;;;114    * @param pumbSQN2: Stores Result bytes on adding SQNs
;;;115    * @ret void
;;;116    */
;;;117    static void _31102_addSqns(puMonoByte pumbSQN1, puMonoByte pumbSQN2, puMonoByte pumbResult) {
;;;118    
;;;119    	/*TODO this function is needed when applying Delta and Limit restriction*/
;;;120    }
;;;121    
;;;122    /*
;;;123    * Compare two SQNs
;;;124    * @param pumbSQN1: SQN of size 6
;;;125    * @param pumbSQN2: SQN of size 6
;;;126    * @ret returns TRUE if SQN1 > SQN2 otherwise FALSE
;;;127    */
;;;128    static boolean _31102_compareSqn(puMonoByte pumbSQN1, puMonoByte pumbSQN2) {
;;;129    
;;;130    	uMonoByte umbIndex;
;;;131    
;;;132    	DBG_FUNC_ENTRY(">>[31_102] _31102_compareSqn() \n");
;;;133    
;;;134    	/*Total No. of Bits in SQN is 43 i.e. first 5 bytes can be compared as it is but for last byte only 3 MSBs will be compared*/
;;;135    
;;;136    	/*Compare first 5 bytes of SQN*/
;;;137    	for (umbIndex = 0x00; umbIndex < (LENGTH_AUTH_SQN - 0x01); umbIndex++) {
;;;138    
;;;139    		/*If SQN1 > SQN2*/
;;;140    		if (pumbSQN1[umbIndex] > pumbSQN2[umbIndex]) {
        0x00005f56:    7900        .y      LDRB     r0,[r0,#4]
        0x00005f58:    a914        ..      ADD      r1,sp,#0x50
        0x00005f5a:    7909        .y      LDRB     r1,[r1,#4]
        0x00005f5c:    4281        .B      CMP      r1,r0
        0x00005f5e:    d808        ..      BHI      0x5f72 ; _31102_authenticate + 670
;;;141    
;;;142    			DBG_WARN("[31_102] _31102_compareSqn: Byte %1 indicates SQN1 > SQN2", umbIndex + 1);
;;;143    			DBG_FUNC_EXIT("<<[31_102] _31102_compareSqn() returns TRUE\n");
;;;144    			return TRUE;
;;;145    		}
;;;146    		/*If SQN1 < SQN2*/
;;;147    		else if (pumbSQN1[umbIndex] < pumbSQN2[umbIndex]) {
        0x00005f60:    d30e        ..      BCC      0x5f80 ; _31102_authenticate + 684
        0x00005f62:    a82f        /.      ADD      r0,sp,#0xbc
;;;148    			
;;;149    			DBG_WARN("[31_102] _31102_compareSqn: Byte %1 indicates SQN1 < SQN2", umbIndex + 1);
;;;150    			DBG_FUNC_EXIT("<<[31_102] _31102_compareSqn() returns FALSE\n");
;;;151    			return FALSE;
;;;152    		}
;;;153    	}
;;;154    
;;;155    	/*If control is here it means first 5 bytes are equal now final decision comes to last byte of SQN*/
;;;156    	/*if SQN1(3 MS bits) > SQN2(3 MS bits) */
;;;157    	if ((SHIFT_RIGHT_BY_N_BITS(pumbSQN1[INDEX_LAST_BYTE_OF_SQN], 0x05)) > (SHIFT_RIGHT_BY_N_BITS(pumbSQN2[INDEX_LAST_BYTE_OF_SQN], 0x05))) {
        0x00005f64:    7940        @y      LDRB     r0,[r0,#5]
        0x00005f66:    0940        @.      LSRS     r0,r0,#5
        0x00005f68:    a914        ..      ADD      r1,sp,#0x50
        0x00005f6a:    7949        Iy      LDRB     r1,[r1,#5]
        0x00005f6c:    0949        I.      LSRS     r1,r1,#5
;;;158    
;;;159    		DBG_WARN("[31_102] _31102_compareSqn: Byte %1 indicates SQN1 > SQN2", INDEX_LAST_BYTE_OF_SQN+1);
;;;160    		DBG_FUNC_EXIT("<<[31_102] _31102_compareSqn() returns TRUE\n");
;;;161    		return TRUE;
;;;162    	}
;;;163    
;;;164    	DBG_WARN("[31_102] _31102_compareSqn: SQN1 <= SQN2");
;;;165    	DBG_FUNC_EXIT("<<[31_102] _31102_compareSqn() returns FALSE\n");
;;;166    	return FALSE;
;;;167    }
;;;168    
;;;169    /*
;;;170    * It checks the Freshness of SQN
;;;171    * @param pumbSQN: Incoming SQN
;;;172    * @ret returns: 
;;;173    *				TRUE if SQN is verified successfully
;;;174    *				FALSE if SQN is not verified and pumbSQN will be updated with SQNms
;;;175    */
;;;176    static boolean _31102_verifyFreshnessOfSqn(puMonoByte pumbSQN) {
;;;177    
;;;178    	uMonoByte			umbSqnMs[LENGTH_AUTH_SQN];
;;;179    	uMonoByte			umbSqnMs_i[LENGTH_AUTH_SQN];
;;;180    	uMonoByte			umbMaxIndex;
;;;181    	tFileHeaderAddr		fhaPropDf;
;;;182    	tFileHeaderAddr		fhaPropFile;
;;;183    
;;;184    	DBG_FUNC_ENTRY(">>[31_102] _31102_verifyFreshnessOfSqn() \n");
;;;185    
;;;186    	DBG_FUNC("[31_102] _31102_verifyFreshnessOfSqn: Searching prop. Auth Ki file  \n");
;;;187    
;;;188    	/*Get file address of Prop. DF*/
;;;189    	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, &fhaPropDf);
;;;190    
;;;191    	assert(fhaPropDf != NO_FILE_PRESENT);
;;;192    
;;;193    	/*Get file address of Prop. Auth Sequence Array file*/
;;;194    	_7816_4_ifFileExists(FID_PROP_AUTH_SEQ_ARRAY, fhaPropDf, MODE_FIND_FID, &fhaPropFile);
;;;195    
;;;196    	assert((fhaPropFile != NO_FILE_PRESENT) && (LENGTH_AUTH_EF_SQN_FILE_SIZE == _7816_4_getFileSize(fhaPropFile)));
;;;197    
;;;198    	DBG_FUNC("[31_102] _31102_verifyFreshnessOfSqn: Reading index of SQNms \n");
;;;199    
;;;200    	/*Read the SQNms index*/
;;;201    	_7816_4_readUpdateFile(fhaPropFile, &umbMaxIndex, OFFSET_AUTH_EF_SQN_INFO, LENGTH_AUTH_EF_SQN_INFO, ACC_MODE_FILE_READ);
;;;202    
;;;203    	/*Read the SQNms(i) where i is index from incoming pumbSQN */
;;;204    	_7816_4_readUpdateFile(fhaPropFile, umbSqnMs_i, (OFFSET_AUTH_EF_SQN_INFO + ((pumbSQN[INDEX_LAST_BYTE_OF_SQN] & MASK_AUTH_SEQ_INDEX) * LENGTH_AUTH_SQN)), LENGTH_AUTH_SQN, ACC_MODE_FILE_READ);
;;;205    
;;;206    	DBG_FUNC("[31_102] _31102_verifyFreshnessOfSqn: SQNms(i):\n");
;;;207    	DBG_PRINT_ARRAY(umbSqnMs_i, LENGTH_AUTH_SQN);
;;;208    
;;;209    	/*Read the SQNms*/
;;;210    	_7816_4_readUpdateFile(fhaPropFile, umbSqnMs, (OFFSET_AUTH_EF_SQN_INFO + (umbMaxIndex * LENGTH_AUTH_SQN)), LENGTH_AUTH_SQN, ACC_MODE_FILE_READ);
;;;211    
;;;212    	DBG_FUNC("[31_102] _31102_verifyFreshnessOfSqn: SQNms:\n");
;;;213    	DBG_PRINT_ARRAY(umbSqnMs, LENGTH_AUTH_SQN);
;;;214    
;;;215    	/*Checking freshness as per C.2.2 of ETSI 33.102 */
;;;216    	if (FALSE == _31102_compareSqn(pumbSQN, umbSqnMs_i)) {
;;;217    
;;;218    		/*SQN <= SQNms(i)*/
;;;219    		/*Resynch Failure*/
;;;220    		DBG_ERR("[31_102] _31102_verifyFreshnessOfSqn: Resynch Failure as SQN <= SQNms(i)");
;;;221    		DBG_FUNC_EXIT("<<[31_102] _31102_verifyFreshnessOfSqn() returns FALSE\n");
;;;222    		/*Copy SqnMs in Sqn*/
;;;223    		mem_cpy(pumbSQN, umbSqnMs, LENGTH_AUTH_SQN);
;;;224    		return FALSE;
;;;225    	}
;;;226    
;;;227    	/*TODO: Delta check pending*/
;;;228    
;;;229    	/*TODO: Limit check pending*/
;;;230    
;;;231    	/*TODO: What if SQNms reach maximum value*/
;;;232    
;;;233    	/*TODO: Enclose the writing in a transaction*/
;;;234    
;;;235    	/*Check if incoming SQN is greater than SQNms*/
;;;236    	if (
;;;237    		(TRUE == _31102_compareSqn(pumbSQN, umbSqnMs)) //SQN > SQNms
;;;238    		&&			//AND
        0x00005f6e:    4281        .B      CMP      r1,r0
        0x00005f70:    d906        ..      BLS      0x5f80 ; _31102_authenticate + 684
        0x00005f72:    a814        ..      ADD      r0,sp,#0x50
;;;239    		(umbMaxIndex != (pumbSQN[INDEX_LAST_BYTE_OF_SQN] & MASK_AUTH_SEQ_INDEX))	//incoming sqn index is different from previous max index
        0x00005f74:    7940        @y      LDRB     r0,[r0,#5]
        0x00005f76:    4018        .@      ANDS     r0,r0,r3
        0x00005f78:    a92c        ,.      ADD      r1,sp,#0xb0
        0x00005f7a:    7809        .x      LDRB     r1,[r1,#0]
        0x00005f7c:    4281        .B      CMP      r1,r0
        0x00005f7e:    d155        U.      BNE      0x602c ; 0x602c
        0x00005f80:    a814        ..      ADD      r0,sp,#0x50
;;;240    		){
;;;241    
;;;242    		/*Max index will change to new one*/
;;;243    		umbMaxIndex = pumbSQN[INDEX_LAST_BYTE_OF_SQN] & MASK_AUTH_SEQ_INDEX;
;;;244    
;;;245    		DBG_FUNC("[31_102] _31102_verifyFreshnessOfSqn: Incoming SQN is greater than SQNms, hence change SQN max index to %1\n", umbMaxIndex);
;;;246    
;;;247    		/*Update the SQNms index*/
;;;248    		_7816_4_readUpdateFile(fhaPropFile, &umbMaxIndex, OFFSET_AUTH_EF_SQN_INFO, LENGTH_AUTH_EF_SQN_INFO, ACC_MODE_FILE_UPDATE);
;;;249    		
;;;250    	}
;;;251    	else {
;;;252    		/*get incoming index to update data there*/
;;;253    		umbMaxIndex = pumbSQN[INDEX_LAST_BYTE_OF_SQN] & MASK_AUTH_SEQ_INDEX;
        0x00005f82:    7942        By      LDRB     r2,[r0,#5]
        0x00005f84:    401a        .@      ANDS     r2,r2,r3
        0x00005f86:    a82c        ,.      ADD      r0,sp,#0xb0
        0x00005f88:    7002        .p      STRB     r2,[r0,#0]
        0x00005f8a:    e05c        \.      B        0x6046 ; 0x6046
        0x00005f8c:    ae14        ..      ADD      r6,sp,#0x50
        0x00005f8e:    a92f        /.      ADD      r1,sp,#0xbc
        0x00005f90:    2206        ."      MOVS     r2,#6
        0x00005f92:    920a        ..      STR      r2,[sp,#0x28]
        0x00005f94:    4630        0F      MOV      r0,r6
        0x00005f96:    f7fafd12    ....    BL       mem_cpyFwd ; 0x9be
        0x00005f9a:    a80e        ..      ADD      r0,sp,#0x38
;;;254    	}
;;;255    
;;;256    	DBG_FUNC("[31_102] _31102_verifyFreshnessOfSqn: Update Incoming SQN at alloted index %1\n", umbMaxIndex);
;;;257    
;;;258    	/*Read the SQNms(i) where i is index from incoming pumbSQN */
;;;259    	_7816_4_readUpdateFile(fhaPropFile, pumbSQN, (OFFSET_AUTH_EF_SQN_INFO + ((umbMaxIndex) * LENGTH_AUTH_SQN)), LENGTH_AUTH_SQN, ACC_MODE_FILE_UPDATE);
;;;260    
;;;261    	DBG_FUNC_EXIT("<<[31_102] _31102_verifyFreshnessOfSqn() returns TRUE\n");
;;;262    
;;;263    	return TRUE;
;;;264    }
;;;265    /*
;;;266    * It implements the USIM authenticate command
;;;267    */
;;;268    void _31102_authenticate(void) {
;;;269    
;;;270    	uMonoByte		umbIndex;
;;;271    	uMonoByte		umbNAA = NAA_IS_USIM_GSM;
;;;272    	tFileHeaderAddr fhaPropDf;
;;;273    	tFileHeaderAddr fhaPropFile;
;;;274    	uMonoByte		umbKi[LENGTH_AUTH_KEY + 0x08];
;;;275    	uMonoByte		umbResponse[LENGTH_AUTH_RES];
;;;276    	uMonoByte		umbCk[LENGTH_AUTH_CK];
;;;277    	uMonoByte		umbIk[LENGTH_AUTH_IK];
;;;278    	uMonoByte		umbAk[LENGTH_AUTH_AK];
;;;279    	uMonoByte		umbSqn[LENGTH_AUTH_SQN];
;;;280    	uMonoByte		umbOpc[LENGTH_AUTH_OPC];
;;;281    	uMonoByte		umbXmac[LENGTH_AUTH_MAC];
;;;282    	const uMonoByte	umbISIMAid[] = {0xA0, 0x00, 0x00, 0x00, 0x87, 0x10, 0x04};
;;;283    
;;;284    	DBG_FUNC_ENTRY(">>[31_102] _31102_authenticate() \n");
;;;285    
;;;286    	if (
;;;287    		(0x00 != P1_BYTE) //check if p1 is non-zero
;;;288    		||					//OR
;;;289    		(
;;;290    			(P2_APPLICATION_SPECIFIC_3G_CONTEXT != P2_BYTE) //If p2 neither state 3G context
;;;291    			&&
;;;292    			(P2_APPLICATION_SPECIFIC_GSM_CONTEXT != P2_BYTE) //Nor GSM context
;;;293    		)
;;;294    	   )
;;;295    	{
;;;296    		/*Wrong P1-P2*/
;;;297    		DBG_ERR("[31_102] _31102_authenticate: Wrong P1 \n");
;;;298    		DBG_FUNC_EXIT("<<[31_102] _31102_authenticate() \n");
;;;299    		THROW(EXCEP_WRONG_P1_P2);
;;;300    	}
;;;301    
;;;302    	if (P3_BYTE != P3_LENGTH_USIM_AUTHENTICATE) { // If P3 is not equal to expected length of Random Data
;;;303    		/*Wrong P3*/
;;;304    		DBG_ERR("[31_102] _31102_authenticate: Wrong P3: Length must be '%1' bytes \n", P3_LENGTH_USIM_AUTHENTICATE);
;;;305    		DBG_FUNC_EXIT("<<[31_102] _31102_authenticate() \n");
;;;306    		THROW2(EXCEP_WRONG_P3, P3_LENGTH_USIM_AUTHENTICATE);
;;;307    	}
;;;308    
;;;309    	/*Check if current ADF is not empty*/
;;;310    	if ((NO_FILE_PRESENT == pccCurrentChannel->fhaCurrentAdf)
;;;311    		||
;;;312    		(pccCurrentChannel->fhaCurrentDf != pccCurrentChannel->fhaCurrentAdf)) {
;;;313    		/*an ADF must be selected*/
;;;314    		DBG_ERR("[31_102] _31102_authenticate: No NAA application is selected i.e. missing current ADF\n");
;;;315    		DBG_FUNC_EXIT("<<[31_102] _31102_authenticate() \n");
;;;316    		THROW(EXCEP_CONDITIONS_OF_USE_NOT_SATISFIED);
;;;317    	}
;;;318    
;;;319    	if (ACC_NOT_VERIFIED == _7816_4_isKeyRefVerified(PIN_APP_1)) { // If PIN1 is not verified
;;;320    
;;;321    		/*PIN1 is mandatory to be verified for Network Authentication*/
;;;322    		DBG_ERR("[31_102] _31102_authenticate: CHV1 is not verified\n");
;;;323    		DBG_FUNC_EXIT("<<[31_102] _31102_authenticate() \n");
;;;324    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;325    	}
;;;326    
;;;327    
;;;328    
;;;329    	/*Check if current APP is USIM or ISIM*/
;;;330    	if (TRUE == _7816_4_getAidOfAdf(pccCurrentChannel->fhaCurrentAdf, umbKi)) {
;;;331    
;;;332    		if (EQUAL == mem_cmp((umbKi + OFFSET_AID), umbISIMAid, LENGTH_MIN_ISIM_AID)) {
;;;333    
;;;334    			umbNAA = NAA_IS_ISIM;
;;;335    		}
;;;336    	}
;;;337    
;;;338    
;;;339    	DBG_FUNC("[31_102] _31102_authenticate: Searching prop. Auth Ki file  \n");
;;;340    	/*Get file address of Prop. DF*/
;;;341    	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, &fhaPropDf);
;;;342    
;;;343    	assert(fhaPropDf != NO_FILE_PRESENT);
;;;344    
;;;345    	/*Get file address of Prop. Auth Ki file*/
;;;346    	_7816_4_ifFileExists(FID_PROP_AUTH_KI, fhaPropDf, MODE_FIND_FID, &fhaPropFile);
;;;347    
;;;348    	assert((fhaPropFile != NO_FILE_PRESENT) && (LENGTH_AUTH_KEY == _7816_4_getFileSize(fhaPropFile)));
;;;349    
;;;350    	DBG_FUNC("[31_102] _31102_authenticate: Reading KI and OPC from %1 and %2 files respectively  \n", FID_PROP_AUTH_KI, FID_PROP_AUTH_OPC);
;;;351    
;;;352    	/*Read the auth Ki from prop. file*/
;;;353    	_7816_4_readUpdateFile(fhaPropFile, umbKi, OFFSET_START, LENGTH_AUTH_KEY, ACC_MODE_FILE_READ);
;;;354    
;;;355    	/*Get file address of Prop. Auth OPC file*/
;;;356    	_7816_4_ifFileExists(FID_PROP_AUTH_OPC, fhaPropDf, MODE_FIND_FID, &fhaPropFile);
;;;357    
;;;358    	assert((fhaPropFile != NO_FILE_PRESENT) && (LENGTH_AUTH_OPC == _7816_4_getFileSize(fhaPropFile)));
;;;359    
;;;360    	/*Read the OPC from prop. file*/
;;;361    	_7816_4_readUpdateFile(fhaPropFile, umbOpc, OFFSET_START, LENGTH_AUTH_OPC, ACC_MODE_FILE_READ);
;;;362    
;;;363    	/*If 3G context auth*/
;;;364    	if (P2_APPLICATION_SPECIFIC_3G_CONTEXT == P2_BYTE) {
;;;365    		
;;;366    		DBG_FUNC("[31_102] _31102_authenticate: P2 states 3G context authentication \n");
;;;367    
;;;368    		/*Perform 3G Context Authentication algo as per TS 31.102*/
;;;369    		/*Get AK, CK, IK and RES*/
;;;370    		f2345(umbKi, &COMMAND_DATA[OFFSET_AUTH_RAND], umbOpc, umbResponse, umbCk, umbIk, umbAk);
;;;371    
;;;372    		DBG_FUNC("[31_102] _31102_authenticate: Generate AK using f5 function \n");
;;;373    
;;;374    		/*Traverse through each element of AK for calculating actual SQN*/
;;;375    		for (umbIndex = 0x00; umbIndex < LENGTH_AUTH_SQN; umbIndex++) {
;;;376    
;;;377    			/*XORing of Incoming SQN(+)AK with calculated AK*/
;;;378    			umbSqn[umbIndex] = COMMAND_DATA[OFFSET_AUTH_SQN_X_AK + umbIndex] ^ umbAk[umbIndex];
;;;379    		}
;;;380    
;;;381    		DBG_FUNC("[31_102] _31102_authenticate: Calculated SQN by XORing AN and SQNxAK data\n");
;;;382    
;;;383    		/*Computing XMAC*/
;;;384    		f1(umbKi, &COMMAND_DATA[OFFSET_AUTH_RAND], umbSqn, &COMMAND_DATA[OFFSET_AUTH_AMF], umbOpc, umbXmac);
;;;385    
;;;386    		DBG_FUNC("[31_102] _31102_authenticate: Calculated XMAC using f1 function\n");
;;;387    
;;;388    		if (EQUAL != mem_cmp(&COMMAND_DATA[OFFSET_AUTH_MAC], umbXmac, LENGTH_AUTH_MAC)) { //comparing XMAC and MAC and checking the return value if its not equal
;;;389    
;;;390    			/*Incorrect MAC*/
;;;391    			DBG_ERR("[31_102] _31102_authenticate: Presented MAC is not equal to calculated XMAC\n");
;;;392    			DBG_FUNC_EXIT("<<[31_102] _31102_authenticate() \n");
;;;393    			THROW(EXCEP_INCORRECT_MAC);
;;;394    		}
;;;395    
;;;396    		/*Verify SQN*/
;;;397    		if(FALSE == _31102_verifyFreshnessOfSqn(umbSqn))/*If sqn not verified*/
;;;398    		{
;;;399    			/*if control is here umbSqn contains SQNms*/
;;;400    
;;;401    			DBG_FUNC("[31_102] _31102_authenticate: SQN is not verified, so resynch error message will be sent to network\n");
;;;402    
;;;403    			/*Generate Resynch MACS*/
;;;404    			f1star(umbKi, &COMMAND_DATA[OFFSET_AUTH_RAND], umbSqn, &COMMAND_DATA[OFFSET_AUTH_AMF], umbOpc, umbXmac);
        0x00005f9c:    900b        ..      STR      r0,[sp,#0x2c]
        0x00005f9e:    9001        ..      STR      r0,[sp,#4]
        0x00005fa0:    a810        ..      ADD      r0,sp,#0x40
        0x00005fa2:    9009        ..      STR      r0,[sp,#0x24]
        0x00005fa4:    9000        ..      STR      r0,[sp,#0]
        0x00005fa6:    af22        ".      ADD      r7,sp,#0x88
        0x00005fa8:    4638        8F      MOV      r0,r7
        0x00005faa:    9c04        ..      LDR      r4,[sp,#0x10]
        0x00005fac:    4621        !F      MOV      r1,r4
        0x00005fae:    4632        2F      MOV      r2,r6
        0x00005fb0:    9b03        ..      LDR      r3,[sp,#0xc]
        0x00005fb2:    f7fff91a    ....    BL       f1star ; 0x51ea
        0x00005fb6:    ad16        ..      ADD      r5,sp,#0x58
;;;405    
;;;406    			/*Generate Resynch AK*/
;;;407    			f5star(umbKi, &COMMAND_DATA[OFFSET_AUTH_RAND], umbOpc, umbAk);
        0x00005fb8:    4638        8F      MOV      r0,r7
        0x00005fba:    4621        !F      MOV      r1,r4
        0x00005fbc:    9a09        ..      LDR      r2,[sp,#0x24]
        0x00005fbe:    462b        +F      MOV      r3,r5
        0x00005fc0:    f7fffa1f    ....    BL       f5star ; 0x5402
        0x00005fc4:    200e        .       MOVS     r0,#0xe
        0x00005fc6:    4c8a        .L      LDR      r4,[pc,#552] ; [0x61f0] = 0x2000023e
        0x00005fc8:    71a0        .q      STRB     r0,[r4,#6]
        0x00005fca:    20dc        .       MOVS     r0,#0xdc
        0x00005fcc:    7160        `q      STRB     r0,[r4,#5]
;;;408    
;;;409    			/*Traverse through each element of resynch AK for calculating conceal SQN*/
;;;410    			for (umbIndex = 0x00; umbIndex < LENGTH_AUTH_SQN; umbIndex++) {
;;;411    
;;;412    				/*XORing of Resynch AK and SQN*/
;;;413    				umbSqn[umbIndex] ^= umbAk[umbIndex];
        0x00005fce:    9816        ..      LDR      r0,[sp,#0x58]
        0x00005fd0:    9914        ..      LDR      r1,[sp,#0x50]
        0x00005fd2:    4041        A@      EORS     r1,r1,r0
        0x00005fd4:    7031        1p      STRB     r1,[r6,#0]
        0x00005fd6:    7868        hx      LDRB     r0,[r5,#1]
        0x00005fd8:    7871        qx      LDRB     r1,[r6,#1]
        0x00005fda:    4041        A@      EORS     r1,r1,r0
        0x00005fdc:    7071        qp      STRB     r1,[r6,#1]
        0x00005fde:    78a8        .x      LDRB     r0,[r5,#2]
        0x00005fe0:    78b1        .x      LDRB     r1,[r6,#2]
        0x00005fe2:    4041        A@      EORS     r1,r1,r0
        0x00005fe4:    70b1        .p      STRB     r1,[r6,#2]
        0x00005fe6:    78e8        .x      LDRB     r0,[r5,#3]
        0x00005fe8:    78f1        .x      LDRB     r1,[r6,#3]
        0x00005fea:    4041        A@      EORS     r1,r1,r0
        0x00005fec:    70f1        .p      STRB     r1,[r6,#3]
        0x00005fee:    9817        ..      LDR      r0,[sp,#0x5c]
        0x00005ff0:    9915        ..      LDR      r1,[sp,#0x54]
        0x00005ff2:    4041        A@      EORS     r1,r1,r0
        0x00005ff4:    7131        1q      STRB     r1,[r6,#4]
        0x00005ff6:    7968        hy      LDRB     r0,[r5,#5]
        0x00005ff8:    7971        qy      LDRB     r1,[r6,#5]
        0x00005ffa:    4041        A@      EORS     r1,r1,r0
        0x00005ffc:    7171        qq      STRB     r1,[r6,#5]
;;;414    			}
;;;415    
;;;416    			DBG_FUNC("[31_102] _31102_authenticate: Preparing AUTS\n");
;;;417    
;;;418    			/*Prepare AUTS in response buffer*/
;;;419    			/*Add Synch failure tag 'DC'*/
;;;420    			RESPONSE_BUFF[OFFSET_AUTH_RESULT_TAG] = TAG_AUTH_SYNCH_FAILURE_TAG;
;;;421    
;;;422    			/*Copy Length of AUTS*/
;;;423    			RESPONSE_BUFF[OFFSET_AUTH_AUTS_LENGTH] = LENGTH_OF_AUTS;
;;;424    
;;;425    			/*Copy Conc(SQNMS)*/
;;;426    			mem_cpy((RESPONSE_BUFF + OFFSET_AUTH_AUTS_CONC_SQNMS), umbSqn, LENGTH_AUTH_SQN);
        0x00005ffe:    1de0        ..      ADDS     r0,r4,#7
        0x00006000:    4631        1F      MOV      r1,r6
        0x00006002:    9a0a        ..      LDR      r2,[sp,#0x28]
        0x00006004:    f7fafcdb    ....    BL       mem_cpyFwd ; 0x9be
;;;427    
;;;428    			/*Copy MACS where MACS = f1*K(SQNMS || RAND || AMF)*/
;;;429    			mem_cpy((RESPONSE_BUFF + OFFSET_AUTH_AUTS_MACS), umbXmac, LENGTH_AUTH_MAC);
        0x00006008:    340d        .4      ADDS     r4,r4,#0xd
        0x0000600a:    2208        ."      MOVS     r2,#8
        0x0000600c:    4620         F      MOV      r0,r4
        0x0000600e:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00006010:    f7fafcd5    ....    BL       mem_cpyFwd ; 0x9be
        0x00006014:    9d05        ..      LDR      r5,[sp,#0x14]
        0x00006016:    e0a8        ..      B        0x616a ; 0x616a
    $d.1
    __arm_cp.0_14
        0x00006018:    00041087    ....    DCD    266375
        0x0000601c:    2000023e    >..     DCD    536871486
        0x00006020:    200006e8    ...     DCD    536872680
        0x00006024:    00007f49    I...    DCD    32585
        0x00006028:    00006f13    .o..    DCD    28435
    $t.2
        0x0000602c:    462e        .F      MOV      r6,r5
        0x0000602e:    ad2c        ,.      ADD      r5,sp,#0xb0
        0x00006030:    7028        (p      STRB     r0,[r5,#0]
        0x00006032:    a82a        *.      ADD      r0,sp,#0xa8
        0x00006034:    8800        ..      LDRH     r0,[r0,#0]
        0x00006036:    9b09        ..      LDR      r3,[sp,#0x24]
        0x00006038:    9300        ..      STR      r3,[sp,#0]
        0x0000603a:    2200        ."      MOVS     r2,#0
        0x0000603c:    4629        )F      MOV      r1,r5
        0x0000603e:    f7fdf955    ..U.    BL       _7816_4_readUpdateFile ; 0x32ec
        0x00006042:    782a        *x      LDRB     r2,[r5,#0]
        0x00006044:    4635        5F      MOV      r5,r6
        0x00006046:    4e6c        lN      LDR      r6,[pc,#432] ; [0x61f8] = 0x200006e8
        0x00006048:    9f07        ..      LDR      r7,[sp,#0x1c]
        0x0000604a:    a82a        *.      ADD      r0,sp,#0xa8
        0x0000604c:    8800        ..      LDRH     r0,[r0,#0]
        0x0000604e:    9909        ..      LDR      r1,[sp,#0x24]
        0x00006050:    9100        ..      STR      r1,[sp,#0]
        0x00006052:    436a        jC      MULS     r2,r5,r2
        0x00006054:    a914        ..      ADD      r1,sp,#0x50
        0x00006056:    462b        +F      MOV      r3,r5
        0x00006058:    f7fdf948    ..H.    BL       _7816_4_readUpdateFile ; 0x32ec
        0x0000605c:    9a08        ..      LDR      r2,[sp,#0x20]
        0x0000605e:    71a2        .q      STRB     r2,[r4,#6]
        0x00006060:    20db        .       MOVS     r0,#0xdb
;;;430    
;;;431    			/*Prepared response length*/
;;;432    			gudbOutputLen = LENGTH_AUTH_AUTS;
;;;433    
;;;434    			DBG_ERR("[31_102] _31102_authenticate: Resynch Failure\n");
;;;435    			DBG_FUNC_EXIT("<<[102_221] _31102_authenticate() \n");
;;;436    			return;
;;;437    		}
;;;438    
;;;439    		/*Prepare Successful Authentication response*/
;;;440    		/*Store Auth Success tag*/
;;;441    		RESPONSE_BUFF[OFFSET_AUTH_RESULT_TAG] = TAG_AUTH_SUCCESS_TAG;
        0x00006062:    7160        `q      STRB     r0,[r4,#5]
;;;442    
;;;443    		/*Store Length of RES*/
;;;444    		RESPONSE_BUFF[OFFSET_AUTH_RES_LENGTH] = LENGTH_AUTH_RES;
;;;445    
;;;446    		/*Copy RES*/
;;;447    		mem_cpy((RESPONSE_BUFF + OFFSET_AUTH_RES), umbResponse, LENGTH_AUTH_RES);
        0x00006064:    1de0        ..      ADDS     r0,r4,#7
        0x00006066:    a920         .      ADD      r1,sp,#0x80
        0x00006068:    f7fafca9    ....    BL       mem_cpyFwd ; 0x9be
        0x0000606c:    2510        .%      MOVS     r5,#0x10
;;;448    
;;;449    		/*Store length of CK*/
;;;450    		RESPONSE_BUFF[OFFSET_AUTH_CK_LENGTH] = LENGTH_AUTH_CK;
        0x0000606e:    73e5        .s      STRB     r5,[r4,#0xf]
;;;451    
;;;452    		/*Copy CK*/
;;;453    		mem_cpy((RESPONSE_BUFF + OFFSET_AUTH_CK), umbCk, LENGTH_AUTH_CK);
        0x00006070:    4620         F      MOV      r0,r4
        0x00006072:    3010        .0      ADDS     r0,r0,#0x10
        0x00006074:    a91c        ..      ADD      r1,sp,#0x70
        0x00006076:    462a        *F      MOV      r2,r5
        0x00006078:    f7fafca1    ....    BL       mem_cpyFwd ; 0x9be
        0x0000607c:    2020                MOVS     r0,#0x20
;;;454    
;;;455    		/*Store length of IK*/
;;;456    
;;;457    		RESPONSE_BUFF[OFFSET_AUTH_IK_LENGTH] = LENGTH_AUTH_IK;
        0x0000607e:    5425        %T      STRB     r5,[r4,r0]
;;;458    
;;;459    		/*Copy IK*/
;;;460    		mem_cpy((RESPONSE_BUFF + OFFSET_AUTH_IK), umbIk, LENGTH_AUTH_IK);
        0x00006080:    4620         F      MOV      r0,r4
        0x00006082:    3021        !0      ADDS     r0,r0,#0x21
        0x00006084:    a918        ..      ADD      r1,sp,#0x60
        0x00006086:    462a        *F      MOV      r2,r5
        0x00006088:    f7fafc99    ....    BL       mem_cpyFwd ; 0x9be
        0x0000608c:    242c        ,$      MOVS     r4,#0x2c
;;;461    
;;;462    		/*If ADF is USIM, Check for Service n27 in UST and add KC accordingly in the end*/
;;;463    		if ((NAA_IS_USIM_GSM == umbNAA)
;;;464    			&&
        0x0000608e:    2f00        ./      CMP      r7,#0
        0x00006090:    d06a        j.      BEQ      0x6168 ; 0x6168
        0x00006092:    6830        0h      LDR      r0,[r6,#0]
        0x00006094:    88c1        ..      LDRH     r1,[r0,#6]
        0x00006096:    2900        .)      CMP      r1,#0
        0x00006098:    d100        ..      BNE      0x609c ; 0x609c
        0x0000609a:    e09e        ..      B        0x61da ; 0x61da
        0x0000609c:    4858        XH      LDR      r0,[pc,#352] ; [0x6200] = 0x6f13
        0x0000609e:    3025        %0      ADDS     r0,r0,#0x25
        0x000060a0:    2500        .%      MOVS     r5,#0
        0x000060a2:    ae2f        /.      ADD      r6,sp,#0xbc
        0x000060a4:    462a        *F      MOV      r2,r5
        0x000060a6:    4633        3F      MOV      r3,r6
        0x000060a8:    f7fdf844    ..D.    BL       _7816_4_ifFileExists ; 0x3134
        0x000060ac:    8830        0.      LDRH     r0,[r6,#0]
        0x000060ae:    2800        .(      CMP      r0,#0
        0x000060b0:    d100        ..      BNE      0x60b4 ; 0x60b4
        0x000060b2:    e097        ..      B        0x61e4 ; 0x61e4
        0x000060b4:    9500        ..      STR      r5,[sp,#0]
        0x000060b6:    ad2d        -.      ADD      r5,sp,#0xb4
        0x000060b8:    2203        ."      MOVS     r2,#3
        0x000060ba:    2301        .#      MOVS     r3,#1
        0x000060bc:    4629        )F      MOV      r1,r5
        0x000060be:    f7fdf915    ....    BL       _7816_4_readUpdateFile ; 0x32ec
        0x000060c2:    7828        (x      LDRB     r0,[r5,#0]
        0x000060c4:    0740        @.      LSLS     r0,r0,#29
        0x000060c6:    4625        %F      MOV      r5,r4
        0x000060c8:    d54f        O.      BPL      0x616a ; 0x616a
        0x000060ca:    2031        1       MOVS     r0,#0x31
;;;465    			(TRUE == _31102_checkServiceInUST(UST_SERIVCE_GSM_ACCESS))) {
;;;466    
;;;467    			DBG_FUNC("[31_102] _31102_authenticate: GSM service is enabled so appending Kc in the response\n");
;;;468    
;;;469    			/*GSM access service is available*/
;;;470    			/*Store length of Kc*/
;;;471    			RESPONSE_BUFF[OFFSET_AUTH_KC_LENGTH] = LENGTH_AUTH_KC;
        0x000060cc:    9908        ..      LDR      r1,[sp,#0x20]
        0x000060ce:    4c48        HL      LDR      r4,[pc,#288] ; [0x61f0] = 0x2000023e
        0x000060d0:    5421        !T      STRB     r1,[r4,r0]
;;;472    
;;;473    			/*Traverse through each element of AK for calculating actual SQN*/
;;;474    			for (umbIndex = 0x00; umbIndex < LENGTH_AUTH_KC; umbIndex++) {
;;;475    
;;;476    				/*XORing of CK and IK*/
;;;477    				/*As per TS 133 102 or 33.102: Kc[GSM] = CK1 xor CK2 xor IK1 xor IK2 where CKi and IKi are both 64 bits long and CK = CK1 || CK2 and IK = IK1 || IK2*/
;;;478    				RESPONSE_BUFF[OFFSET_AUTH_KC + umbIndex] = umbCk[umbIndex] ^ umbCk[OFFSET_AUTH_SECOND_HALF + umbIndex] ^ umbIk[umbIndex] ^ umbIk[OFFSET_AUTH_SECOND_HALF + umbIndex];
        0x000060d2:    981c        ..      LDR      r0,[sp,#0x70]
        0x000060d4:    991e        ..      LDR      r1,[sp,#0x78]
        0x000060d6:    4041        A@      EORS     r1,r1,r0
        0x000060d8:    9818        ..      LDR      r0,[sp,#0x60]
        0x000060da:    4048        H@      EORS     r0,r0,r1
        0x000060dc:    991a        ..      LDR      r1,[sp,#0x68]
        0x000060de:    4041        A@      EORS     r1,r1,r0
        0x000060e0:    2032        2       MOVS     r0,#0x32
        0x000060e2:    5421        !T      STRB     r1,[r4,r0]
        0x000060e4:    a91c        ..      ADD      r1,sp,#0x70
        0x000060e6:    7848        Hx      LDRB     r0,[r1,#1]
        0x000060e8:    7a4a        Jz      LDRB     r2,[r1,#9]
        0x000060ea:    4042        B@      EORS     r2,r2,r0
        0x000060ec:    a818        ..      ADD      r0,sp,#0x60
        0x000060ee:    7843        Cx      LDRB     r3,[r0,#1]
        0x000060f0:    4053        S@      EORS     r3,r3,r2
        0x000060f2:    7a42        Bz      LDRB     r2,[r0,#9]
        0x000060f4:    405a        Z@      EORS     r2,r2,r3
        0x000060f6:    2333        3#      MOVS     r3,#0x33
        0x000060f8:    54e2        .T      STRB     r2,[r4,r3]
        0x000060fa:    788a        .x      LDRB     r2,[r1,#2]
        0x000060fc:    7a8b        .z      LDRB     r3,[r1,#0xa]
        0x000060fe:    4053        S@      EORS     r3,r3,r2
        0x00006100:    7882        .x      LDRB     r2,[r0,#2]
        0x00006102:    405a        Z@      EORS     r2,r2,r3
        0x00006104:    7a83        .z      LDRB     r3,[r0,#0xa]
        0x00006106:    4053        S@      EORS     r3,r3,r2
        0x00006108:    2234        4"      MOVS     r2,#0x34
        0x0000610a:    54a3        .T      STRB     r3,[r4,r2]
        0x0000610c:    78ca        .x      LDRB     r2,[r1,#3]
        0x0000610e:    7acb        .z      LDRB     r3,[r1,#0xb]
        0x00006110:    4053        S@      EORS     r3,r3,r2
        0x00006112:    78c2        .x      LDRB     r2,[r0,#3]
        0x00006114:    405a        Z@      EORS     r2,r2,r3
        0x00006116:    7ac3        .z      LDRB     r3,[r0,#0xb]
        0x00006118:    4053        S@      EORS     r3,r3,r2
        0x0000611a:    2535        5%      MOVS     r5,#0x35
        0x0000611c:    5563        cU      STRB     r3,[r4,r5]
        0x0000611e:    9a1d        ..      LDR      r2,[sp,#0x74]
        0x00006120:    9b1f        ..      LDR      r3,[sp,#0x7c]
        0x00006122:    4053        S@      EORS     r3,r3,r2
        0x00006124:    9a19        ..      LDR      r2,[sp,#0x64]
        0x00006126:    405a        Z@      EORS     r2,r2,r3
        0x00006128:    9b1b        ..      LDR      r3,[sp,#0x6c]
        0x0000612a:    4053        S@      EORS     r3,r3,r2
        0x0000612c:    2236        6"      MOVS     r2,#0x36
        0x0000612e:    54a3        .T      STRB     r3,[r4,r2]
        0x00006130:    794a        Jy      LDRB     r2,[r1,#5]
        0x00006132:    7b4b        K{      LDRB     r3,[r1,#0xd]
        0x00006134:    4053        S@      EORS     r3,r3,r2
        0x00006136:    7942        By      LDRB     r2,[r0,#5]
        0x00006138:    405a        Z@      EORS     r2,r2,r3
        0x0000613a:    7b43        C{      LDRB     r3,[r0,#0xd]
        0x0000613c:    4053        S@      EORS     r3,r3,r2
        0x0000613e:    2237        7"      MOVS     r2,#0x37
        0x00006140:    54a3        .T      STRB     r3,[r4,r2]
        0x00006142:    798a        .y      LDRB     r2,[r1,#6]
        0x00006144:    7b8b        .{      LDRB     r3,[r1,#0xe]
        0x00006146:    4053        S@      EORS     r3,r3,r2
        0x00006148:    7982        .y      LDRB     r2,[r0,#6]
        0x0000614a:    405a        Z@      EORS     r2,r2,r3
        0x0000614c:    7b83        .{      LDRB     r3,[r0,#0xe]
        0x0000614e:    4053        S@      EORS     r3,r3,r2
        0x00006150:    2238        8"      MOVS     r2,#0x38
        0x00006152:    54a3        .T      STRB     r3,[r4,r2]
        0x00006154:    79ca        .y      LDRB     r2,[r1,#7]
        0x00006156:    7bc9        .{      LDRB     r1,[r1,#0xf]
        0x00006158:    4051        Q@      EORS     r1,r1,r2
        0x0000615a:    79c2        .y      LDRB     r2,[r0,#7]
        0x0000615c:    404a        J@      EORS     r2,r2,r1
        0x0000615e:    7bc0        .{      LDRB     r0,[r0,#0xf]
        0x00006160:    4050        P@      EORS     r0,r0,r2
        0x00006162:    2139        9!      MOVS     r1,#0x39
        0x00006164:    5460        `T      STRB     r0,[r4,r1]
        0x00006166:    e000        ..      B        0x616a ; 0x616a
        0x00006168:    4625        %F      MOV      r5,r4
        0x0000616a:    4826        &H      LDR      r0,[pc,#152] ; [0x6204] = 0x2000023c
        0x0000616c:    8005        ..      STRH     r5,[r0,#0]
;;;479    			}
;;;480    
;;;481    			gudbOutputLen = LENGTH_AUTH_RESPONSE_WITH_KC;
;;;482    		} // if (_31102_checkServiceInUST(UST_SERIVCE_GSM_ACCESS))
;;;483    		else {
;;;484    			
;;;485    			DBG_FUNC("[31_102] _31102_authenticate: GSM service is not enabled, response will not contain Kc\n");
;;;486    
;;;487    			/*GSM access service is not available*/
;;;488    			gudbOutputLen = LENGTH_AUTH_RESPONSE_WITHOUT_KC;
;;;489    		}
;;;490    
;;;491    	}
;;;492    	else {
;;;493    
;;;494    		DBG_FUNC("[31_102] _31102_authenticate: P2 states GSM context authentication \n");
;;;495    		/*Perform 2G context Authentication algo as per TS 31.102*/
;;;496    	}
;;;497    
;;;498    	DBG_FUNC_EXIT("<<[102_221] _31102_authenticate() \n");
;;;499    
;;;500    }
        0x0000616e:    b031        1.      ADD      sp,sp,#0xc4
        0x00006170:    bdf0        ..      POP      {r4-r7,pc}
        0x00006172:    4820         H      LDR      r0,[pc,#128] ; [0x61f4] = 0x20000648
        0x00006174:    2106        .!      MOVS     r1,#6
        0x00006176:    f001fc56    ..V.    BL       longjmp ; 0x7a26
        0x0000617a:    481e        .H      LDR      r0,[pc,#120] ; [0x61f4] = 0x20000648
        0x0000617c:    211d        .!      MOVS     r1,#0x1d
        0x0000617e:    f001fc52    ..R.    BL       longjmp ; 0x7a26
        0x00006182:    20ff        .       MOVS     r0,#0xff
        0x00006184:    3058        X0      ADDS     r0,r0,#0x58
        0x00006186:    1d42        B.      ADDS     r2,r0,#5
        0x00006188:    482b        +H      LDR      r0,[pc,#172] ; [0x6238] = 0x8a3c
        0x0000618a:    4926        &I      LDR      r1,[pc,#152] ; [0x6224] = 0x8b01
        0x0000618c:    f001fab0    ....    BL       __aeabi_assert ; 0x76f0
        0x00006190:    22ff        ."      MOVS     r2,#0xff
        0x00006192:    3258        X2      ADDS     r2,r2,#0x58
        0x00006194:    320f        .2      ADDS     r2,r2,#0xf
        0x00006196:    4827        'H      LDR      r0,[pc,#156] ; [0x6234] = 0x897b
        0x00006198:    4922        "I      LDR      r1,[pc,#136] ; [0x6224] = 0x8b01
        0x0000619a:    f001faa9    ....    BL       __aeabi_assert ; 0x76f0
        0x0000619e:    2022        "       MOVS     r0,#0x22
        0x000061a0:    7120         q      STRB     r0,[r4,#4]
        0x000061a2:    4814        .H      LDR      r0,[pc,#80] ; [0x61f4] = 0x20000648
        0x000061a4:    2107        .!      MOVS     r1,#7
        0x000061a6:    f001fc3e    ..>.    BL       longjmp ; 0x7a26
        0x000061aa:    4812        .H      LDR      r0,[pc,#72] ; [0x61f4] = 0x20000648
        0x000061ac:    2111        .!      MOVS     r1,#0x11
        0x000061ae:    f001fc3a    ..:.    BL       longjmp ; 0x7a26
        0x000061b2:    22ff        ."      MOVS     r2,#0xff
        0x000061b4:    3258        X2      ADDS     r2,r2,#0x58
        0x000061b6:    481e        .H      LDR      r0,[pc,#120] ; [0x6230] = 0x8ae4
        0x000061b8:    491a        .I      LDR      r1,[pc,#104] ; [0x6224] = 0x8b01
        0x000061ba:    f001fa99    ....    BL       __aeabi_assert ; 0x76f0
        0x000061be:    481b        .H      LDR      r0,[pc,#108] ; [0x622c] = 0x89d5
        0x000061c0:    4918        .I      LDR      r1,[pc,#96] ; [0x6224] = 0x8b01
        0x000061c2:    22c4        ."      MOVS     r2,#0xc4
        0x000061c4:    f001fa94    ....    BL       __aeabi_assert ; 0x76f0
        0x000061c8:    480a        .H      LDR      r0,[pc,#40] ; [0x61f4] = 0x20000648
        0x000061ca:    2120         !      MOVS     r1,#0x20
        0x000061cc:    f001fc2b    ..+.    BL       longjmp ; 0x7a26
        0x000061d0:    4817        .H      LDR      r0,[pc,#92] ; [0x6230] = 0x8ae4
        0x000061d2:    4914        .I      LDR      r1,[pc,#80] ; [0x6224] = 0x8b01
        0x000061d4:    22bf        ."      MOVS     r2,#0xbf
        0x000061d6:    f001fa8b    ....    BL       __aeabi_assert ; 0x76f0
        0x000061da:    4813        .H      LDR      r0,[pc,#76] ; [0x6228] = 0x8a96
        0x000061dc:    4911        .I      LDR      r1,[pc,#68] ; [0x6224] = 0x8b01
        0x000061de:    2253        S"      MOVS     r2,#0x53
        0x000061e0:    f001fa86    ....    BL       __aeabi_assert ; 0x76f0
        0x000061e4:    a008        ..      ADR      r0,{pc}+0x24 ; 0x6208
        0x000061e6:    490f        .I      LDR      r1,[pc,#60] ; [0x6224] = 0x8b01
        0x000061e8:    2258        X"      MOVS     r2,#0x58
        0x000061ea:    f001fa81    ....    BL       __aeabi_assert ; 0x76f0
        0x000061ee:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.0_1
        0x000061f0:    2000023e    >..     DCD    536871486
    __arm_cp.0_2
        0x000061f4:    20000648    H..     DCD    536872520
    __arm_cp.0_3
        0x000061f8:    200006e8    ...     DCD    536872680
    __arm_cp.0_4
        0x000061fc:    00007f49    I...    DCD    32585
    __arm_cp.0_5
        0x00006200:    00006f13    .o..    DCD    28435
    __arm_cp.0_6
        0x00006204:    2000023c    <..     DCD    536871484
        0x00006208:    55616866    fhaU    DCD    1432447078
        0x0000620c:    21205453    ST !    DCD    555766867
        0x00006210:    4f4e203d    = NO    DCD    1330520125
        0x00006214:    4c49465f    _FIL    DCD    1279870559
        0x00006218:    52505f45    E_PR    DCD    1380998981
        0x0000621c:    4e455345    ESEN    DCD    1313166149
        0x00006220:    00000054    T...    DCD    84
    __arm_cp.0_8
        0x00006224:    00008b01    ....    DCD    35585
    __arm_cp.0_9
        0x00006228:    00008a96    ....    DCD    35478
    __arm_cp.0_10
        0x0000622c:    000089d5    ....    DCD    35285
    __arm_cp.0_11
        0x00006230:    00008ae4    ....    DCD    35556
    __arm_cp.0_12
        0x00006234:    0000897b    {...    DCD    35195
    __arm_cp.0_13
        0x00006238:    00008a3c    <...    DCD    35388
    $t.0
    _31111_checkTerminalProfile
;;; BusinessComponent/Telecom/31_111/source\31_111.c
;;;18     {
        0x0000623c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000623e:    b083        ..      SUB      sp,sp,#0xc
        0x00006240:    460c        .F      MOV      r4,r1
        0x00006242:    4605        .F      MOV      r5,r0
        0x00006244:    f7fcfeb6    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x00006248:    4601        .F      MOV      r1,r0
;;; BusinessComponent/Telecom/31_111/source\31_111.c
        0x0000624a:    480f        .H      LDR      r0,[pc,#60] ; [0x6288] = 0x7f49
        0x0000624c:    2600        .&      MOVS     r6,#0
        0x0000624e:    af02        ..      ADD      r7,sp,#8
;;;1      #include "31_111.h"
;;;2      
;;;3      //Variables definition
;;;4      
;;;5      /*
;;;6      * It checks for the profile(CAT facilities) that terminal supports
;;;7      *
;;;8      * @param byteIndex: byte that contain the facility supported by the terminal.
;;;9      * @param bitNo: bit which indicate that facility supported or not.
;;;10     *				bit = 1: facility supported by terminal. 
;;;11     *				bit = 0: facility not supported by terminal. 
;;;12     *
;;;13     * @return TRUE if facility supported by terminal, otherwise FALSE.
;;;14     * for example : if terminal supports SMS-PP data download 
;;;15     *				then set BitNo 2 of ByteIndex 1.
;;;16     */
;;;17     boolean _31111_checkTerminalProfile(uMonoByte umbByteIndex, uMonoByte umpBitNo)
;;;18     {
;;;19     	tFileHeaderAddr   fhaFile;
;;;20     	uMonoByte         umbProfileByte;
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[31111] _31111_checkTerminalProfile() \n");
;;;23     
;;;24     	/*get memory reference of Admin use DF*/
;;;25     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, &fhaFile);
        0x00006250:    4632        2F      MOV      r2,r6
        0x00006252:    463b        ;F      MOV      r3,r7
        0x00006254:    f7fcff6e    ..n.    BL       _7816_4_ifFileExists ; 0x3134
;;;26     
;;;27     	/*get memory reference of Terminal profile ef*/
;;;28     	_7816_4_ifFileExists(FID_PROP_TERMINAL_PROFILE, fhaFile, MODE_FIND_FID, &fhaFile);
        0x00006258:    8839        9.      LDRH     r1,[r7,#0]
        0x0000625a:    480c        .H      LDR      r0,[pc,#48] ; [0x628c] = 0x6f17
        0x0000625c:    4632        2F      MOV      r2,r6
        0x0000625e:    463b        ;F      MOV      r3,r7
        0x00006260:    f7fcff68    ..h.    BL       _7816_4_ifFileExists ; 0x3134
;;;29     
;;;30     	/*get the byte which will be checked further*/
;;;31     	_7816_4_readUpdateFile(fhaFile, &umbProfileByte, umbByteIndex - 1, 0x01, ACC_MODE_FILE_READ);
        0x00006264:    8838        8.      LDRH     r0,[r7,#0]
        0x00006266:    9600        ..      STR      r6,[sp,#0]
        0x00006268:    1e69        i.      SUBS     r1,r5,#1
        0x0000626a:    b28a        ..      UXTH     r2,r1
        0x0000626c:    ad01        ..      ADD      r5,sp,#4
        0x0000626e:    2601        .&      MOVS     r6,#1
        0x00006270:    4629        )F      MOV      r1,r5
        0x00006272:    4633        3F      MOV      r3,r6
        0x00006274:    f7fdf83a    ..:.    BL       _7816_4_readUpdateFile ; 0x32ec
;;;32     
;;;33     
;;;34     	/*check if bit is set or not*/
;;;35     	if (SHIFT_LEFT_BY_N_BITS(0x01, (umpBitNo - 1)) & umbProfileByte)
        0x00006278:    1e61        a.      SUBS     r1,r4,#1
        0x0000627a:    7828        (x      LDRB     r0,[r5,#0]
        0x0000627c:    40c8        .@      LSRS     r0,r0,r1
        0x0000627e:    4030        0@      ANDS     r0,r0,r6
;;;36     	{
;;;37     		/*facility is supported by the terminal*/
;;;38     		DBG_FUNC("[31111] _31111_checkTerminalProfile: TRUE \n");
;;;39     		DBG_FUNC_EXIT("<<[31111] _31111_checkTerminalProfile() \n");
;;;40     		return TRUE;
;;;41     	}
;;;42     	/*facility does not supported by the terminal*/
;;;43     	DBG_FUNC("[31111] _31111_checkTerminalProfile: FALSE \n");
;;;44     	DBG_FUNC_EXIT("<<[31111] _31111_checkTerminalProfile() \n");
;;;45     	return FALSE;
;;;46     }
        0x00006280:    d000        ..      BEQ      0x6284 ; _31111_checkTerminalProfile + 72
        0x00006282:    20ff        .       MOVS     r0,#0xff
        0x00006284:    b003        ..      ADD      sp,sp,#0xc
        0x00006286:    bdf0        ..      POP      {r4-r7,pc}
    $d.1
    __arm_cp.0_0
        0x00006288:    00007f49    I...    DCD    32585
    __arm_cp.0_1
        0x0000628c:    00006f17    .o..    DCD    28439
    $t.0
    _31111_Envelope
;;; BusinessComponent/Telecom/31_111/source\USIM_CatHandling.c
;;;8      void _31111_Envelope(IN_ARG puMonoByte pumbEnvelopeData) {
        0x00006290:    b580        ..      PUSH     {r7,lr}
        0x00006292:    7801        .x      LDRB     r1,[r0,#0]
        0x00006294:    29d1        .)      CMP      r1,#0xd1
        0x00006296:    d129        ).      BNE      0x62ec ; _31111_Envelope + 92
        0x00006298:    7841        Ax      LDRB     r1,[r0,#1]
;;; BusinessComponent/Telecom/31_111/source\USIM_CatHandling.c
        0x0000629a:    2981        .)      CMP      r1,#0x81
        0x0000629c:    d007        ..      BEQ      0x62ae ; _31111_Envelope + 30
        0x0000629e:    2302        .#      MOVS     r3,#2
        0x000062a0:    5cc2        .\      LDRB     r2,[r0,r3]
        0x000062a2:    2a82        .*      CMP      r2,#0x82
        0x000062a4:    d007        ..      BEQ      0x62b6 ; _31111_Envelope + 38
        0x000062a6:    4619        .F      MOV      r1,r3
        0x000062a8:    2a86        .*      CMP      r2,#0x86
        0x000062aa:    d00c        ..      BEQ      0x62c6 ; _31111_Envelope + 54
        0x000062ac:    e011        ..      B        0x62d2 ; _31111_Envelope + 66
        0x000062ae:    2303        .#      MOVS     r3,#3
;;;1      #include "31_111.h"
;;;2      
;;;3      /*
;;;4      * It handles Envelope Command
;;;5      * 
;;;6      * @param pumbEnvelopeData: Envelope Data
;;;7      */
;;;8      void _31111_Envelope(IN_ARG puMonoByte pumbEnvelopeData) {
;;;9      
;;;10     	uMonoByte	umbLengthSmsPp;
;;;11     	uMonoByte	umbLengthAddress;
;;;12     	//uMonoByte	umbTonAddress;
;;;13     	//uMonoByte	umbNpiAddress;
;;;14     	uMonoByte	umbLengthSmsTpdu;
;;;15     	uMonoByte   umbIndex = 0x00;
;;;16     
;;;17     	DBG_FUNC_ENTRY(">>[31_111] _31111_Envelope() \n");
;;;18     
;;;19     	/*check type of Envelope Data*/
;;;20     
;;;21     	if (pumbEnvelopeData[0x00] == TAG_ENV_SMS_PP_DATA_DOWNLOAD) {
;;;22     		// TODO: Parse Data and extract SMS_TPDU
;;;23     
;;;24     		DBG_FUNC("[31_111] _31111_Envelope: Found 'D1' Tag which indicates SMS pp data download\n");
;;;25     
;;;26     		if (pumbEnvelopeData[0x01] == FIRST_BYTE_OF_LENGTH) {
;;;27     			/*Check if length tag is present*/
;;;28     
;;;29     			umbLengthSmsPp = pumbEnvelopeData[0x02]; // next byte will be length
;;;30     			DBG_FUNC("[31_111] _31111_Envelope: Found '81' tag for larger length of 'D1' tag which indicates %1 bytes length of SMS pp data download\n", umbLengthSmsPp);
;;;31     			umbIndex = 0x03;
;;;32     		}
;;;33     		else {
;;;34     
;;;35     			umbLengthSmsPp = pumbEnvelopeData[0x01]; // same byte will be length
;;;36     
;;;37     			DBG_FUNC("[31_111] _31111_Envelope: Length for 'D1' tag which indicates %1 bytes length of SMS pp data download\n", umbLengthSmsPp);
;;;38     			umbIndex = 0x02;
;;;39     		}
;;;40     
;;;41     		if (pumbEnvelopeData[umbIndex] == TAG_OF_DEVICE_IDENTITIES) {
        0x000062b0:    5cc2        .\      LDRB     r2,[r0,r3]
        0x000062b2:    2a82        .*      CMP      r2,#0x82
        0x000062b4:    d1f7        ..      BNE      0x62a6 ; _31111_Envelope + 22
;;;42     
;;;43     			DBG_FUNC("[31_111] _31111_Envelope: Found '82' Tag which indicates Device Identities\n");
;;;44     
;;;45     			umbIndex++;
        0x000062b6:    1c59        Y.      ADDS     r1,r3,#1
;;;46     
;;;47     			if (pumbEnvelopeData[umbIndex] == LENGTH_OF_DEVICE_IDENTITIES) {
        0x000062b8:    5c42        B\      LDRB     r2,[r0,r1]
        0x000062ba:    2a02        .*      CMP      r2,#2
        0x000062bc:    d100        ..      BNE      0x62c0 ; _31111_Envelope + 48
        0x000062be:    1d19        ..      ADDS     r1,r3,#4
;;;48     				/*TODO*/
;;;49     				DBG_FUNC("[31_111] _31111_Envelope: Length byte which indicates %1 length of Device Identities tag\n", LENGTH_OF_DEVICE_IDENTITIES);
;;;50     
;;;51     				umbIndex++;
;;;52     
;;;53     				DBG_FUNC("[31_111] _31111_Envelope: First byte which indicates Source Device Identity\n");
;;;54     
;;;55     				switch (pumbEnvelopeData[umbIndex]) {
;;;56     				case 0x81:
;;;57     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating source 'UICC'\n", pumbEnvelopeData[umbIndex]);
;;;58     					break;
;;;59     				case 0x82:
;;;60     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating source 'Terminal'\n", pumbEnvelopeData[umbIndex]);
;;;61     					break;
;;;62     				case 0x83:
;;;63     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating source 'Network'\n", pumbEnvelopeData[umbIndex]);
;;;64     					break;
;;;65     				default:
;;;66     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating 'Reserved'\n", pumbEnvelopeData[umbIndex]);
;;;67     				}
;;;68     
;;;69     				umbIndex++;
;;;70     
;;;71     				DBG_FUNC("[31_111] _31111_Envelope: Second byte which indicates Destination Device Identity\n");
;;;72     
;;;73     				switch (pumbEnvelopeData[umbIndex]) {
;;;74     				case 0x81:
;;;75     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating destination 'UICC'\n", pumbEnvelopeData[umbIndex]);
;;;76     					break;
;;;77     				case 0x82:
;;;78     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating destination 'Terminal'\n", pumbEnvelopeData[umbIndex]);
;;;79     					break;
;;;80     				case 0x83:
;;;81     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating destination 'Network'\n", pumbEnvelopeData[umbIndex]);
;;;82     					break;
;;;83     				default:
;;;84     					DBG_FUNC("[31_111] _31111_Envelope: Found %1 byte indicating 'Reserved'\n", pumbEnvelopeData[umbIndex]);
;;;85     				}
;;;86     
;;;87     				umbIndex++;
;;;88     			}
;;;89     			else {
;;;90     				/*TODO*/
;;;91     				DBG_ERR("[31_111] _31111_Envelope: Length byte having Wrong length %1 for Device Identities tag\n", pumbEnvelopeData[umbIndex]);
;;;92     			}
;;;93     		}
;;;94     
;;;95     		if (pumbEnvelopeData[umbIndex] == TAG_OF_ADDRESS) {
        0x000062c0:    5c42        B\      LDRB     r2,[r0,r1]
        0x000062c2:    2a86        .*      CMP      r2,#0x86
        0x000062c4:    d105        ..      BNE      0x62d2 ; _31111_Envelope + 66
;;;96     
;;;97     			DBG_FUNC("[31_111] _31111_Envelope: Found '86' Tag which indicates Address\n");
;;;98     
;;;99     			umbIndex++;
        0x000062c6:    180a        ..      ADDS     r2,r1,r0
;;;100    
;;;101    			umbLengthAddress = pumbEnvelopeData[umbIndex];
        0x000062c8:    7852        Rx      LDRB     r2,[r2,#1]
;;;102    			DBG_FUNC("[31_111] _31111_Envelope: Length byte which indicates %1 length of Address tag\n", umbLengthAddress);
;;;103    			
;;;104    			umbIndex++;
        0x000062ca:    1889        ..      ADDS     r1,r1,r2
;;;105    
;;;106    			/*ton_address = pumbEnvelopeData[index] & 0xF0;
;;;107    
;;;108    			switch (ton_address) {
;;;109    			case 0x80: DBG_FUNC("[31_111] _31111_Envelope: The Type of Number is 'Unknown'\n");
;;;110    				break;
;;;111    
;;;112    			case 0x90: DBG_FUNC("[31_111] _31111_Envelope: The Type of Number is 'International Number'\n");
;;;113    				break;
;;;114    
;;;115    			case 0xA0: DBG_FUNC("[31_111] _31111_Envelope: The Type of Number is 'National Number'\n");
;;;116    				break;
;;;117    
;;;118    			case 0xB0: DBG_FUNC("[31_111] _31111_Envelope: The Type of Number is 'Network Specific Number'\n");
;;;119    				break;
;;;120    
;;;121    			default: DBG_FUNC("[31_111] _31111_Envelope: The Type of Number is 'Reserved or Access Technology Specific'\n");
;;;122    			}
;;;123    
;;;124    			npi_address = pumbEnvelopeData[index] & 0x8F;
;;;125    
;;;126    			switch (npi_address) {
;;;127    			case 0x80: DBG_FUNC("[31_111] _31111_Envelope: The Numbering Plan Identification is 'Unknown'\n");
;;;128    				break;
;;;129    
;;;130    			case 0x81: DBG_FUNC("[31_111] _31111_Envelope: The Numbering Plan Identification is 'ISDN/telephony numbering plan'\n");
;;;131    				break;
;;;132    
;;;133    			case 0x83: DBG_FUNC("[31_111] _31111_Envelope: The Numbering Plan Identification is 'Data numbering plan'\n");
;;;134    				break;
;;;135    
;;;136    			case 0x84: DBG_FUNC("[31_111] _31111_Envelope: The Numbering Plan Identification is 'Telex numbering plan '\n");
;;;137    				break;
;;;138    
;;;139    			case 0x89: DBG_FUNC("[31_111] _31111_Envelope: The Numbering Plan Identification is 'Private numbering plan'\n");
;;;140    				break;
;;;141    
;;;142    			case 0x8F: DBG_FUNC("[31_111] _31111_Envelope: The Numbering Plan Identification is 'Reserved for extension'\n");
;;;143    				break;
;;;144    
;;;145    			default: DBG_FUNC("[31_111] _31111_Envelope: The Type of Number is 'Reserved or Access Technology Specific'\n");
;;;146    			}
;;;147    
;;;148    			index++;*/
;;;149    
;;;150    			umbIndex = umbIndex + umbLengthAddress;
        0x000062cc:    1c89        ..      ADDS     r1,r1,#2
;;;151    		}
;;;152    
;;;153    		if (pumbEnvelopeData[umbIndex] == TAG_OF_SMS_TPDU) {
        0x000062ce:    b2ca        ..      UXTB     r2,r1
        0x000062d0:    5c82        .\      LDRB     r2,[r0,r2]
        0x000062d2:    2a8b        .*      CMP      r2,#0x8b
        0x000062d4:    d10a        ..      BNE      0x62ec ; _31111_Envelope + 92
;;;154    
;;;155    			DBG_FUNC("[31_111] _31111_Envelope: Found '8B' Tag which indicates SMS TPDU\n");
;;;156    
;;;157    			umbIndex++;
        0x000062d6:    1c4a        J.      ADDS     r2,r1,#1
;;;158    
;;;159    			if (pumbEnvelopeData[umbIndex] == FIRST_BYTE_OF_LENGTH) {
        0x000062d8:    b2d3        ..      UXTB     r3,r2
        0x000062da:    5cc3        .\      LDRB     r3,[r0,r3]
        0x000062dc:    2b81        .+      CMP      r3,#0x81
        0x000062de:    d100        ..      BNE      0x62e2 ; _31111_Envelope + 82
        0x000062e0:    1c8a        ..      ADDS     r2,r1,#2
;;;160    				/*Check if length tag is present*/
;;;161    
;;;162    				umbLengthSmsTpdu = pumbEnvelopeData[++umbIndex]; // next byte will be length
;;;163    
;;;164    				DBG_FUNC("[31_111] _31111_Envelope: Found '81' tag for larger length of '8B' tag which indicates %1 bytes length of SMS TPDU\n", umbLengthSmsTpdu);
;;;165    			}
;;;166    			else {
;;;167    
;;;168    				umbLengthSmsTpdu = pumbEnvelopeData[umbIndex]; // same byte will be length
;;;169    
;;;170    				DBG_FUNC("[31_111] _31111_Envelope: Length for '8B' tag which indicates %1 bytes length of SMS TPDU\n", umbLengthSmsTpdu);
;;;171    			}
;;;172    
;;;173    			umbIndex++;
        0x000062e2:    1c51        Q.      ADDS     r1,r2,#1
;;;174    
;;;175    			/*call function which knows the parsing of secured command packet*/
;;;176    			_31115_SmsppImplementation(pumbEnvelopeData + umbIndex);
        0x000062e4:    b2c9        ..      UXTB     r1,r1
        0x000062e6:    1840        @.      ADDS     r0,r0,r1
        0x000062e8:    f001f9f2    ....    BL       _31115_SmsppImplementation ; 0x76d0
;;;177    
;;;178    		}
;;;179    
;;;180    	}
;;;181    
;;;182    	DBG_FUNC_EXIT("<<[31_111] _31111_Envelope() \n");
;;;183    }
        0x000062ec:    bd80        ..      POP      {r7,pc}
        0x000062ee:    0000        ..      MOVS     r0,r0
    _51011_terminalProfile
;;; BusinessComponent/Telecom/51_011/source\sim_CatCommands.c
;;;9      }
        0x000062f0:    4770        pG      BX       lr
    _51011_terminalResponse
;;;10     
;;;11     /*
;;;12     * It implements the Terminal Response command
;;;13     */
;;;14     void _51011_terminalResponse(void) {
;;;15     
;;;16     	//TODO  CAT commands
;;;17     }
        0x000062f2:    4770        pG      BX       lr
    _51011_envelope
;;;18     
;;;19     /*
;;;20     * It implements the Envelope command
;;;21     */
;;;22     void _51011_envelope(void) {
        0x000062f4:    b580        ..      PUSH     {r7,lr}
;;;23     
;;;24     	DBG_FUNC_ENTRY(">>[102221] _51011_envelope() \n");
;;;25     
;;;26     	DBG_FUNC("[102221] _51011_envelope: ENVELOPE command will be executed as per UICC\n");
;;;27     	_102221_envelope();
        0x000062f6:    f7fbf935    ..5.    BL       _102221_envelope ; 0x1564
;;;28     
;;;29     	DBG_FUNC_EXIT("<<[102221] _51011_envelope() \n");
;;;30     }
        0x000062fa:    bd80        ..      POP      {r7,pc}
    _51011_fetch
;;;31     
;;;32     /*
;;;33     * It implements the Fetch command
;;;34     */
;;;35     void _51011_fetch(void) {
;;;36     
;;;37     	//TODO  CAT commands
;;;38     }
        0x000062fc:    4770        pG      BX       lr
        0x000062fe:    0000        ..      MOVS     r0,r0
    _51011_readUpdateRecord
;;; BusinessComponent/Telecom/51_011/source\sim_FileHandlingCommands.c
;;;20     void _51011_readUpdateRecord(void) {
        0x00006300:    b580        ..      PUSH     {r7,lr}
        0x00006302:    4805        .H      LDR      r0,[pc,#20] ; [0x6318] = 0x2000023e
        0x00006304:    78c0        .x      LDRB     r0,[r0,#3]
        0x00006306:    2808        .(      CMP      r0,#8
        0x00006308:    d202        ..      BCS      0x6310 ; _51011_readUpdateRecord + 16
        0x0000630a:    f7fbf9f3    ....    BL       _102221_readUpdateRecord ; 0x16f4
        0x0000630e:    bd80        ..      POP      {r7,pc}
        0x00006310:    4802        .H      LDR      r0,[pc,#8] ; [0x631c] = 0x20000648
        0x00006312:    2106        .!      MOVS     r1,#6
        0x00006314:    f001fb87    ....    BL       longjmp ; 0x7a26
    $d.1
    __arm_cp.0_0
        0x00006318:    2000023e    >..     DCD    536871486
    __arm_cp.0_1
        0x0000631c:    20000648    H..     DCD    536872520
    $t.2
    _51011_readUpdateBinary
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[51_011] _51011_readUpdateRecord() \n");
;;;23     
;;;24     	if (P2_BYTE & MASK_FILE_SELECTION) { //If p2 denotes SFI
;;;25     		//SFI is not supported in GSM/SIM
;;;26     		/*Wrong P1-P2*/
;;;27     		DBG_ERR("[51_011] _51011_readUpdateRecord: Wrong P1-P2 \n");
;;;28     		DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateRecord() \n");
;;;29     		THROW(EXCEP_WRONG_P1_P2);
;;;30     	}
;;;31     
;;;32     	_102221_readUpdateRecord();
;;;33     
;;;34     	DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateRecord() \n");
;;;35     }
;;;36     
;;;37     /*
;;;38     * It implements Read/Update Binary command of 51.011
;;;39     */
;;;40     void _51011_readUpdateBinary(void) {
        0x00006320:    b580        ..      PUSH     {r7,lr}
        0x00006322:    2002        .       MOVS     r0,#2
        0x00006324:    4905        .I      LDR      r1,[pc,#20] ; [0x633c] = 0x2000023e
        0x00006326:    5608        .V      LDRSB    r0,[r1,r0]
        0x00006328:    2800        .(      CMP      r0,#0
        0x0000632a:    d402        ..      BMI      0x6332 ; _51011_readUpdateBinary + 18
        0x0000632c:    f7fbf94e    ..N.    BL       _102221_readUpdateBinary ; 0x15cc
        0x00006330:    bd80        ..      POP      {r7,pc}
        0x00006332:    4803        .H      LDR      r0,[pc,#12] ; [0x6340] = 0x20000648
        0x00006334:    2106        .!      MOVS     r1,#6
        0x00006336:    f001fb76    ..v.    BL       longjmp ; 0x7a26
        0x0000633a:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x0000633c:    2000023e    >..     DCD    536871486
    __arm_cp.1_1
        0x00006340:    20000648    H..     DCD    536872520
    $t.4
    _51011_increaseRecord
;;;41     
;;;42     	DBG_FUNC_ENTRY(">>[51_011] _51011_readUpdateBinary() \n");
;;;43     
;;;44     	if (P1_BYTE & MASK_BIT(8)) { //If P1 indicates SFI
;;;45     		/*Wrong P1-P2*/
;;;46     		DBG_ERR("[51_011] _51011_readUpdateBinary: Wrong P1-P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateBinary() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	_102221_readUpdateBinary();
;;;52     
;;;53     	DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateBinary() \n");
;;;54     }
;;;55     
;;;56     /*
;;;57     * It implements Increase record command of 51.011
;;;58     */
;;;59     void _51011_increaseRecord(void) {
        0x00006344:    b580        ..      PUSH     {r7,lr}
        0x00006346:    480a        .H      LDR      r0,[pc,#40] ; [0x6370] = 0x2000023e
        0x00006348:    7881        .x      LDRB     r1,[r0,#2]
        0x0000634a:    2900        .)      CMP      r1,#0
        0x0000634c:    d105        ..      BNE      0x635a ; _51011_increaseRecord + 22
        0x0000634e:    7901        .y      LDRB     r1,[r0,#4]
        0x00006350:    2903        .)      CMP      r1,#3
        0x00006352:    d106        ..      BNE      0x6362 ; _51011_increaseRecord + 30
        0x00006354:    f7fbfb28    ..(.    BL       _102221_increase ; 0x19a8
        0x00006358:    bd80        ..      POP      {r7,pc}
        0x0000635a:    4806        .H      LDR      r0,[pc,#24] ; [0x6374] = 0x20000648
        0x0000635c:    2106        .!      MOVS     r1,#6
        0x0000635e:    f001fb62    ..b.    BL       longjmp ; 0x7a26
;;; BusinessComponent/Telecom/51_011/source\sim_FileHandlingCommands.c
        0x00006362:    2103        .!      MOVS     r1,#3
        0x00006364:    7101        .q      STRB     r1,[r0,#4]
        0x00006366:    4803        .H      LDR      r0,[pc,#12] ; [0x6374] = 0x20000648
        0x00006368:    2107        .!      MOVS     r1,#7
        0x0000636a:    f001fb5c    ..\.    BL       longjmp ; 0x7a26
        0x0000636e:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x00006370:    2000023e    >..     DCD    536871486
    __arm_cp.2_1
        0x00006374:    20000648    H..     DCD    536872520
    $t.6
    _51011_invalidateRehabilitate
;;;1      #include"51_011.h"
;;;2      
;;;3      /*
;;;4      * Macro defines
;;;5      */
;;;6      #define SEEK_TYPE_1												(0x00)
;;;7      #define SEEK_TYPE_2												(0x01)
;;;8      #define MASK_SEEK_MODE											(0x0F)
;;;9      #define SEEK_P3_MAX_LENGTH										(0x10)
;;;10     #define SEEK_FORWARD_FROM_BEGIN									(0x00)
;;;11     #define SEEK_BACKWARD_FROM_END									(0x01)
;;;12     #define SEEK_FORWARD_FROM_NEXT_RECORD							(0x02)
;;;13     #define SEEK_BACKWARD_FROM_PREVIOUS_RECORD						(0x03)
;;;14     #define MAX_P3_LENGTH_FOR_INCREASE_GSM							(0x03)
;;;15     /*
;;;16     * It implements Read/Update Record command of 51.011
;;;17     */
;;;18     
;;;19     
;;;20     void _51011_readUpdateRecord(void) {
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[51_011] _51011_readUpdateRecord() \n");
;;;23     
;;;24     	if (P2_BYTE & MASK_FILE_SELECTION) { //If p2 denotes SFI
;;;25     		//SFI is not supported in GSM/SIM
;;;26     		/*Wrong P1-P2*/
;;;27     		DBG_ERR("[51_011] _51011_readUpdateRecord: Wrong P1-P2 \n");
;;;28     		DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateRecord() \n");
;;;29     		THROW(EXCEP_WRONG_P1_P2);
;;;30     	}
;;;31     
;;;32     	_102221_readUpdateRecord();
;;;33     
;;;34     	DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateRecord() \n");
;;;35     }
;;;36     
;;;37     /*
;;;38     * It implements Read/Update Binary command of 51.011
;;;39     */
;;;40     void _51011_readUpdateBinary(void) {
;;;41     
;;;42     	DBG_FUNC_ENTRY(">>[51_011] _51011_readUpdateBinary() \n");
;;;43     
;;;44     	if (P1_BYTE & MASK_BIT(8)) { //If P1 indicates SFI
;;;45     		/*Wrong P1-P2*/
;;;46     		DBG_ERR("[51_011] _51011_readUpdateBinary: Wrong P1-P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateBinary() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	_102221_readUpdateBinary();
;;;52     
;;;53     	DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateBinary() \n");
;;;54     }
;;;55     
;;;56     /*
;;;57     * It implements Increase record command of 51.011
;;;58     */
;;;59     void _51011_increaseRecord(void) {
;;;60     
;;;61     	DBG_FUNC_ENTRY(">>[51_011] _51011_increaseRecord() \n");
;;;62     
;;;63     	if (P1_BYTE) { //If P1 indicates SFI
;;;64     		//SFI is not supported in GSM/SIM
;;;65     		/*Wrong P1-P2*/
;;;66     		DBG_ERR("[51_011] _51011_increaseRecord: Wrong P1-P2 \n");
;;;67     		DBG_FUNC_EXIT("<<[51_011] _51011_increaseRecord() \n");
;;;68     		THROW(EXCEP_WRONG_P1_P2);
;;;69     	}
;;;70     	else if (P3_BYTE != MAX_P3_LENGTH_FOR_INCREASE_GSM) { //if p3 is not 03 then 
;;;71     		//p3=03 is mendatory for GSM, another differents value is not supported in GSM
;;;72     		/*Wrong P3*/
;;;73     		DBG_ERR("[51_011] _51011_increaseRecord: Wrong p3 \n");
;;;74     		DBG_FUNC_EXIT("<<[51_011] _51011_increaseRecord() \n");
;;;75     		THROW2(EXCEP_WRONG_P3, MAX_P3_LENGTH_FOR_INCREASE_GSM);
;;;76     	}
;;;77     	else {
;;;78     		_102221_increase();
;;;79     	}
;;;80     	
;;;81     	
;;;82     
;;;83     	DBG_FUNC_EXIT("<<[51_011] _51011_increaseRecord() \n");
;;;84     }
;;;85     
;;;86     /*
;;;87     * It implements Invalidate Rehabilitate File command of 51.011
;;;88     */
;;;89     void _51011_invalidateRehabilitate(void) {
        0x00006378:    b580        ..      PUSH     {r7,lr}
        0x0000637a:    4805        .H      LDR      r0,[pc,#20] ; [0x6390] = 0x2000023e
        0x0000637c:    7880        .x      LDRB     r0,[r0,#2]
        0x0000637e:    2800        .(      CMP      r0,#0
        0x00006380:    d102        ..      BNE      0x6388 ; _51011_invalidateRehabilitate + 16
        0x00006382:    f7fbfa7f    ....    BL       _102221_deactivateActivateFile ; 0x1884
        0x00006386:    bd80        ..      POP      {r7,pc}
        0x00006388:    4802        .H      LDR      r0,[pc,#8] ; [0x6394] = 0x20000648
        0x0000638a:    2106        .!      MOVS     r1,#6
        0x0000638c:    f001fb4b    ..K.    BL       longjmp ; 0x7a26
    $d.7
    __arm_cp.3_0
        0x00006390:    2000023e    >..     DCD    536871486
    __arm_cp.3_1
        0x00006394:    20000648    H..     DCD    536872520
    $t.8
    _51011_Seek
;;;90     
;;;91     	DBG_FUNC_ENTRY(">>[51_011] _51011_invalidateRehabilitate() \n");
;;;92     
;;;93     	if (P1_BYTE) { //If P1 indicates Path
;;;94     	
;;;95     	/*Selection by path is not supported in GSM/SIM*/
;;;96     	/*Wrong P1-P2*/
;;;97     		DBG_ERR("[51_011] _51011_invalidateRehabilitate: Wrong P1-P2 \n");
;;;98     		DBG_FUNC_EXIT("<<[51_011] _51011_invalidateRehabilitate() \n");
;;;99     		THROW(EXCEP_WRONG_P1_P2);
;;;100    	}
;;;101    
;;;102    	_102221_deactivateActivateFile();
;;;103    
;;;104    	DBG_FUNC_EXIT("<<[51_011] _51011_invalidateRehabilitate() \n");
;;;105    }
;;;106    /*
;;;107    * It implements Seek command of 51.011
;;;108    */
;;;109    void _51011_Seek(void) {
        0x00006398:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000639a:    b089        ..      SUB      sp,sp,#0x24
        0x0000639c:    4c4e        NL      LDR      r4,[pc,#312] ; [0x64d8] = 0x2000023e
        0x0000639e:    78e6        .x      LDRB     r6,[r4,#3]
        0x000063a0:    200c        .       MOVS     r0,#0xc
        0x000063a2:    4030        0@      ANDS     r0,r0,r6
        0x000063a4:    1e41        A.      SUBS     r1,r0,#1
        0x000063a6:    4188        .A      SBCS     r0,r0,r1
        0x000063a8:    2e1f        ..      CMP      r6,#0x1f
        0x000063aa:    d801        ..      BHI      0x63b0 ; _51011_Seek + 24
;;; BusinessComponent/Telecom/51_011/source\sim_FileHandlingCommands.c
        0x000063ac:    2100        .!      MOVS     r1,#0
        0x000063ae:    e000        ..      B        0x63b2 ; _51011_Seek + 26
        0x000063b0:    2101        .!      MOVS     r1,#1
;;;1      #include"51_011.h"
;;;2      
;;;3      /*
;;;4      * Macro defines
;;;5      */
;;;6      #define SEEK_TYPE_1												(0x00)
;;;7      #define SEEK_TYPE_2												(0x01)
;;;8      #define MASK_SEEK_MODE											(0x0F)
;;;9      #define SEEK_P3_MAX_LENGTH										(0x10)
;;;10     #define SEEK_FORWARD_FROM_BEGIN									(0x00)
;;;11     #define SEEK_BACKWARD_FROM_END									(0x01)
;;;12     #define SEEK_FORWARD_FROM_NEXT_RECORD							(0x02)
;;;13     #define SEEK_BACKWARD_FROM_PREVIOUS_RECORD						(0x03)
;;;14     #define MAX_P3_LENGTH_FOR_INCREASE_GSM							(0x03)
;;;15     /*
;;;16     * It implements Read/Update Record command of 51.011
;;;17     */
;;;18     
;;;19     
;;;20     void _51011_readUpdateRecord(void) {
;;;21     
;;;22     	DBG_FUNC_ENTRY(">>[51_011] _51011_readUpdateRecord() \n");
;;;23     
;;;24     	if (P2_BYTE & MASK_FILE_SELECTION) { //If p2 denotes SFI
;;;25     		//SFI is not supported in GSM/SIM
;;;26     		/*Wrong P1-P2*/
;;;27     		DBG_ERR("[51_011] _51011_readUpdateRecord: Wrong P1-P2 \n");
;;;28     		DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateRecord() \n");
;;;29     		THROW(EXCEP_WRONG_P1_P2);
;;;30     	}
;;;31     
;;;32     	_102221_readUpdateRecord();
;;;33     
;;;34     	DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateRecord() \n");
;;;35     }
;;;36     
;;;37     /*
;;;38     * It implements Read/Update Binary command of 51.011
;;;39     */
;;;40     void _51011_readUpdateBinary(void) {
;;;41     
;;;42     	DBG_FUNC_ENTRY(">>[51_011] _51011_readUpdateBinary() \n");
;;;43     
;;;44     	if (P1_BYTE & MASK_BIT(8)) { //If P1 indicates SFI
;;;45     		/*Wrong P1-P2*/
;;;46     		DBG_ERR("[51_011] _51011_readUpdateBinary: Wrong P1-P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateBinary() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	_102221_readUpdateBinary();
;;;52     
;;;53     	DBG_FUNC_EXIT("<<[51_011] _51011_readUpdateBinary() \n");
;;;54     }
;;;55     
;;;56     /*
;;;57     * It implements Increase record command of 51.011
;;;58     */
;;;59     void _51011_increaseRecord(void) {
;;;60     
;;;61     	DBG_FUNC_ENTRY(">>[51_011] _51011_increaseRecord() \n");
;;;62     
;;;63     	if (P1_BYTE) { //If P1 indicates SFI
;;;64     		//SFI is not supported in GSM/SIM
;;;65     		/*Wrong P1-P2*/
;;;66     		DBG_ERR("[51_011] _51011_increaseRecord: Wrong P1-P2 \n");
;;;67     		DBG_FUNC_EXIT("<<[51_011] _51011_increaseRecord() \n");
;;;68     		THROW(EXCEP_WRONG_P1_P2);
;;;69     	}
;;;70     	else if (P3_BYTE != MAX_P3_LENGTH_FOR_INCREASE_GSM) { //if p3 is not 03 then 
;;;71     		//p3=03 is mendatory for GSM, another differents value is not supported in GSM
;;;72     		/*Wrong P3*/
;;;73     		DBG_ERR("[51_011] _51011_increaseRecord: Wrong p3 \n");
;;;74     		DBG_FUNC_EXIT("<<[51_011] _51011_increaseRecord() \n");
;;;75     		THROW2(EXCEP_WRONG_P3, MAX_P3_LENGTH_FOR_INCREASE_GSM);
;;;76     	}
;;;77     	else {
;;;78     		_102221_increase();
;;;79     	}
;;;80     	
;;;81     	
;;;82     
;;;83     	DBG_FUNC_EXIT("<<[51_011] _51011_increaseRecord() \n");
;;;84     }
;;;85     
;;;86     /*
;;;87     * It implements Invalidate Rehabilitate File command of 51.011
;;;88     */
;;;89     void _51011_invalidateRehabilitate(void) {
;;;90     
;;;91     	DBG_FUNC_ENTRY(">>[51_011] _51011_invalidateRehabilitate() \n");
;;;92     
;;;93     	if (P1_BYTE) { //If P1 indicates Path
;;;94     	
;;;95     	/*Selection by path is not supported in GSM/SIM*/
;;;96     	/*Wrong P1-P2*/
;;;97     		DBG_ERR("[51_011] _51011_invalidateRehabilitate: Wrong P1-P2 \n");
;;;98     		DBG_FUNC_EXIT("<<[51_011] _51011_invalidateRehabilitate() \n");
;;;99     		THROW(EXCEP_WRONG_P1_P2);
;;;100    	}
;;;101    
;;;102    	_102221_deactivateActivateFile();
;;;103    
;;;104    	DBG_FUNC_EXIT("<<[51_011] _51011_invalidateRehabilitate() \n");
;;;105    }
;;;106    /*
;;;107    * It implements Seek command of 51.011
;;;108    */
;;;109    void _51011_Seek(void) {
;;;110    
;;;111    	uMonoByte		umbType;
;;;112    	uMonoByte		umbSearchMode;
;;;113    	uMonoByte		umbRecordNo;
;;;114    	uMonoByte		umbPattern[16];
;;;115    	
;;;116    	DBG_FUNC_ENTRY(">>[51_011] _51011_Seek() \n");
;;;117    
;;;118    	umbType = SHIFT_RIGHT_BY_N_BITS(P2_BYTE, 4); // Get type of seek command i.e. Higher nibble of p2
;;;119    
;;;120    	umbSearchMode = P2_BYTE & MASK_SEEK_MODE;
;;;121    
;;;122    	if ((0x00 != P1_BYTE) //non-zero P1
        0x000063b2:    78a2        .x      LDRB     r2,[r4,#2]
        0x000063b4:    1e53        S.      SUBS     r3,r2,#1
        0x000063b6:    419a        .A      SBCS     r2,r2,r3
;;;123    		||					//OR
        0x000063b8:    430a        .C      ORRS     r2,r2,r1
        0x000063ba:    4302        .C      ORRS     r2,r2,r0
        0x000063bc:    2a01        .*      CMP      r2,#1
        0x000063be:    d069        i.      BEQ      0x6494 ; _51011_Seek + 252
;;;124    		(umbType > SEEK_TYPE_2) // Neither Type 1 nor Type 2
;;;125    		||						//OR
;;;126    		(umbSearchMode > SEEK_BACKWARD_FROM_PREVIOUS_RECORD)) {  //none of the defined seek modes
;;;127    
;;;128    		/*Wrong P1-P2*/
;;;129    		DBG_ERR("[51_011] _51011_Seek: Wrong P1-P2 \n");
;;;130    		DBG_FUNC_EXIT("<<[51_011] _51011_Seek() \n");
;;;131    		THROW(EXCEP_WRONG_P1_P2);
;;;132    	}
;;;133    
;;;134    	if (P3_BYTE > SEEK_P3_MAX_LENGTH) {
        0x000063c0:    7920         y      LDRB     r0,[r4,#4]
        0x000063c2:    2811        .(      CMP      r0,#0x11
        0x000063c4:    d26a        j.      BCS      0x649c ; _51011_Seek + 260
;;;135    		
;;;136    		/*Wrong P3*/
;;;137    		DBG_ERR("[51_011] _51011_Seek: Wrong P3 must be 1-16 bytes \n");
;;;138    		DBG_FUNC_EXIT("<<[51_011] _51011_Seek() \n");
;;;139    		THROW2(EXCEP_WRONG_P3, 0x00);
;;;140    	}
;;;141    
;;;142    	if (NO_FILE_PRESENT == pccCurrentChannel->fhaCurrentEf) {
        0x000063c6:    4d45        EM      LDR      r5,[pc,#276] ; [0x64dc] = 0x200006e8
        0x000063c8:    6828        (h      LDR      r0,[r5,#0]
        0x000063ca:    8900        ..      LDRH     r0,[r0,#8]
        0x000063cc:    2800        .(      CMP      r0,#0
        0x000063ce:    d06b        k.      BEQ      0x64a8 ; _51011_Seek + 272
;;;143    
;;;144    		/*Command not allowed, as no EF selected*/
;;;145    		DBG_ERR("[51_011] _51011_Seek: Command not allowed, as no EF selected\n");
;;;146    		DBG_FUNC_EXIT("<<[51_011] _51011_Seek() \n");
;;;147    		THROW(EXCEP_NO_FILE_SELECTED);
;;;148    	}
;;;149    
;;;150    	if (!(IS(LF, _7816_4_getFileDescriptor(pccCurrentChannel->fhaCurrentEf)))) { // if file is not linear fixed
        0x000063d0:    f7fdf830    ..0.    BL       _7816_4_getFileDescriptor ; 0x3434
        0x000063d4:    2187        .!      MOVS     r1,#0x87
        0x000063d6:    4001        .@      ANDS     r1,r1,r0
        0x000063d8:    2902        .)      CMP      r1,#2
        0x000063da:    d169        i.      BNE      0x64b0 ; _51011_Seek + 280
;;;151    
;;;152    		/*throw Error as target file is not linear fixed*/
;;;153    		DBG_ERR("[51_011] _51011_Seek: File is not linear fixed\n");
;;;154    		DBG_FUNC_EXIT("<<[51_011] _51011_Seek() \n");
;;;155    		THROW(EXCEP_INVALID_FILE_TYPE);
;;;156    	}
;;;157    
;;;158    	/*Checking the security condition of the file*/
;;;159    	if (ACC_NOT_VERIFIED == _102221_verifyAccessCondition(ACC_MODE_FILE_READ, pccCurrentChannel->fhaCurrentEf)) {
        0x000063dc:    6828        (h      LDR      r0,[r5,#0]
        0x000063de:    8901        ..      LDRH     r1,[r0,#8]
        0x000063e0:    2400        .$      MOVS     r4,#0
        0x000063e2:    4620         F      MOV      r0,r4
        0x000063e4:    f7fbf8de    ....    BL       _102221_verifyAccessCondition ; 0x15a4
        0x000063e8:    2801        .(      CMP      r0,#1
        0x000063ea:    d065        e.      BEQ      0x64b8 ; _51011_Seek + 288
;;;160    		DBG_ERR("[102_221] _102221_seek: Security conditions not satisfied \n");
;;;161    		DBG_FUNC_EXIT("<<[102_221] _102221_seek() \n");
;;;162    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;163    	}
;;;164    
;;;165    
;;;166    	if (LCSI_DEACTIVATED == _7816_4_getLifeCycleStatus(pccCurrentChannel->fhaCurrentEf)) { // check if its deactivated
        0x000063ec:    6828        (h      LDR      r0,[r5,#0]
        0x000063ee:    8900        ..      LDRH     r0,[r0,#8]
        0x000063f0:    f7fdf914    ....    BL       _7816_4_getLifeCycleStatus ; 0x361c
        0x000063f4:    2804        .(      CMP      r0,#4
        0x000063f6:    d063        c.      BEQ      0x64c0 ; _51011_Seek + 296
        0x000063f8:    4837        7H      LDR      r0,[pc,#220] ; [0x64d8] = 0x2000023e
;;;167    
;;;168    		DBG_WARN("[102_221] _51011_Seek: File is deactivated\n");
;;;169    		DBG_FUNC_EXIT("<<[102_221] _51011_Seek() \n");
;;;170    		THROW(EXCEP_REFERENCED_DATA_INVALIDATED);
;;;171    	}
;;;172    
;;;173    
;;;174    	/*Copy the patter in local array*/
;;;175    	mem_cpy(umbPattern, COMMAND_DATA, P3_BYTE);
        0x000063fa:    7902        .y      LDRB     r2,[r0,#4]
        0x000063fc:    1d41        A.      ADDS     r1,r0,#5
        0x000063fe:    a805        ..      ADD      r0,sp,#0x14
        0x00006400:    9104        ..      STR      r1,[sp,#0x10]
        0x00006402:    f7fafadc    ....    BL       mem_cpyFwd ; 0x9be
        0x00006406:    270f        .'      MOVS     r7,#0xf
        0x00006408:    4037        7@      ANDS     r7,r7,r6
;;;176    
;;;177    	/*get total no. of records of the file*/
;;;178    	umbRecordNo = _7816_4_getNoOfRecords(pccCurrentChannel->fhaCurrentEf);
        0x0000640a:    6828        (h      LDR      r0,[r5,#0]
        0x0000640c:    8900        ..      LDRH     r0,[r0,#8]
        0x0000640e:    f7fdf88b    ....    BL       _7816_4_getNoOfRecords ; 0x3528
        0x00006412:    2101        .!      MOVS     r1,#1
;;;179    
;;;180    	if (SEEK_FORWARD_FROM_BEGIN == umbSearchMode) { // forward search from begin
        0x00006414:    2f00        ./      CMP      r7,#0
        0x00006416:    d007        ..      BEQ      0x6428 ; _51011_Seek + 144
        0x00006418:    2f02        ./      CMP      r7,#2
        0x0000641a:    d008        ..      BEQ      0x642e ; _51011_Seek + 150
        0x0000641c:    2f01        ./      CMP      r7,#1
        0x0000641e:    d112        ..      BNE      0x6446 ; _51011_Seek + 174
        0x00006420:    2301        .#      MOVS     r3,#1
        0x00006422:    4601        .F      MOV      r1,r0
        0x00006424:    4f2c        ,O      LDR      r7,[pc,#176] ; [0x64d8] = 0x2000023e
        0x00006426:    e01a        ..      B        0x645e ; _51011_Seek + 198
        0x00006428:    4623        #F      MOV      r3,r4
        0x0000642a:    4f2b        +O      LDR      r7,[pc,#172] ; [0x64d8] = 0x2000023e
        0x0000642c:    e017        ..      B        0x645e ; _51011_Seek + 198
;;;181    
;;;182    		DBG_FUNC("[51_011] _51011_Seek: Forward search from beginning \n");
;;;183    
;;;184    		/*Searching from first record in forward direction*/
;;;185    		umbSearchMode = SEARCH_RECORD_FORWARD;
;;;186    		umbRecordNo = RECORD_FIRST;
;;;187    	}
;;;188    	else if (SEEK_BACKWARD_FROM_END == umbSearchMode) { // backward searching from end
;;;189    
;;;190    		DBG_FUNC("[51_011] _51011_Seek: Backward search from ending \n");
;;;191    
;;;192    		/*Searching from last record in backward direction*/
;;;193    		umbSearchMode = SEARCH_RECORD_BACKWARD;
;;;194    	}
;;;195    	else if (SEEK_FORWARD_FROM_NEXT_RECORD == umbSearchMode) { //searching forward from next record
;;;196    		
;;;197    		DBG_FUNC("[51_011] _51011_Seek: Searching forward from next record \n");
;;;198    
;;;199    		/*Searching in forward direction*/
;;;200    		umbSearchMode = SEARCH_RECORD_FORWARD;
;;;201    
;;;202    		if (RECORD_UNDEFINED == pccCurrentChannel->umbCurrentRecPtr) { // if record pointer is not set, in case file is just selected.
        0x0000642e:    4a2b        +J      LDR      r2,[pc,#172] ; [0x64dc] = 0x200006e8
        0x00006430:    6812        .h      LDR      r2,[r2,#0]
        0x00006432:    7812        .x      LDRB     r2,[r2,#0]
        0x00006434:    2a00        .*      CMP      r2,#0
        0x00006436:    4623        #F      MOV      r3,r4
        0x00006438:    4f27        'O      LDR      r7,[pc,#156] ; [0x64d8] = 0x2000023e
        0x0000643a:    d010        ..      BEQ      0x645e ; _51011_Seek + 198
;;;203    
;;;204    			/*Searching will start from first record*/
;;;205    			umbRecordNo = RECORD_FIRST;
;;;206    		}
;;;207    		else if (pccCurrentChannel->umbCurrentRecPtr < umbRecordNo) { // if record pointer is less than last record no.
        0x0000643c:    4282        .B      CMP      r2,r0
        0x0000643e:    d247        G.      BCS      0x64d0 ; _51011_Seek + 312
;;;208    
;;;209    			/*Searching will start from next record*/
;;;210    			umbRecordNo = pccCurrentChannel->umbCurrentRecPtr + 1;
        0x00006440:    1c51        Q.      ADDS     r1,r2,#1
        0x00006442:    4623        #F      MOV      r3,r4
        0x00006444:    e00b        ..      B        0x645e ; _51011_Seek + 198
;;;211    		}
;;;212    		else {
;;;213    			/*record pointer is already set to last record*/
;;;214    			DBG_WARN("[51_011] _51011_Seek: Record pointer is already at last record no.\n");
;;;215    			DBG_FUNC_EXIT("<<[51_011] _51011_Seek() \n");
;;;216    			THROW(EXCEP_NORMAL_ENDING);
;;;217    		}
;;;218    	}
;;;219    	else { //searching backward from previous record
;;;220    
;;;221    		DBG_FUNC("[51_011] _51011_Seek: Searching backward from previous record\n");
;;;222    
;;;223    		/*Searching in backward direction*/
;;;224    		umbSearchMode = SEARCH_RECORD_BACKWARD;
;;;225    
;;;226    		if (RECORD_FIRST == pccCurrentChannel->umbCurrentRecPtr) { // if record pointer is set on first record
        0x00006446:    49fd        .I      LDR      r1,[pc,#1012] ; [0x683c] = 0x200006e8
        0x00006448:    6809        .h      LDR      r1,[r1,#0]
        0x0000644a:    7809        .x      LDRB     r1,[r1,#0]
        0x0000644c:    2301        .#      MOVS     r3,#1
        0x0000644e:    2900        .)      CMP      r1,#0
        0x00006450:    4ff8        .O      LDR      r7,[pc,#992] ; [0x6834] = 0x2000023e
        0x00006452:    d003        ..      BEQ      0x645c ; _51011_Seek + 196
        0x00006454:    2901        .)      CMP      r1,#1
        0x00006456:    d03b        ;.      BEQ      0x64d0 ; _51011_Seek + 312
;;;227    			
;;;228    			/*record pointer is already set to first record*/
;;;229    			DBG_WARN("[51_011] _51011_Seek: Record pointer is already at first record \n");
;;;230    			DBG_FUNC_EXIT("<<[51_011] _51011_Seek() \n");
;;;231    			THROW(EXCEP_NORMAL_ENDING);
;;;232    		}
;;;233    		/*Two possibilities left either record pointer is undefined or more than 1*/
;;;234    		else if (RECORD_UNDEFINED != pccCurrentChannel->umbCurrentRecPtr) { // if record pointer is not undefined, it means record ptr is more than 1
;;;235    
;;;236    			/*Searching will start from previous record*/
;;;237    			umbRecordNo = pccCurrentChannel->umbCurrentRecPtr - 1;
        0x00006458:    1e49        I.      SUBS     r1,r1,#1
        0x0000645a:    e000        ..      B        0x645e ; _51011_Seek + 198
        0x0000645c:    4601        .F      MOV      r1,r0
;;;238    		}
;;;239    
;;;240    		/*If record pointer is undefined, searching will start from last record. umbRecordNo already stores last record no. */
;;;241    	}
;;;242    
;;;243    	DBG_FUNC("[51_011] _51011_Seek: Searching from record %1\n", umbRecordNo);
;;;244    
;;;245    	/*search the currently selected file as command instructed*/
;;;246    	umbRecordNo = _7816_4_SearchRecordFile(pccCurrentChannel->fhaCurrentEf, umbPattern, P3_BYTE, (tSearchMode) umbSearchMode, SEARCH_FIRST_OCCURRENCE,  umbRecordNo, OFFSET_START, COMMAND_RESPONSE_DATA);
        0x0000645e:    793a        :y      LDRB     r2,[r7,#4]
        0x00006460:    4df6        .M      LDR      r5,[pc,#984] ; [0x683c] = 0x200006e8
        0x00006462:    6828        (h      LDR      r0,[r5,#0]
        0x00006464:    8900        ..      LDRH     r0,[r0,#8]
        0x00006466:    b2c9        ..      UXTB     r1,r1
        0x00006468:    9400        ..      STR      r4,[sp,#0]
        0x0000646a:    9101        ..      STR      r1,[sp,#4]
        0x0000646c:    9402        ..      STR      r4,[sp,#8]
        0x0000646e:    9904        ..      LDR      r1,[sp,#0x10]
        0x00006470:    9103        ..      STR      r1,[sp,#0xc]
        0x00006472:    a905        ..      ADD      r1,sp,#0x14
        0x00006474:    f7fdf8ea    ....    BL       _7816_4_SearchRecordFile ; 0x364c
;;;247    
;;;248    	if (umbRecordNo) { // if records are found in searching
        0x00006478:    2800        .(      CMP      r0,#0
        0x0000647a:    d025        %.      BEQ      0x64c8 ; _51011_Seek + 304
;;;249    
;;;250    		/*set current record pointer to first record found*/
;;;251    		pccCurrentChannel->umbCurrentRecPtr = COMMAND_RESPONSE_DATA[0x00];
        0x0000647c:    7978        xy      LDRB     r0,[r7,#5]
        0x0000647e:    6829        )h      LDR      r1,[r5,#0]
        0x00006480:    7008        .p      STRB     r0,[r1,#0]
        0x00006482:    20f0        .       MOVS     r0,#0xf0
;;;252    
;;;253    		if (SEEK_TYPE_2 == umbType) { // if command is type 2
        0x00006484:    4006        .@      ANDS     r6,r6,r0
        0x00006486:    2e10        ..      CMP      r6,#0x10
        0x00006488:    d102        ..      BNE      0x6490 ; _51011_Seek + 248
;;;254    
;;;255    			/*set response length*/
;;;256    			gudbOutputLen = 0x01;
        0x0000648a:    48ed        .H      LDR      r0,[pc,#948] ; [0x6840] = 0x2000023c
        0x0000648c:    2101        .!      MOVS     r1,#1
        0x0000648e:    8001        ..      STRH     r1,[r0,#0]
;;;257    		}
;;;258    	}
;;;259    	else { //Pattern not found
;;;260    		THROW(EXCEP_PATTERN_NOT_FOUND);
;;;261    	}
;;;262    
;;;263    	DBG_FUNC_EXIT("<<[51_011] _51011_Seek() \n");
;;;264    }
        0x00006490:    b009        ..      ADD      sp,sp,#0x24
        0x00006492:    bdf0        ..      POP      {r4-r7,pc}
        0x00006494:    48e8        .H      LDR      r0,[pc,#928] ; [0x6838] = 0x20000648
        0x00006496:    2106        .!      MOVS     r1,#6
        0x00006498:    f001fac5    ....    BL       longjmp ; 0x7a26
        0x0000649c:    2000        .       MOVS     r0,#0
        0x0000649e:    7120         q      STRB     r0,[r4,#4]
        0x000064a0:    48fa        .H      LDR      r0,[pc,#1000] ; [0x688c] = 0x20000648
        0x000064a2:    2107        .!      MOVS     r1,#7
        0x000064a4:    f001fabf    ....    BL       longjmp ; 0x7a26
        0x000064a8:    48f8        .H      LDR      r0,[pc,#992] ; [0x688c] = 0x20000648
        0x000064aa:    210e        .!      MOVS     r1,#0xe
        0x000064ac:    f001fabb    ....    BL       longjmp ; 0x7a26
        0x000064b0:    48f6        .H      LDR      r0,[pc,#984] ; [0x688c] = 0x20000648
        0x000064b2:    210f        .!      MOVS     r1,#0xf
        0x000064b4:    f001fab7    ....    BL       longjmp ; 0x7a26
        0x000064b8:    48f4        .H      LDR      r0,[pc,#976] ; [0x688c] = 0x20000648
        0x000064ba:    2111        .!      MOVS     r1,#0x11
        0x000064bc:    f001fab3    ....    BL       longjmp ; 0x7a26
        0x000064c0:    48f2        .H      LDR      r0,[pc,#968] ; [0x688c] = 0x20000648
        0x000064c2:    2116        .!      MOVS     r1,#0x16
        0x000064c4:    f001faaf    ....    BL       longjmp ; 0x7a26
        0x000064c8:    48f0        .H      LDR      r0,[pc,#960] ; [0x688c] = 0x20000648
        0x000064ca:    2115        .!      MOVS     r1,#0x15
        0x000064cc:    f001faab    ....    BL       longjmp ; 0x7a26
        0x000064d0:    48ee        .H      LDR      r0,[pc,#952] ; [0x688c] = 0x20000648
        0x000064d2:    2103        .!      MOVS     r1,#3
        0x000064d4:    f001faa7    ....    BL       longjmp ; 0x7a26
    $d.9
    __arm_cp.4_0
        0x000064d8:    2000023e    >..     DCD    536871486
    __arm_cp.4_1
        0x000064dc:    200006e8    ...     DCD    536872680
    $t.0
    _51011_prepareFileResponse
;;; BusinessComponent/Telecom/51_011/source\sim_GenericCommands.c
;;;136    uMonoByte _51011_prepareFileResponse(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileType ftFile, OUT_ARG puMonoByte pumbResponse) {
        0x000064e0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000064e2:    b087        ..      SUB      sp,sp,#0x1c
        0x000064e4:    2800        .(      CMP      r0,#0
        0x000064e6:    d100        ..      BNE      0x64ea ; _51011_prepareFileResponse + 10
        0x000064e8:    e151        Q.      B        0x678e ; _51011_prepareFileResponse + 686
;;; BusinessComponent/Telecom/51_011/source\sim_GenericCommands.c
        0x000064ea:    4615        .F      MOV      r5,r2
        0x000064ec:    2a00        .*      CMP      r2,#0
        0x000064ee:    d100        ..      BNE      0x64f2 ; _51011_prepareFileResponse + 18
        0x000064f0:    e152        R.      B        0x6798 ; _51011_prepareFileResponse + 696
        0x000064f2:    460e        .F      MOV      r6,r1
        0x000064f4:    4604        .F      MOV      r4,r0
        0x000064f6:    a902        ..      ADD      r1,sp,#8
        0x000064f8:    f7fcff28    ..(.    BL       _7816_4_getFileHeader ; 0x334c
        0x000064fc:    2000        .       MOVS     r0,#0
        0x000064fe:    7068        hp      STRB     r0,[r5,#1]
        0x00006500:    7028        (p      STRB     r0,[r5,#0]
        0x00006502:    2e02        ..      CMP      r6,#2
        0x00006504:    d103        ..      BNE      0x650e ; _51011_prepareFileResponse + 46
        0x00006506:    2000        .       MOVS     r0,#0
        0x00006508:    70e8        .p      STRB     r0,[r5,#3]
        0x0000650a:    70a8        .p      STRB     r0,[r5,#2]
        0x0000650c:    e018        ..      B        0x6540 ; _51011_prepareFileResponse + 96
        0x0000650e:    a902        ..      ADD      r1,sp,#8
        0x00006510:    784a        Jx      LDRB     r2,[r1,#1]
        0x00006512:    2187        .!      MOVS     r1,#0x87
        0x00006514:    4011        .@      ANDS     r1,r1,r2
        0x00006516:    2901        .)      CMP      r1,#1
        0x00006518:    d103        ..      BNE      0x6522 ; _51011_prepareFileResponse + 66
        0x0000651a:    a902        ..      ADD      r1,sp,#8
        0x0000651c:    89ca        ..      LDRH     r2,[r1,#0xe]
        0x0000651e:    4601        .F      MOV      r1,r0
        0x00006520:    e008        ..      B        0x6534 ; _51011_prepareFileResponse + 84
        0x00006522:    2902        .)      CMP      r1,#2
        0x00006524:    d001        ..      BEQ      0x652a ; _51011_prepareFileResponse + 74
        0x00006526:    2003        .       MOVS     r0,#3
        0x00006528:    e000        ..      B        0x652c ; _51011_prepareFileResponse + 76
        0x0000652a:    2001        .       MOVS     r0,#1
        0x0000652c:    a902        ..      ADD      r1,sp,#8
        0x0000652e:    7bca        .{      LDRB     r2,[r1,#0xf]
        0x00006530:    7c09        .|      LDRB     r1,[r1,#0x10]
        0x00006532:    434a        JC      MULS     r2,r1,r2
        0x00006534:    73a9        .s      STRB     r1,[r5,#0xe]
        0x00006536:    7368        hs      STRB     r0,[r5,#0xd]
        0x00006538:    2102        .!      MOVS     r1,#2
        0x0000653a:    4628        (F      MOV      r0,r5
        0x0000653c:    f7fafe4c    ..L.    BL       mm_storeUdiByte ; 0x11d8
        0x00006540:    af02        ..      ADD      r7,sp,#8
        0x00006542:    893a        :.      LDRH     r2,[r7,#8]
        0x00006544:    2104        .!      MOVS     r1,#4
        0x00006546:    4628        (F      MOV      r0,r5
        0x00006548:    f7fafe46    ..F.    BL       mm_storeUdiByte ; 0x11d8
        0x0000654c:    203f        ?       MOVS     r0,#0x3f
        0x0000654e:    0200        ..      LSLS     r0,r0,#8
        0x00006550:    8939        9.      LDRH     r1,[r7,#8]
        0x00006552:    4281        .B      CMP      r1,r0
        0x00006554:    d01c        ..      BEQ      0x6590 ; _51011_prepareFileResponse + 176
        0x00006556:    4630        0F      MOV      r0,r6
        0x00006558:    71a8        .q      STRB     r0,[r5,#6]
        0x0000655a:    2e02        ..      CMP      r6,#2
        0x0000655c:    d01c        ..      BEQ      0x6598 ; _51011_prepareFileResponse + 184
        0x0000655e:    a802        ..      ADD      r0,sp,#8
        0x00006560:    7840        @x      LDRB     r0,[r0,#1]
        0x00006562:    2187        .!      MOVS     r1,#0x87
        0x00006564:    4001        .@      ANDS     r1,r1,r0
        0x00006566:    1f88        ..      SUBS     r0,r1,#6
        0x00006568:    4241        AB      RSBS     r1,r0,#0
        0x0000656a:    4141        AA      ADCS     r1,r1,r0
        0x0000656c:    0188        ..      LSLS     r0,r1,#6
        0x0000656e:    71e8        .q      STRB     r0,[r5,#7]
        0x00006570:    2600        .&      MOVS     r6,#0
        0x00006572:    4620         F      MOV      r0,r4
        0x00006574:    4631        1F      MOV      r1,r6
        0x00006576:    f7fdfb15    ....    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x0000657a:    28ff        .(      CMP      r0,#0xff
        0x0000657c:    d069        i.      BEQ      0x6652 ; _51011_prepareFileResponse + 370
        0x0000657e:    2890        .(      CMP      r0,#0x90
        0x00006580:    d068        h.      BEQ      0x6654 ; _51011_prepareFileResponse + 372
        0x00006582:    b240        @.      SXTB     r0,r0
        0x00006584:    1e41        A.      SUBS     r1,r0,#1
        0x00006586:    b2c9        ..      UXTB     r1,r1
        0x00006588:    2908        .)      CMP      r1,#8
        0x0000658a:    d27c        |.      BCS      0x6686 ; _51011_prepareFileResponse + 422
        0x0000658c:    2610        .&      MOVS     r6,#0x10
        0x0000658e:    e061        a.      B        0x6654 ; _51011_prepareFileResponse + 372
        0x00006590:    2001        .       MOVS     r0,#1
        0x00006592:    71a8        .q      STRB     r0,[r5,#6]
        0x00006594:    2e02        ..      CMP      r6,#2
        0x00006596:    d1e2        ..      BNE      0x655e ; _51011_prepareFileResponse + 126
        0x00006598:    1de8        ..      ADDS     r0,r5,#7
        0x0000659a:    2100        .!      MOVS     r1,#0
        0x0000659c:    2205        ."      MOVS     r2,#5
        0x0000659e:    462c        ,F      MOV      r4,r5
        0x000065a0:    460d        .F      MOV      r5,r1
        0x000065a2:    f7fafad7    ....    BL       mem_set ; 0xb54
        0x000065a6:    2009        .       MOVS     r0,#9
        0x000065a8:    9401        ..      STR      r4,[sp,#4]
        0x000065aa:    7320         s      STRB     r0,[r4,#0xc]
        0x000065ac:    2001        .       MOVS     r0,#1
        0x000065ae:    f7fdfda3    ....    BL       _7816_4_isPinActive ; 0x40f8
        0x000065b2:    2800        .(      CMP      r0,#0
        0x000065b4:    d004        ..      BEQ      0x65c0 ; _51011_prepareFileResponse + 224
        0x000065b6:    2001        .       MOVS     r0,#1
        0x000065b8:    f7fdff2a    ..*.    BL       _7816_4_markKeyAsVerified ; 0x4410
        0x000065bc:    20b0        .       MOVS     r0,#0xb0
        0x000065be:    e000        ..      B        0x65c2 ; _51011_prepareFileResponse + 226
        0x000065c0:    2030        0       MOVS     r0,#0x30
        0x000065c2:    4629        )F      MOV      r1,r5
        0x000065c4:    9a01        ..      LDR      r2,[sp,#4]
        0x000065c6:    73d5        .s      STRB     r5,[r2,#0xf]
        0x000065c8:    7395        .s      STRB     r5,[r2,#0xe]
        0x000065ca:    7350        Ps      STRB     r0,[r2,#0xd]
        0x000065cc:    a802        ..      ADD      r0,sp,#8
        0x000065ce:    8980        ..      LDRH     r0,[r0,#0xc]
        0x000065d0:    2800        .(      CMP      r0,#0
        0x000065d2:    d017        ..      BEQ      0x6604 ; _51011_prepareFileResponse + 292
        0x000065d4:    9c01        ..      LDR      r4,[sp,#4]
        0x000065d6:    4627        'F      MOV      r7,r4
        0x000065d8:    370f        .7      ADDS     r7,r7,#0xf
        0x000065da:    340e        .4      ADDS     r4,r4,#0xe
        0x000065dc:    e007        ..      B        0x65ee ; _51011_prepareFileResponse + 270
        0x000065de:    7801        .x      LDRB     r1,[r0,#0]
        0x000065e0:    1c49        I.      ADDS     r1,r1,#1
        0x000065e2:    7001        .p      STRB     r1,[r0,#0]
        0x000065e4:    4630        0F      MOV      r0,r6
        0x000065e6:    f7fdfa71    ..q.    BL       _7816_4_getSiblingFile ; 0x3acc
        0x000065ea:    2800        .(      CMP      r0,#0
        0x000065ec:    d00a        ..      BEQ      0x6604 ; _51011_prepareFileResponse + 292
        0x000065ee:    b286        ..      UXTH     r6,r0
        0x000065f0:    4630        0F      MOV      r0,r6
        0x000065f2:    f7fcff1f    ....    BL       _7816_4_getFileDescriptor ; 0x3434
        0x000065f6:    21bf        .!      MOVS     r1,#0xbf
        0x000065f8:    4001        .@      ANDS     r1,r1,r0
        0x000065fa:    2938        8)      CMP      r1,#0x38
        0x000065fc:    4620         F      MOV      r0,r4
        0x000065fe:    d0ee        ..      BEQ      0x65de ; _51011_prepareFileResponse + 254
        0x00006600:    4638        8F      MOV      r0,r7
        0x00006602:    e7ec        ..      B        0x65de ; _51011_prepareFileResponse + 254
        0x00006604:    462e        .F      MOV      r6,r5
        0x00006606:    9d01        ..      LDR      r5,[sp,#4]
        0x00006608:    746e        nt      STRB     r6,[r5,#0x11]
        0x0000660a:    200e        .       MOVS     r0,#0xe
        0x0000660c:    7428        (t      STRB     r0,[r5,#0x10]
        0x0000660e:    2701        .'      MOVS     r7,#1
        0x00006610:    4638        8F      MOV      r0,r7
        0x00006612:    4631        1F      MOV      r1,r6
        0x00006614:    f7fdfcd4    ....    BL       _7816_4_remainingAttemptsOfPin ; 0x3fc0
        0x00006618:    2480        .$      MOVS     r4,#0x80
        0x0000661a:    4320         C      ORRS     r0,r0,r4
        0x0000661c:    74a8        .t      STRB     r0,[r5,#0x12]
        0x0000661e:    2103        .!      MOVS     r1,#3
        0x00006620:    9100        ..      STR      r1,[sp,#0]
        0x00006622:    4638        8F      MOV      r0,r7
        0x00006624:    f7fdfccc    ....    BL       _7816_4_remainingAttemptsOfPin ; 0x3fc0
        0x00006628:    4320         C      ORRS     r0,r0,r4
        0x0000662a:    74e8        .t      STRB     r0,[r5,#0x13]
        0x0000662c:    2781        .'      MOVS     r7,#0x81
        0x0000662e:    4638        8F      MOV      r0,r7
        0x00006630:    4631        1F      MOV      r1,r6
        0x00006632:    f7fdfcc5    ....    BL       _7816_4_remainingAttemptsOfPin ; 0x3fc0
        0x00006636:    4320         C      ORRS     r0,r0,r4
        0x00006638:    7528        (u      STRB     r0,[r5,#0x14]
        0x0000663a:    4638        8F      MOV      r0,r7
        0x0000663c:    9900        ..      LDR      r1,[sp,#0]
        0x0000663e:    f7fdfcbf    ....    BL       _7816_4_remainingAttemptsOfPin ; 0x3fc0
        0x00006642:    217f        .!      MOVS     r1,#0x7f
        0x00006644:    43ce        .C      MVNS     r6,r1
        0x00006646:    4306        .C      ORRS     r6,r6,r0
        0x00006648:    2016        .       MOVS     r0,#0x16
        0x0000664a:    2115        .!      MOVS     r1,#0x15
        0x0000664c:    546e        nT      STRB     r6,[r5,r1]
        0x0000664e:    b007        ..      ADD      sp,sp,#0x1c
        0x00006650:    bdf0        ..      POP      {r4-r7,pc}
        0x00006652:    26f0        .&      MOVS     r6,#0xf0
        0x00006654:    2701        .'      MOVS     r7,#1
        0x00006656:    4620         F      MOV      r0,r4
        0x00006658:    4639        9F      MOV      r1,r7
        0x0000665a:    f7fdfaa3    ....    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x0000665e:    28ff        .(      CMP      r0,#0xff
        0x00006660:    d003        ..      BEQ      0x666a ; _51011_prepareFileResponse + 394
        0x00006662:    2890        .(      CMP      r0,#0x90
        0x00006664:    d103        ..      BNE      0x666e ; _51011_prepareFileResponse + 398
        0x00006666:    2700        .'      MOVS     r7,#0
        0x00006668:    e017        ..      B        0x669a ; _51011_prepareFileResponse + 442
        0x0000666a:    270f        .'      MOVS     r7,#0xf
        0x0000666c:    e015        ..      B        0x669a ; _51011_prepareFileResponse + 442
        0x0000666e:    b240        @.      SXTB     r0,r0
        0x00006670:    1e41        A.      SUBS     r1,r0,#1
        0x00006672:    b2c9        ..      UXTB     r1,r1
        0x00006674:    2908        .)      CMP      r1,#8
        0x00006676:    d310        ..      BCC      0x669a ; _51011_prepareFileResponse + 442
        0x00006678:    4607        .F      MOV      r7,r0
        0x0000667a:    377f        .7      ADDS     r7,r7,#0x7f
        0x0000667c:    b2f9        ..      UXTB     r1,r7
        0x0000667e:    2908        .)      CMP      r1,#8
        0x00006680:    d208        ..      BCS      0x6694 ; _51011_prepareFileResponse + 436
        0x00006682:    2702        .'      MOVS     r7,#2
        0x00006684:    e009        ..      B        0x669a ; _51011_prepareFileResponse + 442
        0x00006686:    4601        .F      MOV      r1,r0
        0x00006688:    317f        .1      ADDS     r1,r1,#0x7f
        0x0000668a:    b2ca        ..      UXTB     r2,r1
        0x0000668c:    2a08        .*      CMP      r2,#8
        0x0000668e:    d221        !.      BCS      0x66d4 ; _51011_prepareFileResponse + 500
        0x00006690:    2620         &      MOVS     r6,#0x20
        0x00006692:    e7df        ..      B        0x6654 ; _51011_prepareFileResponse + 372
        0x00006694:    2800        .(      CMP      r0,#0
        0x00006696:    db00        ..      BLT      0x669a ; _51011_prepareFileResponse + 442
        0x00006698:    1f87        ..      SUBS     r7,r0,#6
        0x0000669a:    4337        7C      ORRS     r7,r7,r6
        0x0000669c:    722f        /r      STRB     r7,[r5,#8]
        0x0000669e:    2602        .&      MOVS     r6,#2
        0x000066a0:    4620         F      MOV      r0,r4
        0x000066a2:    4631        1F      MOV      r1,r6
        0x000066a4:    f7fdfa7e    ..~.    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x000066a8:    27f0        .'      MOVS     r7,#0xf0
        0x000066aa:    28ff        .(      CMP      r0,#0xff
        0x000066ac:    4639        9F      MOV      r1,r7
        0x000066ae:    d01e        ..      BEQ      0x66ee ; _51011_prepareFileResponse + 526
        0x000066b0:    2890        .(      CMP      r0,#0x90
        0x000066b2:    d101        ..      BNE      0x66b8 ; _51011_prepareFileResponse + 472
        0x000066b4:    2100        .!      MOVS     r1,#0
        0x000066b6:    e01a        ..      B        0x66ee ; _51011_prepareFileResponse + 526
        0x000066b8:    b240        @.      SXTB     r0,r0
        0x000066ba:    1e41        A.      SUBS     r1,r0,#1
        0x000066bc:    b2c9        ..      UXTB     r1,r1
        0x000066be:    2908        .)      CMP      r1,#8
        0x000066c0:    d201        ..      BCS      0x66c6 ; _51011_prepareFileResponse + 486
        0x000066c2:    2110        .!      MOVS     r1,#0x10
        0x000066c4:    e013        ..      B        0x66ee ; _51011_prepareFileResponse + 526
        0x000066c6:    4601        .F      MOV      r1,r0
        0x000066c8:    317f        .1      ADDS     r1,r1,#0x7f
        0x000066ca:    b2ca        ..      UXTB     r2,r1
        0x000066cc:    2a08        .*      CMP      r2,#8
        0x000066ce:    d205        ..      BCS      0x66dc ; _51011_prepareFileResponse + 508
        0x000066d0:    2120         !      MOVS     r1,#0x20
        0x000066d2:    e00c        ..      B        0x66ee ; _51011_prepareFileResponse + 526
        0x000066d4:    2800        .(      CMP      r0,#0
        0x000066d6:    da05        ..      BGE      0x66e4 ; _51011_prepareFileResponse + 516
        0x000066d8:    4608        .F      MOV      r0,r1
        0x000066da:    e004        ..      B        0x66e6 ; _51011_prepareFileResponse + 518
        0x000066dc:    2800        .(      CMP      r0,#0
        0x000066de:    da04        ..      BGE      0x66ea ; _51011_prepareFileResponse + 522
        0x000066e0:    4608        .F      MOV      r0,r1
        0x000066e2:    e003        ..      B        0x66ec ; _51011_prepareFileResponse + 524
        0x000066e4:    300a        .0      ADDS     r0,r0,#0xa
        0x000066e6:    0106        ..      LSLS     r6,r0,#4
        0x000066e8:    e7b4        ..      B        0x6654 ; _51011_prepareFileResponse + 372
        0x000066ea:    300a        .0      ADDS     r0,r0,#0xa
        0x000066ec:    0101        ..      LSLS     r1,r0,#4
        0x000066ee:    7269        ir      STRB     r1,[r5,#9]
        0x000066f0:    2104        .!      MOVS     r1,#4
        0x000066f2:    4620         F      MOV      r0,r4
        0x000066f4:    9101        ..      STR      r1,[sp,#4]
        0x000066f6:    f7fdfa55    ..U.    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x000066fa:    28ff        .(      CMP      r0,#0xff
        0x000066fc:    d017        ..      BEQ      0x672e ; _51011_prepareFileResponse + 590
        0x000066fe:    2890        .(      CMP      r0,#0x90
        0x00006700:    d101        ..      BNE      0x6706 ; _51011_prepareFileResponse + 550
        0x00006702:    2700        .'      MOVS     r7,#0
        0x00006704:    e013        ..      B        0x672e ; _51011_prepareFileResponse + 590
        0x00006706:    b240        @.      SXTB     r0,r0
        0x00006708:    1e41        A.      SUBS     r1,r0,#1
        0x0000670a:    b2c9        ..      UXTB     r1,r1
        0x0000670c:    2908        .)      CMP      r1,#8
        0x0000670e:    d201        ..      BCS      0x6714 ; _51011_prepareFileResponse + 564
        0x00006710:    2710        .'      MOVS     r7,#0x10
        0x00006712:    e00c        ..      B        0x672e ; _51011_prepareFileResponse + 590
        0x00006714:    4601        .F      MOV      r1,r0
        0x00006716:    317f        .1      ADDS     r1,r1,#0x7f
        0x00006718:    b2ca        ..      UXTB     r2,r1
        0x0000671a:    2a08        .*      CMP      r2,#8
        0x0000671c:    d201        ..      BCS      0x6722 ; _51011_prepareFileResponse + 578
        0x0000671e:    2720         '      MOVS     r7,#0x20
        0x00006720:    e005        ..      B        0x672e ; _51011_prepareFileResponse + 590
        0x00006722:    2800        .(      CMP      r0,#0
        0x00006724:    da01        ..      BGE      0x672a ; _51011_prepareFileResponse + 586
        0x00006726:    4608        .F      MOV      r0,r1
        0x00006728:    e000        ..      B        0x672c ; _51011_prepareFileResponse + 588
        0x0000672a:    300a        .0      ADDS     r0,r0,#0xa
        0x0000672c:    0107        ..      LSLS     r7,r0,#4
        0x0000672e:    2103        .!      MOVS     r1,#3
        0x00006730:    4620         F      MOV      r0,r4
        0x00006732:    f7fdfa37    ..7.    BL       _7816_4_getSecurityCondition ; 0x3ba4
        0x00006736:    4601        .F      MOV      r1,r0
        0x00006738:    200f        .       MOVS     r0,#0xf
        0x0000673a:    29ff        .)      CMP      r1,#0xff
        0x0000673c:    4602        .F      MOV      r2,r0
        0x0000673e:    d015        ..      BEQ      0x676c ; _51011_prepareFileResponse + 652
        0x00006740:    2990        .)      CMP      r1,#0x90
        0x00006742:    d101        ..      BNE      0x6748 ; _51011_prepareFileResponse + 616
        0x00006744:    2200        ."      MOVS     r2,#0
        0x00006746:    e011        ..      B        0x676c ; _51011_prepareFileResponse + 652
        0x00006748:    b249        I.      SXTB     r1,r1
        0x0000674a:    1e4a        J.      SUBS     r2,r1,#1
        0x0000674c:    b2d2        ..      UXTB     r2,r2
        0x0000674e:    2a08        .*      CMP      r2,#8
        0x00006750:    d201        ..      BCS      0x6756 ; _51011_prepareFileResponse + 630
        0x00006752:    2201        ."      MOVS     r2,#1
        0x00006754:    e00a        ..      B        0x676c ; _51011_prepareFileResponse + 652
        0x00006756:    460b        .F      MOV      r3,r1
        0x00006758:    337f        .3      ADDS     r3,r3,#0x7f
        0x0000675a:    b2da        ..      UXTB     r2,r3
        0x0000675c:    2a08        .*      CMP      r2,#8
        0x0000675e:    4632        2F      MOV      r2,r6
        0x00006760:    d304        ..      BCC      0x676c ; _51011_prepareFileResponse + 652
        0x00006762:    2900        .)      CMP      r1,#0
        0x00006764:    da01        ..      BGE      0x676a ; _51011_prepareFileResponse + 650
        0x00006766:    461a        .F      MOV      r2,r3
        0x00006768:    e000        ..      B        0x676c ; _51011_prepareFileResponse + 652
        0x0000676a:    1f8a        ..      SUBS     r2,r1,#6
        0x0000676c:    433a        :C      ORRS     r2,r2,r7
        0x0000676e:    72aa        .r      STRB     r2,[r5,#0xa]
        0x00006770:    a902        ..      ADD      r1,sp,#8
        0x00006772:    788a        .x      LDRB     r2,[r1,#2]
        0x00006774:    1f52        R.      SUBS     r2,r2,#5
        0x00006776:    4253        SB      RSBS     r3,r2,#0
        0x00006778:    4153        SA      ADCS     r3,r3,r2
        0x0000677a:    7c89        .|      LDRB     r1,[r1,#0x12]
        0x0000677c:    0909        ..      LSRS     r1,r1,#4
        0x0000677e:    9a01        ..      LDR      r2,[sp,#4]
        0x00006780:    4011        .@      ANDS     r1,r1,r2
        0x00006782:    18c9        ..      ADDS     r1,r1,r3
        0x00006784:    72e9        .r      STRB     r1,[r5,#0xb]
        0x00006786:    210c        .!      MOVS     r1,#0xc
        0x00006788:    546e        nT      STRB     r6,[r5,r1]
        0x0000678a:    b007        ..      ADD      sp,sp,#0x1c
        0x0000678c:    bdf0        ..      POP      {r4-r7,pc}
        0x0000678e:    a00c        ..      ADR      r0,{pc}+0x32 ; 0x67c0
        0x00006790:    490a        .I      LDR      r1,[pc,#40] ; [0x67bc] = 0x8b96
        0x00006792:    228e        ."      MOVS     r2,#0x8e
        0x00006794:    f000ffac    ....    BL       __aeabi_assert ; 0x76f0
        0x00006798:    a002        ..      ADR      r0,{pc}+0xc ; 0x67a4
        0x0000679a:    4908        .I      LDR      r1,[pc,#32] ; [0x67bc] = 0x8b96
        0x0000679c:    228f        ."      MOVS     r2,#0x8f
        0x0000679e:    f000ffa7    ....    BL       __aeabi_assert ; 0x76f0
        0x000067a2:    46c0        .F      MOV      r8,r8
    $d.1
        0x000067a4:    626d7570    pumb    DCD    1651340656
        0x000067a8:    70736552    Resp    DCD    1886610770
        0x000067ac:    65736e6f    onse    DCD    1702063727
        0x000067b0:    203d2120     !=     DCD    540877088
        0x000067b4:    4c4c554e    NULL    DCD    1280070990
        0x000067b8:    00000000    ....    DCD    0
    __arm_cp.0_1
        0x000067bc:    00008b96    ....    DCD    35734
        0x000067c0:    46616866    fhaF    DCD    1180788838
        0x000067c4:    20656c69    ile     DCD    543517801
        0x000067c8:    4e203d21    != N    DCD    1310735649
        0x000067cc:    49465f4f    O_FI    DCD    1229348687
        0x000067d0:    505f454c    LE_P    DCD    1348420940
        0x000067d4:    45534552    RESE    DCD    1163085138
        0x000067d8:    0000544e    NT..    DCD    21582
    $t.2
    _51011_select
;;;1      #include "51_011.h"
;;;2      
;;;3      
;;;4      /*File characteristics*/
;;;5      /*For clock infor b1-b3-b4 is used. 
;;;6      * current value is Clock stop not allowed i.e. b1 = 0, b3 = 0 and b4 = 0
;;;7      */
;;;8      #define FC_CLOCK_STOP_NOT_ALLOWED							(0x00)
;;;9      
;;;10     /*For running the authentication algorithm, or the ENVELOPE command for SIM Data Download, a frequency is required of at least 13/8 MHz if b2=0 and 13/4 MHz if b2=1
;;;11     * Current Value: frequency is required of at least 13/8 MHz i.e. b2 = 0
;;;12     */
;;;13     #define FC_LOW_FREQUENCY									(0x00)
;;;14     
;;;15     /*supply voltage indication
;;;16     * Current value : 1.8V Technology SIM i.e b7-b6-b5 = 0-1-1
;;;17     */
;;;18     #define FC_SIM_TECH_1_8_V									(0x30)
;;;19     
;;;20     /* CHV1 Enable/disable i.e. b8 = 0/1 respectively*/
;;;21     #define FC_CHV1_ENABLED										(0x00)
;;;22     #define FC_CHV1_DISABLED									(0x80)
;;;23     
;;;24     /*No of PINs*/
;;;25     #define NO_OF_CHV											(0x02)
;;;26     #define NO_OF_UNBLOCK_CHV									(NO_OF_CHV)
;;;27     #define NO_OF_ADM											(0x0A) //right now UICC has 10 ADMs so we are are using same in SIM also.
;;;28     
;;;29     /*Status Byte of Secret code*/
;;;30     #define SECRET_CODE_INITIALISED								(0x80)
;;;31     
;;;32     /*Detail 3*/
;;;33     #define	INCREASE_COMMAND_ALLOWED							(0x40)
;;;34     #define	INCREASE_COMMAND_NOT_ALLOWED						(0x00)
;;;35     
;;;36     /*File Status*/
;;;37     #define FILE_STATUS_INVALIDATED								(0x00)
;;;38     #define FILE_STATUS_NOT_INVALIDATED							(0x01)
;;;39     
;;;40     #define FILE_STATUS_RW_WHEN_INVALIDATED						(0x04)
;;;41     #define FILE_STATUS_NOT_RW_WHEN_INVALIDATED					(0x00)
;;;42     
;;;43     
;;;44     // RUN GSM Algo
;;;45     #define LENGTH_CIPHERING_KEY								(0x08)
;;;46     #define LENGTH_SRES											(0x04)
;;;47     
;;;48     //GSM file response
;;;49     #define MAX_SIM_RESPONSE_DF									(0X16)
;;;50     #define MAX_SIM_RESPONSE_EF									(0X0F)
;;;51     
;;;52     
;;;53     /*Structure of file*/
;;;54     typedef enum {
;;;55     	EF_STRUCT_TRANSPARENT = 0x00,
;;;56     	EF_STRUCT_LINEAR = 0x01,
;;;57     	EF_STRUCT_CYCLIC = 0x03
;;;58     }tEfStructure;
;;;59     
;;;60     /*Access condition as per Table 10 of 51.011*/
;;;61     typedef enum {					//		-	UICC Key Ref
;;;62     	SIM_ACC_ALW,				// '0'	-	---
;;;63     	SIM_ACC_CHV1,				// '1'	-	0x
;;;64     	SIM_ACC_CHV2,				// '2'	-	8x
;;;65     	SIM_ACC_ADM1 = 0x04,		// '4'	-	0A
;;;66     	SIM_ACC_ADM2,				// '5'	-	0B
;;;67     	SIM_ACC_ADM3,				// '6'	-	0C
;;;68     	SIM_ACC_ADM4,				// '7'	-	0D
;;;69     	SIM_ACC_ADM5,				// '8'	-	0E
;;;70     	SIM_ACC_ADM6,				// '9'	-	8A
;;;71     	SIM_ACC_ADM7,				// 'A'	-	8B
;;;72     	SIM_ACC_ADM8,				// 'B'	-	8C
;;;73     	SIM_ACC_ADM9,				// 'C'	-	8D
;;;74     	SIM_ACC_ADM10,				// 'D'	-	8E
;;;75     	SIM_ACC_ADM11,				// 'E'	-	8E
;;;76     	SIM_ACC_NEV,				// 'F'
;;;77     }tSimAccessCondition;
;;;78     
;;;79     /*
;;;80     * It returns access condition of given operation on present file header
;;;81     * 
;;;82     * @param fhaFile: Target file header
;;;83     * @param amOperation: File Operation
;;;84     * 
;;;85     * @return tSimAccessCondition Corresponding Access condition
;;;86     */
;;;87     static tSimAccessCondition _51011_getAccessCondition(tFileHeaderAddr fhaFile, tAccessMode amOperation) {
;;;88     
;;;89     	uMonoByte		umbStatus;
;;;90     
;;;91     	DBG_FUNC_ENTRY(">>[51_011] _51011_getAccessCondition() \n");
;;;92     
;;;93     	/*if file not found*/
;;;94     	assert(NO_FILE_PRESENT != fhaFile);
;;;95     
;;;96     	/*get security condition i.e. PIN_** */
;;;97     	umbStatus = _7816_4_getSecurityCondition(fhaFile, amOperation);
;;;98     
;;;99     	if (PIN_NEVER == umbStatus) { // If security condition is NEVER
;;;100    		umbStatus = SIM_ACC_NEV;
;;;101    	}
;;;102    	else if (PIN_ALWAYS == umbStatus) { // If security condition is ALWAYS
;;;103    		umbStatus = SIM_ACC_ALW;
;;;104    	}
;;;105    	else if ((PIN_APP_1 <= umbStatus) && (umbStatus <= PIN_APP_8)) { // If its Application/Global PIN
;;;106    		umbStatus = SIM_ACC_CHV1;
;;;107    	}
;;;108    	else if ((PIN_SECOND_APP_1 <= umbStatus) && (umbStatus <= PIN_SECOND_APP_8)) { // If its second Application PIN
;;;109    		umbStatus = SIM_ACC_CHV2;
;;;110    	}
;;;111    	else { // ADM left 0A-0E and 8A-8E
;;;112    
;;;113    		if (umbStatus & 0x80) { // 8A-8E
;;;114    			umbStatus = (uMonoByte)(SIM_ACC_ADM6 + (umbStatus - PIN_ADM_6));
;;;115    		}
;;;116    		else { // 0A-0E
;;;117    			umbStatus = (uMonoByte)(SIM_ACC_ADM1 + (umbStatus - PIN_ADM_1));
;;;118    		}
;;;119    	}
;;;120    
;;;121    	DBG_FUNC_EXIT("<<[51_011] _51011_getAccessCondition() returns %1\n", umbStatus);
;;;122    
;;;123    	return umbStatus;
;;;124    }
;;;125    
;;;126    /*
;;;127    * It prepare the Response of Select command for given file
;;;128    * 
;;;129    * @param fhaFile: File header address of the target file (DF/EF)
;;;130    * @param ftFile: Type of file DF or EF
;;;131    * @param pumbResponse: prepare response will be copied here
;;;132    * 
;;;133    * @return length of prepared response
;;;134    * @precondition: fhaFile must not be empty
;;;135    */
;;;136    uMonoByte _51011_prepareFileResponse(IN_ARG tFileHeaderAddr fhaFile, IN_ARG tFileType ftFile, OUT_ARG puMonoByte pumbResponse) {
;;;137    
;;;138    	uMonoByte			umbIndex = 0x10;
;;;139    	uDiByte				udbTemp;
;;;140    	tFileHeader			fhFile;
;;;141    
;;;142    	assert(fhaFile != NO_FILE_PRESENT);
;;;143    	assert(pumbResponse != NULL);
;;;144    
;;;145    	DBG_FUNC_ENTRY(">>[51_011] _51011_prepareFileResponse() \n");
;;;146    
;;;147    	/*read header of file*/
;;;148    	_7816_4_getFileHeader(fhaFile, &fhFile);
;;;149    
;;;150    	/*1-2:RFU First two bytes RFU*/
;;;151    	pumbResponse[0x00] = RFU_BYTE;
;;;152    	pumbResponse[0x01] = RFU_BYTE;
;;;153    
;;;154    	/*3-4: File size*/
;;;155    	if (FILE_IS_DF == ftFile) { //if its DF
;;;156    
;;;157    		/*Zero memory allocated to DF, as we support dynamic memory allocation*/
;;;158    		pumbResponse[0x02] = 0x00;
;;;159    		pumbResponse[0x03] = 0x00;
;;;160    
;;;161    	}
;;;162    	else {
;;;163    
;;;164    		/*Extract file size of EF*/
;;;165    		if (IS(TF, fhFile.umbFileDesc)) { //transparent file
;;;166    			
;;;167    			/*get file size*/
;;;168    			udbTemp = fhFile.FileSpecific.EF.fileData.udbFileSize;
;;;169    
;;;170    			/*14: Structure of EF (clause 9.3 of 51.011)*/
;;;171    			pumbResponse[0x0D] = EF_STRUCT_TRANSPARENT;
;;;172    
;;;173    			/*15: RFU*/
;;;174    			pumbResponse[0x0E] = 0x00;
;;;175    		}
;;;176    		else { // Record file
;;;177    
;;;178    			/*calculate file size of file*/
;;;179    			udbTemp = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbNoOfRec * fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;180    
;;;181    			/*14: Structure of EF (clause 9.3 of 51.011)*/
;;;182    			pumbResponse[0x0D] = (IS(LF, fhFile.umbFileDesc) ? EF_STRUCT_LINEAR : EF_STRUCT_CYCLIC);
;;;183    
;;;184    			/*15: Record length*/
;;;185    			pumbResponse[0x0E] = fhFile.FileSpecific.EF.fileData.ofRecordFile.umbRecSize;
;;;186    		}
;;;187    
;;;188    		/*copy file size in response*/
;;;189    		mm_storeUdiByte(pumbResponse, 0x02, udbTemp);
;;;190    	}
;;;191    
;;;192    	/*5-6: File ID*/
;;;193    	mm_storeUdiByte(pumbResponse, 0x04, fhFile.udbFileId);
;;;194    
;;;195    	/*7: Type of file*/
;;;196    	if (FID_MF == fhFile.udbFileId) { // if its MF file id
;;;197    		pumbResponse[0x06] = FILE_IS_MF;
;;;198    	}
;;;199    	else { // DF or EF: other than MF
;;;200    		pumbResponse[0x06] = ftFile;
;;;201    	}
;;;202    
;;;203    	if (FILE_IS_DF == ftFile) { //if file is DF
;;;204    
;;;205    		DBG_FUNC("[51_011] _51011_prepareFileResponse: Requested file is a DF \n");
;;;206    
;;;207    		/*8-12: RFU*/
;;;208    		mem_set(pumbResponse + 0x07, RFU_BYTE, 0x05);
;;;209    
;;;210    		/*13: Length of subsequent data of DF response from File Characterstics(Byte 14) to Unblock CHV2 status(Byte 22) */
;;;211    		pumbResponse[0x0C] = 0x09;
;;;212    
;;;213    		/*14: File Characterstics: CHV1*/
;;;214    		if (PIN_ENABLED == _7816_4_isPinActive(MAPPED_KEY_REF_TO_CHV_1))
;;;215    		{
;;;216    			/*Chv1 enabled*/
;;;217    			pumbResponse[0x0D] = FC_CHV1_ENABLED;
;;;218    		}
;;;219    		else { //CHV1 disabled
;;;220    
;;;221    			/*Mark key as verified if its still disabled*/
;;;222    			_7816_4_markKeyAsVerified(MAPPED_KEY_REF_TO_CHV_1);
;;;223    
;;;224    			/*CHV1 disabled*/
;;;225    			pumbResponse[0x0D] = FC_CHV1_DISABLED;
;;;226    		}
;;;227    
;;;228    		/*14: File Characterstics: Electrical Params*/
;;;229    		pumbResponse[0x0D] |= FC_CLOCK_STOP_NOT_ALLOWED\
;;;230    								| FC_LOW_FREQUENCY\
;;;231    								| FC_SIM_TECH_1_8_V;
;;;232    
;;;233    
;;;234    		/*15 : Count of immediate DFs */
;;;235    		pumbResponse[0x0E] = 0x00;
;;;236    
;;;237    		/*16 : Count of immediate EFs */
;;;238    		pumbResponse[0x0F] = 0x00;
;;;239    
;;;240    		/*get child of file*/
;;;241    		fhaFile = fhFile.FileSpecific.DF.fhaChild;
;;;242    
;;;243    		/*get count of no.of DFs and EFs */
;;;244    		while (NO_FILE_PRESENT != fhaFile) { // continue till the last sibling
;;;245    			
;;;246    			if (IS(DF, _7816_4_getFileDescriptor(fhaFile))) { // if its DF
;;;247    
;;;248    				/*15: increment the count of DFs*/
;;;249    				pumbResponse[0x0E]++;
;;;250    			}
;;;251    			else {
;;;252    
;;;253    				/*16: increment the count of EFs*/
;;;254    				pumbResponse[0x0F]++;
;;;255    			}
;;;256    
;;;257    			/*get next file*/
;;;258    			fhaFile = _7816_4_getSiblingFile(fhaFile);
;;;259    		}
;;;260    
;;;261    		DBG_FUNC("[51_011] _51011_prepareFileResponse: No. of DF and EFs: %1 %1 respectively \n", pumbResponse[0x0E], pumbResponse[0x0F]);
;;;262    
;;;263    		/*17: No. of CHVs + Unblock CHVs + ADM codes */
;;;264    		pumbResponse[0x10] = NO_OF_CHV + NO_OF_UNBLOCK_CHV + NO_OF_ADM;
;;;265    
;;;266    		/*18: RFU*/
;;;267    		pumbResponse[0x11] = RFU_BYTE;
;;;268    
;;;269    		DBG_FUNC("[51_011] _51011_prepareFileResponse: Retreive remaining attempts of applicable PINs\n");
;;;270    
;;;271    		/*19: CHV1 status*/
;;;272    		pumbResponse[0x12] = SECRET_CODE_INITIALISED | _7816_4_remainingAttemptsOfPin(MAPPED_KEY_REF_TO_CHV_1, PIN_OP_VERIFY);
;;;273    		
;;;274    		/*20: UNBLOCK CHV1 status*/
;;;275    		pumbResponse[0x13] = SECRET_CODE_INITIALISED | _7816_4_remainingAttemptsOfPin(MAPPED_KEY_REF_TO_CHV_1, PIN_OP_UNBLOCK);
;;;276    
;;;277    		/*21: CHV2 status*/
;;;278    		pumbResponse[0x14] = SECRET_CODE_INITIALISED | _7816_4_remainingAttemptsOfPin(MAPPED_KEY_REF_TO_CHV_2, PIN_OP_VERIFY);
;;;279    
;;;280    		/*22: UNBLOCK CHV2 status*/
;;;281    		pumbResponse[0x15] = SECRET_CODE_INITIALISED | _7816_4_remainingAttemptsOfPin(MAPPED_KEY_REF_TO_CHV_2, PIN_OP_UNBLOCK);
;;;282    
;;;283    		/*final length to prepared response*/
;;;284    		umbIndex = MAX_SIM_RESPONSE_DF;
;;;285    
;;;286    	}
;;;287    	else { //Its EF
;;;288    
;;;289    		DBG_FUNC("[51_011] _51011_prepareFileResponse: Requested file is an EF \n");
;;;290    
;;;291    		/*8: Detail 3 in Clause 9.2.1 of 51.011*/
;;;292    		if (IS(CF, fhFile.umbFileDesc)) {
;;;293    			
;;;294    			DBG_FUNC("[51_011] _51011_prepareFileResponse: Its Cyclic EF \n");
;;;295    
;;;296    			/*8: Applicablity of Increase command on Cyclic file*/
;;;297    			/*As there is no separate info. OS stores at the time of cyclic file creation that Increase is allowed or not. 
;;;298    			* Its assumption, that Increase is always allowed rest will be controlled from security conditions
;;;299    			*/
;;;300    			pumbResponse[0x07] = INCREASE_COMMAND_ALLOWED;
;;;301    		}
;;;302    		else { //Transparent or Linear fixed file
;;;303    
;;;304    			DBG_FUNC("[51_011] _51011_prepareFileResponse: Its Transparent or Linear fixed EF \n");
;;;305    			/*8: RFU*/
;;;306    			pumbResponse[0x07] = RFU_BYTE;
;;;307    		}
;;;308    
;;;309    		DBG_FUNC("[51_011] _51011_prepareFileResponse:Retreive access conditions of different operations on EF \n");
;;;310    
;;;311    		/*9-11: Access conditions (clause 9.3 of 51.011)*/
;;;312    		/*OPTimization: instead of reading ARR record multiple times, we can read once. will improve performance*/
;;;313    		/*9: Read/Seek and Update Access condition*/
;;;314    		pumbResponse[0x08] = (uMonoByte)SHIFT_LEFT_BY_N_BITS(((uMonoByte)_51011_getAccessCondition(fhaFile, ACC_MODE_FILE_READ)), 0x04)\
;;;315    							| _51011_getAccessCondition(fhaFile, ACC_MODE_FILE_UPDATE);
;;;316    		
;;;317    		/*10: Increase condition*/
;;;318    		pumbResponse[0x09] = SHIFT_LEFT_BY_N_BITS(((uMonoByte)_51011_getAccessCondition(fhaFile, ACC_MODE_FILE_INCREASE)), 0x04);
;;;319    
;;;320    		/*11: Rehabilitate and Invalidate*/
;;;321    		pumbResponse[0x0A] = (uMonoByte)SHIFT_LEFT_BY_N_BITS(((uMonoByte)_51011_getAccessCondition(fhaFile, ACC_MODE_FILE_ACTIVATE)), 0x04)\
;;;322    							| _51011_getAccessCondition(fhaFile, ACC_MODE_FILE_DEACTIVATE);
;;;323    
;;;324    		/*11: Read/Seek and Update Access condition*/
;;;325    
;;;326    		/*12: File status (clause 9.3 of 51.011)*/
;;;327    		pumbResponse[0x0B] =(_102221_IS_FILE_ACTIVATED(fhFile.flState) ? FILE_STATUS_NOT_INVALIDATED : FILE_STATUS_INVALIDATED) | \
;;;328    							(_102221_IS_FILE_RW_WHEN_DEACTIVATED(fhFile.FileSpecific.EF.umbReadUpdateWhenDeactivated) ? FILE_STATUS_RW_WHEN_INVALIDATED: FILE_STATUS_NOT_RW_WHEN_INVALIDATED);
;;;329    
;;;330    		/*13: Length of subsequent data field: 2 bytes : EF structure and Record length */
;;;331    		pumbResponse[0x0C] = 0x02;
;;;332    
;;;333    		/*14,15: Already filled above in function*/
;;;334    
;;;335    		/*final length of prepared response*/
;;;336    		umbIndex = MAX_SIM_RESPONSE_EF;
;;;337    	}
;;;338    
;;;339    	DBG_FUNC_EXIT("<<[51_011] _51011_prepareFileResponse() returns %1\n", umbIndex);
;;;340    
;;;341    	/*Return prepared length of response*/
;;;342    	return umbIndex;
;;;343    }
;;;344    
;;;345    /*
;;;346    * It implements the Select command as per 51011
;;;347    */
;;;348    void _51011_select(void) {
        0x000067dc:    b510        ..      PUSH     {r4,lr}
;;;349    
;;;350    	DBG_FUNC_ENTRY(">>[51_011] _51011_select() \n");
;;;351    	
;;;352    	if (P1_BYTE | P2_BYTE) { // check P1-P2
        0x000067de:    4c15        .L      LDR      r4,[pc,#84] ; [0x6834] = 0x2000023e
        0x000067e0:    78a0        .x      LDRB     r0,[r4,#2]
        0x000067e2:    78e1        .x      LDRB     r1,[r4,#3]
        0x000067e4:    4301        .C      ORRS     r1,r1,r0
        0x000067e6:    d11a        ..      BNE      0x681e ; _51011_select + 66
;;;353    
;;;354    		/*Parameters are incorrect must be '0000'*/
;;;355    		DBG_ERR("[51_011] _51011_select: Wrong P1-P2\n");
;;;356    		DBG_FUNC_EXIT("<<[51_011] _51011_select() \n");
;;;357    		THROW(EXCEP_WRONG_P1_P2);
;;;358    	}
;;;359    
;;;360    	/*check File_ID length*/
;;;361    	if (P3_BYTE != LENGTH_FILE_ID) {
        0x000067e8:    7920         y      LDRB     r0,[r4,#4]
        0x000067ea:    2802        .(      CMP      r0,#2
        0x000067ec:    d11b        ..      BNE      0x6826 ; _51011_select + 74
        0x000067ee:    200c        .       MOVS     r0,#0xc
;;;362    
;;;363    		DBG_ERR("[CommandRouter] cmdRout_commandRouter: Invalid P3 Byte \n");
;;;364    		THROW2(EXCEP_WRONG_P3, LENGTH_FILE_ID);
;;;365    	}
;;;366    	/*Set P2 BYTE value to 0C before calling "_102221_select" because in UICC P2 BYTE will not be 00*/
;;;367    	P2_BYTE = NO_DATA_RETURN; 
        0x000067f0:    70e0        .p      STRB     r0,[r4,#3]
;;;368    	_102221_select();
        0x000067f2:    f7fbfd89    ....    BL       _102221_select ; 0x2308
;;;369    
;;;370    	/*
;;;371    	* UICC select command either found the file or doesnt: 
;;;372    	* If it doesnt found the file, exception will be sent and control will never come here
;;;373    	* If it does found the file, control will come here.
;;;374    	* Hence at this point of code we can assume that file has been found.
;;;375    	* Now check if its EF or DF
;;;376    	*/
;;;377    	if (NO_FILE_PRESENT != pccCurrentChannel->fhaCurrentEf) { // If EF is selected
        0x000067f6:    4811        .H      LDR      r0,[pc,#68] ; [0x683c] = 0x200006e8
        0x000067f8:    6801        .h      LDR      r1,[r0,#0]
        0x000067fa:    8908        ..      LDRH     r0,[r1,#8]
        0x000067fc:    2800        .(      CMP      r0,#0
        0x000067fe:    d006        ..      BEQ      0x680e ; _51011_select + 50
;;;378    
;;;379    		/*Prepare Select command's response for EF*/
;;;380    		gudbOutputLen = _51011_prepareFileResponse(pccCurrentChannel->fhaCurrentEf, FILE_IS_EF, COMMAND_RESPONSE_DATA);
        0x00006800:    1d62        b.      ADDS     r2,r4,#5
        0x00006802:    2104        .!      MOVS     r1,#4
        0x00006804:    f7fffe6c    ..l.    BL       _51011_prepareFileResponse ; 0x64e0
        0x00006808:    490d        .I      LDR      r1,[pc,#52] ; [0x6840] = 0x2000023c
        0x0000680a:    8008        ..      STRH     r0,[r1,#0]
        0x0000680c:    bd10        ..      POP      {r4,pc}
;;;381    	}
;;;382    	else { // else DF is selected
;;;383    
;;;384    		/*Prepare Select command's response for DF*/
;;;385    		gudbOutputLen = _51011_prepareFileResponse(pccCurrentChannel->fhaCurrentDf, FILE_IS_DF, COMMAND_RESPONSE_DATA);
        0x0000680e:    88c8        ..      LDRH     r0,[r1,#6]
        0x00006810:    1d62        b.      ADDS     r2,r4,#5
        0x00006812:    2102        .!      MOVS     r1,#2
        0x00006814:    f7fffe64    ..d.    BL       _51011_prepareFileResponse ; 0x64e0
        0x00006818:    4909        .I      LDR      r1,[pc,#36] ; [0x6840] = 0x2000023c
        0x0000681a:    8008        ..      STRH     r0,[r1,#0]
;;;386    	}
;;;387    	
;;;388    	DBG_FUNC_EXIT("<<[51_011] _51011_select() \n");
;;;389    }
        0x0000681c:    bd10        ..      POP      {r4,pc}
        0x0000681e:    4806        .H      LDR      r0,[pc,#24] ; [0x6838] = 0x20000648
        0x00006820:    2106        .!      MOVS     r1,#6
        0x00006822:    f001f900    ....    BL       longjmp ; 0x7a26
        0x00006826:    2002        .       MOVS     r0,#2
        0x00006828:    7120         q      STRB     r0,[r4,#4]
        0x0000682a:    4803        .H      LDR      r0,[pc,#12] ; [0x6838] = 0x20000648
        0x0000682c:    2107        .!      MOVS     r1,#7
        0x0000682e:    f001f8fa    ....    BL       longjmp ; 0x7a26
        0x00006832:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00006834:    2000023e    >..     DCD    536871486
    __arm_cp.1_1
        0x00006838:    20000648    H..     DCD    536872520
    __arm_cp.1_2
        0x0000683c:    200006e8    ...     DCD    536872680
    __arm_cp.1_3
        0x00006840:    2000023c    <..     DCD    536871484
    $t.4
    _51011_status
;;;390    
;;;391    /*
;;;392    * It implements the Status command as per 51011
;;;393    */
;;;394    void _51011_status(void) {
        0x00006844:    b510        ..      PUSH     {r4,lr}
;;;395    
;;;396    	DBG_FUNC_ENTRY(">>[51_011] _51011_status() \n");
;;;397    
;;;398    	if (P1_BYTE || P2_BYTE) { // check P1-P2
        0x00006846:    4c10        .L      LDR      r4,[pc,#64] ; [0x6888] = 0x2000023e
        0x00006848:    78a0        .x      LDRB     r0,[r4,#2]
        0x0000684a:    2800        .(      CMP      r0,#0
        0x0000684c:    d111        ..      BNE      0x6872 ; _51011_status + 46
        0x0000684e:    78e0        .x      LDRB     r0,[r4,#3]
        0x00006850:    2800        .(      CMP      r0,#0
        0x00006852:    d10e        ..      BNE      0x6872 ; _51011_status + 46
;;;399    
;;;400    		/*Parameters are incorrect must be '0000'*/
;;;401    		DBG_ERR("[51_011] _51011_status: Wrong P1-P2\n");
;;;402    		DBG_FUNC_EXIT("<<[51_011] _51011_status() \n");
;;;403    		THROW(EXCEP_WRONG_P1_P2);
;;;404    	}
;;;405    	if (P3_BYTE > MAX_SIM_RESPONSE_DF ) {// check if P3 is more than DF's response length
        0x00006854:    7920         y      LDRB     r0,[r4,#4]
        0x00006856:    2817        .(      CMP      r0,#0x17
        0x00006858:    d20f        ..      BCS      0x687a ; _51011_status + 54
;;;406    		/* Wrong P3*/
;;;407    		DBG_ERR("[51_011] _51011_status: Wrong P3\n");
;;;408    		DBG_FUNC_EXIT("<<[51_011] _51011_status() \n");
;;;409    		THROW2(EXCEP_WRONG_P3, MAX_SIM_RESPONSE_DF);
;;;410    	}
;;;411    
;;;412    	_102221_status();
        0x0000685a:    f7fbfb91    ....    BL       _102221_status ; 0x1f80
;;;413    
;;;414    
;;;415    
;;;416    	/*Prepare Select command's response for DF*/
;;;417    	gudbOutputLen = _51011_prepareFileResponse(pccCurrentChannel->fhaCurrentDf, FILE_IS_DF, COMMAND_RESPONSE_DATA);
        0x0000685e:    480c        .H      LDR      r0,[pc,#48] ; [0x6890] = 0x200006e8
        0x00006860:    6800        .h      LDR      r0,[r0,#0]
        0x00006862:    88c0        ..      LDRH     r0,[r0,#6]
        0x00006864:    1d62        b.      ADDS     r2,r4,#5
        0x00006866:    2102        .!      MOVS     r1,#2
        0x00006868:    f7fffe3a    ..:.    BL       _51011_prepareFileResponse ; 0x64e0
        0x0000686c:    4909        .I      LDR      r1,[pc,#36] ; [0x6894] = 0x2000023c
        0x0000686e:    8008        ..      STRH     r0,[r1,#0]
;;;418    
;;;419    
;;;420    	DBG_FUNC_EXIT("<<[51_011] _51011_status() \n");
;;;421    
;;;422    }
        0x00006870:    bd10        ..      POP      {r4,pc}
        0x00006872:    4806        .H      LDR      r0,[pc,#24] ; [0x688c] = 0x20000648
        0x00006874:    2106        .!      MOVS     r1,#6
        0x00006876:    f001f8d6    ....    BL       longjmp ; 0x7a26
        0x0000687a:    2016        .       MOVS     r0,#0x16
        0x0000687c:    7120         q      STRB     r0,[r4,#4]
        0x0000687e:    4803        .H      LDR      r0,[pc,#12] ; [0x688c] = 0x20000648
        0x00006880:    2107        .!      MOVS     r1,#7
        0x00006882:    f001f8d0    ....    BL       longjmp ; 0x7a26
        0x00006886:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x00006888:    2000023e    >..     DCD    536871486
    __arm_cp.2_1
        0x0000688c:    20000648    H..     DCD    536872520
    __arm_cp.2_2
        0x00006890:    200006e8    ...     DCD    536872680
    __arm_cp.2_3
        0x00006894:    2000023c    <..     DCD    536871484
    $t.6
    _51011_sleep
;;;423    
;;;424    /*
;;;425    * It implements the Sleep command as per 51011
;;;426    */
;;;427    void _51011_sleep(void) {
;;;428    
;;;429    	DBG_FUNC_ENTRY(">>[51_011] _51011_sleep() \n");
;;;430    
;;;431    	if (P1_BYTE || P2_BYTE) {
        0x00006898:    480a        .H      LDR      r0,[pc,#40] ; [0x68c4] = 0x2000023e
        0x0000689a:    7881        .x      LDRB     r1,[r0,#2]
;;; BusinessComponent/Telecom/51_011/source\sim_GenericCommands.c (431)
        0x0000689c:    2900        .)      CMP      r1,#0
        0x0000689e:    d106        ..      BNE      0x68ae ; _51011_sleep + 22
        0x000068a0:    78c1        .x      LDRB     r1,[r0,#3]
        0x000068a2:    2900        .)      CMP      r1,#0
        0x000068a4:    d103        ..      BNE      0x68ae ; _51011_sleep + 22
        0x000068a6:    7901        .y      LDRB     r1,[r0,#4]
        0x000068a8:    2900        .)      CMP      r1,#0
        0x000068aa:    d104        ..      BNE      0x68b6 ; _51011_sleep + 30
        0x000068ac:    4770        pG      BX       lr
;;;432    		/*Parameters are incorrect must be '0000'*/
;;;433    		DBG_ERR("[51_011] _51011_sleep: Wrong P1-P2\n");
;;;434    		DBG_FUNC_EXIT("<<[51_011] _51011_sleep() \n");
;;;435    		THROW(EXCEP_WRONG_P1_P2);
        0x000068ae:    4806        .H      LDR      r0,[pc,#24] ; [0x68c8] = 0x20000648
        0x000068b0:    2106        .!      MOVS     r1,#6
        0x000068b2:    f001f8b8    ....    BL       longjmp ; 0x7a26
        0x000068b6:    2100        .!      MOVS     r1,#0
;;;436    	}
;;;437    
;;;438    	if (P3_BYTE) {
;;;439    		/*P3 must be 00*/
;;;440    		DBG_ERR("[51_011] _51011_sleep: Wrong P3\n");
;;;441    		DBG_FUNC_EXIT("<<[51_011] _51011_sleep() \n");
;;;442    		THROW2(EXCEP_WRONG_P3,0x00);
        0x000068b8:    7101        .q      STRB     r1,[r0,#4]
        0x000068ba:    4803        .H      LDR      r0,[pc,#12] ; [0x68c8] = 0x20000648
        0x000068bc:    2107        .!      MOVS     r1,#7
        0x000068be:    f001f8b2    ....    BL       longjmp ; 0x7a26
        0x000068c2:    46c0        .F      MOV      r8,r8
    $d.7
    __arm_cp.3_0
        0x000068c4:    2000023e    >..     DCD    536871486
    __arm_cp.3_1
        0x000068c8:    20000648    H..     DCD    536872520
    $t.8
    _51011_runGsmAlgorithm
;;;443    	}
;;;444    	/*Though this command is obsolete, as it is only used by Phase 1 MEs
;;;445    	* Just for backward compatibility, phase 2 or later MEs always return "Normal ending"
;;;446    	*/
;;;447    
;;;448    	DBG_FUNC_EXIT("<<[51_011] _51011_sleep() \n");
;;;449    }
;;;450    
;;;451    /*
;;;452    * It implements RUN GSM algorithm command as per ETSI 51.011
;;;453    */
;;;454    void _51011_runGsmAlgorithm(void) {
        0x000068cc:    b570        p.      PUSH     {r4-r6,lr}
        0x000068ce:    b086        ..      SUB      sp,sp,#0x18
;;;455    
;;;456    	uMonoByte umbKi[LENGTH_AUTH_KEY];
;;;457    	tFileHeaderAddr fhaAuthKi;
;;;458    
;;;459    	DBG_FUNC_ENTRY(">>[51_011] _51011_runGsmAlgorithm() \n");
;;;460    
;;;461    	if (P1_BYTE || P2_BYTE) {
        0x000068d0:    4e31        1N      LDR      r6,[pc,#196] ; [0x6998] = 0x2000023e
        0x000068d2:    78b0        .x      LDRB     r0,[r6,#2]
        0x000068d4:    2800        .(      CMP      r0,#0
        0x000068d6:    d140        @.      BNE      0x695a ; _51011_runGsmAlgorithm + 142
        0x000068d8:    78f0        .x      LDRB     r0,[r6,#3]
        0x000068da:    2800        .(      CMP      r0,#0
        0x000068dc:    d13d        =.      BNE      0x695a ; _51011_runGsmAlgorithm + 142
;;;462    		/*Parameters are incorrect must be '0000'*/
;;;463    		DBG_ERR("[51_011] _51011_runGsmAlgorithm: Wrong P1-P2\n");
;;;464    		DBG_FUNC_EXIT("<<[51_011] _51011_runGsmAlgorithm() \n");
;;;465    		THROW(EXCEP_WRONG_P1_P2);
;;;466    	}
;;;467    
;;;468    	if (P3_BYTE != LENGTH_CHALLENGE_DATA) {
        0x000068de:    7930        0y      LDRB     r0,[r6,#4]
        0x000068e0:    2810        .(      CMP      r0,#0x10
        0x000068e2:    d145        E.      BNE      0x6970 ; _51011_runGsmAlgorithm + 164
;;;469    
;;;470    		/*Random data or challenge must be present of 16 bytes*/
;;;471    		DBG_ERR("[51_011] _51011_runGsmAlgorithm: Wrong P3 %1\n", P3_BYTE);
;;;472    		DBG_FUNC_EXIT("<<[51_011] _51011_runGsmAlgorithm() \n");
;;;473    		THROW2(EXCEP_WRONG_P3, LENGTH_CHALLENGE_DATA);
;;;474    	}
;;;475    
;;;476    	if (FID_GSM != _7816_4_getFileId(pccCurrentChannel->fhaCurrentDf)) { // if current DF is not 7F20
        0x000068e4:    482e        .H      LDR      r0,[pc,#184] ; [0x69a0] = 0x200006e8
        0x000068e6:    6800        .h      LDR      r0,[r0,#0]
        0x000068e8:    88c0        ..      LDRH     r0,[r0,#6]
        0x000068ea:    f7fcfd55    ..U.    BL       _7816_4_getFileId ; 0x3398
        0x000068ee:    4c2d        -L      LDR      r4,[pc,#180] ; [0x69a4] = 0x7f20
        0x000068f0:    42a0        .B      CMP      r0,r4
        0x000068f2:    d143        C.      BNE      0x697c ; _51011_runGsmAlgorithm + 176
        0x000068f4:    2001        .       MOVS     r0,#1
;;;477    
;;;478    		/*Its mandatory to select DFgsm for RUN GSM ALGORITHM*/
;;;479    		DBG_ERR("[51_011] _51011_runGsmAlgorithm: Current DF must be GSM\n");
;;;480    		DBG_FUNC_EXIT("<<[51_011] _51011_runGsmAlgorithm() \n");
;;;481    		THROW(EXCEP_CONDITIONS_OF_USE_NOT_SATISFIED);
;;;482    	}
;;;483    
;;;484    	if (ACC_NOT_VERIFIED == _7816_4_isKeyRefVerified(MAPPED_KEY_REF_TO_CHV_1)) { // If CHV1 is not verified
        0x000068f6:    f7fdfcd5    ....    BL       _7816_4_isKeyRefVerified ; 0x42a4
        0x000068fa:    2801        .(      CMP      r0,#1
        0x000068fc:    d042        B.      BEQ      0x6984 ; _51011_runGsmAlgorithm + 184
;;;485    
;;;486    		/*CHV1 mandatory to be verified for Network Authentication*/
;;;487    		DBG_ERR("[51_011] _51011_runGsmAlgorithm: CHV1 is not verified\n");
;;;488    		DBG_FUNC_EXIT("<<[51_011] _51011_runGsmAlgorithm() \n");
;;;489    		THROW(EXCEP_SECURITY_NOT_SATISFIED);
;;;490    	}
;;;491    
;;;492    	/*Get file address of Prop. DF*/
;;;493    	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, &fhaAuthKi);
        0x000068fe:    f7fcfb59    ..Y.    BL       _7816_4_getMfAddress ; 0x2fb4
        0x00006902:    4601        .F      MOV      r1,r0
        0x00006904:    3429        )4      ADDS     r4,r4,#0x29
        0x00006906:    2200        ."      MOVS     r2,#0
        0x00006908:    ad01        ..      ADD      r5,sp,#4
        0x0000690a:    4620         F      MOV      r0,r4
        0x0000690c:    462b        +F      MOV      r3,r5
        0x0000690e:    f7fcfc11    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;494    
;;;495    	assert(fhaAuthKi != NO_FILE_PRESENT);
        0x00006912:    8829        ).      LDRH     r1,[r5,#0]
        0x00006914:    2900        .)      CMP      r1,#0
        0x00006916:    d039        9.      BEQ      0x698c ; _51011_runGsmAlgorithm + 192
        0x00006918:    4823        #H      LDR      r0,[pc,#140] ; [0x69a8] = 0x6f13
        0x0000691a:    2400        .$      MOVS     r4,#0
        0x0000691c:    ad01        ..      ADD      r5,sp,#4
;;;496    
;;;497    	/*Get file address of Prop. Auth Ki file*/
;;;498    	_7816_4_ifFileExists(FID_PROP_AUTH_KI, fhaAuthKi, MODE_FIND_FID, &fhaAuthKi);
        0x0000691e:    4622        "F      MOV      r2,r4
        0x00006920:    462b        +F      MOV      r3,r5
        0x00006922:    f7fcfc07    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;499    
;;;500    	assert((fhaAuthKi != NO_FILE_PRESENT) && (LENGTH_AUTH_KEY == _7816_4_getFileSize(fhaAuthKi)));
        0x00006926:    8828        (.      LDRH     r0,[r5,#0]
        0x00006928:    2800        .(      CMP      r0,#0
        0x0000692a:    d01a        ..      BEQ      0x6962 ; _51011_runGsmAlgorithm + 150
        0x0000692c:    f7fcfdc8    ....    BL       _7816_4_getFileSize ; 0x34c0
        0x00006930:    2810        .(      CMP      r0,#0x10
        0x00006932:    d116        ..      BNE      0x6962 ; _51011_runGsmAlgorithm + 150
        0x00006934:    a801        ..      ADD      r0,sp,#4
;;;501    
;;;502    	/*Read the auth Ki from prop. file*/
;;;503    	_7816_4_readUpdateFile(fhaAuthKi, umbKi, OFFSET_START, LENGTH_AUTH_KEY, ACC_MODE_FILE_READ);
        0x00006936:    8800        ..      LDRH     r0,[r0,#0]
        0x00006938:    9400        ..      STR      r4,[sp,#0]
        0x0000693a:    ad02        ..      ADD      r5,sp,#8
        0x0000693c:    2310        .#      MOVS     r3,#0x10
        0x0000693e:    4629        )F      MOV      r1,r5
        0x00006940:    4622        "F      MOV      r2,r4
        0x00006942:    f7fcfcd3    ....    BL       _7816_4_readUpdateFile ; 0x32ec
;;;504    
;;;505    	DBG_FUNC("[51_011] _51011_runGsmAlgorithm: Ki been read from file AUTH FILE '6F13'\n");
;;;506    
;;;507    	/*Call comp-128 algorithm*/
;;;508    	fvComp128Three(COMMAND_DATA, umbKi, COMMAND_RESPONSE_DATA);
        0x00006946:    1d70        p.      ADDS     r0,r6,#5
        0x00006948:    4629        )F      MOV      r1,r5
        0x0000694a:    4602        .F      MOV      r2,r0
        0x0000694c:    f7fdff76    ..v.    BL       fvComp128Three ; 0x483c
;;;509    
;;;510    	/*Send prepared Response*/
;;;511    	gudbOutputLen = LENGTH_SRES + LENGTH_CIPHERING_KEY;
        0x00006950:    4816        .H      LDR      r0,[pc,#88] ; [0x69ac] = 0x2000023c
        0x00006952:    210c        .!      MOVS     r1,#0xc
        0x00006954:    8001        ..      STRH     r1,[r0,#0]
;;;512    
;;;513    	DBG_FUNC_EXIT("<<[51_011] _51011_runGsmAlgorithm() \n");
;;;514    }
        0x00006956:    b006        ..      ADD      sp,sp,#0x18
        0x00006958:    bd70        p.      POP      {r4-r6,pc}
        0x0000695a:    4810        .H      LDR      r0,[pc,#64] ; [0x699c] = 0x20000648
        0x0000695c:    2106        .!      MOVS     r1,#6
        0x0000695e:    f001f862    ..b.    BL       longjmp ; 0x7a26
        0x00006962:    20ff        .       MOVS     r0,#0xff
        0x00006964:    30f0        .0      ADDS     r0,r0,#0xf0
        0x00006966:    1d42        B.      ADDS     r2,r0,#5
        0x00006968:    4811        .H      LDR      r0,[pc,#68] ; [0x69b0] = 0x8b40
        0x0000696a:    4912        .I      LDR      r1,[pc,#72] ; [0x69b4] = 0x8b96
        0x0000696c:    f000fec0    ....    BL       __aeabi_assert ; 0x76f0
        0x00006970:    2010        .       MOVS     r0,#0x10
        0x00006972:    7130        0q      STRB     r0,[r6,#4]
        0x00006974:    4809        .H      LDR      r0,[pc,#36] ; [0x699c] = 0x20000648
        0x00006976:    2107        .!      MOVS     r1,#7
        0x00006978:    f001f855    ..U.    BL       longjmp ; 0x7a26
        0x0000697c:    4807        .H      LDR      r0,[pc,#28] ; [0x699c] = 0x20000648
        0x0000697e:    211d        .!      MOVS     r1,#0x1d
        0x00006980:    f001f851    ..Q.    BL       longjmp ; 0x7a26
        0x00006984:    4805        .H      LDR      r0,[pc,#20] ; [0x699c] = 0x20000648
        0x00006986:    2111        .!      MOVS     r1,#0x11
        0x00006988:    f001f84d    ..M.    BL       longjmp ; 0x7a26
        0x0000698c:    22ff        ."      MOVS     r2,#0xff
        0x0000698e:    32f0        .2      ADDS     r2,r2,#0xf0
        0x00006990:    a009        ..      ADR      r0,{pc}+0x28 ; 0x69b8
        0x00006992:    4908        .I      LDR      r1,[pc,#32] ; [0x69b4] = 0x8b96
        0x00006994:    f000feac    ....    BL       __aeabi_assert ; 0x76f0
    $d.9
    __arm_cp.4_0
        0x00006998:    2000023e    >..     DCD    536871486
    __arm_cp.4_1
        0x0000699c:    20000648    H..     DCD    536872520
    __arm_cp.4_2
        0x000069a0:    200006e8    ...     DCD    536872680
    __arm_cp.4_3
        0x000069a4:    00007f20     ...    DCD    32544
    __arm_cp.4_4
        0x000069a8:    00006f13    .o..    DCD    28435
    __arm_cp.4_5
        0x000069ac:    2000023c    <..     DCD    536871484
    __arm_cp.4_6
        0x000069b0:    00008b40    @...    DCD    35648
    __arm_cp.4_7
        0x000069b4:    00008b96    ....    DCD    35734
        0x000069b8:    41616866    fhaA    DCD    1096902758
        0x000069bc:    4b687475    uthK    DCD    1265136757
        0x000069c0:    3d212069    i !=    DCD    1025581161
        0x000069c4:    5f4f4e20     NO_    DCD    1599032864
        0x000069c8:    454c4946    FILE    DCD    1162627398
        0x000069cc:    4552505f    _PRE    DCD    1163022431
        0x000069d0:    544e4553    SENT    DCD    1414415699
        0x000069d4:    00000000    ....    DCD    0
    $t.0
    _51011_verifyChv
;;; BusinessComponent/Telecom/51_011/source\sim_PinManagementCommands.c
;;;66     void _51011_verifyChv(void) {
        0x000069d8:    b580        ..      PUSH     {r7,lr}
;;; BusinessComponent/Telecom/51_011/source\sim_PinManagementCommands.c (16)
        0x000069da:    4917        .I      LDR      r1,[pc,#92] ; [0x6a38] = 0x2000023e
        0x000069dc:    7888        .x      LDRB     r0,[r1,#2]
        0x000069de:    2800        .(      CMP      r0,#0
        0x000069e0:    d120         .      BNE      0x6a24 ; _51011_verifyChv + 76
;;;17     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P1 \n");
;;;18     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;19     		THROW(EXCEP_WRONG_P1_P2);
;;;20     	}
;;;21     
;;;22     	if (PIN_CHV_2 == P2_BYTE) { // if its CHV2
        0x000069e2:    78c8        .x      LDRB     r0,[r1,#3]
        0x000069e4:    2801        .(      CMP      r0,#1
        0x000069e6:    d003        ..      BEQ      0x69f0 ; _51011_verifyChv + 24
        0x000069e8:    2802        .(      CMP      r0,#2
        0x000069ea:    d103        ..      BNE      0x69f4 ; _51011_verifyChv + 28
        0x000069ec:    2081        .       MOVS     r0,#0x81
        0x000069ee:    e00a        ..      B        0x6a06 ; _51011_verifyChv + 46
        0x000069f0:    2001        .       MOVS     r0,#1
        0x000069f2:    e008        ..      B        0x6a06 ; _51011_verifyChv + 46
;;;23     
;;;24     		/*Update mapped key reference of CHV2*/
;;;25     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_2;
;;;26     	}
;;;27     	else if (umbChv1 == P2_BYTE) { // if its CHV1
;;;28     		
;;;29     		/*CHV1 key reference*/
;;;30     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_1;
;;;31     	}
;;;32     	else if ((PIN_SIM_ADM_1 <= P2_BYTE) && (PIN_SIM_ADM_11 >= P2_BYTE)) { // if its ADM 04-0E
        0x000069f4:    1f02        ..      SUBS     r2,r0,#4
        0x000069f6:    b2d2        ..      UXTB     r2,r2
        0x000069f8:    2a0a        .*      CMP      r2,#0xa
        0x000069fa:    d813        ..      BHI      0x6a24 ; _51011_verifyChv + 76
;;;33     
;;;34     		/*Get UICC ADM key reference*/
;;;35     		if(P2_BYTE < PIN_SIM_ADM_6) // P2 is less than ADM6 i.e. '9'
        0x000069fc:    2808        .(      CMP      r0,#8
        0x000069fe:    d801        ..      BHI      0x6a04 ; _51011_verifyChv + 44
;;;36     		{
;;;37     			// if ADM is in range 04-08
;;;38     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_1 + PIN_ADM_1;
        0x00006a00:    1d80        ..      ADDS     r0,r0,#6
        0x00006a02:    e000        ..      B        0x6a06 ; _51011_verifyChv + 46
;;;39     		}
;;;40     		else {
;;;41     			// if ADM is in range 09-0E
;;;42     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_6 + PIN_ADM_6;
        0x00006a04:    387f        .8      SUBS     r0,r0,#0x7f
;;;43     		}
;;;44     	}
;;;45     	else { //invalid P2
;;;46     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	if (umbLc != P3_BYTE) { // Check if incorrect P3 is provided
        0x00006a06:    790a        .y      LDRB     r2,[r1,#4]
        0x00006a08:    2a08        .*      CMP      r2,#8
        0x00006a0a:    d10f        ..      BNE      0x6a2c ; _51011_verifyChv + 84
;;;52     
;;;53     		DBG_ERR("[51_011] _51011_validatePinCommand: Wrong P3, Correct value %1 \n", umbLc);
;;;54     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;55     		THROW2(EXCEP_WRONG_P3, umbLc);
;;;56     	}
;;;57     
;;;58     
;;;59     	DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() returns %1\n", umbKeyRef);
;;;60     	/* Mapped Key reference to presented CHV*/
;;;61     	return umbKeyRef;
;;;62     }
;;;63     /*
;;;64     * It implements the Verify CHV command as per 51.011
;;;65     */
;;;66     void _51011_verifyChv(void) {
;;;67     
;;;68     	uMonoByte		umbKeyRef;
;;;69     	tPinStatusCode	pscReturned;
;;;70     
;;;71     	DBG_FUNC_ENTRY(">>[51_011] _51011_verifyChv() \n");
;;;72     
;;;73     	/*Do P1-P2 validation*/
;;;74     	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;75     
;;;76     	DBG_FUNC("[51_011] _51011_verifyChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;77     
;;;78     	/*Verify Pin function, Pin must be enabled to verify*/
;;;79     	pscReturned = _7816_4_verifyPin(umbKeyRef, PIN_ENABLED,  COMMAND_DATA, PIN_OP_VERIFY);
        0x00006a0c:    b2c0        ..      UXTB     r0,r0
        0x00006a0e:    1d4a        J.      ADDS     r2,r1,#5
        0x00006a10:    2100        .!      MOVS     r1,#0
        0x00006a12:    460b        .F      MOV      r3,r1
        0x00006a14:    f7fdfda6    ....    BL       _7816_4_verifyPin ; 0x4564
;;;80     
;;;81     	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
        0x00006a18:    2804        .(      CMP      r0,#4
        0x00006a1a:    d300        ..      BCC      0x6a1e ; _51011_verifyChv + 70
        0x00006a1c:    2004        .       MOVS     r0,#4
;;;82     
;;;83     		/*In case of 51.011 remainig attempts are not need to be sent, So updating the variable*/
;;;84     		pscReturned = PIN_SC_NOT_VERIFIED;
;;;85     	}
;;;86     
;;;87     	DBG_FUNC_EXIT("<<[51_011] _51011_verifyChv() \n");
;;;88     
;;;89     	/*it throws status error in case of error status code*/
;;;90     	_102221_throwStatusResponseAsPer(pscReturned);
        0x00006a1e:    f7fbfd7b    ..{.    BL       _102221_throwStatusResponseAsPer ; 0x2518
;;;91     }
        0x00006a22:    bd80        ..      POP      {r7,pc}
        0x00006a24:    4805        .H      LDR      r0,[pc,#20] ; [0x6a3c] = 0x20000648
        0x00006a26:    2106        .!      MOVS     r1,#6
        0x00006a28:    f000fffd    ....    BL       longjmp ; 0x7a26
        0x00006a2c:    2008        .       MOVS     r0,#8
        0x00006a2e:    7108        .q      STRB     r0,[r1,#4]
        0x00006a30:    4802        .H      LDR      r0,[pc,#8] ; [0x6a3c] = 0x20000648
        0x00006a32:    2107        .!      MOVS     r1,#7
        0x00006a34:    f000fff7    ....    BL       longjmp ; 0x7a26
    $d.1
    __arm_cp.0_0
        0x00006a38:    2000023e    >..     DCD    536871486
    __arm_cp.0_1
        0x00006a3c:    20000648    H..     DCD    536872520
    $t.2
    _51011_changeChv
;;;92     
;;;93     /*
;;;94     * It implements the Change CHV command as per 51.011
;;;95     */
;;;96     void _51011_changeChv(void) {
        0x00006a40:    b510        ..      PUSH     {r4,lr}
;;; BusinessComponent/Telecom/51_011/source\sim_PinManagementCommands.c (16)
        0x00006a42:    4b1d        .K      LDR      r3,[pc,#116] ; [0x6ab8] = 0x2000023e
        0x00006a44:    7898        .x      LDRB     r0,[r3,#2]
        0x00006a46:    2800        .(      CMP      r0,#0
        0x00006a48:    d12b        +.      BNE      0x6aa2 ; _51011_changeChv + 98
;;;17     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P1 \n");
;;;18     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;19     		THROW(EXCEP_WRONG_P1_P2);
;;;20     	}
;;;21     
;;;22     	if (PIN_CHV_2 == P2_BYTE) { // if its CHV2
        0x00006a4a:    78d8        .x      LDRB     r0,[r3,#3]
        0x00006a4c:    2801        .(      CMP      r0,#1
        0x00006a4e:    d003        ..      BEQ      0x6a58 ; _51011_changeChv + 24
        0x00006a50:    2802        .(      CMP      r0,#2
        0x00006a52:    d103        ..      BNE      0x6a5c ; _51011_changeChv + 28
        0x00006a54:    2081        .       MOVS     r0,#0x81
        0x00006a56:    e00a        ..      B        0x6a6e ; _51011_changeChv + 46
        0x00006a58:    2001        .       MOVS     r0,#1
        0x00006a5a:    e008        ..      B        0x6a6e ; _51011_changeChv + 46
;;;23     
;;;24     		/*Update mapped key reference of CHV2*/
;;;25     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_2;
;;;26     	}
;;;27     	else if (umbChv1 == P2_BYTE) { // if its CHV1
;;;28     		
;;;29     		/*CHV1 key reference*/
;;;30     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_1;
;;;31     	}
;;;32     	else if ((PIN_SIM_ADM_1 <= P2_BYTE) && (PIN_SIM_ADM_11 >= P2_BYTE)) { // if its ADM 04-0E
        0x00006a5c:    1f01        ..      SUBS     r1,r0,#4
        0x00006a5e:    b2c9        ..      UXTB     r1,r1
        0x00006a60:    290a        .)      CMP      r1,#0xa
        0x00006a62:    d81e        ..      BHI      0x6aa2 ; _51011_changeChv + 98
;;;33     
;;;34     		/*Get UICC ADM key reference*/
;;;35     		if(P2_BYTE < PIN_SIM_ADM_6) // P2 is less than ADM6 i.e. '9'
        0x00006a64:    2808        .(      CMP      r0,#8
        0x00006a66:    d801        ..      BHI      0x6a6c ; _51011_changeChv + 44
;;;36     		{
;;;37     			// if ADM is in range 04-08
;;;38     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_1 + PIN_ADM_1;
        0x00006a68:    1d80        ..      ADDS     r0,r0,#6
        0x00006a6a:    e000        ..      B        0x6a6e ; _51011_changeChv + 46
;;;39     		}
;;;40     		else {
;;;41     			// if ADM is in range 09-0E
;;;42     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_6 + PIN_ADM_6;
        0x00006a6c:    387f        .8      SUBS     r0,r0,#0x7f
;;;43     		}
;;;44     	}
;;;45     	else { //invalid P2
;;;46     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	if (umbLc != P3_BYTE) { // Check if incorrect P3 is provided
        0x00006a6e:    7919        .y      LDRB     r1,[r3,#4]
        0x00006a70:    2910        .)      CMP      r1,#0x10
        0x00006a72:    d11a        ..      BNE      0x6aaa ; _51011_changeChv + 106
;;;52     
;;;53     		DBG_ERR("[51_011] _51011_validatePinCommand: Wrong P3, Correct value %1 \n", umbLc);
;;;54     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;55     		THROW2(EXCEP_WRONG_P3, umbLc);
;;;56     	}
;;;57     
;;;58     
;;;59     	DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() returns %1\n", umbKeyRef);
;;;60     	/* Mapped Key reference to presented CHV*/
;;;61     	return umbKeyRef;
;;;62     }
;;;63     /*
;;;64     * It implements the Verify CHV command as per 51.011
;;;65     */
;;;66     void _51011_verifyChv(void) {
;;;67     
;;;68     	uMonoByte		umbKeyRef;
;;;69     	tPinStatusCode	pscReturned;
;;;70     
;;;71     	DBG_FUNC_ENTRY(">>[51_011] _51011_verifyChv() \n");
;;;72     
;;;73     	/*Do P1-P2 validation*/
;;;74     	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;75     
;;;76     	DBG_FUNC("[51_011] _51011_verifyChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;77     
;;;78     	/*Verify Pin function, Pin must be enabled to verify*/
;;;79     	pscReturned = _7816_4_verifyPin(umbKeyRef, PIN_ENABLED,  COMMAND_DATA, PIN_OP_VERIFY);
;;;80     
;;;81     	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;82     
;;;83     		/*In case of 51.011 remainig attempts are not need to be sent, So updating the variable*/
;;;84     		pscReturned = PIN_SC_NOT_VERIFIED;
;;;85     	}
;;;86     
;;;87     	DBG_FUNC_EXIT("<<[51_011] _51011_verifyChv() \n");
;;;88     
;;;89     	/*it throws status error in case of error status code*/
;;;90     	_102221_throwStatusResponseAsPer(pscReturned);
;;;91     }
;;;92     
;;;93     /*
;;;94     * It implements the Change CHV command as per 51.011
;;;95     */
;;;96     void _51011_changeChv(void) {
;;;97     
;;;98     	tPinStatusCode pscReturned;
;;;99     	uMonoByte umbKeyRef;
;;;100    
;;;101    	DBG_FUNC_ENTRY(">>[51_011] _51011_changeChv() \n");
;;;102    
;;;103    	/*Do P1-P2 and validation: First argument is valid CHV1 and second argument two pins are mandatory in Change command*/
;;;104    	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;105    
;;;106    	DBG_FUNC("[51_011] _51011_changeChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;107    
;;;108    	/*Call the function to change PIN*/
;;;109    	pscReturned = _7816_4_changeUnblockPin(umbKeyRef, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
        0x00006a74:    b2c0        ..      UXTB     r0,r0
        0x00006a76:    1d5a        Z.      ADDS     r2,r3,#5
        0x00006a78:    330d        .3      ADDS     r3,r3,#0xd
        0x00006a7a:    2404        .$      MOVS     r4,#4
        0x00006a7c:    4621        !F      MOV      r1,r4
        0x00006a7e:    f7fdfdc6    ....    BL       _7816_4_changeUnblockPin ; 0x460e
;;;110    
;;;111    	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
        0x00006a82:    2804        .(      CMP      r0,#4
        0x00006a84:    d005        ..      BEQ      0x6a92 ; _51011_changeChv + 82
        0x00006a86:    2803        .(      CMP      r0,#3
        0x00006a88:    d906        ..      BLS      0x6a98 ; _51011_changeChv + 88
;;;112    
;;;113    		if (PIN_SC_NOT_VERIFIED == pscReturned) { // No attempts left
;;;114    			//so pin is blocked now
;;;115    			pscReturned = PIN_SC_BLOCKED;
;;;116    		}
;;;117    		else { // for non-zero attempts
;;;118    			/*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;119    			pscReturned = PIN_SC_NOT_VERIFIED;
;;;120    		}
;;;121    	}
;;;122    
;;;123    	DBG_FUNC_EXIT("<<[51_011] _51011_changeChv() \n");
;;;124    
;;;125    	/*it throws status error in case of error status code*/
;;;126    	_102221_throwStatusResponseAsPer(pscReturned);
        0x00006a8a:    4620         F      MOV      r0,r4
        0x00006a8c:    f7fbfd44    ..D.    BL       _102221_throwStatusResponseAsPer ; 0x2518
;;;127    }
        0x00006a90:    bd10        ..      POP      {r4,pc}
        0x00006a92:    2403        .$      MOVS     r4,#3
        0x00006a94:    2803        .(      CMP      r0,#3
        0x00006a96:    d8f8        ..      BHI      0x6a8a ; _51011_changeChv + 74
        0x00006a98:    4604        .F      MOV      r4,r0
        0x00006a9a:    4620         F      MOV      r0,r4
        0x00006a9c:    f7fbfd3c    ..<.    BL       _102221_throwStatusResponseAsPer ; 0x2518
        0x00006aa0:    bd10        ..      POP      {r4,pc}
        0x00006aa2:    4806        .H      LDR      r0,[pc,#24] ; [0x6abc] = 0x20000648
        0x00006aa4:    2106        .!      MOVS     r1,#6
        0x00006aa6:    f000ffbe    ....    BL       longjmp ; 0x7a26
        0x00006aaa:    2010        .       MOVS     r0,#0x10
        0x00006aac:    7118        .q      STRB     r0,[r3,#4]
        0x00006aae:    4803        .H      LDR      r0,[pc,#12] ; [0x6abc] = 0x20000648
        0x00006ab0:    2107        .!      MOVS     r1,#7
        0x00006ab2:    f000ffb8    ....    BL       longjmp ; 0x7a26
        0x00006ab6:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00006ab8:    2000023e    >..     DCD    536871486
    __arm_cp.1_1
        0x00006abc:    20000648    H..     DCD    536872520
    $t.4
    _51011_unblockChv
;;;128    
;;;129    /*
;;;130    * It implements the Unblock CHV command as per 51.011
;;;131    */
;;;132    void _51011_unblockChv(void) {
        0x00006ac0:    b580        ..      PUSH     {r7,lr}
;;; BusinessComponent/Telecom/51_011/source\sim_PinManagementCommands.c (16)
        0x00006ac2:    4b17        .K      LDR      r3,[pc,#92] ; [0x6b20] = 0x2000023e
        0x00006ac4:    7898        .x      LDRB     r0,[r3,#2]
        0x00006ac6:    2800        .(      CMP      r0,#0
        0x00006ac8:    d120         .      BNE      0x6b0c ; _51011_unblockChv + 76
;;;17     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P1 \n");
;;;18     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;19     		THROW(EXCEP_WRONG_P1_P2);
;;;20     	}
;;;21     
;;;22     	if (PIN_CHV_2 == P2_BYTE) { // if its CHV2
        0x00006aca:    78d8        .x      LDRB     r0,[r3,#3]
        0x00006acc:    2800        .(      CMP      r0,#0
        0x00006ace:    d003        ..      BEQ      0x6ad8 ; _51011_unblockChv + 24
        0x00006ad0:    2802        .(      CMP      r0,#2
        0x00006ad2:    d103        ..      BNE      0x6adc ; _51011_unblockChv + 28
        0x00006ad4:    2081        .       MOVS     r0,#0x81
        0x00006ad6:    e00a        ..      B        0x6aee ; _51011_unblockChv + 46
        0x00006ad8:    2001        .       MOVS     r0,#1
        0x00006ada:    e008        ..      B        0x6aee ; _51011_unblockChv + 46
;;;23     
;;;24     		/*Update mapped key reference of CHV2*/
;;;25     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_2;
;;;26     	}
;;;27     	else if (umbChv1 == P2_BYTE) { // if its CHV1
;;;28     		
;;;29     		/*CHV1 key reference*/
;;;30     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_1;
;;;31     	}
;;;32     	else if ((PIN_SIM_ADM_1 <= P2_BYTE) && (PIN_SIM_ADM_11 >= P2_BYTE)) { // if its ADM 04-0E
        0x00006adc:    1f01        ..      SUBS     r1,r0,#4
        0x00006ade:    b2c9        ..      UXTB     r1,r1
        0x00006ae0:    290a        .)      CMP      r1,#0xa
        0x00006ae2:    d813        ..      BHI      0x6b0c ; _51011_unblockChv + 76
;;;33     
;;;34     		/*Get UICC ADM key reference*/
;;;35     		if(P2_BYTE < PIN_SIM_ADM_6) // P2 is less than ADM6 i.e. '9'
        0x00006ae4:    2808        .(      CMP      r0,#8
        0x00006ae6:    d801        ..      BHI      0x6aec ; _51011_unblockChv + 44
;;;36     		{
;;;37     			// if ADM is in range 04-08
;;;38     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_1 + PIN_ADM_1;
        0x00006ae8:    1d80        ..      ADDS     r0,r0,#6
        0x00006aea:    e000        ..      B        0x6aee ; _51011_unblockChv + 46
;;;39     		}
;;;40     		else {
;;;41     			// if ADM is in range 09-0E
;;;42     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_6 + PIN_ADM_6;
        0x00006aec:    387f        .8      SUBS     r0,r0,#0x7f
;;;43     		}
;;;44     	}
;;;45     	else { //invalid P2
;;;46     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	if (umbLc != P3_BYTE) { // Check if incorrect P3 is provided
        0x00006aee:    7919        .y      LDRB     r1,[r3,#4]
        0x00006af0:    2910        .)      CMP      r1,#0x10
        0x00006af2:    d10f        ..      BNE      0x6b14 ; _51011_unblockChv + 84
;;;52     
;;;53     		DBG_ERR("[51_011] _51011_validatePinCommand: Wrong P3, Correct value %1 \n", umbLc);
;;;54     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;55     		THROW2(EXCEP_WRONG_P3, umbLc);
;;;56     	}
;;;57     
;;;58     
;;;59     	DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() returns %1\n", umbKeyRef);
;;;60     	/* Mapped Key reference to presented CHV*/
;;;61     	return umbKeyRef;
;;;62     }
;;;63     /*
;;;64     * It implements the Verify CHV command as per 51.011
;;;65     */
;;;66     void _51011_verifyChv(void) {
;;;67     
;;;68     	uMonoByte		umbKeyRef;
;;;69     	tPinStatusCode	pscReturned;
;;;70     
;;;71     	DBG_FUNC_ENTRY(">>[51_011] _51011_verifyChv() \n");
;;;72     
;;;73     	/*Do P1-P2 validation*/
;;;74     	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;75     
;;;76     	DBG_FUNC("[51_011] _51011_verifyChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;77     
;;;78     	/*Verify Pin function, Pin must be enabled to verify*/
;;;79     	pscReturned = _7816_4_verifyPin(umbKeyRef, PIN_ENABLED,  COMMAND_DATA, PIN_OP_VERIFY);
;;;80     
;;;81     	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;82     
;;;83     		/*In case of 51.011 remainig attempts are not need to be sent, So updating the variable*/
;;;84     		pscReturned = PIN_SC_NOT_VERIFIED;
;;;85     	}
;;;86     
;;;87     	DBG_FUNC_EXIT("<<[51_011] _51011_verifyChv() \n");
;;;88     
;;;89     	/*it throws status error in case of error status code*/
;;;90     	_102221_throwStatusResponseAsPer(pscReturned);
;;;91     }
;;;92     
;;;93     /*
;;;94     * It implements the Change CHV command as per 51.011
;;;95     */
;;;96     void _51011_changeChv(void) {
;;;97     
;;;98     	tPinStatusCode pscReturned;
;;;99     	uMonoByte umbKeyRef;
;;;100    
;;;101    	DBG_FUNC_ENTRY(">>[51_011] _51011_changeChv() \n");
;;;102    
;;;103    	/*Do P1-P2 and validation: First argument is valid CHV1 and second argument two pins are mandatory in Change command*/
;;;104    	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;105    
;;;106    	DBG_FUNC("[51_011] _51011_changeChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;107    
;;;108    	/*Call the function to change PIN*/
;;;109    	pscReturned = _7816_4_changeUnblockPin(umbKeyRef, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;110    
;;;111    	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;112    
;;;113    		if (PIN_SC_NOT_VERIFIED == pscReturned) { // No attempts left
;;;114    			//so pin is blocked now
;;;115    			pscReturned = PIN_SC_BLOCKED;
;;;116    		}
;;;117    		else { // for non-zero attempts
;;;118    			/*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;119    			pscReturned = PIN_SC_NOT_VERIFIED;
;;;120    		}
;;;121    	}
;;;122    
;;;123    	DBG_FUNC_EXIT("<<[51_011] _51011_changeChv() \n");
;;;124    
;;;125    	/*it throws status error in case of error status code*/
;;;126    	_102221_throwStatusResponseAsPer(pscReturned);
;;;127    }
;;;128    
;;;129    /*
;;;130    * It implements the Unblock CHV command as per 51.011
;;;131    */
;;;132    void _51011_unblockChv(void) {
;;;133    
;;;134    	tPinStatusCode pscReturned;
;;;135    	uMonoByte umbKeyRef;
;;;136    
;;;137    	DBG_FUNC_ENTRY(">>[51_011] _51011_unblockChv() \n");
;;;138    
;;;139    	/*Do P1-P2 and validation: First argument is valid CHV1 and second argument two pins are mandatory in Change command*/
;;;140    	umbKeyRef = _51011_validatePinCommand(PIN_UNBLOCK_CHV_1, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;141    
;;;142    	DBG_FUNC("[51_011] _51011_unblockChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;143    
;;;144    	/*Call the function to Unblock PIN*/
;;;145    	pscReturned = _7816_4_changeUnblockPin(umbKeyRef, PIN_OP_UNBLOCK, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
        0x00006af4:    b2c0        ..      UXTB     r0,r0
        0x00006af6:    1d5a        Z.      ADDS     r2,r3,#5
        0x00006af8:    330d        .3      ADDS     r3,r3,#0xd
        0x00006afa:    2103        .!      MOVS     r1,#3
        0x00006afc:    f7fdfd87    ....    BL       _7816_4_changeUnblockPin ; 0x460e
;;;146    
;;;147    	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
        0x00006b00:    2804        .(      CMP      r0,#4
        0x00006b02:    d300        ..      BCC      0x6b06 ; _51011_unblockChv + 70
        0x00006b04:    2004        .       MOVS     r0,#4
;;;148    
;;;149    		/*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;150    		pscReturned = PIN_SC_NOT_VERIFIED;
;;;151    	}
;;;152    
;;;153    	DBG_FUNC_EXIT("<<[51_011] _51011_unblockChv() \n");
;;;154    
;;;155    	/*it throws status error in case of error status code*/
;;;156    	_102221_throwStatusResponseAsPer(pscReturned);
        0x00006b06:    f7fbfd07    ....    BL       _102221_throwStatusResponseAsPer ; 0x2518
;;;157    }
        0x00006b0a:    bd80        ..      POP      {r7,pc}
        0x00006b0c:    4805        .H      LDR      r0,[pc,#20] ; [0x6b24] = 0x20000648
        0x00006b0e:    2106        .!      MOVS     r1,#6
        0x00006b10:    f000ff89    ....    BL       longjmp ; 0x7a26
        0x00006b14:    2010        .       MOVS     r0,#0x10
        0x00006b16:    7118        .q      STRB     r0,[r3,#4]
        0x00006b18:    4802        .H      LDR      r0,[pc,#8] ; [0x6b24] = 0x20000648
        0x00006b1a:    2107        .!      MOVS     r1,#7
        0x00006b1c:    f000ff83    ....    BL       longjmp ; 0x7a26
    $d.5
    __arm_cp.2_0
        0x00006b20:    2000023e    >..     DCD    536871486
    __arm_cp.2_1
        0x00006b24:    20000648    H..     DCD    536872520
    $t.6
    _51011_enableChv
;;;158    
;;;159    /*
;;;160    * It implements the Enable CHV command as per 51.011
;;;161    */
;;;162    void _51011_enableChv(void) {
        0x00006b28:    b580        ..      PUSH     {r7,lr}
        0x00006b2a:    4813        .H      LDR      r0,[pc,#76] ; [0x6b78] = 0x2000023e
        0x00006b2c:    78c1        .x      LDRB     r1,[r0,#3]
        0x00006b2e:    2901        .)      CMP      r1,#1
        0x00006b30:    d118        ..      BNE      0x6b64 ; _51011_enableChv + 60
;;; BusinessComponent/Telecom/51_011/source\sim_PinManagementCommands.c (16)
        0x00006b32:    7881        .x      LDRB     r1,[r0,#2]
        0x00006b34:    2900        .)      CMP      r1,#0
        0x00006b36:    d115        ..      BNE      0x6b64 ; _51011_enableChv + 60
;;;17     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P1 \n");
;;;18     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;19     		THROW(EXCEP_WRONG_P1_P2);
;;;20     	}
;;;21     
;;;22     	if (PIN_CHV_2 == P2_BYTE) { // if its CHV2
;;;23     
;;;24     		/*Update mapped key reference of CHV2*/
;;;25     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_2;
;;;26     	}
;;;27     	else if (umbChv1 == P2_BYTE) { // if its CHV1
;;;28     		
;;;29     		/*CHV1 key reference*/
;;;30     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_1;
;;;31     	}
;;;32     	else if ((PIN_SIM_ADM_1 <= P2_BYTE) && (PIN_SIM_ADM_11 >= P2_BYTE)) { // if its ADM 04-0E
;;;33     
;;;34     		/*Get UICC ADM key reference*/
;;;35     		if(P2_BYTE < PIN_SIM_ADM_6) // P2 is less than ADM6 i.e. '9'
;;;36     		{
;;;37     			// if ADM is in range 04-08
;;;38     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_1 + PIN_ADM_1;
;;;39     		}
;;;40     		else {
;;;41     			// if ADM is in range 09-0E
;;;42     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_6 + PIN_ADM_6;
;;;43     		}
;;;44     	}
;;;45     	else { //invalid P2
;;;46     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	if (umbLc != P3_BYTE) { // Check if incorrect P3 is provided
        0x00006b38:    7901        .y      LDRB     r1,[r0,#4]
        0x00006b3a:    2908        .)      CMP      r1,#8
        0x00006b3c:    d116        ..      BNE      0x6b6c ; _51011_enableChv + 68
;;;52     
;;;53     		DBG_ERR("[51_011] _51011_validatePinCommand: Wrong P3, Correct value %1 \n", umbLc);
;;;54     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;55     		THROW2(EXCEP_WRONG_P3, umbLc);
;;;56     	}
;;;57     
;;;58     
;;;59     	DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() returns %1\n", umbKeyRef);
;;;60     	/* Mapped Key reference to presented CHV*/
;;;61     	return umbKeyRef;
;;;62     }
;;;63     /*
;;;64     * It implements the Verify CHV command as per 51.011
;;;65     */
;;;66     void _51011_verifyChv(void) {
;;;67     
;;;68     	uMonoByte		umbKeyRef;
;;;69     	tPinStatusCode	pscReturned;
;;;70     
;;;71     	DBG_FUNC_ENTRY(">>[51_011] _51011_verifyChv() \n");
;;;72     
;;;73     	/*Do P1-P2 validation*/
;;;74     	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;75     
;;;76     	DBG_FUNC("[51_011] _51011_verifyChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;77     
;;;78     	/*Verify Pin function, Pin must be enabled to verify*/
;;;79     	pscReturned = _7816_4_verifyPin(umbKeyRef, PIN_ENABLED,  COMMAND_DATA, PIN_OP_VERIFY);
;;;80     
;;;81     	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;82     
;;;83     		/*In case of 51.011 remainig attempts are not need to be sent, So updating the variable*/
;;;84     		pscReturned = PIN_SC_NOT_VERIFIED;
;;;85     	}
;;;86     
;;;87     	DBG_FUNC_EXIT("<<[51_011] _51011_verifyChv() \n");
;;;88     
;;;89     	/*it throws status error in case of error status code*/
;;;90     	_102221_throwStatusResponseAsPer(pscReturned);
;;;91     }
;;;92     
;;;93     /*
;;;94     * It implements the Change CHV command as per 51.011
;;;95     */
;;;96     void _51011_changeChv(void) {
;;;97     
;;;98     	tPinStatusCode pscReturned;
;;;99     	uMonoByte umbKeyRef;
;;;100    
;;;101    	DBG_FUNC_ENTRY(">>[51_011] _51011_changeChv() \n");
;;;102    
;;;103    	/*Do P1-P2 and validation: First argument is valid CHV1 and second argument two pins are mandatory in Change command*/
;;;104    	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;105    
;;;106    	DBG_FUNC("[51_011] _51011_changeChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;107    
;;;108    	/*Call the function to change PIN*/
;;;109    	pscReturned = _7816_4_changeUnblockPin(umbKeyRef, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;110    
;;;111    	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;112    
;;;113    		if (PIN_SC_NOT_VERIFIED == pscReturned) { // No attempts left
;;;114    			//so pin is blocked now
;;;115    			pscReturned = PIN_SC_BLOCKED;
;;;116    		}
;;;117    		else { // for non-zero attempts
;;;118    			/*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;119    			pscReturned = PIN_SC_NOT_VERIFIED;
;;;120    		}
;;;121    	}
;;;122    
;;;123    	DBG_FUNC_EXIT("<<[51_011] _51011_changeChv() \n");
;;;124    
;;;125    	/*it throws status error in case of error status code*/
;;;126    	_102221_throwStatusResponseAsPer(pscReturned);
;;;127    }
;;;128    
;;;129    /*
;;;130    * It implements the Unblock CHV command as per 51.011
;;;131    */
;;;132    void _51011_unblockChv(void) {
;;;133    
;;;134    	tPinStatusCode pscReturned;
;;;135    	uMonoByte umbKeyRef;
;;;136    
;;;137    	DBG_FUNC_ENTRY(">>[51_011] _51011_unblockChv() \n");
;;;138    
;;;139    	/*Do P1-P2 and validation: First argument is valid CHV1 and second argument two pins are mandatory in Change command*/
;;;140    	umbKeyRef = _51011_validatePinCommand(PIN_UNBLOCK_CHV_1, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;141    
;;;142    	DBG_FUNC("[51_011] _51011_unblockChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;143    
;;;144    	/*Call the function to Unblock PIN*/
;;;145    	pscReturned = _7816_4_changeUnblockPin(umbKeyRef, PIN_OP_UNBLOCK, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;146    
;;;147    	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;148    
;;;149    		/*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;150    		pscReturned = PIN_SC_NOT_VERIFIED;
;;;151    	}
;;;152    
;;;153    	DBG_FUNC_EXIT("<<[51_011] _51011_unblockChv() \n");
;;;154    
;;;155    	/*it throws status error in case of error status code*/
;;;156    	_102221_throwStatusResponseAsPer(pscReturned);
;;;157    }
;;;158    
;;;159    /*
;;;160    * It implements the Enable CHV command as per 51.011
;;;161    */
;;;162    void _51011_enableChv(void) {
;;;163    
;;;164    	uMonoByte		umbKeyRef;
;;;165    	tPinStatusCode	pscReturned;
;;;166    
;;;167    	DBG_FUNC_ENTRY(">>[51_011] _51011_enableChv() \n");
;;;168    
;;;169    	if (PIN_CHV_1 != P2_BYTE) { //Check if p2 conatins invalid key reference
;;;170    
;;;171    		DBG_ERR("[51_011] _51011_enableChv: Invalid P1 - P2 \n");
;;;172    		DBG_FUNC_EXIT("<<[51_011] _51011_enableChv() \n");
;;;173    		THROW(EXCEP_WRONG_P1_P2);
;;;174    	}
;;;175    	/*P1 and P3 validation, and get Mapped key reference*/
;;;176    	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;177    
;;;178    	DBG_FUNC("[51_011] _51011_enableChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;179    
;;;180    	/*Call the function to change PIN state*/
;;;181    	pscReturned = _7816_4_changePinState(umbKeyRef, PIN_OP_ENABLE, COMMAND_DATA);
        0x00006b3e:    1d42        B.      ADDS     r2,r0,#5
        0x00006b40:    2001        .       MOVS     r0,#1
        0x00006b42:    4601        .F      MOV      r1,r0
        0x00006b44:    f7fdfde2    ....    BL       _7816_4_changePinState ; 0x470c
;;;182    
;;;183    	if (pscReturned > PIN_SC_BLOCKED) { //check if Pin verification failed
        0x00006b48:    2804        .(      CMP      r0,#4
        0x00006b4a:    d003        ..      BEQ      0x6b54 ; _51011_enableChv + 44
        0x00006b4c:    2104        .!      MOVS     r1,#4
        0x00006b4e:    2803        .(      CMP      r0,#3
        0x00006b50:    d804        ..      BHI      0x6b5c ; _51011_enableChv + 52
        0x00006b52:    e002        ..      B        0x6b5a ; _51011_enableChv + 50
        0x00006b54:    2103        .!      MOVS     r1,#3
        0x00006b56:    2803        .(      CMP      r0,#3
        0x00006b58:    d800        ..      BHI      0x6b5c ; _51011_enableChv + 52
        0x00006b5a:    4601        .F      MOV      r1,r0
;;;184    
;;;185    		if (PIN_SC_NOT_VERIFIED == pscReturned) {// no attempts left
;;;186    			//so pin is blocked now
;;;187    			pscReturned = PIN_SC_BLOCKED;
;;;188    		}
;;;189    		else {// for non-zero attempts
;;;190    
;;;191    			  /*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;192    			pscReturned = PIN_SC_NOT_VERIFIED;
;;;193    		}
;;;194    	}
;;;195    
;;;196    	DBG_FUNC_EXIT("<<[51_011] _51011_enableChv() \n");
;;;197    
;;;198    	/*it throws status error in case of error status code*/
;;;199    	_102221_throwStatusResponseAsPer(pscReturned);
        0x00006b5c:    4608        .F      MOV      r0,r1
        0x00006b5e:    f7fbfcdb    ....    BL       _102221_throwStatusResponseAsPer ; 0x2518
;;;200    
;;;201    }
        0x00006b62:    bd80        ..      POP      {r7,pc}
        0x00006b64:    4805        .H      LDR      r0,[pc,#20] ; [0x6b7c] = 0x20000648
        0x00006b66:    2106        .!      MOVS     r1,#6
        0x00006b68:    f000ff5d    ..].    BL       longjmp ; 0x7a26
        0x00006b6c:    2108        .!      MOVS     r1,#8
        0x00006b6e:    7101        .q      STRB     r1,[r0,#4]
        0x00006b70:    4802        .H      LDR      r0,[pc,#8] ; [0x6b7c] = 0x20000648
        0x00006b72:    2107        .!      MOVS     r1,#7
        0x00006b74:    f000ff57    ..W.    BL       longjmp ; 0x7a26
    $d.7
    __arm_cp.3_0
        0x00006b78:    2000023e    >..     DCD    536871486
    __arm_cp.3_1
        0x00006b7c:    20000648    H..     DCD    536872520
    $t.8
    _51011_disableChv
;;;202    
;;;203    /*
;;;204    * It implements the Disable CHV command as per 51.011
;;;205    */
;;;206    void _51011_disableChv(void) {
        0x00006b80:    b580        ..      PUSH     {r7,lr}
        0x00006b82:    4813        .H      LDR      r0,[pc,#76] ; [0x6bd0] = 0x2000023e
        0x00006b84:    78c1        .x      LDRB     r1,[r0,#3]
        0x00006b86:    2901        .)      CMP      r1,#1
        0x00006b88:    d118        ..      BNE      0x6bbc ; _51011_disableChv + 60
;;; BusinessComponent/Telecom/51_011/source\sim_PinManagementCommands.c (16)
        0x00006b8a:    7881        .x      LDRB     r1,[r0,#2]
        0x00006b8c:    2900        .)      CMP      r1,#0
        0x00006b8e:    d115        ..      BNE      0x6bbc ; _51011_disableChv + 60
;;;17     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P1 \n");
;;;18     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;19     		THROW(EXCEP_WRONG_P1_P2);
;;;20     	}
;;;21     
;;;22     	if (PIN_CHV_2 == P2_BYTE) { // if its CHV2
;;;23     
;;;24     		/*Update mapped key reference of CHV2*/
;;;25     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_2;
;;;26     	}
;;;27     	else if (umbChv1 == P2_BYTE) { // if its CHV1
;;;28     		
;;;29     		/*CHV1 key reference*/
;;;30     		umbKeyRef = MAPPED_KEY_REF_TO_CHV_1;
;;;31     	}
;;;32     	else if ((PIN_SIM_ADM_1 <= P2_BYTE) && (PIN_SIM_ADM_11 >= P2_BYTE)) { // if its ADM 04-0E
;;;33     
;;;34     		/*Get UICC ADM key reference*/
;;;35     		if(P2_BYTE < PIN_SIM_ADM_6) // P2 is less than ADM6 i.e. '9'
;;;36     		{
;;;37     			// if ADM is in range 04-08
;;;38     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_1 + PIN_ADM_1;
;;;39     		}
;;;40     		else {
;;;41     			// if ADM is in range 09-0E
;;;42     			umbKeyRef = P2_BYTE - PIN_SIM_ADM_6 + PIN_ADM_6;
;;;43     		}
;;;44     	}
;;;45     	else { //invalid P2
;;;46     		DBG_ERR("[51_011] _51011_validatePinCommand: Invalid P2 \n");
;;;47     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;48     		THROW(EXCEP_WRONG_P1_P2);
;;;49     	}
;;;50     
;;;51     	if (umbLc != P3_BYTE) { // Check if incorrect P3 is provided
        0x00006b90:    7901        .y      LDRB     r1,[r0,#4]
        0x00006b92:    2908        .)      CMP      r1,#8
        0x00006b94:    d116        ..      BNE      0x6bc4 ; _51011_disableChv + 68
;;;52     
;;;53     		DBG_ERR("[51_011] _51011_validatePinCommand: Wrong P3, Correct value %1 \n", umbLc);
;;;54     		DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() \n");
;;;55     		THROW2(EXCEP_WRONG_P3, umbLc);
;;;56     	}
;;;57     
;;;58     
;;;59     	DBG_FUNC_EXIT("<<[51_011] _51011_validatePinCommand() returns %1\n", umbKeyRef);
;;;60     	/* Mapped Key reference to presented CHV*/
;;;61     	return umbKeyRef;
;;;62     }
;;;63     /*
;;;64     * It implements the Verify CHV command as per 51.011
;;;65     */
;;;66     void _51011_verifyChv(void) {
;;;67     
;;;68     	uMonoByte		umbKeyRef;
;;;69     	tPinStatusCode	pscReturned;
;;;70     
;;;71     	DBG_FUNC_ENTRY(">>[51_011] _51011_verifyChv() \n");
;;;72     
;;;73     	/*Do P1-P2 validation*/
;;;74     	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;75     
;;;76     	DBG_FUNC("[51_011] _51011_verifyChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;77     
;;;78     	/*Verify Pin function, Pin must be enabled to verify*/
;;;79     	pscReturned = _7816_4_verifyPin(umbKeyRef, PIN_ENABLED,  COMMAND_DATA, PIN_OP_VERIFY);
;;;80     
;;;81     	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;82     
;;;83     		/*In case of 51.011 remainig attempts are not need to be sent, So updating the variable*/
;;;84     		pscReturned = PIN_SC_NOT_VERIFIED;
;;;85     	}
;;;86     
;;;87     	DBG_FUNC_EXIT("<<[51_011] _51011_verifyChv() \n");
;;;88     
;;;89     	/*it throws status error in case of error status code*/
;;;90     	_102221_throwStatusResponseAsPer(pscReturned);
;;;91     }
;;;92     
;;;93     /*
;;;94     * It implements the Change CHV command as per 51.011
;;;95     */
;;;96     void _51011_changeChv(void) {
;;;97     
;;;98     	tPinStatusCode pscReturned;
;;;99     	uMonoByte umbKeyRef;
;;;100    
;;;101    	DBG_FUNC_ENTRY(">>[51_011] _51011_changeChv() \n");
;;;102    
;;;103    	/*Do P1-P2 and validation: First argument is valid CHV1 and second argument two pins are mandatory in Change command*/
;;;104    	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;105    
;;;106    	DBG_FUNC("[51_011] _51011_changeChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;107    
;;;108    	/*Call the function to change PIN*/
;;;109    	pscReturned = _7816_4_changeUnblockPin(umbKeyRef, PIN_OP_CHANGE, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;110    
;;;111    	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;112    
;;;113    		if (PIN_SC_NOT_VERIFIED == pscReturned) { // No attempts left
;;;114    			//so pin is blocked now
;;;115    			pscReturned = PIN_SC_BLOCKED;
;;;116    		}
;;;117    		else { // for non-zero attempts
;;;118    			/*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;119    			pscReturned = PIN_SC_NOT_VERIFIED;
;;;120    		}
;;;121    	}
;;;122    
;;;123    	DBG_FUNC_EXIT("<<[51_011] _51011_changeChv() \n");
;;;124    
;;;125    	/*it throws status error in case of error status code*/
;;;126    	_102221_throwStatusResponseAsPer(pscReturned);
;;;127    }
;;;128    
;;;129    /*
;;;130    * It implements the Unblock CHV command as per 51.011
;;;131    */
;;;132    void _51011_unblockChv(void) {
;;;133    
;;;134    	tPinStatusCode pscReturned;
;;;135    	uMonoByte umbKeyRef;
;;;136    
;;;137    	DBG_FUNC_ENTRY(">>[51_011] _51011_unblockChv() \n");
;;;138    
;;;139    	/*Do P1-P2 and validation: First argument is valid CHV1 and second argument two pins are mandatory in Change command*/
;;;140    	umbKeyRef = _51011_validatePinCommand(PIN_UNBLOCK_CHV_1, LENGTH_VALID_FOR_CHANGE_UNBLOCK_PIN);
;;;141    
;;;142    	DBG_FUNC("[51_011] _51011_unblockChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;143    
;;;144    	/*Call the function to Unblock PIN*/
;;;145    	pscReturned = _7816_4_changeUnblockPin(umbKeyRef, PIN_OP_UNBLOCK, COMMAND_DATA, COMMAND_DATA + LENGTH_PIN_VALUE);
;;;146    
;;;147    	if (pscReturned > PIN_SC_BLOCKED) { //check if verification failed
;;;148    
;;;149    		/*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;150    		pscReturned = PIN_SC_NOT_VERIFIED;
;;;151    	}
;;;152    
;;;153    	DBG_FUNC_EXIT("<<[51_011] _51011_unblockChv() \n");
;;;154    
;;;155    	/*it throws status error in case of error status code*/
;;;156    	_102221_throwStatusResponseAsPer(pscReturned);
;;;157    }
;;;158    
;;;159    /*
;;;160    * It implements the Enable CHV command as per 51.011
;;;161    */
;;;162    void _51011_enableChv(void) {
;;;163    
;;;164    	uMonoByte		umbKeyRef;
;;;165    	tPinStatusCode	pscReturned;
;;;166    
;;;167    	DBG_FUNC_ENTRY(">>[51_011] _51011_enableChv() \n");
;;;168    
;;;169    	if (PIN_CHV_1 != P2_BYTE) { //Check if p2 conatins invalid key reference
;;;170    
;;;171    		DBG_ERR("[51_011] _51011_enableChv: Invalid P1 - P2 \n");
;;;172    		DBG_FUNC_EXIT("<<[51_011] _51011_enableChv() \n");
;;;173    		THROW(EXCEP_WRONG_P1_P2);
;;;174    	}
;;;175    	/*P1 and P3 validation, and get Mapped key reference*/
;;;176    	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;177    
;;;178    	DBG_FUNC("[51_011] _51011_enableChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;179    
;;;180    	/*Call the function to change PIN state*/
;;;181    	pscReturned = _7816_4_changePinState(umbKeyRef, PIN_OP_ENABLE, COMMAND_DATA);
;;;182    
;;;183    	if (pscReturned > PIN_SC_BLOCKED) { //check if Pin verification failed
;;;184    
;;;185    		if (PIN_SC_NOT_VERIFIED == pscReturned) {// no attempts left
;;;186    			//so pin is blocked now
;;;187    			pscReturned = PIN_SC_BLOCKED;
;;;188    		}
;;;189    		else {// for non-zero attempts
;;;190    
;;;191    			  /*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;192    			pscReturned = PIN_SC_NOT_VERIFIED;
;;;193    		}
;;;194    	}
;;;195    
;;;196    	DBG_FUNC_EXIT("<<[51_011] _51011_enableChv() \n");
;;;197    
;;;198    	/*it throws status error in case of error status code*/
;;;199    	_102221_throwStatusResponseAsPer(pscReturned);
;;;200    
;;;201    }
;;;202    
;;;203    /*
;;;204    * It implements the Disable CHV command as per 51.011
;;;205    */
;;;206    void _51011_disableChv(void) {
;;;207    
;;;208    	uMonoByte		umbKeyRef;
;;;209    	tPinStatusCode	pscReturned;
;;;210    	
;;;211    	DBG_FUNC_ENTRY(">>[51_011] _51011_disableChv() \n");
;;;212    
;;;213    	if (PIN_CHV_1 != P2_BYTE) { //Check if p2 conatins invalid key reference
;;;214    
;;;215    		DBG_ERR("[51_011] _51011_disableChv: Invalid P1 - P2 \n");
;;;216    		DBG_FUNC_EXIT("<<[51_011] _51011_disableChv() \n");
;;;217    		THROW(EXCEP_WRONG_P1_P2);
;;;218    	}
;;;219    	/*P1 and P3 validation, and get Mapped key reference*/
;;;220    	umbKeyRef = _51011_validatePinCommand(PIN_CHV_1, LENGTH_PIN_VALUE);
;;;221    
;;;222    	DBG_FUNC("[51_011] _51011_disableChv: P1-P2 validation succeeded, Mapped key reference is %1 \n", umbKeyRef);
;;;223    
;;;224    	/*Call the function to change PIN state*/
;;;225    	pscReturned = _7816_4_changePinState(umbKeyRef, PIN_OP_DISABLE, COMMAND_DATA);
        0x00006b96:    1d42        B.      ADDS     r2,r0,#5
        0x00006b98:    2001        .       MOVS     r0,#1
        0x00006b9a:    2102        .!      MOVS     r1,#2
        0x00006b9c:    f7fdfdb6    ....    BL       _7816_4_changePinState ; 0x470c
;;;226    
;;;227    	if (pscReturned > PIN_SC_BLOCKED) { //check if Pin verification failed
        0x00006ba0:    2804        .(      CMP      r0,#4
        0x00006ba2:    d003        ..      BEQ      0x6bac ; _51011_disableChv + 44
        0x00006ba4:    2104        .!      MOVS     r1,#4
        0x00006ba6:    2803        .(      CMP      r0,#3
        0x00006ba8:    d804        ..      BHI      0x6bb4 ; _51011_disableChv + 52
        0x00006baa:    e002        ..      B        0x6bb2 ; _51011_disableChv + 50
        0x00006bac:    2103        .!      MOVS     r1,#3
        0x00006bae:    2803        .(      CMP      r0,#3
        0x00006bb0:    d800        ..      BHI      0x6bb4 ; _51011_disableChv + 52
        0x00006bb2:    4601        .F      MOV      r1,r0
;;;228    
;;;229    		if (PIN_SC_NOT_VERIFIED == pscReturned) {// no attempts left
;;;230    			//so pin is blocked now
;;;231    			pscReturned = PIN_SC_BLOCKED;
;;;232    		}
;;;233    		else {// for non-zero attempts
;;;234    
;;;235    			  /*In case of 51.011 remainig attempts are not need to be sent, It always throws PIN_SC_NOT_VERIFIED*/
;;;236    			pscReturned = PIN_SC_NOT_VERIFIED;
;;;237    		}
;;;238    	}
;;;239    
;;;240    	DBG_FUNC_EXIT("<<[51_011] _51011_disableChv() \n");
;;;241    
;;;242    	/*it throws status error in case of error status code*/
;;;243    	_102221_throwStatusResponseAsPer(pscReturned);
        0x00006bb4:    4608        .F      MOV      r0,r1
        0x00006bb6:    f7fbfcaf    ....    BL       _102221_throwStatusResponseAsPer ; 0x2518
;;;244    
;;;245    }
        0x00006bba:    bd80        ..      POP      {r7,pc}
        0x00006bbc:    4805        .H      LDR      r0,[pc,#20] ; [0x6bd4] = 0x20000648
        0x00006bbe:    2106        .!      MOVS     r1,#6
        0x00006bc0:    f000ff31    ..1.    BL       longjmp ; 0x7a26
        0x00006bc4:    2108        .!      MOVS     r1,#8
        0x00006bc6:    7101        .q      STRB     r1,[r0,#4]
        0x00006bc8:    4802        .H      LDR      r0,[pc,#8] ; [0x6bd4] = 0x20000648
        0x00006bca:    2107        .!      MOVS     r1,#7
        0x00006bcc:    f000ff2b    ..+.    BL       longjmp ; 0x7a26
    $d.9
    __arm_cp.4_0
        0x00006bd0:    2000023e    >..     DCD    536871486
    __arm_cp.4_1
        0x00006bd4:    20000648    H..     DCD    536872520
    $t.0
    at_isTxnActive
;;; HardwareLayers/Abstraction/AntiTearing\AntiTearing.c
;;;7      boolean at_isTxnActive(void) {
        0x00006bd8:    2009        .       MOVS     r0,#9
        0x00006bda:    0300        ..      LSLS     r0,r0,#12
        0x00006bdc:    7800        .x      LDRB     r0,[r0,#0]
        0x00006bde:    28ff        .(      CMP      r0,#0xff
        0x00006be0:    d101        ..      BNE      0x6be6 ; at_isTxnActive + 14
;;; HardwareLayers/Abstraction/AntiTearing\AntiTearing.c
        0x00006be2:    2000        .       MOVS     r0,#0
        0x00006be4:    4770        pG      BX       lr
        0x00006be6:    20ff        .       MOVS     r0,#0xff
;;;1      #include "AntiTearing.h"
;;;2      
;;;3      #ifdef FEAT_EXHAUSTEARING
;;;4      /*
;;;5      * Check if Transaction still in progress
;;;6      */
;;;7      boolean at_isTxnActive(void) {
;;;8      	
;;;9      	uMonoByte umbActivePt;
;;;10     
;;;11     	/*read Txn state*/
;;;12     	umbActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;13     
;;;14     	return ((umbActivePt == AT_NO_ACTIVE_TXN) ? FALSE: TRUE);
        0x00006be8:    4770        pG      BX       lr
    at_beginTxn
        0x00006bea:    b580        ..      PUSH     {r7,lr}
        0x00006bec:    b082        ..      SUB      sp,sp,#8
        0x00006bee:    2009        .       MOVS     r0,#9
        0x00006bf0:    0300        ..      LSLS     r0,r0,#12
        0x00006bf2:    7801        .x      LDRB     r1,[r0,#0]
        0x00006bf4:    29ff        .)      CMP      r1,#0xff
        0x00006bf6:    d002        ..      BEQ      0x6bfe ; at_beginTxn + 20
;;; HardwareLayers/Abstraction/AntiTearing\AntiTearing.c
        0x00006bf8:    2000        .       MOVS     r0,#0
        0x00006bfa:    b002        ..      ADD      sp,sp,#8
        0x00006bfc:    bd80        ..      POP      {r7,pc}
        0x00006bfe:    2149        I!      MOVS     r1,#0x49
        0x00006c00:    0249        I.      LSLS     r1,r1,#9
        0x00006c02:    780a        .x      LDRB     r2,[r1,#0]
        0x00006c04:    a901        ..      ADD      r1,sp,#4
        0x00006c06:    700a        .p      STRB     r2,[r1,#0]
        0x00006c08:    2201        ."      MOVS     r2,#1
        0x00006c0a:    f000fb87    ....    BL       baseWriteNBytesDirect ; 0x731c
        0x00006c0e:    20ff        .       MOVS     r0,#0xff
;;;1      #include "AntiTearing.h"
;;;2      
;;;3      #ifdef FEAT_EXHAUSTEARING
;;;4      /*
;;;5      * Check if Transaction still in progress
;;;6      */
;;;7      boolean at_isTxnActive(void) {
;;;8      	
;;;9      	uMonoByte umbActivePt;
;;;10     
;;;11     	/*read Txn state*/
;;;12     	umbActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;13     
;;;14     	return ((umbActivePt == AT_NO_ACTIVE_TXN) ? FALSE: TRUE);
;;;15     }
;;;16     
;;;17     /*
;;;18     * Begin Transaction
;;;19     * 
;;;20     * Precondition: Txn must not be active before
;;;21     */
;;;22     boolean at_beginTxn(void) {
;;;23     	
;;;24     	uMonoByte umbActivePt;
;;;25     
;;;26     	/*If transaction is already active*/
;;;27     	if (TRUE == at_isTxnActive()) {
;;;28     
;;;29     		/*no need backup active PT*/
;;;30     		return FALSE;
;;;31     	}
;;;32     	
;;;33     	/*read Active Page table number*/
;;;34     	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;35     
;;;36     	/*update active page in txn state, to indicate that txn is in progress and store working page table as well*/
;;;37     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
;;;38     
;;;39     	return TRUE;
;;;40     
;;;41     }
        0x00006c10:    b002        ..      ADD      sp,sp,#8
        0x00006c12:    bd80        ..      POP      {r7,pc}
    at_commitTxn
;;;42     
;;;43     /*
;;;44     * Commit Transaction
;;;45     */
;;;46     void at_commitTxn(void) {
        0x00006c14:    b580        ..      PUSH     {r7,lr}
        0x00006c16:    b082        ..      SUB      sp,sp,#8
        0x00006c18:    a901        ..      ADD      r1,sp,#4
        0x00006c1a:    20ff        .       MOVS     r0,#0xff
        0x00006c1c:    7008        .p      STRB     r0,[r1,#0]
;;; HardwareLayers/Abstraction/AntiTearing\AntiTearing.c
        0x00006c1e:    2009        .       MOVS     r0,#9
        0x00006c20:    0300        ..      LSLS     r0,r0,#12
        0x00006c22:    2201        ."      MOVS     r2,#1
;;;1      #include "AntiTearing.h"
;;;2      
;;;3      #ifdef FEAT_EXHAUSTEARING
;;;4      /*
;;;5      * Check if Transaction still in progress
;;;6      */
;;;7      boolean at_isTxnActive(void) {
;;;8      	
;;;9      	uMonoByte umbActivePt;
;;;10     
;;;11     	/*read Txn state*/
;;;12     	umbActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;13     
;;;14     	return ((umbActivePt == AT_NO_ACTIVE_TXN) ? FALSE: TRUE);
;;;15     }
;;;16     
;;;17     /*
;;;18     * Begin Transaction
;;;19     * 
;;;20     * Precondition: Txn must not be active before
;;;21     */
;;;22     boolean at_beginTxn(void) {
;;;23     	
;;;24     	uMonoByte umbActivePt;
;;;25     
;;;26     	/*If transaction is already active*/
;;;27     	if (TRUE == at_isTxnActive()) {
;;;28     
;;;29     		/*no need backup active PT*/
;;;30     		return FALSE;
;;;31     	}
;;;32     	
;;;33     	/*read Active Page table number*/
;;;34     	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;35     
;;;36     	/*update active page in txn state, to indicate that txn is in progress and store working page table as well*/
;;;37     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
;;;38     
;;;39     	return TRUE;
;;;40     
;;;41     }
;;;42     
;;;43     /*
;;;44     * Commit Transaction
;;;45     */
;;;46     void at_commitTxn(void) {
;;;47     
;;;48     	uMonoByte umbActivePt = AT_NO_ACTIVE_TXN;
;;;49     
;;;50     	/*Set TXN inactive*/
;;;51     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
        0x00006c24:    f000fb7a    ..z.    BL       baseWriteNBytesDirect ; 0x731c
;;;52     }
        0x00006c28:    b002        ..      ADD      sp,sp,#8
        0x00006c2a:    bd80        ..      POP      {r7,pc}
    at_abortTxn
;;;53     
;;;54     /*
;;;55     * Abort Transaction
;;;56     */
;;;57     void at_abortTxn(void) {
        0x00006c2c:    b570        p.      PUSH     {r4-r6,lr}
        0x00006c2e:    b082        ..      SUB      sp,sp,#8
        0x00006c30:    2009        .       MOVS     r0,#9
        0x00006c32:    0304        ..      LSLS     r4,r0,#12
        0x00006c34:    7820         x      LDRB     r0,[r4,#0]
;;; HardwareLayers/Abstraction/AntiTearing\AntiTearing.c
        0x00006c36:    ad01        ..      ADD      r5,sp,#4
        0x00006c38:    7028        (p      STRB     r0,[r5,#0]
        0x00006c3a:    2049        I       MOVS     r0,#0x49
        0x00006c3c:    0240        @.      LSLS     r0,r0,#9
        0x00006c3e:    2601        .&      MOVS     r6,#1
        0x00006c40:    4629        )F      MOV      r1,r5
        0x00006c42:    4632        2F      MOV      r2,r6
        0x00006c44:    f000fb6a    ..j.    BL       baseWriteNBytesDirect ; 0x731c
        0x00006c48:    20ff        .       MOVS     r0,#0xff
;;;1      #include "AntiTearing.h"
;;;2      
;;;3      #ifdef FEAT_EXHAUSTEARING
;;;4      /*
;;;5      * Check if Transaction still in progress
;;;6      */
;;;7      boolean at_isTxnActive(void) {
;;;8      	
;;;9      	uMonoByte umbActivePt;
;;;10     
;;;11     	/*read Txn state*/
;;;12     	umbActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;13     
;;;14     	return ((umbActivePt == AT_NO_ACTIVE_TXN) ? FALSE: TRUE);
;;;15     }
;;;16     
;;;17     /*
;;;18     * Begin Transaction
;;;19     * 
;;;20     * Precondition: Txn must not be active before
;;;21     */
;;;22     boolean at_beginTxn(void) {
;;;23     	
;;;24     	uMonoByte umbActivePt;
;;;25     
;;;26     	/*If transaction is already active*/
;;;27     	if (TRUE == at_isTxnActive()) {
;;;28     
;;;29     		/*no need backup active PT*/
;;;30     		return FALSE;
;;;31     	}
;;;32     	
;;;33     	/*read Active Page table number*/
;;;34     	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;35     
;;;36     	/*update active page in txn state, to indicate that txn is in progress and store working page table as well*/
;;;37     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
;;;38     
;;;39     	return TRUE;
;;;40     
;;;41     }
;;;42     
;;;43     /*
;;;44     * Commit Transaction
;;;45     */
;;;46     void at_commitTxn(void) {
;;;47     
;;;48     	uMonoByte umbActivePt = AT_NO_ACTIVE_TXN;
;;;49     
;;;50     	/*Set TXN inactive*/
;;;51     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
;;;52     }
;;;53     
;;;54     /*
;;;55     * Abort Transaction
;;;56     */
;;;57     void at_abortTxn(void) {
;;;58     
;;;59     	uMonoByte umbPrevActivePt;
;;;60     
;;;61     	/*Previously stable page table number*/
;;;62     	umbPrevActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;63     
;;;64     	/*Update Previously stable Page table number*/
;;;65     	baseWriteNBytesDirect(ADDRESS_ACTIVE_PAGE, &umbPrevActivePt, 0x01);
;;;66     
;;;67     	umbPrevActivePt = AT_NO_ACTIVE_TXN;
        0x00006c4a:    7028        (p      STRB     r0,[r5,#0]
;;;68     
;;;69     	/*Set TXN inactive*/
;;;70     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbPrevActivePt, 0x01);
        0x00006c4c:    4620         F      MOV      r0,r4
        0x00006c4e:    4629        )F      MOV      r1,r5
        0x00006c50:    4632        2F      MOV      r2,r6
        0x00006c52:    f000fb63    ..c.    BL       baseWriteNBytesDirect ; 0x731c
;;;71     }
        0x00006c56:    b002        ..      ADD      sp,sp,#8
        0x00006c58:    bd70        p.      POP      {r4-r6,pc}
    at_osInit
        0x00006c5a:    b510        ..      PUSH     {r4,lr}
        0x00006c5c:    b082        ..      SUB      sp,sp,#8
        0x00006c5e:    2009        .       MOVS     r0,#9
        0x00006c60:    0304        ..      LSLS     r4,r0,#12
        0x00006c62:    7821        !x      LDRB     r1,[r4,#0]
;;; HardwareLayers/Abstraction/AntiTearing\AntiTearing.c
        0x00006c64:    a801        ..      ADD      r0,sp,#4
        0x00006c66:    7001        .p      STRB     r1,[r0,#0]
        0x00006c68:    2049        I       MOVS     r0,#0x49
        0x00006c6a:    0240        @.      LSLS     r0,r0,#9
        0x00006c6c:    29ff        .)      CMP      r1,#0xff
        0x00006c6e:    d00b        ..      BEQ      0x6c88 ; at_osInit + 46
        0x00006c70:    a901        ..      ADD      r1,sp,#4
        0x00006c72:    2201        ."      MOVS     r2,#1
        0x00006c74:    f000fb52    ..R.    BL       baseWriteNBytesDirect ; 0x731c
        0x00006c78:    22ff        ."      MOVS     r2,#0xff
        0x00006c7a:    a901        ..      ADD      r1,sp,#4
        0x00006c7c:    700a        .p      STRB     r2,[r1,#0]
        0x00006c7e:    2201        ."      MOVS     r2,#1
        0x00006c80:    4620         F      MOV      r0,r4
        0x00006c82:    f000fb4b    ..K.    BL       baseWriteNBytesDirect ; 0x731c
        0x00006c86:    e002        ..      B        0x6c8e ; at_osInit + 52
;;;1      #include "AntiTearing.h"
;;;2      
;;;3      #ifdef FEAT_EXHAUSTEARING
;;;4      /*
;;;5      * Check if Transaction still in progress
;;;6      */
;;;7      boolean at_isTxnActive(void) {
;;;8      	
;;;9      	uMonoByte umbActivePt;
;;;10     
;;;11     	/*read Txn state*/
;;;12     	umbActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;13     
;;;14     	return ((umbActivePt == AT_NO_ACTIVE_TXN) ? FALSE: TRUE);
;;;15     }
;;;16     
;;;17     /*
;;;18     * Begin Transaction
;;;19     * 
;;;20     * Precondition: Txn must not be active before
;;;21     */
;;;22     boolean at_beginTxn(void) {
;;;23     	
;;;24     	uMonoByte umbActivePt;
;;;25     
;;;26     	/*If transaction is already active*/
;;;27     	if (TRUE == at_isTxnActive()) {
;;;28     
;;;29     		/*no need backup active PT*/
;;;30     		return FALSE;
;;;31     	}
;;;32     	
;;;33     	/*read Active Page table number*/
;;;34     	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;35     
;;;36     	/*update active page in txn state, to indicate that txn is in progress and store working page table as well*/
;;;37     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
;;;38     
;;;39     	return TRUE;
;;;40     
;;;41     }
;;;42     
;;;43     /*
;;;44     * Commit Transaction
;;;45     */
;;;46     void at_commitTxn(void) {
;;;47     
;;;48     	uMonoByte umbActivePt = AT_NO_ACTIVE_TXN;
;;;49     
;;;50     	/*Set TXN inactive*/
;;;51     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
;;;52     }
;;;53     
;;;54     /*
;;;55     * Abort Transaction
;;;56     */
;;;57     void at_abortTxn(void) {
;;;58     
;;;59     	uMonoByte umbPrevActivePt;
;;;60     
;;;61     	/*Previously stable page table number*/
;;;62     	umbPrevActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;63     
;;;64     	/*Update Previously stable Page table number*/
;;;65     	baseWriteNBytesDirect(ADDRESS_ACTIVE_PAGE, &umbPrevActivePt, 0x01);
;;;66     
;;;67     	umbPrevActivePt = AT_NO_ACTIVE_TXN;
;;;68     
;;;69     	/*Set TXN inactive*/
;;;70     	baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbPrevActivePt, 0x01);
;;;71     }
;;;72     
;;;73     /*
;;;74     * OS reset or Initialization
;;;75     */
;;;76     void at_osInit(void) {
;;;77     
;;;78     	uMonoByte umbActivePt;
;;;79     
;;;80     	/*Previously stable page table number*/
;;;81     	umbActivePt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;82     
;;;83     	/*check txn state*/
;;;84     	if (AT_NO_ACTIVE_TXN != umbActivePt) {
;;;85     
;;;86     		/*There was an active txn prior to the last Reset*/
;;;87     		
;;;88     		/*Update Previously stable Page table number*/
;;;89     		baseWriteNBytesDirect(ADDRESS_ACTIVE_PAGE, &umbActivePt, 0x01);
;;;90     
;;;91     		umbActivePt = AT_NO_ACTIVE_TXN;
;;;92     
;;;93     		/*Set TXN inactive*/
;;;94     		baseWriteNBytesDirect(ADDRESS_TRANSACTION_STATE, &umbActivePt, 0x01);
;;;95     
;;;96     	}
;;;97     	else if (AT_NO_ACTIVE_PAGE == baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE)) {
        0x00006c88:    7801        .x      LDRB     r1,[r0,#0]
        0x00006c8a:    29ff        .)      CMP      r1,#0xff
        0x00006c8c:    d001        ..      BEQ      0x6c92 ; at_osInit + 56
;;;98     
;;;99     		/*It means this is first time POWER ON in card's life cycle*/
;;;100    		/*Default active Page table is 1*/
;;;101    		umbActivePt = AT_PAGE_TABLE_1;
;;;102    
;;;103    		/*Update first time active Page table number*/
;;;104    		baseWriteNBytesDirect(ADDRESS_ACTIVE_PAGE, &umbActivePt, 0x01);
;;;105    	}
;;;106    }
        0x00006c8e:    b002        ..      ADD      sp,sp,#8
        0x00006c90:    bd10        ..      POP      {r4,pc}
        0x00006c92:    2200        ."      MOVS     r2,#0
        0x00006c94:    4604        .F      MOV      r4,r0
        0x00006c96:    e7f0        ..      B        0x6c7a ; at_osInit + 32
    baseReadOneByte
;;; HardwareLayers/Abstraction/Wrappers\readUpdateNvmWrappers.c
;;;341    uMonoByte baseReadOneByte(uQuadByte uqbAddress){
        0x00006c98:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00006c9a:    2203        ."      MOVS     r2,#3
        0x00006c9c:    0251        Q.      LSLS     r1,r2,#9
        0x00006c9e:    2349        I#      MOVS     r3,#0x49
        0x00006ca0:    025b        [.      LSLS     r3,r3,#9
        0x00006ca2:    781b        .x      LDRB     r3,[r3,#0]
        0x00006ca4:    434b        KC      MULS     r3,r1,r3
        0x00006ca6:    2125        %!      MOVS     r1,#0x25
        0x00006ca8:    0289        ..      LSLS     r1,r1,#10
        0x00006caa:    185b        [.      ADDS     r3,r3,r1
        0x00006cac:    0a41        A.      LSRS     r1,r0,#9
        0x00006cae:    b28c        ..      UXTH     r4,r1
;;; HardwareLayers/Abstraction/Wrappers\readUpdateNvmWrappers.c
        0x00006cb0:    2100        .!      MOVS     r1,#0
        0x00006cb2:    881d        ..      LDRH     r5,[r3,#0]
        0x00006cb4:    42a5        .B      CMP      r5,r4
        0x00006cb6:    d015        ..      BEQ      0x6ce4 ; baseReadOneByte + 76
        0x00006cb8:    885d        ].      LDRH     r5,[r3,#2]
        0x00006cba:    42a5        .B      CMP      r5,r4
        0x00006cbc:    d00e        ..      BEQ      0x6cdc ; baseReadOneByte + 68
        0x00006cbe:    889d        ..      LDRH     r5,[r3,#4]
        0x00006cc0:    42a5        .B      CMP      r5,r4
        0x00006cc2:    d00d        ..      BEQ      0x6ce0 ; baseReadOneByte + 72
        0x00006cc4:    088d        ..      LSRS     r5,r1,#2
        0x00006cc6:    2d96        .-      CMP      r5,#0x96
        0x00006cc8:    d814        ..      BHI      0x6cf4 ; baseReadOneByte + 92
        0x00006cca:    88dd        ..      LDRH     r5,[r3,#6]
        0x00006ccc:    42a5        .B      CMP      r5,r4
        0x00006cce:    d008        ..      BEQ      0x6ce2 ; baseReadOneByte + 74
        0x00006cd0:    3308        .3      ADDS     r3,r3,#8
        0x00006cd2:    1d09        ..      ADDS     r1,r1,#4
        0x00006cd4:    881d        ..      LDRH     r5,[r3,#0]
        0x00006cd6:    42a5        .B      CMP      r5,r4
        0x00006cd8:    d1ee        ..      BNE      0x6cb8 ; baseReadOneByte + 32
        0x00006cda:    e003        ..      B        0x6ce4 ; baseReadOneByte + 76
        0x00006cdc:    2201        ."      MOVS     r2,#1
        0x00006cde:    e000        ..      B        0x6ce2 ; baseReadOneByte + 74
        0x00006ce0:    2202        ."      MOVS     r2,#2
        0x00006ce2:    4311        .C      ORRS     r1,r1,r2
        0x00006ce4:    4a04        .J      LDR      r2,[pc,#16] ; [0x6cf8] = 0x1ff
;;;1      #include "wrappers.h"
;;;2      
;;;3      /*
;;;4      * Macros declaration
;;;5      */
;;;6      #define DEFAULT_BYTE								(0xFF)
;;;7      
;;;8      #ifdef _CHIP_THC80F340A
;;;9      #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(x)))
;;;10     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(x)))
;;;11     #else
;;;12     #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;13     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;14     #endif 
;;;15     
;;;16     /*
;;;17     * Variables declaration
;;;18     */
;;;19     static uMonoByte gumbFlashBuff[PAGE_SIZE];
;;;20     
;;;21     /*
;;;22     * Functions declarations
;;;23     */
;;;24     /*Erase the page on given address*/
;;;25     static boolean  baseErasePageDirect(uQuadByte uqbAddress);
;;;26     
;;;27     /*Write the data on erased page*/
;;;28     static boolean  baseWritePageDirect(uQuadByte uqbAddress, puMonoByte pumbInput);
;;;29     
;;;30     /*
;;;31     * Erase and Write page data
;;;32     *
;;;33     * uqbFlashAddr: Page address (It should be starting address of any page to updated)
;;;34     * pumbPageData: data buffer to update. must contain page size data.
;;;35     */
;;;36     static boolean updatePage(uQuadByte uqbFlashAddr, puMonoByte pumbPageData) {
;;;37     
;;;38     	/*Erase the physical destination page first*/
;;;39     	if (TRUE == baseErasePageDirect(uqbFlashAddr))
;;;40     	{
;;;41     		/*Write the Page buffer*/
;;;42     		if (TRUE == baseWritePageDirect(uqbFlashAddr, pumbPageData))
;;;43     		{
;;;44     			/*if writing passed*/
;;;45     			return TRUE;
;;;46     		}
;;;47     	}
;;;48     	/*If erase or write failed*/
;;;49     	return FALSE;
;;;50     }
;;;51     
;;;52     #ifdef FEAT_EXHAUSTEARING
;;;53     
;;;54     /*
;;;55     * Search of give Virtual page value in the provided page table address
;;;56     *
;;;57     * ptVirtualPage: Value to search
;;;58     * udbStartOffset: index from where search starts
;;;59     * pptPageTable: Address of Page table
;;;60     */
;;;61     static uDiByte searchVirtualPage(pageTableEntry ptVirtualPage, uDiByte udbStartOffset, pPageTableEntry pptPageTable) {
;;;62     
;;;63     	/*move pointer to Start offset in given Page table*/
;;;64     	pptPageTable += udbStartOffset;
;;;65     
;;;66     	/*search for free page (free in both active and backup page table) and given virtual page in active page table*/
;;;67     	do {
;;;68     		if (READ_PAGE_TABLE_ENTRY(pptPageTable) == ptVirtualPage) {
;;;69     
;;;70     			/*Page no. from where data will be copied*/
;;;71     			break;
;;;72     		}
;;;73     
;;;74     		/*increment to next page entry*/
;;;75     		udbStartOffset++;
;;;76     		pptPageTable++;
;;;77     
;;;78     	} while (udbStartOffset < TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE);
;;;79     
;;;80     	return udbStartOffset;
;;;81     }
;;;82     /*
;;;83     * function to update the data on another free page
;;;84     *
;;;85     */
;;;86     static boolean WriteNBytes(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength) {
;;;87     
;;;88     	uMonoByte			umbActivePt;
;;;89     	uMonoByte			umbTxnStateOrBackupPt;
;;;90     	uMonoByte			umbNewPagesUpdated = 0x00;
;;;91     	uMonoByte			umbIndex = 0x00;
;;;92     	uDiByte				udbOffset;
;;;93     	uDiByte				udbSrcPg = 0x00;
;;;94     	uDiByte				udbDestPage = 0xFFFF; //Reset it to -1
;;;95     	uDiByte 			udbRemain;
;;;96     	uDiByte 			udbToDo = 0x00;
;;;97     	uDiByte				udbSrcPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;98     	uDiByte				udbDestPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;99     	pageTableEntry		ptVirtualPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;100    	pageTableEntry		ptVirtualPg;
;;;101    	pPageTableEntry		pptActive;
;;;102    	pPageTableEntry		pptBackup;
;;;103    
;;;104    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] WriteNBytes() \n");
;;;105    
;;;106    	/*read active page table*/
;;;107    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;108    
;;;109    	/*Read backup page table*/
;;;110    	umbTxnStateOrBackupPt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;111    
;;;112    	if ((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || (umbTxnStateOrBackupPt == umbActivePt)) {
;;;113    
;;;114    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;115    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;116    	}
;;;117    	else {
;;;118    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;119    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbTxnStateOrBackupPt * SIZE_PAGE_TABLE));
;;;120    	}
;;;121    
;;;122    	/*Extract page address*/
;;;123    	ptVirtualPg = (pageTableEntry)GET_PAGE_NUMBER(uqbAddress);
;;;124    
;;;125    	/*Offset in current virtual page*/
;;;126    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;127    
;;;128    	for (udbRemain = udbLength; udbRemain; udbRemain -= udbToDo)
;;;129    	{
;;;130    		/****************************Antitearing code*****************************************/
;;;131    
;;;132    		/*********Searching The Given virtual page*********/
;;;133    
;;;134    		/*Search for Virtual Page in entry*/
;;;135    		udbSrcPg = searchVirtualPage(ptVirtualPg, 0x00, pptActive);
;;;136    
;;;137    		if ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg)/*virtual page found in Active page table*/
;;;138    			&&
;;;139    			((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || ((pageTableEntry)(PAGE_IS_FREE) == READ_PAGE_TABLE_ENTRY(pptBackup + udbSrcPg))))
;;;140    			/*No transaction in progress
;;;141    			*	or
;;;142    			* otherwise check if corresponding offset in backup page is free (indicates that page is newly created in the current transaction)
;;;143    			*/
;;;144    		{
;;;145    			/*Data will be updated in same page*/
;;;146    			udbDestPage = udbSrcPg;
;;;147    		}
;;;148    		else {
;;;149    			/*search for free page in backup page*/
;;;150    			do {
;;;151    
;;;152    				/*searching free page*/
;;;153    				/*Always start from next page, first time this loop will be called, (udbDestPage + 0x01) results into 00*/
;;;154    				udbDestPage = searchVirtualPage((pageTableEntry)PAGE_IS_FREE, (udbDestPage + 0x01), pptBackup);
;;;155    
;;;156    			} while ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbDestPage) //if dest page checked the whole page table (Though it will never happend, because it will be ensured that OS maintains minimum number of free pages for AT)
;;;157    				&& \
;;;158    				((pageTableEntry)(PAGE_IS_FREE) != READ_PAGE_TABLE_ENTRY(pptActive + udbDestPage))); // check until same page hasnt been found free in active page as well
;;;159    		}
;;;160    		/*********************Searching done*************/
;;;161    
;;;162    		/******************Writing the data start*****************/
;;;163    		/*If virtual page is found in active PT*/
;;;164    		if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg) {
;;;165    
;;;166    			/*Convert page number into physical page address*/
;;;167    			/*Read whole page in buffer*/
;;;168    			baseReadNBytesDirect((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbSrcPg)), gumbFlashBuff, PAGE_SIZE);
;;;169    
;;;170    		}
;;;171    		else {
;;;172    			/*Indication as source page is not found, to ensure that Page table doesnt get update for this entry*/
;;;173    			udbSrcPg = INVALID_PAGE_ENTRY_VALUE;
;;;174    
;;;175    			/*This is first time given Virtual page is updating so default data would be 'FF' */
;;;176    			mem_set(gumbFlashBuff, 0xFF, PAGE_SIZE);
;;;177    		}
;;;178    
;;;179    		/*Calculate data length that we need to update in given page*/
;;;180    		udbToDo = (udbOffset + udbRemain) < PAGE_SIZE ? udbRemain : (PAGE_SIZE - udbOffset);
;;;181    
;;;182    		/*Check if data is same so please dont update, for god sake*/
;;;183    		if (mem_cmp(&gumbFlashBuff[udbOffset], pumbInput, udbToDo)) {
;;;184    
;;;185    			/*Update new data in the page buffer*/
;;;186    			mem_cpy(&gumbFlashBuff[udbOffset], pumbInput, udbToDo);
;;;187    
;;;188    			/*Check if new physical page is different from previous one*/
;;;189    			if (udbSrcPg != udbDestPage) {
;;;190    
;;;191    				//DBG_FUNC("[READ_UPDATE_NVM] WriteNBytes(): Mapping Virtual Page %2 to Physical Page %2\n", ptVirtualPg, udbDestPage);
;;;192    				/*store updating source and destination physical pages for current virtual page update*/
;;;193    				udbSrcPgs[umbNewPagesUpdated] = udbSrcPg * TABLE_ENTRY_SIZE;
;;;194    				udbDestPgs[umbNewPagesUpdated] = udbDestPage * TABLE_ENTRY_SIZE;
;;;195    				ptVirtualPgs[umbNewPagesUpdated++] = ptVirtualPg;
;;;196    
;;;197    			}
;;;198    
;;;199    			/*Convert dest page number into physical page address*/
;;;200    			/*Update physical page*/
;;;201    			if (FALSE == updatePage((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbDestPage)), gumbFlashBuff)) {
;;;202    				return FALSE;
;;;203    			}
;;;204    		}
;;;205    
;;;206    		/*Next offset must be 00*/
;;;207    		udbOffset = 0x00;//udbOffset = (uDiByte)(udbToDo + udbOffset) & (PAGE_SIZE - 1);
;;;208    
;;;209    		/*Next address would be next page*/
;;;210    		ptVirtualPg++;
;;;211    
;;;212    		/*Increase the offset for input from where next block of data will be read*/
;;;213    		pumbInput += udbToDo;
;;;214    
;;;215    		/******************Write data done***/
;;;216    	}
;;;217    
;;;218    	/*******************Update Page table*************/
;;;219    	if (pptActive == pptBackup) {
;;;220    		/*If first time page table is updating in current transaction
;;;221    		* Old page table will be active one and new page table will be alternative one
;;;222    		*/
;;;223    
;;;224    		/*Which table is active*/
;;;225    		if ((pPageTableEntry)ADDRESS_PAGE_TABLE_1_START == pptBackup) {
;;;226    
;;;227    			/*Old table will be PT1 */
;;;228    			/*New table will be PT2 */
;;;229    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_2_START;
;;;230    		}
;;;231    		else {
;;;232    			/*Old table will be PT2 */
;;;233    			/*New Table will be PT1 */
;;;234    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_1_START;
;;;235    		}
;;;236    
;;;237    	}
;;;238    	else {
;;;239    		/*This isnt first update in transaction, It means backup has already been taken.
;;;240    		* So old page table and new page table will be same
;;;241    		*/
;;;242    
;;;243    		/*Old table = new table*/
;;;244    		pptBackup = pptActive;
;;;245    	}
;;;246    
;;;247    	/*Number of pages processed of Page Table*/
;;;248    	umbActivePt = 0x00;
;;;249    
;;;250    	while (umbActivePt < NO_OF_PAGES_FOR_PAGE_TABLE) {
;;;251    
;;;252    		/*Read first page of PT*/
;;;253    		baseReadNBytesDirect((uQuadByte)pptBackup, gumbFlashBuff, PAGE_SIZE);
;;;254    
;;;255    		/*assume page is not updated*/
;;;256    		umbTxnStateOrBackupPt = PAGE_IS_NOT_UPDATED;
;;;257    
;;;258    		//copy from old and paste it to new after updating 
;;;259    		for (umbIndex = 0x00; umbIndex < umbNewPagesUpdated; umbIndex++) {
;;;260    
;;;261    			//Check if src page fall under current page of Page Table
;;;262    			if (umbActivePt == (udbSrcPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
;;;263    
;;;264    				/*Update src page as free*/
;;;265    				ptVirtualPg = (pageTableEntry)PAGE_IS_FREE;
;;;266    
;;;267    				mem_cpy(&gumbFlashBuff[udbSrcPgs[umbIndex]], (puMonoByte)&ptVirtualPg, TABLE_ENTRY_SIZE);
;;;268    
;;;269    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;270    			}
;;;271    
;;;272    			//Check if dest page fall under current page of Page Table
;;;273    			if (umbActivePt == (udbDestPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
;;;274    
;;;275    				/*Update virtual page in free physical page index of current page*/
;;;276    				mem_cpy(&gumbFlashBuff[udbDestPgs[umbIndex]], (puMonoByte)&ptVirtualPgs[umbIndex], TABLE_ENTRY_SIZE);
;;;277    
;;;278    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;279    			}
;;;280    		}
;;;281    				
;;;282    		/*Check if data needs to updated in page table*/
;;;283    		if ((pptBackup != pptActive)  //Old Page table and new page tables are different
;;;284    			||  // OR
;;;285    			(PAGE_IS_UPDATED == umbTxnStateOrBackupPt)) { //If data is updated in current page of Page Tables
;;;286    
;;;287    			/*Update physical page*/
;;;288    			if (FALSE == updatePage((uQuadByte)pptActive, gumbFlashBuff)) {
;;;289    				return FALSE;
;;;290    			}
;;;291    
;;;292    		}
;;;293    
;;;294    		/*Get next page in Old page table*/
;;;295    		pptBackup += NO_OF_ENTRIES_IN_SINGLE_PAGE;
;;;296    
;;;297    		/*Get next page in new page table*/
;;;298    		pptActive += NO_OF_ENTRIES_IN_SINGLE_PAGE;
;;;299    
;;;300    		/*increment to next page*/
;;;301    		umbActivePt++;
;;;302    
;;;303    	}
;;;304    	/******************* Update Page table done*************/
;;;305    
;;;306    	/*******************Update Active Page table number************************/
;;;307    	if (pptBackup != pptActive) {
;;;308    
;;;309    		if ((pPageTableEntry)(ADDRESS_PAGE_TABLE_1_END + 0x01) == pptActive) {
;;;310    
;;;311    			/*New active page table is Page Table 1*/
;;;312    			umbActivePt = AT_PAGE_TABLE_1;
;;;313    		}
;;;314    		else {
;;;315    
;;;316    			/*New active page table is Page Table 2*/
;;;317    			umbActivePt = AT_PAGE_TABLE_2;
;;;318    		}
;;;319    
;;;320    		/*Read page containing active PT*/
;;;321    		baseReadNBytesDirect(ADDRESS_ACTIVE_PAGE, gumbFlashBuff, PAGE_SIZE);
;;;322    
;;;323    		/*update active PT in buffer*/
;;;324    		gumbFlashBuff[0x00] = umbActivePt;
;;;325    
;;;326    		/*Update buffer in NVM*/
;;;327    		updatePage(ADDRESS_ACTIVE_PAGE, gumbFlashBuff);
;;;328    	}
;;;329    	/******************Update Active Page table number done*****************/
;;;330    
;;;331    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] WriteNBytes()\n");
;;;332    	return TRUE;
;;;333    }
;;;334    
;;;335    /*
;;;336    * baseReadOneByte (uQuadByte uqbAddress)
;;;337    * 
;;;338    * @param : uqbAddress	: Memory Address To Read From
;;;339    * @ret: read byte value
;;;340    */
;;;341    uMonoByte baseReadOneByte(uQuadByte uqbAddress){
;;;342    
;;;343    	uMonoByte		umbActivePt;
;;;344    	uDiByte			udbPhysicalPg;
;;;345    	pPageTableEntry pptActive;
;;;346    
;;;347    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;348    	/*read active page table number*/
;;;349    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;350    
;;;351    	/*Get starting address of active page table*/
;;;352    	pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;353    
;;;354    	/*search for given Virtual Page number*/
;;;355    	udbPhysicalPg = searchVirtualPage((pageTableEntry)GET_PAGE_NUMBER(uqbAddress), 0x00, pptActive);
;;;356    
;;;357    	//DBG_FUNC("[READ_UPDATE_NVM] baseReadOneByte():  Reading Virtual Page %2 data from Physical Page %2\n", (pageTableEntry)GET_PAGE_NUMBER(uqbAddress), udbPhysicalPg);
;;;358    
;;;359    	/*Check if virtual page not found*/
;;;360    	if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE == udbPhysicalPg) {
;;;361    		
;;;362    		/*if physical page number is equal to total no. of entries it means virtual page is not found*/
;;;363    		/*as no prior data available for given address it means return default data which is 'FF'*/
;;;364    		return DEFAULT_BYTE;
;;;365    
;;;366    	}
;;;367    
;;;368    	/*Virtual Page found*/
;;;369    	/*Get address of physical page and add offset of page in it*/
;;;370    	uqbAddress = ((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbPhysicalPg))) | (uqbAddress & (PAGE_SIZE - 1));
        0x00006ce6:    4010        .@      ANDS     r0,r0,r2
        0x00006ce8:    0249        I.      LSLS     r1,r1,#9
        0x00006cea:    1808        ..      ADDS     r0,r1,r0
        0x00006cec:    2105        .!      MOVS     r1,#5
        0x00006cee:    0349        I.      LSLS     r1,r1,#13
;;;371    
;;;372    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;373    	/*Read a byte and return it*/
;;;374    	return READ_SINGLE_BYTE(uqbAddress);
        0x00006cf0:    5c40        @\      LDRB     r0,[r0,r1]
;;;375    }
        0x00006cf2:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00006cf4:    20ff        .       MOVS     r0,#0xff
        0x00006cf6:    bdb0        ..      POP      {r4,r5,r7,pc}
    $d.1
    __arm_cp.0_0
        0x00006cf8:    000001ff    ....    DCD    511
    $t.2
    baseReadNBytes
;;;376    
;;;377    
;;;378    
;;;379    /*
;;;380    * baseReadNBytes (uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength)
;;;381    * 
;;;382    * @param : uqbAddress	: Memory Address To Read From
;;;383    * @param : pumbOutput	: Pointer To The Buffer Where data Will Be Stored
;;;384    * @param : udbLength	: How Much Data
;;;385    */
;;;386    void baseReadNBytes(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength){
        0x00006cfc:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00006cfe:    b085        ..      SUB      sp,sp,#0x14
        0x00006d00:    2a00        .*      CMP      r2,#0
        0x00006d02:    d05a        Z.      BEQ      0x6dba ; baseReadNBytes + 190
;;; HardwareLayers/Abstraction/Wrappers\readUpdateNvmWrappers.c
        0x00006d04:    4614        .F      MOV      r4,r2
        0x00006d06:    460d        .F      MOV      r5,r1
        0x00006d08:    2103        .!      MOVS     r1,#3
        0x00006d0a:    9100        ..      STR      r1,[sp,#0]
        0x00006d0c:    0249        I.      LSLS     r1,r1,#9
        0x00006d0e:    2249        I"      MOVS     r2,#0x49
        0x00006d10:    0252        R.      LSLS     r2,r2,#9
        0x00006d12:    7812        .x      LDRB     r2,[r2,#0]
        0x00006d14:    434a        JC      MULS     r2,r1,r2
        0x00006d16:    2125        %!      MOVS     r1,#0x25
        0x00006d18:    0289        ..      LSLS     r1,r1,#10
        0x00006d1a:    1851        Q.      ADDS     r1,r2,r1
        0x00006d1c:    9102        ..      STR      r1,[sp,#8]
        0x00006d1e:    2101        .!      MOVS     r1,#1
        0x00006d20:    9101        ..      STR      r1,[sp,#4]
        0x00006d22:    0249        I.      LSLS     r1,r1,#9
        0x00006d24:    9103        ..      STR      r1,[sp,#0xc]
        0x00006d26:    1e4b        K.      SUBS     r3,r1,#1
        0x00006d28:    4003        .@      ANDS     r3,r3,r0
        0x00006d2a:    0a47        G.      LSRS     r7,r0,#9
        0x00006d2c:    e00f        ..      B        0x6d4e ; baseReadNBytes + 82
        0x00006d2e:    b2b2        ..      UXTH     r2,r6
        0x00006d30:    2105        .!      MOVS     r1,#5
        0x00006d32:    0349        I.      LSLS     r1,r1,#13
        0x00006d34:    0240        @.      LSLS     r0,r0,#9
        0x00006d36:    1841        A.      ADDS     r1,r0,r1
        0x00006d38:    4319        .C      ORRS     r1,r1,r3
        0x00006d3a:    4628        (F      MOV      r0,r5
        0x00006d3c:    f7f9fe3f    ..?.    BL       mem_cpyFwd ; 0x9be
        0x00006d40:    19ad        ..      ADDS     r5,r5,r6
        0x00006d42:    1ba4        ..      SUBS     r4,r4,r6
        0x00006d44:    0420         .      LSLS     r0,r4,#16
        0x00006d46:    1c7f        ..      ADDS     r7,r7,#1
        0x00006d48:    2300        .#      MOVS     r3,#0
        0x00006d4a:    2800        .(      CMP      r0,#0
        0x00006d4c:    d035        5.      BEQ      0x6dba ; baseReadNBytes + 190
        0x00006d4e:    9504        ..      STR      r5,[sp,#0x10]
        0x00006d50:    b2a6        ..      UXTH     r6,r4
        0x00006d52:    2000        .       MOVS     r0,#0
        0x00006d54:    9902        ..      LDR      r1,[sp,#8]
;;;1      #include "wrappers.h"
;;;2      
;;;3      /*
;;;4      * Macros declaration
;;;5      */
;;;6      #define DEFAULT_BYTE								(0xFF)
;;;7      
;;;8      #ifdef _CHIP_THC80F340A
;;;9      #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(x)))
;;;10     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(x)))
;;;11     #else
;;;12     #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;13     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;14     #endif 
;;;15     
;;;16     /*
;;;17     * Variables declaration
;;;18     */
;;;19     static uMonoByte gumbFlashBuff[PAGE_SIZE];
;;;20     
;;;21     /*
;;;22     * Functions declarations
;;;23     */
;;;24     /*Erase the page on given address*/
;;;25     static boolean  baseErasePageDirect(uQuadByte uqbAddress);
;;;26     
;;;27     /*Write the data on erased page*/
;;;28     static boolean  baseWritePageDirect(uQuadByte uqbAddress, puMonoByte pumbInput);
;;;29     
;;;30     /*
;;;31     * Erase and Write page data
;;;32     *
;;;33     * uqbFlashAddr: Page address (It should be starting address of any page to updated)
;;;34     * pumbPageData: data buffer to update. must contain page size data.
;;;35     */
;;;36     static boolean updatePage(uQuadByte uqbFlashAddr, puMonoByte pumbPageData) {
;;;37     
;;;38     	/*Erase the physical destination page first*/
;;;39     	if (TRUE == baseErasePageDirect(uqbFlashAddr))
;;;40     	{
;;;41     		/*Write the Page buffer*/
;;;42     		if (TRUE == baseWritePageDirect(uqbFlashAddr, pumbPageData))
;;;43     		{
;;;44     			/*if writing passed*/
;;;45     			return TRUE;
;;;46     		}
;;;47     	}
;;;48     	/*If erase or write failed*/
;;;49     	return FALSE;
;;;50     }
;;;51     
;;;52     #ifdef FEAT_EXHAUSTEARING
;;;53     
;;;54     /*
;;;55     * Search of give Virtual page value in the provided page table address
;;;56     *
;;;57     * ptVirtualPage: Value to search
;;;58     * udbStartOffset: index from where search starts
;;;59     * pptPageTable: Address of Page table
;;;60     */
;;;61     static uDiByte searchVirtualPage(pageTableEntry ptVirtualPage, uDiByte udbStartOffset, pPageTableEntry pptPageTable) {
;;;62     
;;;63     	/*move pointer to Start offset in given Page table*/
;;;64     	pptPageTable += udbStartOffset;
;;;65     
;;;66     	/*search for free page (free in both active and backup page table) and given virtual page in active page table*/
;;;67     	do {
;;;68     		if (READ_PAGE_TABLE_ENTRY(pptPageTable) == ptVirtualPage) {
        0x00006d56:    b2ba        ..      UXTH     r2,r7
        0x00006d58:    880d        ..      LDRH     r5,[r1,#0]
        0x00006d5a:    4295        .B      CMP      r5,r2
        0x00006d5c:    d025        %.      BEQ      0x6daa ; baseReadNBytes + 174
        0x00006d5e:    884d        M.      LDRH     r5,[r1,#2]
        0x00006d60:    4295        .B      CMP      r5,r2
        0x00006d62:    d00f        ..      BEQ      0x6d84 ; baseReadNBytes + 136
        0x00006d64:    888d        ..      LDRH     r5,[r1,#4]
        0x00006d66:    4295        .B      CMP      r5,r2
        0x00006d68:    d00e        ..      BEQ      0x6d88 ; baseReadNBytes + 140
        0x00006d6a:    0885        ..      LSRS     r5,r0,#2
        0x00006d6c:    2d96        .-      CMP      r5,#0x96
        0x00006d6e:    d80d        ..      BHI      0x6d8c ; baseReadNBytes + 144
        0x00006d70:    88cd        ..      LDRH     r5,[r1,#6]
        0x00006d72:    4295        .B      CMP      r5,r2
        0x00006d74:    d017        ..      BEQ      0x6da6 ; baseReadNBytes + 170
        0x00006d76:    3108        .1      ADDS     r1,r1,#8
        0x00006d78:    1d00        ..      ADDS     r0,r0,#4
        0x00006d7a:    b2ba        ..      UXTH     r2,r7
        0x00006d7c:    880d        ..      LDRH     r5,[r1,#0]
        0x00006d7e:    4295        .B      CMP      r5,r2
        0x00006d80:    d1ed        ..      BNE      0x6d5e ; baseReadNBytes + 98
        0x00006d82:    e012        ..      B        0x6daa ; baseReadNBytes + 174
;;;69     
;;;70     			/*Page no. from where data will be copied*/
;;;71     			break;
;;;72     		}
;;;73     
;;;74     		/*increment to next page entry*/
;;;75     		udbStartOffset++;
        0x00006d84:    9901        ..      LDR      r1,[sp,#4]
        0x00006d86:    e00f        ..      B        0x6da8 ; baseReadNBytes + 172
        0x00006d88:    2102        .!      MOVS     r1,#2
        0x00006d8a:    e00d        ..      B        0x6da8 ; baseReadNBytes + 172
;;;76     		pptPageTable++;
;;;77     
;;;78     	} while (udbStartOffset < TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE);
;;;79     
;;;80     	return udbStartOffset;
;;;81     }
;;;82     /*
;;;83     * function to update the data on another free page
;;;84     *
;;;85     */
;;;86     static boolean WriteNBytes(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength) {
;;;87     
;;;88     	uMonoByte			umbActivePt;
;;;89     	uMonoByte			umbTxnStateOrBackupPt;
;;;90     	uMonoByte			umbNewPagesUpdated = 0x00;
;;;91     	uMonoByte			umbIndex = 0x00;
;;;92     	uDiByte				udbOffset;
;;;93     	uDiByte				udbSrcPg = 0x00;
;;;94     	uDiByte				udbDestPage = 0xFFFF; //Reset it to -1
;;;95     	uDiByte 			udbRemain;
;;;96     	uDiByte 			udbToDo = 0x00;
;;;97     	uDiByte				udbSrcPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;98     	uDiByte				udbDestPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;99     	pageTableEntry		ptVirtualPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;100    	pageTableEntry		ptVirtualPg;
;;;101    	pPageTableEntry		pptActive;
;;;102    	pPageTableEntry		pptBackup;
;;;103    
;;;104    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] WriteNBytes() \n");
;;;105    
;;;106    	/*read active page table*/
;;;107    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;108    
;;;109    	/*Read backup page table*/
;;;110    	umbTxnStateOrBackupPt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;111    
;;;112    	if ((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || (umbTxnStateOrBackupPt == umbActivePt)) {
;;;113    
;;;114    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;115    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;116    	}
;;;117    	else {
;;;118    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;119    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbTxnStateOrBackupPt * SIZE_PAGE_TABLE));
;;;120    	}
;;;121    
;;;122    	/*Extract page address*/
;;;123    	ptVirtualPg = (pageTableEntry)GET_PAGE_NUMBER(uqbAddress);
;;;124    
;;;125    	/*Offset in current virtual page*/
;;;126    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;127    
;;;128    	for (udbRemain = udbLength; udbRemain; udbRemain -= udbToDo)
;;;129    	{
;;;130    		/****************************Antitearing code*****************************************/
;;;131    
;;;132    		/*********Searching The Given virtual page*********/
;;;133    
;;;134    		/*Search for Virtual Page in entry*/
;;;135    		udbSrcPg = searchVirtualPage(ptVirtualPg, 0x00, pptActive);
;;;136    
;;;137    		if ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg)/*virtual page found in Active page table*/
;;;138    			&&
;;;139    			((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || ((pageTableEntry)(PAGE_IS_FREE) == READ_PAGE_TABLE_ENTRY(pptBackup + udbSrcPg))))
;;;140    			/*No transaction in progress
;;;141    			*	or
;;;142    			* otherwise check if corresponding offset in backup page is free (indicates that page is newly created in the current transaction)
;;;143    			*/
;;;144    		{
;;;145    			/*Data will be updated in same page*/
;;;146    			udbDestPage = udbSrcPg;
;;;147    		}
;;;148    		else {
;;;149    			/*search for free page in backup page*/
;;;150    			do {
;;;151    
;;;152    				/*searching free page*/
;;;153    				/*Always start from next page, first time this loop will be called, (udbDestPage + 0x01) results into 00*/
;;;154    				udbDestPage = searchVirtualPage((pageTableEntry)PAGE_IS_FREE, (udbDestPage + 0x01), pptBackup);
;;;155    
;;;156    			} while ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbDestPage) //if dest page checked the whole page table (Though it will never happend, because it will be ensured that OS maintains minimum number of free pages for AT)
;;;157    				&& \
;;;158    				((pageTableEntry)(PAGE_IS_FREE) != READ_PAGE_TABLE_ENTRY(pptActive + udbDestPage))); // check until same page hasnt been found free in active page as well
;;;159    		}
;;;160    		/*********************Searching done*************/
;;;161    
;;;162    		/******************Writing the data start*****************/
;;;163    		/*If virtual page is found in active PT*/
;;;164    		if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg) {
;;;165    
;;;166    			/*Convert page number into physical page address*/
;;;167    			/*Read whole page in buffer*/
;;;168    			baseReadNBytesDirect((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbSrcPg)), gumbFlashBuff, PAGE_SIZE);
;;;169    
;;;170    		}
;;;171    		else {
;;;172    			/*Indication as source page is not found, to ensure that Page table doesnt get update for this entry*/
;;;173    			udbSrcPg = INVALID_PAGE_ENTRY_VALUE;
;;;174    
;;;175    			/*This is first time given Virtual page is updating so default data would be 'FF' */
;;;176    			mem_set(gumbFlashBuff, 0xFF, PAGE_SIZE);
;;;177    		}
;;;178    
;;;179    		/*Calculate data length that we need to update in given page*/
;;;180    		udbToDo = (udbOffset + udbRemain) < PAGE_SIZE ? udbRemain : (PAGE_SIZE - udbOffset);
;;;181    
;;;182    		/*Check if data is same so please dont update, for god sake*/
;;;183    		if (mem_cmp(&gumbFlashBuff[udbOffset], pumbInput, udbToDo)) {
;;;184    
;;;185    			/*Update new data in the page buffer*/
;;;186    			mem_cpy(&gumbFlashBuff[udbOffset], pumbInput, udbToDo);
;;;187    
;;;188    			/*Check if new physical page is different from previous one*/
;;;189    			if (udbSrcPg != udbDestPage) {
;;;190    
;;;191    				//DBG_FUNC("[READ_UPDATE_NVM] WriteNBytes(): Mapping Virtual Page %2 to Physical Page %2\n", ptVirtualPg, udbDestPage);
;;;192    				/*store updating source and destination physical pages for current virtual page update*/
;;;193    				udbSrcPgs[umbNewPagesUpdated] = udbSrcPg * TABLE_ENTRY_SIZE;
;;;194    				udbDestPgs[umbNewPagesUpdated] = udbDestPage * TABLE_ENTRY_SIZE;
;;;195    				ptVirtualPgs[umbNewPagesUpdated++] = ptVirtualPg;
;;;196    
;;;197    			}
;;;198    
;;;199    			/*Convert dest page number into physical page address*/
;;;200    			/*Update physical page*/
;;;201    			if (FALSE == updatePage((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbDestPage)), gumbFlashBuff)) {
;;;202    				return FALSE;
;;;203    			}
;;;204    		}
;;;205    
;;;206    		/*Next offset must be 00*/
;;;207    		udbOffset = 0x00;//udbOffset = (uDiByte)(udbToDo + udbOffset) & (PAGE_SIZE - 1);
;;;208    
;;;209    		/*Next address would be next page*/
;;;210    		ptVirtualPg++;
;;;211    
;;;212    		/*Increase the offset for input from where next block of data will be read*/
;;;213    		pumbInput += udbToDo;
;;;214    
;;;215    		/******************Write data done***/
;;;216    	}
;;;217    
;;;218    	/*******************Update Page table*************/
;;;219    	if (pptActive == pptBackup) {
;;;220    		/*If first time page table is updating in current transaction
;;;221    		* Old page table will be active one and new page table will be alternative one
;;;222    		*/
;;;223    
;;;224    		/*Which table is active*/
;;;225    		if ((pPageTableEntry)ADDRESS_PAGE_TABLE_1_START == pptBackup) {
;;;226    
;;;227    			/*Old table will be PT1 */
;;;228    			/*New table will be PT2 */
;;;229    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_2_START;
;;;230    		}
;;;231    		else {
;;;232    			/*Old table will be PT2 */
;;;233    			/*New Table will be PT1 */
;;;234    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_1_START;
;;;235    		}
;;;236    
;;;237    	}
;;;238    	else {
;;;239    		/*This isnt first update in transaction, It means backup has already been taken.
;;;240    		* So old page table and new page table will be same
;;;241    		*/
;;;242    
;;;243    		/*Old table = new table*/
;;;244    		pptBackup = pptActive;
;;;245    	}
;;;246    
;;;247    	/*Number of pages processed of Page Table*/
;;;248    	umbActivePt = 0x00;
;;;249    
;;;250    	while (umbActivePt < NO_OF_PAGES_FOR_PAGE_TABLE) {
;;;251    
;;;252    		/*Read first page of PT*/
;;;253    		baseReadNBytesDirect((uQuadByte)pptBackup, gumbFlashBuff, PAGE_SIZE);
;;;254    
;;;255    		/*assume page is not updated*/
;;;256    		umbTxnStateOrBackupPt = PAGE_IS_NOT_UPDATED;
;;;257    
;;;258    		//copy from old and paste it to new after updating 
;;;259    		for (umbIndex = 0x00; umbIndex < umbNewPagesUpdated; umbIndex++) {
;;;260    
;;;261    			//Check if src page fall under current page of Page Table
;;;262    			if (umbActivePt == (udbSrcPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
;;;263    
;;;264    				/*Update src page as free*/
;;;265    				ptVirtualPg = (pageTableEntry)PAGE_IS_FREE;
;;;266    
;;;267    				mem_cpy(&gumbFlashBuff[udbSrcPgs[umbIndex]], (puMonoByte)&ptVirtualPg, TABLE_ENTRY_SIZE);
;;;268    
;;;269    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;270    			}
;;;271    
;;;272    			//Check if dest page fall under current page of Page Table
;;;273    			if (umbActivePt == (udbDestPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
;;;274    
;;;275    				/*Update virtual page in free physical page index of current page*/
;;;276    				mem_cpy(&gumbFlashBuff[udbDestPgs[umbIndex]], (puMonoByte)&ptVirtualPgs[umbIndex], TABLE_ENTRY_SIZE);
;;;277    
;;;278    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;279    			}
;;;280    		}
;;;281    				
;;;282    		/*Check if data needs to updated in page table*/
;;;283    		if ((pptBackup != pptActive)  //Old Page table and new page tables are different
;;;284    			||  // OR
;;;285    			(PAGE_IS_UPDATED == umbTxnStateOrBackupPt)) { //If data is updated in current page of Page Tables
;;;286    
;;;287    			/*Update physical page*/
;;;288    			if (FALSE == updatePage((uQuadByte)pptActive, gumbFlashBuff)) {
;;;289    				return FALSE;
;;;290    			}
;;;291    
;;;292    		}
;;;293    
;;;294    		/*Get next page in Old page table*/
;;;295    		pptBackup += NO_OF_ENTRIES_IN_SINGLE_PAGE;
;;;296    
;;;297    		/*Get next page in new page table*/
;;;298    		pptActive += NO_OF_ENTRIES_IN_SINGLE_PAGE;
;;;299    
;;;300    		/*increment to next page*/
;;;301    		umbActivePt++;
;;;302    
;;;303    	}
;;;304    	/******************* Update Page table done*************/
;;;305    
;;;306    	/*******************Update Active Page table number************************/
;;;307    	if (pptBackup != pptActive) {
;;;308    
;;;309    		if ((pPageTableEntry)(ADDRESS_PAGE_TABLE_1_END + 0x01) == pptActive) {
;;;310    
;;;311    			/*New active page table is Page Table 1*/
;;;312    			umbActivePt = AT_PAGE_TABLE_1;
;;;313    		}
;;;314    		else {
;;;315    
;;;316    			/*New active page table is Page Table 2*/
;;;317    			umbActivePt = AT_PAGE_TABLE_2;
;;;318    		}
;;;319    
;;;320    		/*Read page containing active PT*/
;;;321    		baseReadNBytesDirect(ADDRESS_ACTIVE_PAGE, gumbFlashBuff, PAGE_SIZE);
;;;322    
;;;323    		/*update active PT in buffer*/
;;;324    		gumbFlashBuff[0x00] = umbActivePt;
;;;325    
;;;326    		/*Update buffer in NVM*/
;;;327    		updatePage(ADDRESS_ACTIVE_PAGE, gumbFlashBuff);
;;;328    	}
;;;329    	/******************Update Active Page table number done*****************/
;;;330    
;;;331    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] WriteNBytes()\n");
;;;332    	return TRUE;
;;;333    }
;;;334    
;;;335    /*
;;;336    * baseReadOneByte (uQuadByte uqbAddress)
;;;337    * 
;;;338    * @param : uqbAddress	: Memory Address To Read From
;;;339    * @ret: read byte value
;;;340    */
;;;341    uMonoByte baseReadOneByte(uQuadByte uqbAddress){
;;;342    
;;;343    	uMonoByte		umbActivePt;
;;;344    	uDiByte			udbPhysicalPg;
;;;345    	pPageTableEntry pptActive;
;;;346    
;;;347    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;348    	/*read active page table number*/
;;;349    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;350    
;;;351    	/*Get starting address of active page table*/
;;;352    	pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;353    
;;;354    	/*search for given Virtual Page number*/
;;;355    	udbPhysicalPg = searchVirtualPage((pageTableEntry)GET_PAGE_NUMBER(uqbAddress), 0x00, pptActive);
;;;356    
;;;357    	//DBG_FUNC("[READ_UPDATE_NVM] baseReadOneByte():  Reading Virtual Page %2 data from Physical Page %2\n", (pageTableEntry)GET_PAGE_NUMBER(uqbAddress), udbPhysicalPg);
;;;358    
;;;359    	/*Check if virtual page not found*/
;;;360    	if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE == udbPhysicalPg) {
;;;361    		
;;;362    		/*if physical page number is equal to total no. of entries it means virtual page is not found*/
;;;363    		/*as no prior data available for given address it means return default data which is 'FF'*/
;;;364    		return DEFAULT_BYTE;
;;;365    
;;;366    	}
;;;367    
;;;368    	/*Virtual Page found*/
;;;369    	/*Get address of physical page and add offset of page in it*/
;;;370    	uqbAddress = ((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbPhysicalPg))) | (uqbAddress & (PAGE_SIZE - 1));
;;;371    
;;;372    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;373    	/*Read a byte and return it*/
;;;374    	return READ_SINGLE_BYTE(uqbAddress);
;;;375    }
;;;376    
;;;377    
;;;378    
;;;379    /*
;;;380    * baseReadNBytes (uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength)
;;;381    * 
;;;382    * @param : uqbAddress	: Memory Address To Read From
;;;383    * @param : pumbOutput	: Pointer To The Buffer Where data Will Be Stored
;;;384    * @param : udbLength	: How Much Data
;;;385    */
;;;386    void baseReadNBytes(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength){
;;;387    	
;;;388    	uMonoByte		umbActivePt;
;;;389    	uDiByte			udbPhysicalPg;
;;;390    	uDiByte			udbOffset;
;;;391    	uDiByte			udbToDo;
;;;392    	pageTableEntry	ptVirtualPg;
;;;393    	pPageTableEntry pptActive;
;;;394    
;;;395    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] baseReadNBytes()\n");
;;;396    	/*read active page table number*/
;;;397    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;398    
;;;399    	/*Get starting address of active page table*/
;;;400    	pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;401    
;;;402    	/*Extract page address*/
;;;403    	ptVirtualPg = (pageTableEntry)GET_PAGE_NUMBER(uqbAddress);
;;;404    
;;;405    	/*Offset in current virtual page*/
;;;406    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;407    
;;;408    	/*Read until no data left*/
;;;409    	while(udbLength > 0x00)
;;;410    	{
;;;411    		/*search for given Virtual Page number*/
;;;412    		udbPhysicalPg = searchVirtualPage(ptVirtualPg, 0x00, pptActive);
;;;413    
;;;414    		/*Calculate data length that we can read from given page*/
;;;415    		udbToDo = (udbOffset + udbLength) < PAGE_SIZE ? udbLength : (PAGE_SIZE - udbOffset);
        0x00006d8c:    1998        ..      ADDS     r0,r3,r6
        0x00006d8e:    9903        ..      LDR      r1,[sp,#0xc]
        0x00006d90:    4288        .B      CMP      r0,r1
        0x00006d92:    d301        ..      BCC      0x6d98 ; baseReadNBytes + 156
        0x00006d94:    9803        ..      LDR      r0,[sp,#0xc]
        0x00006d96:    1ac6        ..      SUBS     r6,r0,r3
;;;416    
;;;417    		//DBG_FUNC("[READ_UPDATE_NVM] baseReadNBytes(): Reading Virtual Page %2 data from Physical Page %2\n", ptVirtualPg, udbPhysicalPg);
;;;418    
;;;419    		/*Check if virtual page not found*/
;;;420    		if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE == udbPhysicalPg) {
;;;421    
;;;422    			/*if physical page number is equal to total no. of entries it means virtual page is not found*/
;;;423    			/*as no prior data available for given page address it means return default data which is 'FF'*/
;;;424    			mem_set(pumbOutput, DEFAULT_BYTE, udbToDo);
        0x00006d98:    b2b2        ..      UXTH     r2,r6
        0x00006d9a:    21ff        .!      MOVS     r1,#0xff
        0x00006d9c:    9d04        ..      LDR      r5,[sp,#0x10]
        0x00006d9e:    4628        (F      MOV      r0,r5
        0x00006da0:    f7f9fed8    ....    BL       mem_set ; 0xb54
        0x00006da4:    e7cc        ..      B        0x6d40 ; baseReadNBytes + 68
        0x00006da6:    9900        ..      LDR      r1,[sp,#0]
        0x00006da8:    4308        .C      ORRS     r0,r0,r1
        0x00006daa:    9d04        ..      LDR      r5,[sp,#0x10]
        0x00006dac:    1999        ..      ADDS     r1,r3,r6
        0x00006dae:    9a03        ..      LDR      r2,[sp,#0xc]
        0x00006db0:    4291        .B      CMP      r1,r2
        0x00006db2:    d3bc        ..      BCC      0x6d2e ; baseReadNBytes + 50
        0x00006db4:    9903        ..      LDR      r1,[sp,#0xc]
        0x00006db6:    1ace        ..      SUBS     r6,r1,r3
        0x00006db8:    e7b9        ..      B        0x6d2e ; baseReadNBytes + 50
;;;425    		}
;;;426    		else {
;;;427    
;;;428    			/*Virtual Page found*/
;;;429    			/*Read data from physical address*/
;;;430    			baseReadNBytesDirect((uQuadByte)((ADDRESS_NVM_START + GET_ADDRESS(udbPhysicalPg) )| udbOffset), pumbOutput, udbToDo);
;;;431    		}
;;;432    
;;;433    		/*Next data will always be start from 0th offset*/
;;;434    		udbOffset = 0x00;
;;;435    
;;;436    		/*Next address would be next page*/
;;;437    		ptVirtualPg++;
;;;438    
;;;439    		/*Increase the offset for output to where next block of data will update*/
;;;440    		pumbOutput += udbToDo;
;;;441    
;;;442    		/*Decrease the read data length from remaining length*/
;;;443    		udbLength -= udbToDo;
;;;444    
;;;445    	}
;;;446    
;;;447    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] baseReadNBytes()\n");
;;;448    }
        0x00006dba:    b005        ..      ADD      sp,sp,#0x14
        0x00006dbc:    bdf0        ..      POP      {r4-r7,pc}
    baseReadNBytesDirect
;;;449    
;;;450    /*
;;;451    * baseWriteNBytes(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength)
;;;452    * 
;;;453    * @param : uqbAddress	: Memory Address write to
;;;454    * @param : pumbOutput	: Pointer To The Buffer Where data Will Be Stored
;;;455    * @param : udbLength	: How Much Data
;;;456    */
;;;457    void baseWriteNBytes(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength){
;;;458    
;;;459    	boolean bCloseTheTxn = FALSE;
;;;460    
;;;461    	/*begin the transaction*/
;;;462    	if (TRUE == at_beginTxn()) {
;;;463    
;;;464    		/*indication to close the transaction in same function*/
;;;465    		bCloseTheTxn = TRUE;
;;;466    	}
;;;467    
;;;468    	WriteNBytes(uqbAddress, pumbInput, udbLength);
;;;469    
;;;470    	if (TRUE == bCloseTheTxn) {
;;;471    
;;;472    		/*commit the txn started in the beginning of function*/
;;;473    		at_commitTxn();
;;;474    	}
;;;475    }
;;;476    
;;;477    #endif
;;;478    
;;;479    /*Write direct on the given physical address
;;;480    * 
;;;481    * uqbAddress: Destination physical address
;;;482    * pumbInput: Input buffer
;;;483    * udbLength: Length to update
;;;484    */
;;;485    boolean baseWriteNBytesDirect(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength) {
;;;486    
;;;487    	boolean		bRet=FALSE;
;;;488    	uDiByte		udbOffset;
;;;489    	uDiByte 	udbRemain;
;;;490    	uDiByte 	udbToDo;
;;;491    	uDiByte 	udbCounter = 0x00;
;;;492    	uQuadByte uqbFlashAddr;
;;;493    
;;;494    	/*extract page address*/
;;;495    	uqbFlashAddr = uqbAddress & (0xFFFFFE00 | PAGE_SIZE);
;;;496    
;;;497    	/*extract offset in give page*/
;;;498    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;499    
;;;500    	for (udbRemain = udbLength; udbRemain; udbRemain -= udbToDo)
;;;501    	{
;;;502    		/*Calculate length of data to update in current page*/
;;;503    		udbToDo = (udbOffset + udbRemain) < PAGE_SIZE ? udbRemain : (PAGE_SIZE - udbOffset);
;;;504    
;;;505    		/*Read page in buffer*/
;;;506    		baseReadNBytesDirect(uqbFlashAddr, gumbFlashBuff, PAGE_SIZE);
;;;507    
;;;508    		/*Check if data is same so please dont update, for god sake*/
;;;509    		if (mem_cmp(&gumbFlashBuff[udbOffset], &pumbInput[udbCounter], udbToDo)) {
;;;510    
;;;511    			/*Data is different, now we can go for update*/
;;;512    			/*copy the buffer*/
;;;513    			mem_cpy(&gumbFlashBuff[udbOffset], &pumbInput[udbCounter], udbToDo);
;;;514    
;;;515    			/*Update buffer at destn page*/
;;;516    			if (FALSE == updatePage(uqbFlashAddr, gumbFlashBuff)) {
;;;517    
;;;518    				break;
;;;519    			}
;;;520    		}
;;;521    
;;;522    		/*next offset of input buffer*/
;;;523    		udbCounter += udbToDo;
;;;524    
;;;525    		/*next offset in next destination page*/
;;;526    		udbOffset = (uDiByte)(udbToDo + udbOffset) & (PAGE_SIZE - 1);
;;;527    
;;;528    		/*Next destination page*/
;;;529    		uqbFlashAddr += PAGE_SIZE;
;;;530    	}
;;;531    
;;;532    	return bRet;
;;;533    }
;;;534    
;;;535    /*Read direct from the given address*/
;;;536    void baseReadNBytesDirect(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength) {
        0x00006dbe:    b580        ..      PUSH     {r7,lr}
        0x00006dc0:    4603        .F      MOV      r3,r0
;;;537    
;;;538    #ifdef _CHIP_THC80F340A
;;;539    	mem_cpy(pumbOutput, (const puMonoByte)uqbAddress, udbLength);
        0x00006dc2:    4608        .F      MOV      r0,r1
        0x00006dc4:    4619        .F      MOV      r1,r3
        0x00006dc6:    f7f9fdfa    ....    BL       mem_cpyFwd ; 0x9be
;;;540    #else
;;;541    	Simul_ReadNBytesDirect(uqbAddress, pumbOutput, udbLength);
;;;542    #endif
;;;543    }
        0x00006dca:    bd80        ..      POP      {r7,pc}
    baseWriteNBytes
;;; HardwareLayers/Abstraction/Wrappers\readUpdateNvmWrappers.c (457)
        0x00006dcc:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00006dce:    b097        ..      SUB      sp,sp,#0x5c
        0x00006dd0:    ab0f        ..      ADD      r3,sp,#0x3c
        0x00006dd2:    c307        ..      STM      r3!,{r0-r2}
        0x00006dd4:    f7ffff09    ....    BL       at_beginTxn ; 0x6bea
;;; HardwareLayers/Abstraction/Wrappers\readUpdateNvmWrappers.c
        0x00006dd8:    2149        I!      MOVS     r1,#0x49
        0x00006dda:    0249        I.      LSLS     r1,r1,#9
        0x00006ddc:    9102        ..      STR      r1,[sp,#8]
        0x00006dde:    780c        .x      LDRB     r4,[r1,#0]
        0x00006de0:    2109        .!      MOVS     r1,#9
        0x00006de2:    0309        ..      LSLS     r1,r1,#12
        0x00006de4:    780e        .x      LDRB     r6,[r1,#0]
        0x00006de6:    1b31        1.      SUBS     r1,r6,r4
        0x00006de8:    424a        JB      RSBS     r2,r1,#0
        0x00006dea:    414a        JA      ADCS     r2,r2,r1
        0x00006dec:    4631        1F      MOV      r1,r6
        0x00006dee:    39ff        .9      SUBS     r1,r1,#0xff
        0x00006df0:    424b        KB      RSBS     r3,r1,#0
        0x00006df2:    414b        KA      ADCS     r3,r3,r1
        0x00006df4:    4313        .C      ORRS     r3,r3,r2
        0x00006df6:    2103        .!      MOVS     r1,#3
        0x00006df8:    0249        I.      LSLS     r1,r1,#9
        0x00006dfa:    2525        %%      MOVS     r5,#0x25
        0x00006dfc:    02af        ..      LSLS     r7,r5,#10
        0x00006dfe:    2b01        .+      CMP      r3,#1
        0x00006e00:    9607        ..      STR      r6,[sp,#0x1c]
        0x00006e02:    d103        ..      BNE      0x6e0c ; baseWriteNBytes + 64
        0x00006e04:    4361        aC      MULS     r1,r4,r1
        0x00006e06:    19ce        ..      ADDS     r6,r1,r7
        0x00006e08:    960a        ..      STR      r6,[sp,#0x28]
        0x00006e0a:    e005        ..      B        0x6e18 ; baseWriteNBytes + 76
        0x00006e0c:    460a        .F      MOV      r2,r1
        0x00006e0e:    4372        rC      MULS     r2,r6,r2
        0x00006e10:    19d2        ..      ADDS     r2,r2,r7
        0x00006e12:    920a        ..      STR      r2,[sp,#0x28]
        0x00006e14:    434c        LC      MULS     r4,r1,r4
        0x00006e16:    19e6        ..      ADDS     r6,r4,r7
        0x00006e18:    9c0f        ..      LDR      r4,[sp,#0x3c]
        0x00006e1a:    0a62        b.      LSRS     r2,r4,#9
        0x00006e1c:    a913        ..      ADD      r1,sp,#0x4c
        0x00006e1e:    4613        .F      MOV      r3,r2
        0x00006e20:    800a        ..      STRH     r2,[r1,#0]
        0x00006e22:    2101        .!      MOVS     r1,#1
        0x00006e24:    9105        ..      STR      r1,[sp,#0x14]
        0x00006e26:    0249        I.      LSLS     r1,r1,#9
        0x00006e28:    9a11        ..      LDR      r2,[sp,#0x44]
        0x00006e2a:    2a00        .*      CMP      r2,#0
        0x00006e2c:    960b        ..      STR      r6,[sp,#0x2c]
        0x00006e2e:    9112        ..      STR      r1,[sp,#0x48]
        0x00006e30:    9003        ..      STR      r0,[sp,#0xc]
        0x00006e32:    9501        ..      STR      r5,[sp,#4]
        0x00006e34:    d100        ..      BNE      0x6e38 ; baseWriteNBytes + 108
        0x00006e36:    e0e7        ..      B        0x7008 ; baseWriteNBytes + 572
        0x00006e38:    9700        ..      STR      r7,[sp,#0]
        0x00006e3a:    2001        .       MOVS     r0,#1
        0x00006e3c:    9004        ..      STR      r0,[sp,#0x10]
        0x00006e3e:    1e48        H.      SUBS     r0,r1,#1
        0x00006e40:    4004        .@      ANDS     r4,r4,r0
        0x00006e42:    2005        .       MOVS     r0,#5
        0x00006e44:    0340        @.      LSLS     r0,r0,#13
        0x00006e46:    9009        ..      STR      r0,[sp,#0x24]
        0x00006e48:    2000        .       MOVS     r0,#0
        0x00006e4a:    4ff4        .O      LDR      r7,[pc,#976] ; [0x721c] = 0xffff
        0x00006e4c:    9008        ..      STR      r0,[sp,#0x20]
        0x00006e4e:    9006        ..      STR      r0,[sp,#0x18]
        0x00006e50:    460e        .F      MOV      r6,r1
        0x00006e52:    461d        .F      MOV      r5,r3
        0x00006e54:    e00f        ..      B        0x6e76 ; baseWriteNBytes + 170
        0x00006e56:    9e12        ..      LDR      r6,[sp,#0x48]
        0x00006e58:    9d0d        ..      LDR      r5,[sp,#0x34]
        0x00006e5a:    1c6d        m.      ADDS     r5,r5,#1
        0x00006e5c:    a813        ..      ADD      r0,sp,#0x4c
        0x00006e5e:    8005        ..      STRH     r5,[r0,#0]
        0x00006e60:    9810        ..      LDR      r0,[sp,#0x40]
        0x00006e62:    990c        ..      LDR      r1,[sp,#0x30]
        0x00006e64:    1840        @.      ADDS     r0,r0,r1
        0x00006e66:    9010        ..      STR      r0,[sp,#0x40]
        0x00006e68:    9811        ..      LDR      r0,[sp,#0x44]
        0x00006e6a:    1a40        @.      SUBS     r0,r0,r1
        0x00006e6c:    2400        .$      MOVS     r4,#0
        0x00006e6e:    9011        ..      STR      r0,[sp,#0x44]
        0x00006e70:    0400        ..      LSLS     r0,r0,#16
        0x00006e72:    d100        ..      BNE      0x6e76 ; baseWriteNBytes + 170
        0x00006e74:    e0d3        ..      B        0x701e ; baseWriteNBytes + 594
        0x00006e76:    940f        ..      STR      r4,[sp,#0x3c]
        0x00006e78:    4639        9F      MOV      r1,r7
        0x00006e7a:    9f08        ..      LDR      r7,[sp,#0x20]
        0x00006e7c:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00006e7e:    950d        ..      STR      r5,[sp,#0x34]
        0x00006e80:    b2aa        ..      UXTH     r2,r5
        0x00006e82:    8803        ..      LDRH     r3,[r0,#0]
        0x00006e84:    4293        .B      CMP      r3,r2
        0x00006e86:    d00d        ..      BEQ      0x6ea4 ; baseWriteNBytes + 216
        0x00006e88:    4633        3F      MOV      r3,r6
        0x00006e8a:    335e        ^3      ADDS     r3,r3,#0x5e
        0x00006e8c:    b2bc        ..      UXTH     r4,r7
        0x00006e8e:    429c        .B      CMP      r4,r3
        0x00006e90:    d20e        ..      BCS      0x6eb0 ; baseWriteNBytes + 228
        0x00006e92:    8843        C.      LDRH     r3,[r0,#2]
        0x00006e94:    4293        .B      CMP      r3,r2
        0x00006e96:    d011        ..      BEQ      0x6ebc ; baseWriteNBytes + 240
        0x00006e98:    1d00        ..      ADDS     r0,r0,#4
        0x00006e9a:    1cbf        ..      ADDS     r7,r7,#2
        0x00006e9c:    b2aa        ..      UXTH     r2,r5
        0x00006e9e:    8803        ..      LDRH     r3,[r0,#0]
        0x00006ea0:    4293        .B      CMP      r3,r2
        0x00006ea2:    d1f1        ..      BNE      0x6e88 ; baseWriteNBytes + 188
        0x00006ea4:    b2b8        ..      UXTH     r0,r7
        0x00006ea6:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x00006ea8:    2aff        .*      CMP      r2,#0xff
        0x00006eaa:    d10d        ..      BNE      0x6ec8 ; baseWriteNBytes + 252
        0x00006eac:    970e        ..      STR      r7,[sp,#0x38]
        0x00006eae:    e061        a.      B        0x6f74 ; baseWriteNBytes + 424
        0x00006eb0:    4630        0F      MOV      r0,r6
        0x00006eb2:    305f        _0      ADDS     r0,r0,#0x5f
        0x00006eb4:    4637        7F      MOV      r7,r6
        0x00006eb6:    375f        _7      ADDS     r7,r7,#0x5f
        0x00006eb8:    2200        ."      MOVS     r2,#0
        0x00006eba:    e00d        ..      B        0x6ed8 ; baseWriteNBytes + 268
        0x00006ebc:    9805        ..      LDR      r0,[sp,#0x14]
        0x00006ebe:    4307        .C      ORRS     r7,r7,r0
        0x00006ec0:    b2b8        ..      UXTH     r0,r7
        0x00006ec2:    9a07        ..      LDR      r2,[sp,#0x1c]
        0x00006ec4:    2aff        .*      CMP      r2,#0xff
        0x00006ec6:    d0f1        ..      BEQ      0x6eac ; baseWriteNBytes + 224
        0x00006ec8:    0042        B.      LSLS     r2,r0,#1
        0x00006eca:    9b0a        ..      LDR      r3,[sp,#0x28]
        0x00006ecc:    5a9a        .Z      LDRH     r2,[r3,r2]
        0x00006ece:    4bd3        .K      LDR      r3,[pc,#844] ; [0x721c] = 0xffff
        0x00006ed0:    429a        .B      CMP      r2,r3
        0x00006ed2:    9a04        ..      LDR      r2,[sp,#0x10]
        0x00006ed4:    970e        ..      STR      r7,[sp,#0x38]
        0x00006ed6:    d04d        M.      BEQ      0x6f74 ; baseWriteNBytes + 424
        0x00006ed8:    920c        ..      STR      r2,[sp,#0x30]
        0x00006eda:    970e        ..      STR      r7,[sp,#0x38]
        0x00006edc:    1c4b        K.      ADDS     r3,r1,#1
        0x00006ede:    b29c        ..      UXTH     r4,r3
        0x00006ee0:    0064        d.      LSLS     r4,r4,#1
        0x00006ee2:    9a0a        ..      LDR      r2,[sp,#0x28]
        0x00006ee4:    1914        ..      ADDS     r4,r2,r4
        0x00006ee6:    8825        %.      LDRH     r5,[r4,#0]
        0x00006ee8:    4ecc        .N      LDR      r6,[pc,#816] ; [0x721c] = 0xffff
        0x00006eea:    42b5        .B      CMP      r5,r6
        0x00006eec:    d01f        ..      BEQ      0x6f2e ; baseWriteNBytes + 354
        0x00006eee:    9d12        ..      LDR      r5,[sp,#0x48]
        0x00006ef0:    355f        _5      ADDS     r5,r5,#0x5f
        0x00006ef2:    1c5f        _.      ADDS     r7,r3,#1
        0x00006ef4:    b2be        ..      UXTH     r6,r7
        0x00006ef6:    42ae        .B      CMP      r6,r5
        0x00006ef8:    d232        2.      BCS      0x6f60 ; baseWriteNBytes + 404
        0x00006efa:    8866        f.      LDRH     r6,[r4,#2]
        0x00006efc:    4ac7        .J      LDR      r2,[pc,#796] ; [0x721c] = 0xffff
        0x00006efe:    4296        .B      CMP      r6,r2
        0x00006f00:    d016        ..      BEQ      0x6f30 ; baseWriteNBytes + 356
        0x00006f02:    1c9f        ..      ADDS     r7,r3,#2
        0x00006f04:    b2be        ..      UXTH     r6,r7
        0x00006f06:    42ae        .B      CMP      r6,r5
        0x00006f08:    d22a        *.      BCS      0x6f60 ; baseWriteNBytes + 404
        0x00006f0a:    88a6        ..      LDRH     r6,[r4,#4]
        0x00006f0c:    4ac3        .J      LDR      r2,[pc,#780] ; [0x721c] = 0xffff
        0x00006f0e:    4296        .B      CMP      r6,r2
        0x00006f10:    d00e        ..      BEQ      0x6f30 ; baseWriteNBytes + 356
        0x00006f12:    1cdf        ..      ADDS     r7,r3,#3
        0x00006f14:    b2be        ..      UXTH     r6,r7
        0x00006f16:    42ae        .B      CMP      r6,r5
        0x00006f18:    d222        ".      BCS      0x6f60 ; baseWriteNBytes + 404
        0x00006f1a:    88e6        ..      LDRH     r6,[r4,#6]
        0x00006f1c:    4afb        .J      LDR      r2,[pc,#1004] ; [0x730c] = 0xffff
        0x00006f1e:    4296        .B      CMP      r6,r2
        0x00006f20:    d006        ..      BEQ      0x6f30 ; baseWriteNBytes + 356
        0x00006f22:    3408        .4      ADDS     r4,r4,#8
        0x00006f24:    1d1b        ..      ADDS     r3,r3,#4
        0x00006f26:    b29e        ..      UXTH     r6,r3
        0x00006f28:    42ae        .B      CMP      r6,r5
        0x00006f2a:    d3dc        ..      BCC      0x6ee6 ; baseWriteNBytes + 282
        0x00006f2c:    e018        ..      B        0x6f60 ; baseWriteNBytes + 404
        0x00006f2e:    461f        .F      MOV      r7,r3
        0x00006f30:    9e12        ..      LDR      r6,[sp,#0x48]
        0x00006f32:    4633        3F      MOV      r3,r6
        0x00006f34:    335f        _3      ADDS     r3,r3,#0x5f
        0x00006f36:    b2b9        ..      UXTH     r1,r7
        0x00006f38:    4299        .B      CMP      r1,r3
        0x00006f3a:    d206        ..      BCS      0x6f4a ; baseWriteNBytes + 382
        0x00006f3c:    0049        I.      LSLS     r1,r1,#1
        0x00006f3e:    9b0b        ..      LDR      r3,[sp,#0x2c]
        0x00006f40:    5a59        YZ      LDRH     r1,[r3,r1]
        0x00006f42:    4af2        .J      LDR      r2,[pc,#968] ; [0x730c] = 0xffff
        0x00006f44:    4291        .B      CMP      r1,r2
        0x00006f46:    4639        9F      MOV      r1,r7
        0x00006f48:    d1c8        ..      BNE      0x6edc ; baseWriteNBytes + 272
        0x00006f4a:    990c        ..      LDR      r1,[sp,#0x30]
        0x00006f4c:    2900        .)      CMP      r1,#0
        0x00006f4e:    d111        ..      BNE      0x6f74 ; baseWriteNBytes + 424
        0x00006f50:    21ff        .!      MOVS     r1,#0xff
        0x00006f52:    48f0        .H      LDR      r0,[pc,#960] ; [0x7314] = 0x20000344
        0x00006f54:    4632        2F      MOV      r2,r6
        0x00006f56:    f7f9fdfd    ....    BL       mem_set ; 0xb54
        0x00006f5a:    48ef        .H      LDR      r0,[pc,#956] ; [0x7318] = 0x7fff
        0x00006f5c:    900e        ..      STR      r0,[sp,#0x38]
        0x00006f5e:    e010        ..      B        0x6f82 ; baseWriteNBytes + 438
        0x00006f60:    1c89        ..      ADDS     r1,r1,#2
        0x00006f62:    b28f        ..      UXTH     r7,r1
        0x00006f64:    49ea        .I      LDR      r1,[pc,#936] ; [0x7310] = 0x25f
        0x00006f66:    428f        .B      CMP      r7,r1
        0x00006f68:    d800        ..      BHI      0x6f6c ; baseWriteNBytes + 416
        0x00006f6a:    4fe9        .O      LDR      r7,[pc,#932] ; [0x7310] = 0x25f
        0x00006f6c:    990c        ..      LDR      r1,[sp,#0x30]
        0x00006f6e:    2900        .)      CMP      r1,#0
        0x00006f70:    9e12        ..      LDR      r6,[sp,#0x48]
        0x00006f72:    d0ed        ..      BEQ      0x6f50 ; baseWriteNBytes + 388
        0x00006f74:    0240        @.      LSLS     r0,r0,#9
        0x00006f76:    9909        ..      LDR      r1,[sp,#0x24]
        0x00006f78:    1841        A.      ADDS     r1,r0,r1
        0x00006f7a:    48e6        .H      LDR      r0,[pc,#920] ; [0x7314] = 0x20000344
        0x00006f7c:    4632        2F      MOV      r2,r6
        0x00006f7e:    f7f9fd1e    ....    BL       mem_cpyFwd ; 0x9be
        0x00006f82:    9811        ..      LDR      r0,[sp,#0x44]
        0x00006f84:    b282        ..      UXTH     r2,r0
        0x00006f86:    990f        ..      LDR      r1,[sp,#0x3c]
        0x00006f88:    1888        ..      ADDS     r0,r1,r2
        0x00006f8a:    42b0        .B      CMP      r0,r6
        0x00006f8c:    d300        ..      BCC      0x6f90 ; baseWriteNBytes + 452
        0x00006f8e:    1a72        r.      SUBS     r2,r6,r1
        0x00006f90:    920c        ..      STR      r2,[sp,#0x30]
        0x00006f92:    b294        ..      UXTH     r4,r2
        0x00006f94:    48df        .H      LDR      r0,[pc,#892] ; [0x7314] = 0x20000344
        0x00006f96:    1846        F.      ADDS     r6,r0,r1
        0x00006f98:    4630        0F      MOV      r0,r6
        0x00006f9a:    9d10        ..      LDR      r5,[sp,#0x40]
        0x00006f9c:    4629        )F      MOV      r1,r5
        0x00006f9e:    4622        "F      MOV      r2,r4
        0x00006fa0:    f7f9fd63    ..c.    BL       mem_cmp ; 0xa6a
        0x00006fa4:    2800        .(      CMP      r0,#0
        0x00006fa6:    d100        ..      BNE      0x6faa ; baseWriteNBytes + 478
        0x00006fa8:    e755        U.      B        0x6e56 ; baseWriteNBytes + 138
        0x00006faa:    4630        0F      MOV      r0,r6
        0x00006fac:    4629        )F      MOV      r1,r5
        0x00006fae:    4622        "F      MOV      r2,r4
        0x00006fb0:    f7f9fd05    ....    BL       mem_cpyFwd ; 0x9be
        0x00006fb4:    b2b8        ..      UXTH     r0,r7
        0x00006fb6:    9d0e        ..      LDR      r5,[sp,#0x38]
        0x00006fb8:    b2a9        ..      UXTH     r1,r5
        0x00006fba:    4281        .B      CMP      r1,r0
        0x00006fbc:    d102        ..      BNE      0x6fc4 ; baseWriteNBytes + 504
        0x00006fbe:    9e12        ..      LDR      r6,[sp,#0x48]
        0x00006fc0:    9d0d        ..      LDR      r5,[sp,#0x34]
        0x00006fc2:    e00e        ..      B        0x6fe2 ; baseWriteNBytes + 534
        0x00006fc4:    0079        y.      LSLS     r1,r7,#1
        0x00006fc6:    9c06        ..      LDR      r4,[sp,#0x18]
        0x00006fc8:    0622        ".      LSLS     r2,r4,#24
        0x00006fca:    0dd2        ..      LSRS     r2,r2,#23
        0x00006fcc:    ab15        ..      ADD      r3,sp,#0x54
        0x00006fce:    5299        .R      STRH     r1,[r3,r2]
        0x00006fd0:    0069        i.      LSLS     r1,r5,#1
        0x00006fd2:    ab16        ..      ADD      r3,sp,#0x58
        0x00006fd4:    5299        .R      STRH     r1,[r3,r2]
        0x00006fd6:    a914        ..      ADD      r1,sp,#0x50
        0x00006fd8:    9d0d        ..      LDR      r5,[sp,#0x34]
        0x00006fda:    528d        .R      STRH     r5,[r1,r2]
        0x00006fdc:    1c64        d.      ADDS     r4,r4,#1
        0x00006fde:    9406        ..      STR      r4,[sp,#0x18]
        0x00006fe0:    9e12        ..      LDR      r6,[sp,#0x48]
        0x00006fe2:    0240        @.      LSLS     r0,r0,#9
        0x00006fe4:    9909        ..      LDR      r1,[sp,#0x24]
        0x00006fe6:    1844        D.      ADDS     r4,r0,r1
        0x00006fe8:    4620         F      MOV      r0,r4
        0x00006fea:    f7f9f98d    ....    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x00006fee:    b2c0        ..      UXTB     r0,r0
        0x00006ff0:    28ff        .(      CMP      r0,#0xff
        0x00006ff2:    d000        ..      BEQ      0x6ff6 ; baseWriteNBytes + 554
        0x00006ff4:    e181        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x00006ff6:    4620         F      MOV      r0,r4
        0x00006ff8:    49c6        .I      LDR      r1,[pc,#792] ; [0x7314] = 0x20000344
        0x00006ffa:    f7f9f977    ..w.    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x00006ffe:    b2c0        ..      UXTB     r0,r0
        0x00007000:    28ff        .(      CMP      r0,#0xff
        0x00007002:    d100        ..      BNE      0x7006 ; baseWriteNBytes + 570
        0x00007004:    e729        ).      B        0x6e5a ; baseWriteNBytes + 142
        0x00007006:    e178        x.      B        0x72fa ; baseWriteNBytes + 1326
        0x00007008:    990a        ..      LDR      r1,[sp,#0x28]
        0x0000700a:    42b9        .B      CMP      r1,r7
        0x0000700c:    d101        ..      BNE      0x7012 ; baseWriteNBytes + 582
        0x0000700e:    214d        M!      MOVS     r1,#0x4d
        0x00007010:    024f        O.      LSLS     r7,r1,#9
        0x00007012:    980a        ..      LDR      r0,[sp,#0x28]
        0x00007014:    4286        .B      CMP      r6,r0
        0x00007016:    d000        ..      BEQ      0x701a ; baseWriteNBytes + 590
        0x00007018:    4637        7F      MOV      r7,r6
        0x0000701a:    463c        <F      MOV      r4,r7
        0x0000701c:    e03a        :.      B        0x7094 ; baseWriteNBytes + 712
        0x0000701e:    9c00        ..      LDR      r4,[sp,#0]
        0x00007020:    990a        ..      LDR      r1,[sp,#0x28]
        0x00007022:    42a1        .B      CMP      r1,r4
        0x00007024:    d101        ..      BNE      0x702a ; baseWriteNBytes + 606
        0x00007026:    204d        M       MOVS     r0,#0x4d
        0x00007028:    0244        D.      LSLS     r4,r0,#9
        0x0000702a:    9e0b        ..      LDR      r6,[sp,#0x2c]
        0x0000702c:    9d06        ..      LDR      r5,[sp,#0x18]
        0x0000702e:    980a        ..      LDR      r0,[sp,#0x28]
        0x00007030:    4286        .B      CMP      r6,r0
        0x00007032:    d000        ..      BEQ      0x7036 ; baseWriteNBytes + 618
        0x00007034:    4634        4F      MOV      r4,r6
        0x00007036:    0628        (.      LSLS     r0,r5,#24
        0x00007038:    d02c        ,.      BEQ      0x7094 ; baseWriteNBytes + 712
        0x0000703a:    940f        ..      STR      r4,[sp,#0x3c]
        0x0000703c:    48b5        .H      LDR      r0,[pc,#724] ; [0x7314] = 0x20000344
        0x0000703e:    4631        1F      MOV      r1,r6
        0x00007040:    9a12        ..      LDR      r2,[sp,#0x48]
        0x00007042:    f7f9fcbc    ....    BL       mem_cpyFwd ; 0x9be
        0x00007046:    b2ef        ..      UXTB     r7,r5
        0x00007048:    2000        .       MOVS     r0,#0
        0x0000704a:    ac14        ..      ADD      r4,sp,#0x50
        0x0000704c:    ad15        ..      ADD      r5,sp,#0x54
        0x0000704e:    ae16        ..      ADD      r6,sp,#0x58
        0x00007050:    9710        ..      STR      r7,[sp,#0x40]
        0x00007052:    e006        ..      B        0x7062 ; baseWriteNBytes + 662
        0x00007054:    1cb6        ..      ADDS     r6,r6,#2
        0x00007056:    1cad        ..      ADDS     r5,r5,#2
        0x00007058:    1e7f        ..      SUBS     r7,r7,#1
        0x0000705a:    1ca4        ..      ADDS     r4,r4,#2
        0x0000705c:    2f00        ./      CMP      r7,#0
        0x0000705e:    d100        ..      BNE      0x7062 ; baseWriteNBytes + 662
        0x00007060:    e08c        ..      B        0x717c ; baseWriteNBytes + 944
        0x00007062:    8832        2.      LDRH     r2,[r6,#0]
        0x00007064:    9b12        ..      LDR      r3,[sp,#0x48]
        0x00007066:    429a        .B      CMP      r2,r3
        0x00007068:    d209        ..      BCS      0x707e ; baseWriteNBytes + 690
        0x0000706a:    a913        ..      ADD      r1,sp,#0x4c
        0x0000706c:    48a7        .H      LDR      r0,[pc,#668] ; [0x730c] = 0xffff
        0x0000706e:    8008        ..      STRH     r0,[r1,#0]
        0x00007070:    48a8        .H      LDR      r0,[pc,#672] ; [0x7314] = 0x20000344
        0x00007072:    1880        ..      ADDS     r0,r0,r2
        0x00007074:    2202        ."      MOVS     r2,#2
        0x00007076:    f7f9fca2    ....    BL       mem_cpyFwd ; 0x9be
        0x0000707a:    9b12        ..      LDR      r3,[sp,#0x48]
        0x0000707c:    2001        .       MOVS     r0,#1
        0x0000707e:    8829        ).      LDRH     r1,[r5,#0]
        0x00007080:    4299        .B      CMP      r1,r3
        0x00007082:    d2e7        ..      BCS      0x7054 ; baseWriteNBytes + 648
        0x00007084:    48a3        .H      LDR      r0,[pc,#652] ; [0x7314] = 0x20000344
        0x00007086:    1840        @.      ADDS     r0,r0,r1
        0x00007088:    2202        ."      MOVS     r2,#2
        0x0000708a:    4621        !F      MOV      r1,r4
        0x0000708c:    f7f9fc97    ....    BL       mem_cpyFwd ; 0x9be
        0x00007090:    2001        .       MOVS     r0,#1
        0x00007092:    e7df        ..      B        0x7054 ; baseWriteNBytes + 648
        0x00007094:    489f        .H      LDR      r0,[pc,#636] ; [0x7314] = 0x20000344
        0x00007096:    4631        1F      MOV      r1,r6
        0x00007098:    9f12        ..      LDR      r7,[sp,#0x48]
        0x0000709a:    463a        :F      MOV      r2,r7
        0x0000709c:    f7f9fc8f    ....    BL       mem_cpyFwd ; 0x9be
        0x000070a0:    42a6        .B      CMP      r6,r4
        0x000070a2:    d03e        >.      BEQ      0x7122 ; baseWriteNBytes + 854
        0x000070a4:    4620         F      MOV      r0,r4
        0x000070a6:    f7f9f92f    ../.    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x000070aa:    b2c0        ..      UXTB     r0,r0
        0x000070ac:    28ff        .(      CMP      r0,#0xff
        0x000070ae:    d000        ..      BEQ      0x70b2 ; baseWriteNBytes + 742
        0x000070b0:    e123        #.      B        0x72fa ; baseWriteNBytes + 1326
        0x000070b2:    463e        >F      MOV      r6,r7
        0x000070b4:    4997        .I      LDR      r1,[pc,#604] ; [0x7314] = 0x20000344
        0x000070b6:    4620         F      MOV      r0,r4
        0x000070b8:    f7f9f918    ....    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x000070bc:    b2c0        ..      UXTB     r0,r0
        0x000070be:    28ff        .(      CMP      r0,#0xff
        0x000070c0:    d000        ..      BEQ      0x70c4 ; baseWriteNBytes + 760
        0x000070c2:    e11a        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x000070c4:    2501        .%      MOVS     r5,#1
        0x000070c6:    026f        o.      LSLS     r7,r5,#9
        0x000070c8:    980b        ..      LDR      r0,[sp,#0x2c]
        0x000070ca:    19c1        ..      ADDS     r1,r0,r7
        0x000070cc:    4891        .H      LDR      r0,[pc,#580] ; [0x7314] = 0x20000344
        0x000070ce:    4632        2F      MOV      r2,r6
        0x000070d0:    f7f9fc75    ..u.    BL       mem_cpyFwd ; 0x9be
        0x000070d4:    19e7        ..      ADDS     r7,r4,r7
        0x000070d6:    4638        8F      MOV      r0,r7
        0x000070d8:    f7f9f916    ....    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x000070dc:    b2c0        ..      UXTB     r0,r0
        0x000070de:    28ff        .(      CMP      r0,#0xff
        0x000070e0:    d000        ..      BEQ      0x70e4 ; baseWriteNBytes + 792
        0x000070e2:    e10a        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x000070e4:    498b        .I      LDR      r1,[pc,#556] ; [0x7314] = 0x20000344
        0x000070e6:    4638        8F      MOV      r0,r7
        0x000070e8:    f7f9f900    ....    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x000070ec:    b2c0        ..      UXTB     r0,r0
        0x000070ee:    28ff        .(      CMP      r0,#0xff
        0x000070f0:    d000        ..      BEQ      0x70f4 ; baseWriteNBytes + 808
        0x000070f2:    e102        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x000070f4:    02ad        ..      LSLS     r5,r5,#10
        0x000070f6:    980b        ..      LDR      r0,[sp,#0x2c]
        0x000070f8:    1941        A.      ADDS     r1,r0,r5
        0x000070fa:    4886        .H      LDR      r0,[pc,#536] ; [0x7314] = 0x20000344
        0x000070fc:    4632        2F      MOV      r2,r6
        0x000070fe:    f7f9fc5e    ..^.    BL       mem_cpyFwd ; 0x9be
        0x00007102:    1965        e.      ADDS     r5,r4,r5
        0x00007104:    4628        (F      MOV      r0,r5
        0x00007106:    f7f9f8ff    ....    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x0000710a:    b2c0        ..      UXTB     r0,r0
        0x0000710c:    28ff        .(      CMP      r0,#0xff
        0x0000710e:    d000        ..      BEQ      0x7112 ; baseWriteNBytes + 838
        0x00007110:    e0f3        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x00007112:    4980        .I      LDR      r1,[pc,#512] ; [0x7314] = 0x20000344
        0x00007114:    4628        (F      MOV      r0,r5
        0x00007116:    f7f9f8e9    ....    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x0000711a:    b2c0        ..      UXTB     r0,r0
        0x0000711c:    28ff        .(      CMP      r0,#0xff
        0x0000711e:    d010        ..      BEQ      0x7142 ; baseWriteNBytes + 886
        0x00007120:    e0eb        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x00007122:    2501        .%      MOVS     r5,#1
        0x00007124:    0268        h.      LSLS     r0,r5,#9
        0x00007126:    1831        1.      ADDS     r1,r6,r0
        0x00007128:    4c7a        zL      LDR      r4,[pc,#488] ; [0x7314] = 0x20000344
        0x0000712a:    4620         F      MOV      r0,r4
        0x0000712c:    463a        :F      MOV      r2,r7
        0x0000712e:    f7f9fc46    ..F.    BL       mem_cpyFwd ; 0x9be
        0x00007132:    02a8        ..      LSLS     r0,r5,#10
        0x00007134:    1831        1.      ADDS     r1,r6,r0
        0x00007136:    4620         F      MOV      r0,r4
        0x00007138:    463a        :F      MOV      r2,r7
        0x0000713a:    f7f9fc40    ..@.    BL       mem_cpyFwd ; 0x9be
        0x0000713e:    4634        4F      MOV      r4,r6
        0x00007140:    463e        >F      MOV      r6,r7
        0x00007142:    980b        ..      LDR      r0,[sp,#0x2c]
        0x00007144:    42a0        .B      CMP      r0,r4
        0x00007146:    d100        ..      BNE      0x714a ; baseWriteNBytes + 894
        0x00007148:    e0d7        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x0000714a:    4f72        rO      LDR      r7,[pc,#456] ; [0x7314] = 0x20000344
        0x0000714c:    4638        8F      MOV      r0,r7
        0x0000714e:    9d02        ..      LDR      r5,[sp,#8]
        0x00007150:    4629        )F      MOV      r1,r5
        0x00007152:    4632        2F      MOV      r2,r6
        0x00007154:    f7f9fc33    ..3.    BL       mem_cpyFwd ; 0x9be
        0x00007158:    9801        ..      LDR      r0,[sp,#4]
        0x0000715a:    0280        ..      LSLS     r0,r0,#10
        0x0000715c:    1a20         .      SUBS     r0,r4,r0
        0x0000715e:    1e41        A.      SUBS     r1,r0,#1
        0x00007160:    4188        .A      SBCS     r0,r0,r1
        0x00007162:    7038        8p      STRB     r0,[r7,#0]
        0x00007164:    4628        (F      MOV      r0,r5
        0x00007166:    f7f9f8cf    ....    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x0000716a:    b2c0        ..      UXTB     r0,r0
        0x0000716c:    28ff        .(      CMP      r0,#0xff
        0x0000716e:    d000        ..      BEQ      0x7172 ; baseWriteNBytes + 934
        0x00007170:    e0c3        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x00007172:    4968        hI      LDR      r1,[pc,#416] ; [0x7314] = 0x20000344
        0x00007174:    9802        ..      LDR      r0,[sp,#8]
        0x00007176:    f7f9f8b9    ....    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x0000717a:    e0be        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x0000717c:    1e41        A.      SUBS     r1,r0,#1
        0x0000717e:    4248        HB      RSBS     r0,r1,#0
        0x00007180:    4148        HA      ADCS     r0,r0,r1
        0x00007182:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00007184:    9d0f        ..      LDR      r5,[sp,#0x3c]
        0x00007186:    42a9        .B      CMP      r1,r5
        0x00007188:    9904        ..      LDR      r1,[sp,#0x10]
        0x0000718a:    d100        ..      BNE      0x718e ; baseWriteNBytes + 962
        0x0000718c:    4601        .F      MOV      r1,r0
        0x0000718e:    2900        .)      CMP      r1,#0
        0x00007190:    9c12        ..      LDR      r4,[sp,#0x48]
        0x00007192:    d00e        ..      BEQ      0x71b2 ; baseWriteNBytes + 998
        0x00007194:    4628        (F      MOV      r0,r5
        0x00007196:    f7f9f8b7    ....    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x0000719a:    b2c0        ..      UXTB     r0,r0
        0x0000719c:    28ff        .(      CMP      r0,#0xff
        0x0000719e:    d000        ..      BEQ      0x71a2 ; baseWriteNBytes + 982
        0x000071a0:    e0ab        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x000071a2:    495c        \I      LDR      r1,[pc,#368] ; [0x7314] = 0x20000344
        0x000071a4:    4628        (F      MOV      r0,r5
        0x000071a6:    f7f9f8a1    ....    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x000071aa:    b2c0        ..      UXTB     r0,r0
        0x000071ac:    28ff        .(      CMP      r0,#0xff
        0x000071ae:    d000        ..      BEQ      0x71b2 ; baseWriteNBytes + 998
        0x000071b0:    e0a3        ..      B        0x72fa ; baseWriteNBytes + 1326
        0x000071b2:    980b        ..      LDR      r0,[sp,#0x2c]
        0x000071b4:    1901        ..      ADDS     r1,r0,r4
        0x000071b6:    4857        WH      LDR      r0,[pc,#348] ; [0x7314] = 0x20000344
        0x000071b8:    4622        "F      MOV      r2,r4
        0x000071ba:    f7f9fc00    ....    BL       mem_cpyFwd ; 0x9be
        0x000071be:    207f        .       MOVS     r0,#0x7f
        0x000071c0:    0240        @.      LSLS     r0,r0,#9
        0x000071c2:    9011        ..      STR      r0,[sp,#0x44]
        0x000071c4:    2000        .       MOVS     r0,#0
        0x000071c6:    ac14        ..      ADD      r4,sp,#0x50
        0x000071c8:    ad15        ..      ADD      r5,sp,#0x54
        0x000071ca:    ae16        ..      ADD      r6,sp,#0x58
        0x000071cc:    9f10        ..      LDR      r7,[sp,#0x40]
        0x000071ce:    e005        ..      B        0x71dc ; baseWriteNBytes + 1040
        0x000071d0:    1cb6        ..      ADDS     r6,r6,#2
        0x000071d2:    1cad        ..      ADDS     r5,r5,#2
        0x000071d4:    1e7f        ..      SUBS     r7,r7,#1
        0x000071d6:    1ca4        ..      ADDS     r4,r4,#2
        0x000071d8:    2f00        ./      CMP      r7,#0
        0x000071da:    d021        !.      BEQ      0x7220 ; baseWriteNBytes + 1108
        0x000071dc:    8832        2.      LDRH     r2,[r6,#0]
        0x000071de:    4611        .F      MOV      r1,r2
        0x000071e0:    9b11        ..      LDR      r3,[sp,#0x44]
        0x000071e2:    4019        .@      ANDS     r1,r1,r3
        0x000071e4:    9b12        ..      LDR      r3,[sp,#0x48]
        0x000071e6:    4299        .B      CMP      r1,r3
        0x000071e8:    d108        ..      BNE      0x71fc ; baseWriteNBytes + 1072
        0x000071ea:    a913        ..      ADD      r1,sp,#0x4c
        0x000071ec:    4847        GH      LDR      r0,[pc,#284] ; [0x730c] = 0xffff
        0x000071ee:    8008        ..      STRH     r0,[r1,#0]
        0x000071f0:    4848        HH      LDR      r0,[pc,#288] ; [0x7314] = 0x20000344
        0x000071f2:    1880        ..      ADDS     r0,r0,r2
        0x000071f4:    2202        ."      MOVS     r2,#2
        0x000071f6:    f7f9fbe2    ....    BL       mem_cpyFwd ; 0x9be
        0x000071fa:    2001        .       MOVS     r0,#1
        0x000071fc:    8829        ).      LDRH     r1,[r5,#0]
        0x000071fe:    460a        .F      MOV      r2,r1
        0x00007200:    9b11        ..      LDR      r3,[sp,#0x44]
        0x00007202:    401a        .@      ANDS     r2,r2,r3
        0x00007204:    9b12        ..      LDR      r3,[sp,#0x48]
        0x00007206:    429a        .B      CMP      r2,r3
        0x00007208:    d1e2        ..      BNE      0x71d0 ; baseWriteNBytes + 1028
        0x0000720a:    4842        BH      LDR      r0,[pc,#264] ; [0x7314] = 0x20000344
        0x0000720c:    1840        @.      ADDS     r0,r0,r1
        0x0000720e:    2202        ."      MOVS     r2,#2
        0x00007210:    4621        !F      MOV      r1,r4
        0x00007212:    f7f9fbd4    ....    BL       mem_cpyFwd ; 0x9be
        0x00007216:    2001        .       MOVS     r0,#1
        0x00007218:    e7da        ..      B        0x71d0 ; baseWriteNBytes + 1028
        0x0000721a:    46c0        .F      MOV      r8,r8
    $d.3
        0x0000721c:    0000ffff    ....    DCD    65535
    $t.4
        0x00007220:    1e41        A.      SUBS     r1,r0,#1
        0x00007222:    4248        HB      RSBS     r0,r1,#0
        0x00007224:    4148        HA      ADCS     r0,r0,r1
        0x00007226:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00007228:    9a0f        ..      LDR      r2,[sp,#0x3c]
        0x0000722a:    4291        .B      CMP      r1,r2
        0x0000722c:    9904        ..      LDR      r1,[sp,#0x10]
        0x0000722e:    d100        ..      BNE      0x7232 ; baseWriteNBytes + 1126
        0x00007230:    4601        .F      MOV      r1,r0
        0x00007232:    2901        .)      CMP      r1,#1
        0x00007234:    9d12        ..      LDR      r5,[sp,#0x48]
        0x00007236:    d10f        ..      BNE      0x7258 ; baseWriteNBytes + 1164
        0x00007238:    2001        .       MOVS     r0,#1
        0x0000723a:    0240        @.      LSLS     r0,r0,#9
        0x0000723c:    1814        ..      ADDS     r4,r2,r0
        0x0000723e:    4620         F      MOV      r0,r4
        0x00007240:    f7f9f862    ..b.    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x00007244:    b2c0        ..      UXTB     r0,r0
        0x00007246:    28ff        .(      CMP      r0,#0xff
        0x00007248:    d157        W.      BNE      0x72fa ; baseWriteNBytes + 1326
        0x0000724a:    4932        2I      LDR      r1,[pc,#200] ; [0x7314] = 0x20000344
        0x0000724c:    4620         F      MOV      r0,r4
        0x0000724e:    f7f9f84d    ..M.    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x00007252:    b2c0        ..      UXTB     r0,r0
        0x00007254:    28ff        .(      CMP      r0,#0xff
        0x00007256:    d150        P.      BNE      0x72fa ; baseWriteNBytes + 1326
        0x00007258:    9805        ..      LDR      r0,[sp,#0x14]
        0x0000725a:    0280        ..      LSLS     r0,r0,#10
        0x0000725c:    4607        .F      MOV      r7,r0
        0x0000725e:    990b        ..      LDR      r1,[sp,#0x2c]
        0x00007260:    1809        ..      ADDS     r1,r1,r0
        0x00007262:    482c        ,H      LDR      r0,[pc,#176] ; [0x7314] = 0x20000344
        0x00007264:    462a        *F      MOV      r2,r5
        0x00007266:    f7f9fbaa    ....    BL       mem_cpyFwd ; 0x9be
        0x0000726a:    2000        .       MOVS     r0,#0
        0x0000726c:    ac14        ..      ADD      r4,sp,#0x50
        0x0000726e:    ae15        ..      ADD      r6,sp,#0x54
        0x00007270:    ad16        ..      ADD      r5,sp,#0x58
        0x00007272:    e007        ..      B        0x7284 ; baseWriteNBytes + 1208
        0x00007274:    1cad        ..      ADDS     r5,r5,#2
        0x00007276:    1cb6        ..      ADDS     r6,r6,#2
        0x00007278:    9910        ..      LDR      r1,[sp,#0x40]
        0x0000727a:    1e49        I.      SUBS     r1,r1,#1
        0x0000727c:    1ca4        ..      ADDS     r4,r4,#2
        0x0000727e:    9110        ..      STR      r1,[sp,#0x40]
;;;1      #include "wrappers.h"
;;;2      
;;;3      /*
;;;4      * Macros declaration
;;;5      */
;;;6      #define DEFAULT_BYTE								(0xFF)
;;;7      
;;;8      #ifdef _CHIP_THC80F340A
;;;9      #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(x)))
;;;10     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(x)))
;;;11     #else
;;;12     #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;13     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;14     #endif 
;;;15     
;;;16     /*
;;;17     * Variables declaration
;;;18     */
;;;19     static uMonoByte gumbFlashBuff[PAGE_SIZE];
;;;20     
;;;21     /*
;;;22     * Functions declarations
;;;23     */
;;;24     /*Erase the page on given address*/
;;;25     static boolean  baseErasePageDirect(uQuadByte uqbAddress);
;;;26     
;;;27     /*Write the data on erased page*/
;;;28     static boolean  baseWritePageDirect(uQuadByte uqbAddress, puMonoByte pumbInput);
;;;29     
;;;30     /*
;;;31     * Erase and Write page data
;;;32     *
;;;33     * uqbFlashAddr: Page address (It should be starting address of any page to updated)
;;;34     * pumbPageData: data buffer to update. must contain page size data.
;;;35     */
;;;36     static boolean updatePage(uQuadByte uqbFlashAddr, puMonoByte pumbPageData) {
;;;37     
;;;38     	/*Erase the physical destination page first*/
;;;39     	if (TRUE == baseErasePageDirect(uqbFlashAddr))
;;;40     	{
;;;41     		/*Write the Page buffer*/
;;;42     		if (TRUE == baseWritePageDirect(uqbFlashAddr, pumbPageData))
;;;43     		{
;;;44     			/*if writing passed*/
;;;45     			return TRUE;
;;;46     		}
;;;47     	}
;;;48     	/*If erase or write failed*/
;;;49     	return FALSE;
;;;50     }
;;;51     
;;;52     #ifdef FEAT_EXHAUSTEARING
;;;53     
;;;54     /*
;;;55     * Search of give Virtual page value in the provided page table address
;;;56     *
;;;57     * ptVirtualPage: Value to search
;;;58     * udbStartOffset: index from where search starts
;;;59     * pptPageTable: Address of Page table
;;;60     */
;;;61     static uDiByte searchVirtualPage(pageTableEntry ptVirtualPage, uDiByte udbStartOffset, pPageTableEntry pptPageTable) {
;;;62     
;;;63     	/*move pointer to Start offset in given Page table*/
;;;64     	pptPageTable += udbStartOffset;
;;;65     
;;;66     	/*search for free page (free in both active and backup page table) and given virtual page in active page table*/
;;;67     	do {
;;;68     		if (READ_PAGE_TABLE_ENTRY(pptPageTable) == ptVirtualPage) {
;;;69     
;;;70     			/*Page no. from where data will be copied*/
;;;71     			break;
;;;72     		}
;;;73     
;;;74     		/*increment to next page entry*/
;;;75     		udbStartOffset++;
;;;76     		pptPageTable++;
;;;77     
;;;78     	} while (udbStartOffset < TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE);
;;;79     
;;;80     	return udbStartOffset;
;;;81     }
;;;82     /*
;;;83     * function to update the data on another free page
;;;84     *
;;;85     */
;;;86     static boolean WriteNBytes(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength) {
;;;87     
;;;88     	uMonoByte			umbActivePt;
;;;89     	uMonoByte			umbTxnStateOrBackupPt;
;;;90     	uMonoByte			umbNewPagesUpdated = 0x00;
;;;91     	uMonoByte			umbIndex = 0x00;
;;;92     	uDiByte				udbOffset;
;;;93     	uDiByte				udbSrcPg = 0x00;
;;;94     	uDiByte				udbDestPage = 0xFFFF; //Reset it to -1
;;;95     	uDiByte 			udbRemain;
;;;96     	uDiByte 			udbToDo = 0x00;
;;;97     	uDiByte				udbSrcPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;98     	uDiByte				udbDestPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;99     	pageTableEntry		ptVirtualPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;100    	pageTableEntry		ptVirtualPg;
;;;101    	pPageTableEntry		pptActive;
;;;102    	pPageTableEntry		pptBackup;
;;;103    
;;;104    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] WriteNBytes() \n");
;;;105    
;;;106    	/*read active page table*/
;;;107    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;108    
;;;109    	/*Read backup page table*/
;;;110    	umbTxnStateOrBackupPt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;111    
;;;112    	if ((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || (umbTxnStateOrBackupPt == umbActivePt)) {
;;;113    
;;;114    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;115    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;116    	}
;;;117    	else {
;;;118    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;119    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbTxnStateOrBackupPt * SIZE_PAGE_TABLE));
;;;120    	}
;;;121    
;;;122    	/*Extract page address*/
;;;123    	ptVirtualPg = (pageTableEntry)GET_PAGE_NUMBER(uqbAddress);
;;;124    
;;;125    	/*Offset in current virtual page*/
;;;126    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;127    
;;;128    	for (udbRemain = udbLength; udbRemain; udbRemain -= udbToDo)
;;;129    	{
;;;130    		/****************************Antitearing code*****************************************/
;;;131    
;;;132    		/*********Searching The Given virtual page*********/
;;;133    
;;;134    		/*Search for Virtual Page in entry*/
;;;135    		udbSrcPg = searchVirtualPage(ptVirtualPg, 0x00, pptActive);
;;;136    
;;;137    		if ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg)/*virtual page found in Active page table*/
;;;138    			&&
;;;139    			((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || ((pageTableEntry)(PAGE_IS_FREE) == READ_PAGE_TABLE_ENTRY(pptBackup + udbSrcPg))))
;;;140    			/*No transaction in progress
;;;141    			*	or
;;;142    			* otherwise check if corresponding offset in backup page is free (indicates that page is newly created in the current transaction)
;;;143    			*/
;;;144    		{
;;;145    			/*Data will be updated in same page*/
;;;146    			udbDestPage = udbSrcPg;
;;;147    		}
;;;148    		else {
;;;149    			/*search for free page in backup page*/
;;;150    			do {
;;;151    
;;;152    				/*searching free page*/
;;;153    				/*Always start from next page, first time this loop will be called, (udbDestPage + 0x01) results into 00*/
;;;154    				udbDestPage = searchVirtualPage((pageTableEntry)PAGE_IS_FREE, (udbDestPage + 0x01), pptBackup);
;;;155    
;;;156    			} while ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbDestPage) //if dest page checked the whole page table (Though it will never happend, because it will be ensured that OS maintains minimum number of free pages for AT)
;;;157    				&& \
;;;158    				((pageTableEntry)(PAGE_IS_FREE) != READ_PAGE_TABLE_ENTRY(pptActive + udbDestPage))); // check until same page hasnt been found free in active page as well
;;;159    		}
;;;160    		/*********************Searching done*************/
;;;161    
;;;162    		/******************Writing the data start*****************/
;;;163    		/*If virtual page is found in active PT*/
;;;164    		if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg) {
;;;165    
;;;166    			/*Convert page number into physical page address*/
;;;167    			/*Read whole page in buffer*/
;;;168    			baseReadNBytesDirect((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbSrcPg)), gumbFlashBuff, PAGE_SIZE);
;;;169    
;;;170    		}
;;;171    		else {
;;;172    			/*Indication as source page is not found, to ensure that Page table doesnt get update for this entry*/
;;;173    			udbSrcPg = INVALID_PAGE_ENTRY_VALUE;
;;;174    
;;;175    			/*This is first time given Virtual page is updating so default data would be 'FF' */
;;;176    			mem_set(gumbFlashBuff, 0xFF, PAGE_SIZE);
;;;177    		}
;;;178    
;;;179    		/*Calculate data length that we need to update in given page*/
;;;180    		udbToDo = (udbOffset + udbRemain) < PAGE_SIZE ? udbRemain : (PAGE_SIZE - udbOffset);
;;;181    
;;;182    		/*Check if data is same so please dont update, for god sake*/
;;;183    		if (mem_cmp(&gumbFlashBuff[udbOffset], pumbInput, udbToDo)) {
;;;184    
;;;185    			/*Update new data in the page buffer*/
;;;186    			mem_cpy(&gumbFlashBuff[udbOffset], pumbInput, udbToDo);
;;;187    
;;;188    			/*Check if new physical page is different from previous one*/
;;;189    			if (udbSrcPg != udbDestPage) {
;;;190    
;;;191    				//DBG_FUNC("[READ_UPDATE_NVM] WriteNBytes(): Mapping Virtual Page %2 to Physical Page %2\n", ptVirtualPg, udbDestPage);
;;;192    				/*store updating source and destination physical pages for current virtual page update*/
;;;193    				udbSrcPgs[umbNewPagesUpdated] = udbSrcPg * TABLE_ENTRY_SIZE;
;;;194    				udbDestPgs[umbNewPagesUpdated] = udbDestPage * TABLE_ENTRY_SIZE;
;;;195    				ptVirtualPgs[umbNewPagesUpdated++] = ptVirtualPg;
;;;196    
;;;197    			}
;;;198    
;;;199    			/*Convert dest page number into physical page address*/
;;;200    			/*Update physical page*/
;;;201    			if (FALSE == updatePage((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbDestPage)), gumbFlashBuff)) {
;;;202    				return FALSE;
;;;203    			}
;;;204    		}
;;;205    
;;;206    		/*Next offset must be 00*/
;;;207    		udbOffset = 0x00;//udbOffset = (uDiByte)(udbToDo + udbOffset) & (PAGE_SIZE - 1);
;;;208    
;;;209    		/*Next address would be next page*/
;;;210    		ptVirtualPg++;
;;;211    
;;;212    		/*Increase the offset for input from where next block of data will be read*/
;;;213    		pumbInput += udbToDo;
;;;214    
;;;215    		/******************Write data done***/
;;;216    	}
;;;217    
;;;218    	/*******************Update Page table*************/
;;;219    	if (pptActive == pptBackup) {
;;;220    		/*If first time page table is updating in current transaction
;;;221    		* Old page table will be active one and new page table will be alternative one
;;;222    		*/
;;;223    
;;;224    		/*Which table is active*/
;;;225    		if ((pPageTableEntry)ADDRESS_PAGE_TABLE_1_START == pptBackup) {
;;;226    
;;;227    			/*Old table will be PT1 */
;;;228    			/*New table will be PT2 */
;;;229    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_2_START;
;;;230    		}
;;;231    		else {
;;;232    			/*Old table will be PT2 */
;;;233    			/*New Table will be PT1 */
;;;234    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_1_START;
;;;235    		}
;;;236    
;;;237    	}
;;;238    	else {
;;;239    		/*This isnt first update in transaction, It means backup has already been taken.
;;;240    		* So old page table and new page table will be same
;;;241    		*/
;;;242    
;;;243    		/*Old table = new table*/
;;;244    		pptBackup = pptActive;
;;;245    	}
;;;246    
;;;247    	/*Number of pages processed of Page Table*/
;;;248    	umbActivePt = 0x00;
;;;249    
;;;250    	while (umbActivePt < NO_OF_PAGES_FOR_PAGE_TABLE) {
;;;251    
;;;252    		/*Read first page of PT*/
;;;253    		baseReadNBytesDirect((uQuadByte)pptBackup, gumbFlashBuff, PAGE_SIZE);
;;;254    
;;;255    		/*assume page is not updated*/
;;;256    		umbTxnStateOrBackupPt = PAGE_IS_NOT_UPDATED;
;;;257    
;;;258    		//copy from old and paste it to new after updating 
;;;259    		for (umbIndex = 0x00; umbIndex < umbNewPagesUpdated; umbIndex++) {
        0x00007280:    2900        .)      CMP      r1,#0
        0x00007282:    d01c        ..      BEQ      0x72be ; baseWriteNBytes + 1266
;;;260    
;;;261    			//Check if src page fall under current page of Page Table
;;;262    			if (umbActivePt == (udbSrcPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
        0x00007284:    882a        *.      LDRH     r2,[r5,#0]
        0x00007286:    4611        .F      MOV      r1,r2
        0x00007288:    9b11        ..      LDR      r3,[sp,#0x44]
        0x0000728a:    4019        .@      ANDS     r1,r1,r3
        0x0000728c:    42b9        .B      CMP      r1,r7
        0x0000728e:    d108        ..      BNE      0x72a2 ; baseWriteNBytes + 1238
        0x00007290:    a913        ..      ADD      r1,sp,#0x4c
;;;263    
;;;264    				/*Update src page as free*/
;;;265    				ptVirtualPg = (pageTableEntry)PAGE_IS_FREE;
        0x00007292:    481e        .H      LDR      r0,[pc,#120] ; [0x730c] = 0xffff
        0x00007294:    8008        ..      STRH     r0,[r1,#0]
;;;266    
;;;267    				mem_cpy(&gumbFlashBuff[udbSrcPgs[umbIndex]], (puMonoByte)&ptVirtualPg, TABLE_ENTRY_SIZE);
        0x00007296:    481f        .H      LDR      r0,[pc,#124] ; [0x7314] = 0x20000344
        0x00007298:    1880        ..      ADDS     r0,r0,r2
        0x0000729a:    2202        ."      MOVS     r2,#2
        0x0000729c:    f7f9fb8f    ....    BL       mem_cpyFwd ; 0x9be
        0x000072a0:    2001        .       MOVS     r0,#1
;;;268    
;;;269    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;270    			}
;;;271    
;;;272    			//Check if dest page fall under current page of Page Table
;;;273    			if (umbActivePt == (udbDestPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
        0x000072a2:    8831        1.      LDRH     r1,[r6,#0]
        0x000072a4:    460a        .F      MOV      r2,r1
        0x000072a6:    9b11        ..      LDR      r3,[sp,#0x44]
        0x000072a8:    401a        .@      ANDS     r2,r2,r3
        0x000072aa:    42ba        .B      CMP      r2,r7
        0x000072ac:    d1e2        ..      BNE      0x7274 ; baseWriteNBytes + 1192
;;;274    
;;;275    				/*Update virtual page in free physical page index of current page*/
;;;276    				mem_cpy(&gumbFlashBuff[udbDestPgs[umbIndex]], (puMonoByte)&ptVirtualPgs[umbIndex], TABLE_ENTRY_SIZE);
        0x000072ae:    4819        .H      LDR      r0,[pc,#100] ; [0x7314] = 0x20000344
        0x000072b0:    1840        @.      ADDS     r0,r0,r1
        0x000072b2:    2202        ."      MOVS     r2,#2
        0x000072b4:    4621        !F      MOV      r1,r4
        0x000072b6:    f7f9fb82    ....    BL       mem_cpyFwd ; 0x9be
        0x000072ba:    9805        ..      LDR      r0,[sp,#0x14]
        0x000072bc:    e7da        ..      B        0x7274 ; baseWriteNBytes + 1192
        0x000072be:    1e41        A.      SUBS     r1,r0,#1
        0x000072c0:    4248        HB      RSBS     r0,r1,#0
        0x000072c2:    4148        HA      ADCS     r0,r0,r1
;;;277    
;;;278    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;279    			}
;;;280    		}
;;;281    				
;;;282    		/*Check if data needs to updated in page table*/
;;;283    		if ((pptBackup != pptActive)  //Old Page table and new page tables are different
;;;284    			||  // OR
        0x000072c4:    990f        ..      LDR      r1,[sp,#0x3c]
        0x000072c6:    9c0b        ..      LDR      r4,[sp,#0x2c]
        0x000072c8:    428c        .B      CMP      r4,r1
        0x000072ca:    d100        ..      BNE      0x72ce ; baseWriteNBytes + 1282
        0x000072cc:    9004        ..      STR      r0,[sp,#0x10]
        0x000072ce:    9804        ..      LDR      r0,[sp,#0x10]
        0x000072d0:    2801        .(      CMP      r0,#1
        0x000072d2:    9e12        ..      LDR      r6,[sp,#0x48]
        0x000072d4:    9d0f        ..      LDR      r5,[sp,#0x3c]
        0x000072d6:    d000        ..      BEQ      0x72da ; baseWriteNBytes + 1294
        0x000072d8:    e733        3.      B        0x7142 ; baseWriteNBytes + 886
;;;285    			(PAGE_IS_UPDATED == umbTxnStateOrBackupPt)) { //If data is updated in current page of Page Tables
;;;286    
;;;287    			/*Update physical page*/
;;;288    			if (FALSE == updatePage((uQuadByte)pptActive, gumbFlashBuff)) {
;;;289    				return FALSE;
;;;290    			}
;;;291    
;;;292    		}
;;;293    
;;;294    		/*Get next page in Old page table*/
;;;295    		pptBackup += NO_OF_ENTRIES_IN_SINGLE_PAGE;
;;;296    
;;;297    		/*Get next page in new page table*/
;;;298    		pptActive += NO_OF_ENTRIES_IN_SINGLE_PAGE;
        0x000072da:    19ec        ..      ADDS     r4,r5,r7
;;;299    
;;;300    		/*increment to next page*/
;;;301    		umbActivePt++;
;;;302    
;;;303    	}
;;;304    	/******************* Update Page table done*************/
;;;305    
;;;306    	/*******************Update Active Page table number************************/
;;;307    	if (pptBackup != pptActive) {
;;;308    
;;;309    		if ((pPageTableEntry)(ADDRESS_PAGE_TABLE_1_END + 0x01) == pptActive) {
;;;310    
;;;311    			/*New active page table is Page Table 1*/
;;;312    			umbActivePt = AT_PAGE_TABLE_1;
;;;313    		}
;;;314    		else {
;;;315    
;;;316    			/*New active page table is Page Table 2*/
;;;317    			umbActivePt = AT_PAGE_TABLE_2;
;;;318    		}
;;;319    
;;;320    		/*Read page containing active PT*/
;;;321    		baseReadNBytesDirect(ADDRESS_ACTIVE_PAGE, gumbFlashBuff, PAGE_SIZE);
;;;322    
;;;323    		/*update active PT in buffer*/
;;;324    		gumbFlashBuff[0x00] = umbActivePt;
;;;325    
;;;326    		/*Update buffer in NVM*/
;;;327    		updatePage(ADDRESS_ACTIVE_PAGE, gumbFlashBuff);
;;;328    	}
;;;329    	/******************Update Active Page table number done*****************/
;;;330    
;;;331    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] WriteNBytes()\n");
;;;332    	return TRUE;
;;;333    }
;;;334    
;;;335    /*
;;;336    * baseReadOneByte (uQuadByte uqbAddress)
;;;337    * 
;;;338    * @param : uqbAddress	: Memory Address To Read From
;;;339    * @ret: read byte value
;;;340    */
;;;341    uMonoByte baseReadOneByte(uQuadByte uqbAddress){
;;;342    
;;;343    	uMonoByte		umbActivePt;
;;;344    	uDiByte			udbPhysicalPg;
;;;345    	pPageTableEntry pptActive;
;;;346    
;;;347    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;348    	/*read active page table number*/
;;;349    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;350    
;;;351    	/*Get starting address of active page table*/
;;;352    	pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;353    
;;;354    	/*search for given Virtual Page number*/
;;;355    	udbPhysicalPg = searchVirtualPage((pageTableEntry)GET_PAGE_NUMBER(uqbAddress), 0x00, pptActive);
;;;356    
;;;357    	//DBG_FUNC("[READ_UPDATE_NVM] baseReadOneByte():  Reading Virtual Page %2 data from Physical Page %2\n", (pageTableEntry)GET_PAGE_NUMBER(uqbAddress), udbPhysicalPg);
;;;358    
;;;359    	/*Check if virtual page not found*/
;;;360    	if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE == udbPhysicalPg) {
;;;361    		
;;;362    		/*if physical page number is equal to total no. of entries it means virtual page is not found*/
;;;363    		/*as no prior data available for given address it means return default data which is 'FF'*/
;;;364    		return DEFAULT_BYTE;
;;;365    
;;;366    	}
;;;367    
;;;368    	/*Virtual Page found*/
;;;369    	/*Get address of physical page and add offset of page in it*/
;;;370    	uqbAddress = ((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbPhysicalPg))) | (uqbAddress & (PAGE_SIZE - 1));
;;;371    
;;;372    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;373    	/*Read a byte and return it*/
;;;374    	return READ_SINGLE_BYTE(uqbAddress);
;;;375    }
;;;376    
;;;377    
;;;378    
;;;379    /*
;;;380    * baseReadNBytes (uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength)
;;;381    * 
;;;382    * @param : uqbAddress	: Memory Address To Read From
;;;383    * @param : pumbOutput	: Pointer To The Buffer Where data Will Be Stored
;;;384    * @param : udbLength	: How Much Data
;;;385    */
;;;386    void baseReadNBytes(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength){
;;;387    	
;;;388    	uMonoByte		umbActivePt;
;;;389    	uDiByte			udbPhysicalPg;
;;;390    	uDiByte			udbOffset;
;;;391    	uDiByte			udbToDo;
;;;392    	pageTableEntry	ptVirtualPg;
;;;393    	pPageTableEntry pptActive;
;;;394    
;;;395    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] baseReadNBytes()\n");
;;;396    	/*read active page table number*/
;;;397    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;398    
;;;399    	/*Get starting address of active page table*/
;;;400    	pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;401    
;;;402    	/*Extract page address*/
;;;403    	ptVirtualPg = (pageTableEntry)GET_PAGE_NUMBER(uqbAddress);
;;;404    
;;;405    	/*Offset in current virtual page*/
;;;406    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;407    
;;;408    	/*Read until no data left*/
;;;409    	while(udbLength > 0x00)
;;;410    	{
;;;411    		/*search for given Virtual Page number*/
;;;412    		udbPhysicalPg = searchVirtualPage(ptVirtualPg, 0x00, pptActive);
;;;413    
;;;414    		/*Calculate data length that we can read from given page*/
;;;415    		udbToDo = (udbOffset + udbLength) < PAGE_SIZE ? udbLength : (PAGE_SIZE - udbOffset);
;;;416    
;;;417    		//DBG_FUNC("[READ_UPDATE_NVM] baseReadNBytes(): Reading Virtual Page %2 data from Physical Page %2\n", ptVirtualPg, udbPhysicalPg);
;;;418    
;;;419    		/*Check if virtual page not found*/
;;;420    		if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE == udbPhysicalPg) {
;;;421    
;;;422    			/*if physical page number is equal to total no. of entries it means virtual page is not found*/
;;;423    			/*as no prior data available for given page address it means return default data which is 'FF'*/
;;;424    			mem_set(pumbOutput, DEFAULT_BYTE, udbToDo);
;;;425    		}
;;;426    		else {
;;;427    
;;;428    			/*Virtual Page found*/
;;;429    			/*Read data from physical address*/
;;;430    			baseReadNBytesDirect((uQuadByte)((ADDRESS_NVM_START + GET_ADDRESS(udbPhysicalPg) )| udbOffset), pumbOutput, udbToDo);
;;;431    		}
;;;432    
;;;433    		/*Next data will always be start from 0th offset*/
;;;434    		udbOffset = 0x00;
;;;435    
;;;436    		/*Next address would be next page*/
;;;437    		ptVirtualPg++;
;;;438    
;;;439    		/*Increase the offset for output to where next block of data will update*/
;;;440    		pumbOutput += udbToDo;
;;;441    
;;;442    		/*Decrease the read data length from remaining length*/
;;;443    		udbLength -= udbToDo;
;;;444    
;;;445    	}
;;;446    
;;;447    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] baseReadNBytes()\n");
;;;448    }
;;;449    
;;;450    /*
;;;451    * baseWriteNBytes(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength)
;;;452    * 
;;;453    * @param : uqbAddress	: Memory Address write to
;;;454    * @param : pumbOutput	: Pointer To The Buffer Where data Will Be Stored
;;;455    * @param : udbLength	: How Much Data
;;;456    */
;;;457    void baseWriteNBytes(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength){
;;;458    
;;;459    	boolean bCloseTheTxn = FALSE;
;;;460    
;;;461    	/*begin the transaction*/
;;;462    	if (TRUE == at_beginTxn()) {
;;;463    
;;;464    		/*indication to close the transaction in same function*/
;;;465    		bCloseTheTxn = TRUE;
;;;466    	}
;;;467    
;;;468    	WriteNBytes(uqbAddress, pumbInput, udbLength);
;;;469    
;;;470    	if (TRUE == bCloseTheTxn) {
;;;471    
;;;472    		/*commit the txn started in the beginning of function*/
;;;473    		at_commitTxn();
;;;474    	}
;;;475    }
;;;476    
;;;477    #endif
;;;478    
;;;479    /*Write direct on the given physical address
;;;480    * 
;;;481    * uqbAddress: Destination physical address
;;;482    * pumbInput: Input buffer
;;;483    * udbLength: Length to update
;;;484    */
;;;485    boolean baseWriteNBytesDirect(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength) {
;;;486    
;;;487    	boolean		bRet=FALSE;
;;;488    	uDiByte		udbOffset;
;;;489    	uDiByte 	udbRemain;
;;;490    	uDiByte 	udbToDo;
;;;491    	uDiByte 	udbCounter = 0x00;
;;;492    	uQuadByte uqbFlashAddr;
;;;493    
;;;494    	/*extract page address*/
;;;495    	uqbFlashAddr = uqbAddress & (0xFFFFFE00 | PAGE_SIZE);
;;;496    
;;;497    	/*extract offset in give page*/
;;;498    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;499    
;;;500    	for (udbRemain = udbLength; udbRemain; udbRemain -= udbToDo)
;;;501    	{
;;;502    		/*Calculate length of data to update in current page*/
;;;503    		udbToDo = (udbOffset + udbRemain) < PAGE_SIZE ? udbRemain : (PAGE_SIZE - udbOffset);
;;;504    
;;;505    		/*Read page in buffer*/
;;;506    		baseReadNBytesDirect(uqbFlashAddr, gumbFlashBuff, PAGE_SIZE);
;;;507    
;;;508    		/*Check if data is same so please dont update, for god sake*/
;;;509    		if (mem_cmp(&gumbFlashBuff[udbOffset], &pumbInput[udbCounter], udbToDo)) {
;;;510    
;;;511    			/*Data is different, now we can go for update*/
;;;512    			/*copy the buffer*/
;;;513    			mem_cpy(&gumbFlashBuff[udbOffset], &pumbInput[udbCounter], udbToDo);
;;;514    
;;;515    			/*Update buffer at destn page*/
;;;516    			if (FALSE == updatePage(uqbFlashAddr, gumbFlashBuff)) {
;;;517    
;;;518    				break;
;;;519    			}
;;;520    		}
;;;521    
;;;522    		/*next offset of input buffer*/
;;;523    		udbCounter += udbToDo;
;;;524    
;;;525    		/*next offset in next destination page*/
;;;526    		udbOffset = (uDiByte)(udbToDo + udbOffset) & (PAGE_SIZE - 1);
;;;527    
;;;528    		/*Next destination page*/
;;;529    		uqbFlashAddr += PAGE_SIZE;
;;;530    	}
;;;531    
;;;532    	return bRet;
;;;533    }
;;;534    
;;;535    /*Read direct from the given address*/
;;;536    void baseReadNBytesDirect(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength) {
;;;537    
;;;538    #ifdef _CHIP_THC80F340A
;;;539    	mem_cpy(pumbOutput, (const puMonoByte)uqbAddress, udbLength);
;;;540    #else
;;;541    	Simul_ReadNBytesDirect(uqbAddress, pumbOutput, udbLength);
;;;542    #endif
;;;543    }
;;;544    
;;;545    
;;;546    /*Write the page on given address*/
;;;547    static boolean  baseWritePageDirect(uQuadByte uqbAddress, puMonoByte pumbInput) {
;;;548    
;;;549    #ifdef _CHIP_THC80F340A
;;;550    	return Chip_THC80F340A_WritePage(uqbAddress, pumbInput);
;;;551    #else
;;;552    	return Simul_WriteNBytes(uqbAddress, pumbInput, PAGE_SIZE);
;;;553    #endif
;;;554    }
;;;555    
;;;556    /*Erase the page on given address*/
;;;557    static boolean  baseErasePageDirect(uQuadByte uqbAddress) {
;;;558    	
;;;559    //	uDiByte udbIndex=0;
;;;560    //	
;;;561    //	/*Check if content of file is already erased*/
;;;562    //	for(udbIndex=0; udbIndex<PAGE_SIZE; udbIndex++){
;;;563    //		
;;;564    //		if(DEFAULT_BYTE != READ_SINGLE_BYTE(uqbAddress + udbIndex)){
;;;565    			#ifdef _CHIP_THC80F340A
;;;566    				return Chip_THC80F340A_ErasePage(uqbAddress);
        0x000072dc:    4620         F      MOV      r0,r4
        0x000072de:    f7f9f813    ....    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x000072e2:    b2c0        ..      UXTB     r0,r0
        0x000072e4:    28ff        .(      CMP      r0,#0xff
        0x000072e6:    d108        ..      BNE      0x72fa ; baseWriteNBytes + 1326
        0x000072e8:    490a        .I      LDR      r1,[pc,#40] ; [0x7314] = 0x20000344
        0x000072ea:    4620         F      MOV      r0,r4
        0x000072ec:    f7f8fffe    ....    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x000072f0:    b2c0        ..      UXTB     r0,r0
        0x000072f2:    28ff        .(      CMP      r0,#0xff
        0x000072f4:    462c        ,F      MOV      r4,r5
        0x000072f6:    d100        ..      BNE      0x72fa ; baseWriteNBytes + 1326
        0x000072f8:    e723        #.      B        0x7142 ; baseWriteNBytes + 886
        0x000072fa:    9803        ..      LDR      r0,[sp,#0xc]
        0x000072fc:    28ff        .(      CMP      r0,#0xff
        0x000072fe:    d001        ..      BEQ      0x7304 ; baseWriteNBytes + 1336
        0x00007300:    b017        ..      ADD      sp,sp,#0x5c
        0x00007302:    bdf0        ..      POP      {r4-r7,pc}
        0x00007304:    f7fffc86    ....    BL       at_commitTxn ; 0x6c14
        0x00007308:    b017        ..      ADD      sp,sp,#0x5c
        0x0000730a:    bdf0        ..      POP      {r4-r7,pc}
    $d.5
    __arm_cp.3_0
        0x0000730c:    0000ffff    ....    DCD    65535
    __arm_cp.3_1
        0x00007310:    0000025f    _...    DCD    607
    __arm_cp.3_2
        0x00007314:    20000344    D..     DCD    536871748
    __arm_cp.3_3
        0x00007318:    00007fff    ....    DCD    32767
    $t.6
    baseWriteNBytesDirect
;;; HardwareLayers/Abstraction/Wrappers\readUpdateNvmWrappers.c (485)
        0x0000731c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000731e:    b087        ..      SUB      sp,sp,#0x1c
        0x00007320:    9101        ..      STR      r1,[sp,#4]
        0x00007322:    9206        ..      STR      r2,[sp,#0x18]
        0x00007324:    2a00        .*      CMP      r2,#0
        0x00007326:    d044        D.      BEQ      0x73b2 ; baseWriteNBytesDirect + 150
;;; HardwareLayers/Abstraction/Wrappers\readUpdateNvmWrappers.c
        0x00007328:    4607        .F      MOV      r7,r0
        0x0000732a:    4e23        #N      LDR      r6,[pc,#140] ; [0x73b8] = 0xfffffe00
        0x0000732c:    4006        .@      ANDS     r6,r6,r0
        0x0000732e:    2001        .       MOVS     r0,#1
        0x00007330:    0240        @.      LSLS     r0,r0,#9
        0x00007332:    9005        ..      STR      r0,[sp,#0x14]
        0x00007334:    2100        .!      MOVS     r1,#0
        0x00007336:    e00b        ..      B        0x7350 ; baseWriteNBytesDirect + 52
        0x00007338:    9805        ..      LDR      r0,[sp,#0x14]
        0x0000733a:    1836        6.      ADDS     r6,r6,r0
        0x0000733c:    9804        ..      LDR      r0,[sp,#0x10]
        0x0000733e:    1839        9.      ADDS     r1,r7,r0
        0x00007340:    1938        8.      ADDS     r0,r7,r4
        0x00007342:    b282        ..      UXTH     r2,r0
        0x00007344:    9806        ..      LDR      r0,[sp,#0x18]
        0x00007346:    1bc0        ..      SUBS     r0,r0,r7
        0x00007348:    4617        .F      MOV      r7,r2
        0x0000734a:    9006        ..      STR      r0,[sp,#0x18]
        0x0000734c:    0400        ..      LSLS     r0,r0,#16
        0x0000734e:    d030        0.      BEQ      0x73b2 ; baseWriteNBytesDirect + 150
        0x00007350:    9104        ..      STR      r1,[sp,#0x10]
        0x00007352:    481a        .H      LDR      r0,[pc,#104] ; [0x73bc] = 0x20000344
        0x00007354:    4631        1F      MOV      r1,r6
        0x00007356:    9d05        ..      LDR      r5,[sp,#0x14]
        0x00007358:    462a        *F      MOV      r2,r5
        0x0000735a:    f7f9fb30    ..0.    BL       mem_cpyFwd ; 0x9be
        0x0000735e:    1e6c        l.      SUBS     r4,r5,#1
        0x00007360:    403c        <@      ANDS     r4,r4,r7
;;;1      #include "wrappers.h"
;;;2      
;;;3      /*
;;;4      * Macros declaration
;;;5      */
;;;6      #define DEFAULT_BYTE								(0xFF)
;;;7      
;;;8      #ifdef _CHIP_THC80F340A
;;;9      #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(x)))
;;;10     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(x)))
;;;11     #else
;;;12     #define READ_PAGE_TABLE_ENTRY(x)					((pageTableEntry)(*(pPageTableEntry)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;13     #define READ_SINGLE_BYTE(x)							(*((puMonoByte)(SimulGetPhysicalAddr((uQuadByte)(x)))))
;;;14     #endif 
;;;15     
;;;16     /*
;;;17     * Variables declaration
;;;18     */
;;;19     static uMonoByte gumbFlashBuff[PAGE_SIZE];
;;;20     
;;;21     /*
;;;22     * Functions declarations
;;;23     */
;;;24     /*Erase the page on given address*/
;;;25     static boolean  baseErasePageDirect(uQuadByte uqbAddress);
;;;26     
;;;27     /*Write the data on erased page*/
;;;28     static boolean  baseWritePageDirect(uQuadByte uqbAddress, puMonoByte pumbInput);
;;;29     
;;;30     /*
;;;31     * Erase and Write page data
;;;32     *
;;;33     * uqbFlashAddr: Page address (It should be starting address of any page to updated)
;;;34     * pumbPageData: data buffer to update. must contain page size data.
;;;35     */
;;;36     static boolean updatePage(uQuadByte uqbFlashAddr, puMonoByte pumbPageData) {
;;;37     
;;;38     	/*Erase the physical destination page first*/
;;;39     	if (TRUE == baseErasePageDirect(uqbFlashAddr))
;;;40     	{
;;;41     		/*Write the Page buffer*/
;;;42     		if (TRUE == baseWritePageDirect(uqbFlashAddr, pumbPageData))
;;;43     		{
;;;44     			/*if writing passed*/
;;;45     			return TRUE;
;;;46     		}
;;;47     	}
;;;48     	/*If erase or write failed*/
;;;49     	return FALSE;
;;;50     }
;;;51     
;;;52     #ifdef FEAT_EXHAUSTEARING
;;;53     
;;;54     /*
;;;55     * Search of give Virtual page value in the provided page table address
;;;56     *
;;;57     * ptVirtualPage: Value to search
;;;58     * udbStartOffset: index from where search starts
;;;59     * pptPageTable: Address of Page table
;;;60     */
;;;61     static uDiByte searchVirtualPage(pageTableEntry ptVirtualPage, uDiByte udbStartOffset, pPageTableEntry pptPageTable) {
;;;62     
;;;63     	/*move pointer to Start offset in given Page table*/
;;;64     	pptPageTable += udbStartOffset;
;;;65     
;;;66     	/*search for free page (free in both active and backup page table) and given virtual page in active page table*/
;;;67     	do {
;;;68     		if (READ_PAGE_TABLE_ENTRY(pptPageTable) == ptVirtualPage) {
;;;69     
;;;70     			/*Page no. from where data will be copied*/
;;;71     			break;
;;;72     		}
;;;73     
;;;74     		/*increment to next page entry*/
;;;75     		udbStartOffset++;
;;;76     		pptPageTable++;
;;;77     
;;;78     	} while (udbStartOffset < TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE);
;;;79     
;;;80     	return udbStartOffset;
;;;81     }
;;;82     /*
;;;83     * function to update the data on another free page
;;;84     *
;;;85     */
;;;86     static boolean WriteNBytes(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength) {
;;;87     
;;;88     	uMonoByte			umbActivePt;
;;;89     	uMonoByte			umbTxnStateOrBackupPt;
;;;90     	uMonoByte			umbNewPagesUpdated = 0x00;
;;;91     	uMonoByte			umbIndex = 0x00;
;;;92     	uDiByte				udbOffset;
;;;93     	uDiByte				udbSrcPg = 0x00;
;;;94     	uDiByte				udbDestPage = 0xFFFF; //Reset it to -1
;;;95     	uDiByte 			udbRemain;
;;;96     	uDiByte 			udbToDo = 0x00;
;;;97     	uDiByte				udbSrcPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;98     	uDiByte				udbDestPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;99     	pageTableEntry		ptVirtualPgs[2]; //Assuming at max only two pages will be updated in single call of this function
;;;100    	pageTableEntry		ptVirtualPg;
;;;101    	pPageTableEntry		pptActive;
;;;102    	pPageTableEntry		pptBackup;
;;;103    
;;;104    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] WriteNBytes() \n");
;;;105    
;;;106    	/*read active page table*/
;;;107    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;108    
;;;109    	/*Read backup page table*/
;;;110    	umbTxnStateOrBackupPt = baseReadOneByteDirect(ADDRESS_TRANSACTION_STATE);
;;;111    
;;;112    	if ((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || (umbTxnStateOrBackupPt == umbActivePt)) {
;;;113    
;;;114    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;115    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;116    	}
;;;117    	else {
;;;118    		pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;119    		pptBackup = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbTxnStateOrBackupPt * SIZE_PAGE_TABLE));
;;;120    	}
;;;121    
;;;122    	/*Extract page address*/
;;;123    	ptVirtualPg = (pageTableEntry)GET_PAGE_NUMBER(uqbAddress);
;;;124    
;;;125    	/*Offset in current virtual page*/
;;;126    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;127    
;;;128    	for (udbRemain = udbLength; udbRemain; udbRemain -= udbToDo)
;;;129    	{
;;;130    		/****************************Antitearing code*****************************************/
;;;131    
;;;132    		/*********Searching The Given virtual page*********/
;;;133    
;;;134    		/*Search for Virtual Page in entry*/
;;;135    		udbSrcPg = searchVirtualPage(ptVirtualPg, 0x00, pptActive);
;;;136    
;;;137    		if ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg)/*virtual page found in Active page table*/
;;;138    			&&
;;;139    			((AT_NO_ACTIVE_TXN == umbTxnStateOrBackupPt) || ((pageTableEntry)(PAGE_IS_FREE) == READ_PAGE_TABLE_ENTRY(pptBackup + udbSrcPg))))
;;;140    			/*No transaction in progress
;;;141    			*	or
;;;142    			* otherwise check if corresponding offset in backup page is free (indicates that page is newly created in the current transaction)
;;;143    			*/
;;;144    		{
;;;145    			/*Data will be updated in same page*/
;;;146    			udbDestPage = udbSrcPg;
;;;147    		}
;;;148    		else {
;;;149    			/*search for free page in backup page*/
;;;150    			do {
;;;151    
;;;152    				/*searching free page*/
;;;153    				/*Always start from next page, first time this loop will be called, (udbDestPage + 0x01) results into 00*/
;;;154    				udbDestPage = searchVirtualPage((pageTableEntry)PAGE_IS_FREE, (udbDestPage + 0x01), pptBackup);
;;;155    
;;;156    			} while ((TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbDestPage) //if dest page checked the whole page table (Though it will never happend, because it will be ensured that OS maintains minimum number of free pages for AT)
;;;157    				&& \
;;;158    				((pageTableEntry)(PAGE_IS_FREE) != READ_PAGE_TABLE_ENTRY(pptActive + udbDestPage))); // check until same page hasnt been found free in active page as well
;;;159    		}
;;;160    		/*********************Searching done*************/
;;;161    
;;;162    		/******************Writing the data start*****************/
;;;163    		/*If virtual page is found in active PT*/
;;;164    		if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE > udbSrcPg) {
;;;165    
;;;166    			/*Convert page number into physical page address*/
;;;167    			/*Read whole page in buffer*/
;;;168    			baseReadNBytesDirect((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbSrcPg)), gumbFlashBuff, PAGE_SIZE);
;;;169    
;;;170    		}
;;;171    		else {
;;;172    			/*Indication as source page is not found, to ensure that Page table doesnt get update for this entry*/
;;;173    			udbSrcPg = INVALID_PAGE_ENTRY_VALUE;
;;;174    
;;;175    			/*This is first time given Virtual page is updating so default data would be 'FF' */
;;;176    			mem_set(gumbFlashBuff, 0xFF, PAGE_SIZE);
;;;177    		}
;;;178    
;;;179    		/*Calculate data length that we need to update in given page*/
;;;180    		udbToDo = (udbOffset + udbRemain) < PAGE_SIZE ? udbRemain : (PAGE_SIZE - udbOffset);
;;;181    
;;;182    		/*Check if data is same so please dont update, for god sake*/
;;;183    		if (mem_cmp(&gumbFlashBuff[udbOffset], pumbInput, udbToDo)) {
;;;184    
;;;185    			/*Update new data in the page buffer*/
;;;186    			mem_cpy(&gumbFlashBuff[udbOffset], pumbInput, udbToDo);
;;;187    
;;;188    			/*Check if new physical page is different from previous one*/
;;;189    			if (udbSrcPg != udbDestPage) {
;;;190    
;;;191    				//DBG_FUNC("[READ_UPDATE_NVM] WriteNBytes(): Mapping Virtual Page %2 to Physical Page %2\n", ptVirtualPg, udbDestPage);
;;;192    				/*store updating source and destination physical pages for current virtual page update*/
;;;193    				udbSrcPgs[umbNewPagesUpdated] = udbSrcPg * TABLE_ENTRY_SIZE;
;;;194    				udbDestPgs[umbNewPagesUpdated] = udbDestPage * TABLE_ENTRY_SIZE;
;;;195    				ptVirtualPgs[umbNewPagesUpdated++] = ptVirtualPg;
;;;196    
;;;197    			}
;;;198    
;;;199    			/*Convert dest page number into physical page address*/
;;;200    			/*Update physical page*/
;;;201    			if (FALSE == updatePage((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbDestPage)), gumbFlashBuff)) {
;;;202    				return FALSE;
;;;203    			}
;;;204    		}
;;;205    
;;;206    		/*Next offset must be 00*/
;;;207    		udbOffset = 0x00;//udbOffset = (uDiByte)(udbToDo + udbOffset) & (PAGE_SIZE - 1);
;;;208    
;;;209    		/*Next address would be next page*/
;;;210    		ptVirtualPg++;
;;;211    
;;;212    		/*Increase the offset for input from where next block of data will be read*/
;;;213    		pumbInput += udbToDo;
;;;214    
;;;215    		/******************Write data done***/
;;;216    	}
;;;217    
;;;218    	/*******************Update Page table*************/
;;;219    	if (pptActive == pptBackup) {
;;;220    		/*If first time page table is updating in current transaction
;;;221    		* Old page table will be active one and new page table will be alternative one
;;;222    		*/
;;;223    
;;;224    		/*Which table is active*/
;;;225    		if ((pPageTableEntry)ADDRESS_PAGE_TABLE_1_START == pptBackup) {
;;;226    
;;;227    			/*Old table will be PT1 */
;;;228    			/*New table will be PT2 */
;;;229    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_2_START;
;;;230    		}
;;;231    		else {
;;;232    			/*Old table will be PT2 */
;;;233    			/*New Table will be PT1 */
;;;234    			pptActive = (pPageTableEntry)ADDRESS_PAGE_TABLE_1_START;
;;;235    		}
;;;236    
;;;237    	}
;;;238    	else {
;;;239    		/*This isnt first update in transaction, It means backup has already been taken.
;;;240    		* So old page table and new page table will be same
;;;241    		*/
;;;242    
;;;243    		/*Old table = new table*/
;;;244    		pptBackup = pptActive;
;;;245    	}
;;;246    
;;;247    	/*Number of pages processed of Page Table*/
;;;248    	umbActivePt = 0x00;
;;;249    
;;;250    	while (umbActivePt < NO_OF_PAGES_FOR_PAGE_TABLE) {
;;;251    
;;;252    		/*Read first page of PT*/
;;;253    		baseReadNBytesDirect((uQuadByte)pptBackup, gumbFlashBuff, PAGE_SIZE);
;;;254    
;;;255    		/*assume page is not updated*/
;;;256    		umbTxnStateOrBackupPt = PAGE_IS_NOT_UPDATED;
;;;257    
;;;258    		//copy from old and paste it to new after updating 
;;;259    		for (umbIndex = 0x00; umbIndex < umbNewPagesUpdated; umbIndex++) {
;;;260    
;;;261    			//Check if src page fall under current page of Page Table
;;;262    			if (umbActivePt == (udbSrcPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
;;;263    
;;;264    				/*Update src page as free*/
;;;265    				ptVirtualPg = (pageTableEntry)PAGE_IS_FREE;
;;;266    
;;;267    				mem_cpy(&gumbFlashBuff[udbSrcPgs[umbIndex]], (puMonoByte)&ptVirtualPg, TABLE_ENTRY_SIZE);
;;;268    
;;;269    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;270    			}
;;;271    
;;;272    			//Check if dest page fall under current page of Page Table
;;;273    			if (umbActivePt == (udbDestPgs[umbIndex] / (uDiByte)(PAGE_SIZE))) {
;;;274    
;;;275    				/*Update virtual page in free physical page index of current page*/
;;;276    				mem_cpy(&gumbFlashBuff[udbDestPgs[umbIndex]], (puMonoByte)&ptVirtualPgs[umbIndex], TABLE_ENTRY_SIZE);
;;;277    
;;;278    				umbTxnStateOrBackupPt = PAGE_IS_UPDATED;
;;;279    			}
;;;280    		}
;;;281    				
;;;282    		/*Check if data needs to updated in page table*/
;;;283    		if ((pptBackup != pptActive)  //Old Page table and new page tables are different
;;;284    			||  // OR
;;;285    			(PAGE_IS_UPDATED == umbTxnStateOrBackupPt)) { //If data is updated in current page of Page Tables
;;;286    
;;;287    			/*Update physical page*/
;;;288    			if (FALSE == updatePage((uQuadByte)pptActive, gumbFlashBuff)) {
;;;289    				return FALSE;
;;;290    			}
;;;291    
;;;292    		}
;;;293    
;;;294    		/*Get next page in Old page table*/
;;;295    		pptBackup += NO_OF_ENTRIES_IN_SINGLE_PAGE;
;;;296    
;;;297    		/*Get next page in new page table*/
;;;298    		pptActive += NO_OF_ENTRIES_IN_SINGLE_PAGE;
;;;299    
;;;300    		/*increment to next page*/
;;;301    		umbActivePt++;
;;;302    
;;;303    	}
;;;304    	/******************* Update Page table done*************/
;;;305    
;;;306    	/*******************Update Active Page table number************************/
;;;307    	if (pptBackup != pptActive) {
;;;308    
;;;309    		if ((pPageTableEntry)(ADDRESS_PAGE_TABLE_1_END + 0x01) == pptActive) {
;;;310    
;;;311    			/*New active page table is Page Table 1*/
;;;312    			umbActivePt = AT_PAGE_TABLE_1;
;;;313    		}
;;;314    		else {
;;;315    
;;;316    			/*New active page table is Page Table 2*/
;;;317    			umbActivePt = AT_PAGE_TABLE_2;
;;;318    		}
;;;319    
;;;320    		/*Read page containing active PT*/
;;;321    		baseReadNBytesDirect(ADDRESS_ACTIVE_PAGE, gumbFlashBuff, PAGE_SIZE);
;;;322    
;;;323    		/*update active PT in buffer*/
;;;324    		gumbFlashBuff[0x00] = umbActivePt;
;;;325    
;;;326    		/*Update buffer in NVM*/
;;;327    		updatePage(ADDRESS_ACTIVE_PAGE, gumbFlashBuff);
;;;328    	}
;;;329    	/******************Update Active Page table number done*****************/
;;;330    
;;;331    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] WriteNBytes()\n");
;;;332    	return TRUE;
;;;333    }
;;;334    
;;;335    /*
;;;336    * baseReadOneByte (uQuadByte uqbAddress)
;;;337    * 
;;;338    * @param : uqbAddress	: Memory Address To Read From
;;;339    * @ret: read byte value
;;;340    */
;;;341    uMonoByte baseReadOneByte(uQuadByte uqbAddress){
;;;342    
;;;343    	uMonoByte		umbActivePt;
;;;344    	uDiByte			udbPhysicalPg;
;;;345    	pPageTableEntry pptActive;
;;;346    
;;;347    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;348    	/*read active page table number*/
;;;349    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;350    
;;;351    	/*Get starting address of active page table*/
;;;352    	pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;353    
;;;354    	/*search for given Virtual Page number*/
;;;355    	udbPhysicalPg = searchVirtualPage((pageTableEntry)GET_PAGE_NUMBER(uqbAddress), 0x00, pptActive);
;;;356    
;;;357    	//DBG_FUNC("[READ_UPDATE_NVM] baseReadOneByte():  Reading Virtual Page %2 data from Physical Page %2\n", (pageTableEntry)GET_PAGE_NUMBER(uqbAddress), udbPhysicalPg);
;;;358    
;;;359    	/*Check if virtual page not found*/
;;;360    	if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE == udbPhysicalPg) {
;;;361    		
;;;362    		/*if physical page number is equal to total no. of entries it means virtual page is not found*/
;;;363    		/*as no prior data available for given address it means return default data which is 'FF'*/
;;;364    		return DEFAULT_BYTE;
;;;365    
;;;366    	}
;;;367    
;;;368    	/*Virtual Page found*/
;;;369    	/*Get address of physical page and add offset of page in it*/
;;;370    	uqbAddress = ((uQuadByte)(ADDRESS_NVM_START + GET_ADDRESS(udbPhysicalPg))) | (uqbAddress & (PAGE_SIZE - 1));
;;;371    
;;;372    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] baseReadOneByte()\n");
;;;373    	/*Read a byte and return it*/
;;;374    	return READ_SINGLE_BYTE(uqbAddress);
;;;375    }
;;;376    
;;;377    
;;;378    
;;;379    /*
;;;380    * baseReadNBytes (uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength)
;;;381    * 
;;;382    * @param : uqbAddress	: Memory Address To Read From
;;;383    * @param : pumbOutput	: Pointer To The Buffer Where data Will Be Stored
;;;384    * @param : udbLength	: How Much Data
;;;385    */
;;;386    void baseReadNBytes(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength){
;;;387    	
;;;388    	uMonoByte		umbActivePt;
;;;389    	uDiByte			udbPhysicalPg;
;;;390    	uDiByte			udbOffset;
;;;391    	uDiByte			udbToDo;
;;;392    	pageTableEntry	ptVirtualPg;
;;;393    	pPageTableEntry pptActive;
;;;394    
;;;395    	//DBG_FUNC_ENTRY(">>[READ_UPDATE_NVM] baseReadNBytes()\n");
;;;396    	/*read active page table number*/
;;;397    	umbActivePt = baseReadOneByteDirect(ADDRESS_ACTIVE_PAGE);
;;;398    
;;;399    	/*Get starting address of active page table*/
;;;400    	pptActive = (pPageTableEntry)(ADDRESS_PAGE_TABLE + (umbActivePt * SIZE_PAGE_TABLE));
;;;401    
;;;402    	/*Extract page address*/
;;;403    	ptVirtualPg = (pageTableEntry)GET_PAGE_NUMBER(uqbAddress);
;;;404    
;;;405    	/*Offset in current virtual page*/
;;;406    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;407    
;;;408    	/*Read until no data left*/
;;;409    	while(udbLength > 0x00)
;;;410    	{
;;;411    		/*search for given Virtual Page number*/
;;;412    		udbPhysicalPg = searchVirtualPage(ptVirtualPg, 0x00, pptActive);
;;;413    
;;;414    		/*Calculate data length that we can read from given page*/
;;;415    		udbToDo = (udbOffset + udbLength) < PAGE_SIZE ? udbLength : (PAGE_SIZE - udbOffset);
;;;416    
;;;417    		//DBG_FUNC("[READ_UPDATE_NVM] baseReadNBytes(): Reading Virtual Page %2 data from Physical Page %2\n", ptVirtualPg, udbPhysicalPg);
;;;418    
;;;419    		/*Check if virtual page not found*/
;;;420    		if (TOTAL_NO_OF_ENTRIES_IN_PAGE_TABLE == udbPhysicalPg) {
;;;421    
;;;422    			/*if physical page number is equal to total no. of entries it means virtual page is not found*/
;;;423    			/*as no prior data available for given page address it means return default data which is 'FF'*/
;;;424    			mem_set(pumbOutput, DEFAULT_BYTE, udbToDo);
;;;425    		}
;;;426    		else {
;;;427    
;;;428    			/*Virtual Page found*/
;;;429    			/*Read data from physical address*/
;;;430    			baseReadNBytesDirect((uQuadByte)((ADDRESS_NVM_START + GET_ADDRESS(udbPhysicalPg) )| udbOffset), pumbOutput, udbToDo);
;;;431    		}
;;;432    
;;;433    		/*Next data will always be start from 0th offset*/
;;;434    		udbOffset = 0x00;
;;;435    
;;;436    		/*Next address would be next page*/
;;;437    		ptVirtualPg++;
;;;438    
;;;439    		/*Increase the offset for output to where next block of data will update*/
;;;440    		pumbOutput += udbToDo;
;;;441    
;;;442    		/*Decrease the read data length from remaining length*/
;;;443    		udbLength -= udbToDo;
;;;444    
;;;445    	}
;;;446    
;;;447    	//DBG_FUNC_EXIT("<<[READ_UPDATE_NVM] baseReadNBytes()\n");
;;;448    }
;;;449    
;;;450    /*
;;;451    * baseWriteNBytes(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength)
;;;452    * 
;;;453    * @param : uqbAddress	: Memory Address write to
;;;454    * @param : pumbOutput	: Pointer To The Buffer Where data Will Be Stored
;;;455    * @param : udbLength	: How Much Data
;;;456    */
;;;457    void baseWriteNBytes(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength){
;;;458    
;;;459    	boolean bCloseTheTxn = FALSE;
;;;460    
;;;461    	/*begin the transaction*/
;;;462    	if (TRUE == at_beginTxn()) {
;;;463    
;;;464    		/*indication to close the transaction in same function*/
;;;465    		bCloseTheTxn = TRUE;
;;;466    	}
;;;467    
;;;468    	WriteNBytes(uqbAddress, pumbInput, udbLength);
;;;469    
;;;470    	if (TRUE == bCloseTheTxn) {
;;;471    
;;;472    		/*commit the txn started in the beginning of function*/
;;;473    		at_commitTxn();
;;;474    	}
;;;475    }
;;;476    
;;;477    #endif
;;;478    
;;;479    /*Write direct on the given physical address
;;;480    * 
;;;481    * uqbAddress: Destination physical address
;;;482    * pumbInput: Input buffer
;;;483    * udbLength: Length to update
;;;484    */
;;;485    boolean baseWriteNBytesDirect(uQuadByte uqbAddress, puMonoByte pumbInput, uDiByte udbLength) {
;;;486    
;;;487    	boolean		bRet=FALSE;
;;;488    	uDiByte		udbOffset;
;;;489    	uDiByte 	udbRemain;
;;;490    	uDiByte 	udbToDo;
;;;491    	uDiByte 	udbCounter = 0x00;
;;;492    	uQuadByte uqbFlashAddr;
;;;493    
;;;494    	/*extract page address*/
;;;495    	uqbFlashAddr = uqbAddress & (0xFFFFFE00 | PAGE_SIZE);
;;;496    
;;;497    	/*extract offset in give page*/
;;;498    	udbOffset = (uDiByte)(uqbAddress & (PAGE_SIZE - 1));
;;;499    
;;;500    	for (udbRemain = udbLength; udbRemain; udbRemain -= udbToDo)
;;;501    	{
;;;502    		/*Calculate length of data to update in current page*/
;;;503    		udbToDo = (udbOffset + udbRemain) < PAGE_SIZE ? udbRemain : (PAGE_SIZE - udbOffset);
        0x00007362:    9806        ..      LDR      r0,[sp,#0x18]
        0x00007364:    b287        ..      UXTH     r7,r0
        0x00007366:    19e0        ..      ADDS     r0,r4,r7
        0x00007368:    42a8        .B      CMP      r0,r5
        0x0000736a:    d301        ..      BCC      0x7370 ; baseWriteNBytesDirect + 84
        0x0000736c:    9805        ..      LDR      r0,[sp,#0x14]
        0x0000736e:    1b07        ..      SUBS     r7,r0,r4
;;;504    
;;;505    		/*Read page in buffer*/
;;;506    		baseReadNBytesDirect(uqbFlashAddr, gumbFlashBuff, PAGE_SIZE);
;;;507    
;;;508    		/*Check if data is same so please dont update, for god sake*/
;;;509    		if (mem_cmp(&gumbFlashBuff[udbOffset], &pumbInput[udbCounter], udbToDo)) {
        0x00007370:    b2ba        ..      UXTH     r2,r7
        0x00007372:    9804        ..      LDR      r0,[sp,#0x10]
        0x00007374:    b281        ..      UXTH     r1,r0
        0x00007376:    9801        ..      LDR      r0,[sp,#4]
        0x00007378:    9104        ..      STR      r1,[sp,#0x10]
        0x0000737a:    1841        A.      ADDS     r1,r0,r1
        0x0000737c:    480f        .H      LDR      r0,[pc,#60] ; [0x73bc] = 0x20000344
        0x0000737e:    1905        ..      ADDS     r5,r0,r4
        0x00007380:    4628        (F      MOV      r0,r5
        0x00007382:    9102        ..      STR      r1,[sp,#8]
        0x00007384:    9203        ..      STR      r2,[sp,#0xc]
        0x00007386:    f7f9fb70    ..p.    BL       mem_cmp ; 0xa6a
        0x0000738a:    2800        .(      CMP      r0,#0
        0x0000738c:    d0d4        ..      BEQ      0x7338 ; baseWriteNBytesDirect + 28
;;;510    
;;;511    			/*Data is different, now we can go for update*/
;;;512    			/*copy the buffer*/
;;;513    			mem_cpy(&gumbFlashBuff[udbOffset], &pumbInput[udbCounter], udbToDo);
        0x0000738e:    4628        (F      MOV      r0,r5
        0x00007390:    9902        ..      LDR      r1,[sp,#8]
        0x00007392:    9a03        ..      LDR      r2,[sp,#0xc]
        0x00007394:    f7f9fb13    ....    BL       mem_cpyFwd ; 0x9be
;;;514    
;;;515    			/*Update buffer at destn page*/
;;;516    			if (FALSE == updatePage(uqbFlashAddr, gumbFlashBuff)) {
;;;517    
;;;518    				break;
;;;519    			}
;;;520    		}
;;;521    
;;;522    		/*next offset of input buffer*/
;;;523    		udbCounter += udbToDo;
;;;524    
;;;525    		/*next offset in next destination page*/
;;;526    		udbOffset = (uDiByte)(udbToDo + udbOffset) & (PAGE_SIZE - 1);
;;;527    
;;;528    		/*Next destination page*/
;;;529    		uqbFlashAddr += PAGE_SIZE;
;;;530    	}
;;;531    
;;;532    	return bRet;
;;;533    }
;;;534    
;;;535    /*Read direct from the given address*/
;;;536    void baseReadNBytesDirect(uQuadByte uqbAddress, puMonoByte pumbOutput, uDiByte udbLength) {
;;;537    
;;;538    #ifdef _CHIP_THC80F340A
;;;539    	mem_cpy(pumbOutput, (const puMonoByte)uqbAddress, udbLength);
;;;540    #else
;;;541    	Simul_ReadNBytesDirect(uqbAddress, pumbOutput, udbLength);
;;;542    #endif
;;;543    }
;;;544    
;;;545    
;;;546    /*Write the page on given address*/
;;;547    static boolean  baseWritePageDirect(uQuadByte uqbAddress, puMonoByte pumbInput) {
;;;548    
;;;549    #ifdef _CHIP_THC80F340A
;;;550    	return Chip_THC80F340A_WritePage(uqbAddress, pumbInput);
;;;551    #else
;;;552    	return Simul_WriteNBytes(uqbAddress, pumbInput, PAGE_SIZE);
;;;553    #endif
;;;554    }
;;;555    
;;;556    /*Erase the page on given address*/
;;;557    static boolean  baseErasePageDirect(uQuadByte uqbAddress) {
;;;558    	
;;;559    //	uDiByte udbIndex=0;
;;;560    //	
;;;561    //	/*Check if content of file is already erased*/
;;;562    //	for(udbIndex=0; udbIndex<PAGE_SIZE; udbIndex++){
;;;563    //		
;;;564    //		if(DEFAULT_BYTE != READ_SINGLE_BYTE(uqbAddress + udbIndex)){
;;;565    			#ifdef _CHIP_THC80F340A
;;;566    				return Chip_THC80F340A_ErasePage(uqbAddress);
        0x00007398:    4630        0F      MOV      r0,r6
        0x0000739a:    f7f8ffb5    ....    BL       Chip_THC80F340A_ErasePage ; 0x308
        0x0000739e:    b2c0        ..      UXTB     r0,r0
        0x000073a0:    28ff        .(      CMP      r0,#0xff
        0x000073a2:    d106        ..      BNE      0x73b2 ; baseWriteNBytesDirect + 150
        0x000073a4:    4630        0F      MOV      r0,r6
        0x000073a6:    4905        .I      LDR      r1,[pc,#20] ; [0x73bc] = 0x20000344
        0x000073a8:    f7f8ffa0    ....    BL       Chip_THC80F340A_WritePage ; 0x2ec
        0x000073ac:    b2c0        ..      UXTB     r0,r0
        0x000073ae:    28ff        .(      CMP      r0,#0xff
        0x000073b0:    d0c2        ..      BEQ      0x7338 ; baseWriteNBytesDirect + 28
        0x000073b2:    2000        .       MOVS     r0,#0
        0x000073b4:    b007        ..      ADD      sp,sp,#0x1c
        0x000073b6:    bdf0        ..      POP      {r4-r7,pc}
    $d.7
    __arm_cp.4_0
        0x000073b8:    fffffe00    ....    DCD    4294966784
    __arm_cp.4_1
        0x000073bc:    20000344    D..     DCD    536871748
    $t.0
    _7816_3_transmitAtr
;;; HardwareLayers/Abstraction/7816_3/source\ATR.c
;;;32     {
        0x000073c0:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x000073c2:    2411        .$      MOVS     r4,#0x11
        0x000073c4:    4620         F      MOV      r0,r4
        0x000073c6:    f7f8ffd3    ....    BL       Chip_THC80F340A_setFiDi ; 0x370
;;; HardwareLayers/Abstraction/7816_3/source\ATR.c
        0x000073ca:    203b        ;       MOVS     r0,#0x3b
        0x000073cc:    f7f8ffe2    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073d0:    209f        .       MOVS     r0,#0x9f
        0x000073d2:    f7f8ffdf    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073d6:    2096        .       MOVS     r0,#0x96
        0x000073d8:    f7f8ffdc    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073dc:    2580        .%      MOVS     r5,#0x80
        0x000073de:    4628        (F      MOV      r0,r5
        0x000073e0:    f7f8ffd8    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073e4:    201f        .       MOVS     r0,#0x1f
        0x000073e6:    f7f8ffd5    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073ea:    2087        .       MOVS     r0,#0x87
        0x000073ec:    f7f8ffd2    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073f0:    4628        (F      MOV      r0,r5
        0x000073f2:    f7f8ffcf    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073f6:    2031        1       MOVS     r0,#0x31
        0x000073f8:    f7f8ffcc    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x000073fc:    20a0        .       MOVS     r0,#0xa0
        0x000073fe:    f7f8ffc9    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007402:    2073        s       MOVS     r0,#0x73
        0x00007404:    f7f8ffc6    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007408:    20be        .       MOVS     r0,#0xbe
        0x0000740a:    f7f8ffc3    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x0000740e:    2021        !       MOVS     r0,#0x21
        0x00007410:    f7f8ffc0    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007414:    4620         F      MOV      r0,r4
        0x00007416:    f7f8ffbd    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x0000741a:    2063        c       MOVS     r0,#0x63
        0x0000741c:    f7f8ffba    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007420:    2400        .$      MOVS     r4,#0
        0x00007422:    4620         F      MOV      r0,r4
        0x00007424:    f7f8ffb6    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007428:    4620         F      MOV      r0,r4
        0x0000742a:    f7f8ffb3    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x0000742e:    2001        .       MOVS     r0,#1
        0x00007430:    f7f8ffb0    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007434:    2083        .       MOVS     r0,#0x83
        0x00007436:    f7f8ffad    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x0000743a:    2005        .       MOVS     r0,#5
        0x0000743c:    f7f8ffaa    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007440:    2090        .       MOVS     r0,#0x90
        0x00007442:    f7f8ffa7    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x00007446:    4620         F      MOV      r0,r4
        0x00007448:    f7f8ffa4    ....    BL       Chip_THC80F340A_sendByte ; 0x394
        0x0000744c:    2089        .       MOVS     r0,#0x89
;;;1      
;;;2      #include "7816_3.h"
;;;3      
;;;4      /*Fi: Clock rate conversion integer list*/
;;;5      #define FI_372						(0x10)
;;;6      #define FI_512						(0x90)
;;;7      
;;;8      /*Di: Baud rate adjustment integer*/
;;;9      #define DI_1							(0x01)
;;;10     #define DI_2							(0x02)
;;;11     #define DI_32							(0x06)
;;;12     
;;;13     
;;;14     /*ATR bytes*/
;;;15     #define SIZE_ATR					(0x16)
;;;16     const 	uMonoByte	umbATR[SIZE_ATR] ={ 0x3B, 0x9F, 0x96, 0x80, 0x1F, 0x87, 0x80, 0x31, 0xA0, 0x73, 0xBE, 0x21, 0x11, 0x63, 0x00, 0x00, 0x01, 0x83, 0x05, 0x90, 0x00, 0x89 };
;;;17     
;;;18     /*PPS*/
;;;19     #define PPS_MAX_LENGTH				(0x04)
;;;20     #define PPS_PPS0_MASK_PPS1		(0x10)
;;;21     #define PPS_PPS0_MASK_PPS2		(0x20)
;;;22     #define PPS_PPS0_MASK_PPS3		(0x40)
;;;23     #define PPS_PPSS_INDEX				(0x00)
;;;24     #define PPS_PPS0_INDEX				(0x01)
;;;25     #define PPS_PPS1_INDEX				(0x02)
;;;26     #define PPS_PCK_INDEX					(0x03)
;;;27     
;;;28     /*
;;;29     * Transmits the ATR bytes
;;;30     */
;;;31     void _7816_3_transmitAtr(void)
;;;32     {
;;;33     	DBG_FUNC_ENTRY(">>[7816_3] _7816_3_transmitAtr() \n");
;;;34     	DBG_FUNC("Sending ATR bytes \n");
;;;35     	uMonoByte umbIndex;
;;;36     	
;;;37     	setFiDi(FI_372|DI_1);
;;;38     	
;;;39     	for(umbIndex = 0;umbIndex<SIZE_ATR ;umbIndex ++)
;;;40     	{	
;;;41     		SendByteToID(umbATR[umbIndex]);
        0x0000744e:    f7f8ffa1    ....    BL       Chip_THC80F340A_sendByte ; 0x394
;;;42     	}
;;;43     	
;;;44     	DBG_FUNC_EXIT("<<[7816_3] _7816_3_transmitAtr() \n");
;;;45     }
        0x00007452:    bdb0        ..      POP      {r4,r5,r7,pc}
    _7816_3_ppsExchange
;;;46     
;;;47     /*
;;;48     * Exchanges PPS bytes and validate the values
;;;49     *
;;;50     *	@pre: This function must be called immediate after _7816_3_transmitAtr
;;;51     */
;;;52     #undef THC80_CODE
;;;53     void _7816_3_ppsExchange(void)
;;;54     {
        0x00007454:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00007456:    b083        ..      SUB      sp,sp,#0xc
        0x00007458:    4823        #H      LDR      r0,[pc,#140] ; [0x74e8] = 0xef0010ff
;;;55     	uMonoByte	umbValue;
;;;56     	uMonoByte	umbPPS[PPS_MAX_LENGTH] = {0xFF, 0x10, 0x00, 0xEF}; // PCK contains XOR of PPS and PPS0
        0x0000745a:    9002        ..      STR      r0,[sp,#8]
;;;57     #ifndef WIN32
;;;58     	uMonoByte	umbPck;
;;;59     #endif
;;;60     	
;;;61     	DBG_FUNC_ENTRY(">>[7816_3] _7816_3_ppsExchange() \n");
;;;62     	umbValue = receiveByte();
        0x0000745c:    f7f8ffa6    ....    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x00007460:    4604        .F      MOV      r4,r0
;;;63     #ifndef WIN32	
;;;64     	if (umbValue == 0xFF)
        0x00007462:    28ff        .(      CMP      r0,#0xff
        0x00007464:    d119        ..      BNE      0x749a ; _7816_3_ppsExchange + 70
;;;65     	{
;;;66     		/*Receive PPS0*/
;;;67     		umbValue = receiveByte();
        0x00007466:    f7f8ffa1    ....    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x0000746a:    4604        .F      MOV      r4,r0
        0x0000746c:    2710        .'      MOVS     r7,#0x10
;;;68     
;;;69     		/*initial value to calculate XOR*/
;;;70     		umbPck = umbValue;
;;;71     
;;;72     		if (umbValue & PPS_PPS0_MASK_PPS1) { // If Bit 5 of PPS0 is set
        0x0000746e:    4007        .@      ANDS     r7,r7,r0
        0x00007470:    d117        ..      BNE      0x74a2 ; _7816_3_ppsExchange + 78
        0x00007472:    20ef        .       MOVS     r0,#0xef
        0x00007474:    9001        ..      STR      r0,[sp,#4]
        0x00007476:    4625        %F      MOV      r5,r4
        0x00007478:    06a0        ..      LSLS     r0,r4,#26
        0x0000747a:    d51d        ..      BPL      0x74b8 ; _7816_3_ppsExchange + 100
        0x0000747c:    f7f8ff96    ....    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x00007480:    4606        .F      MOV      r6,r0
        0x00007482:    406e        n@      EORS     r6,r6,r5
        0x00007484:    0660        `.      LSLS     r0,r4,#25
        0x00007486:    d51a        ..      BPL      0x74be ; _7816_3_ppsExchange + 106
        0x00007488:    f7f8ff90    ....    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x0000748c:    4605        .F      MOV      r5,r0
        0x0000748e:    4075        u@      EORS     r5,r5,r6
        0x00007490:    f7f8ff8c    ....    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x00007494:    4068        h@      EORS     r0,r0,r5
        0x00007496:    28ff        .(      CMP      r0,#0xff
        0x00007498:    d017        ..      BEQ      0x74ca ; _7816_3_ppsExchange + 118
        0x0000749a:    485a        ZH      LDR      r0,[pc,#360] ; [0x7604] = 0x2000023e
        0x0000749c:    7004        .p      STRB     r4,[r0,#0]
        0x0000749e:    b003        ..      ADD      sp,sp,#0xc
        0x000074a0:    bdf0        ..      POP      {r4-r7,pc}
;;;73     
;;;74     			/*Receive and Store in given array*/
;;;75     			umbPPS[PPS_PPS1_INDEX] = receiveByte();
        0x000074a2:    f7f8ff83    ....    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x000074a6:    4605        .F      MOV      r5,r0
        0x000074a8:    a802        ..      ADD      r0,sp,#8
        0x000074aa:    7085        .p      STRB     r5,[r0,#2]
        0x000074ac:    20ef        .       MOVS     r0,#0xef
        0x000074ae:    4068        h@      EORS     r0,r0,r5
        0x000074b0:    9001        ..      STR      r0,[sp,#4]
;;;76     
;;;77     			/*XOR with PPS1*/
;;;78     			umbPck ^= umbPPS[PPS_PPS1_INDEX];
        0x000074b2:    4065        e@      EORS     r5,r5,r4
;;;79     		}
;;;80     		if (umbValue & PPS_PPS0_MASK_PPS2) {  // If Bit 6 of PPS0 is set
        0x000074b4:    06a0        ..      LSLS     r0,r4,#26
        0x000074b6:    d4e1        ..      BMI      0x747c ; _7816_3_ppsExchange + 40
        0x000074b8:    462e        .F      MOV      r6,r5
;;;81     
;;;82     			/*XOR with PPS2*/
;;;83     			umbPck ^= receiveByte();
;;;84     		}
;;;85     		if (umbValue & PPS_PPS0_MASK_PPS3) { // If Bit 7 of PPS0 is set
        0x000074ba:    0660        `.      LSLS     r0,r4,#25
        0x000074bc:    d4e4        ..      BMI      0x7488 ; _7816_3_ppsExchange + 52
        0x000074be:    4635        5F      MOV      r5,r6
;;;86     
;;;87     			/*XOR with PPS3*/
;;;88     			umbPck ^= receiveByte();
;;;89     		}
;;;90     		/*XOR with PCK */
;;;91     		umbPck ^= receiveByte();
        0x000074c0:    f7f8ff74    ..t.    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x000074c4:    4068        h@      EORS     r0,r0,r5
;;;92     		
;;;93     		if ((umbPck == 0xFF) && (umbValue & PPS_PPS0_MASK_PPS1) ){ //if XORing is valid and PPS1 is present
        0x000074c6:    28ff        .(      CMP      r0,#0xff
        0x000074c8:    d1e7        ..      BNE      0x749a ; _7816_3_ppsExchange + 70
        0x000074ca:    2f00        ./      CMP      r7,#0
        0x000074cc:    d0e5        ..      BEQ      0x749a ; _7816_3_ppsExchange + 70
        0x000074ce:    a802        ..      ADD      r0,sp,#8
;;;94     			
;;;95     			/*XOR with incoming PPS1*/
;;;96     			umbPPS[PPS_PCK_INDEX] ^= umbPPS[PPS_PPS1_INDEX];
        0x000074d0:    9901        ..      LDR      r1,[sp,#4]
        0x000074d2:    70c1        .p      STRB     r1,[r0,#3]
        0x000074d4:    2104        .!      MOVS     r1,#4
;;;97     			
;;;98     			/*Check if PPS1 is valid*/
;;;99     			sendPPSresponse(umbPPS, 0x04);
        0x000074d6:    f7f8ff31    ..1.    BL       Chip_THC80F340A_sendPPSresponse ; 0x33c
;;;100    			umbValue = receiveByte();
        0x000074da:    f7f8ff67    ..g.    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x000074de:    4604        .F      MOV      r4,r0
;;;101    		}
;;;102    		
;;;103    	}
;;;104    #endif			
;;;105    	CLA_BYTE = umbValue;
        0x000074e0:    4848        HH      LDR      r0,[pc,#288] ; [0x7604] = 0x2000023e
        0x000074e2:    7004        .p      STRB     r4,[r0,#0]
;;;106    	
;;;107    	DBG_FUNC_EXIT("<<[7816_3] _7816_3_ppsExchange() \n");
;;;108    }
        0x000074e4:    b003        ..      ADD      sp,sp,#0xc
        0x000074e6:    bdf0        ..      POP      {r4-r7,pc}
    $d.1
    __arm_cp.1_0
        0x000074e8:    ef0010ff    ....    DCD    4009758975
    $t.0
    _7816_3_receiveCommandHeader
;;; HardwareLayers/Abstraction/7816_3/source\Communication.c
;;;12     {
        0x000074ec:    b510        ..      PUSH     {r4,lr}
;;;13     	INS_BYTE = receiveByte();
        0x000074ee:    f7f8ff5d    ..].    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x000074f2:    4c06        .L      LDR      r4,[pc,#24] ; [0x750c] = 0x2000023e
        0x000074f4:    7060        `p      STRB     r0,[r4,#1]
;;;14     	P1_BYTE = receiveByte();
        0x000074f6:    f7f8ff59    ..Y.    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x000074fa:    70a0        .p      STRB     r0,[r4,#2]
;;;15     	P2_BYTE = receiveByte();
        0x000074fc:    f7f8ff56    ..V.    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x00007500:    70e0        .p      STRB     r0,[r4,#3]
;;;16     	P3_BYTE = receiveByte();
        0x00007502:    f7f8ff53    ..S.    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x00007506:    7120         q      STRB     r0,[r4,#4]
;;;17     }
        0x00007508:    bd10        ..      POP      {r4,pc}
        0x0000750a:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x0000750c:    2000023e    >..     DCD    536871486
    $t.2
    _7816_3_sendResponseData
;;;18     
;;;19     
;;;20     /*
;;;21     * Sends the response data back to ID (interface device)
;;;22     */
;;;23     void _7816_3_sendResponseData(void)
;;;24     {	
        0x00007510:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00007512:    b081        ..      SUB      sp,sp,#4
        0x00007514:    4e13        .N      LDR      r6,[pc,#76] ; [0x7564] = 0x2000023e
        0x00007516:    7870        px      LDRB     r0,[r6,#1]
        0x00007518:    f7f8ff3c    ..<.    BL       Chip_THC80F340A_sendByte ; 0x394
        0x0000751c:    4c12        .L      LDR      r4,[pc,#72] ; [0x7568] = 0x2000023c
        0x0000751e:    8820         .      LDRH     r0,[r4,#0]
        0x00007520:    0a01        ..      LSRS     r1,r0,#8
        0x00007522:    4605        .F      MOV      r5,r0
        0x00007524:    d108        ..      BNE      0x7538 ; _7816_3_sendResponseData + 40
        0x00007526:    7931        1y      LDRB     r1,[r6,#4]
        0x00007528:    2900        .)      CMP      r1,#0
        0x0000752a:    d10a        ..      BNE      0x7542 ; _7816_3_sendResponseData + 50
        0x0000752c:    2d00        .-      CMP      r5,#0
        0x0000752e:    d10b        ..      BNE      0x7548 ; _7816_3_sendResponseData + 56
        0x00007530:    1b40        @.      SUBS     r0,r0,r5
        0x00007532:    8020         .      STRH     r0,[r4,#0]
        0x00007534:    b001        ..      ADD      sp,sp,#4
        0x00007536:    bdf0        ..      POP      {r4-r7,pc}
;;; HardwareLayers/Abstraction/7816_3/source\Communication.c
        0x00007538:    2101        .!      MOVS     r1,#1
        0x0000753a:    020d        ..      LSLS     r5,r1,#8
        0x0000753c:    7931        1y      LDRB     r1,[r6,#4]
        0x0000753e:    2900        .)      CMP      r1,#0
        0x00007540:    d0f4        ..      BEQ      0x752c ; _7816_3_sendResponseData + 28
        0x00007542:    460d        .F      MOV      r5,r1
        0x00007544:    2d00        .-      CMP      r5,#0
        0x00007546:    d0f3        ..      BEQ      0x7530 ; _7816_3_sendResponseData + 32
        0x00007548:    1d76        v.      ADDS     r6,r6,#5
        0x0000754a:    462f        /F      MOV      r7,r5
        0x0000754c:    7830        0x      LDRB     r0,[r6,#0]
        0x0000754e:    f7f8ff21    ..!.    BL       Chip_THC80F340A_sendByte ; 0x394
;;;1      #include "7816_3.h"
;;;2      
;;;3      /*Definition of variables*/
;;;4      uMonoByte	gumbCmdApdu[MAX_CMD_LEN];
;;;5      uDiByte		gudbOutputLen;
;;;6      /*
;;;7      * Recieve command header from ID (Terminal)
;;;8      * 
;;;9      * @pre OS supposed to receive header only, otherwise PCSC error will come
;;;10     */
;;;11     void _7816_3_receiveCommandHeader(void)
;;;12     {
;;;13     	INS_BYTE = receiveByte();
;;;14     	P1_BYTE = receiveByte();
;;;15     	P2_BYTE = receiveByte();
;;;16     	P3_BYTE = receiveByte();
;;;17     }
;;;18     
;;;19     
;;;20     /*
;;;21     * Sends the response data back to ID (interface device)
;;;22     */
;;;23     void _7816_3_sendResponseData(void)
;;;24     {	
;;;25     
;;;26     #ifndef WIN32
;;;27     	/*Send ACK byte first*/
;;;28     	SendByteToID(INS_BYTE);
;;;29     #endif
;;;30     
;;;31     	/*Below variable use for index*/
;;;32     	uDiByte udbIndex;
;;;33     	uDiByte udbLength;
;;;34     
;;;35     	if (0x00 == P3_BYTE) { // check if p3 is 00
;;;36     		
;;;37     		/*Max requested length will 256 bytes*/
;;;38     		udbLength = ((gudbOutputLen > 0x100) ? 0x100 : gudbOutputLen);
;;;39     	}
;;;40     	else { // if p3 is non-zero
;;;41     
;;;42     		/*keep same data*/
;;;43     		udbLength = P3_BYTE;
;;;44     	}
;;;45     
;;;46     	/*Send all prepared response data back to ID, 1-by-1*/
;;;47     	for (udbIndex = 0; udbIndex < udbLength; udbIndex++)
        0x00007552:    1e7f        ..      SUBS     r7,r7,#1
        0x00007554:    1c76        v.      ADDS     r6,r6,#1
        0x00007556:    2f00        ./      CMP      r7,#0
        0x00007558:    d1f8        ..      BNE      0x754c ; _7816_3_sendResponseData + 60
;;;48     	{
;;;49     		/*Send current element of Response buffer*/
;;;50     		SendByteToID( RESPONSE_BUFF[udbIndex]);
;;;51     	}
;;;52     
;;;53     	/*Reset the response length*/
;;;54     	gudbOutputLen -= udbLength;
        0x0000755a:    8820         .      LDRH     r0,[r4,#0]
        0x0000755c:    1b40        @.      SUBS     r0,r0,r5
        0x0000755e:    8020         .      STRH     r0,[r4,#0]
;;;55     }
        0x00007560:    b001        ..      ADD      sp,sp,#4
        0x00007562:    bdf0        ..      POP      {r4-r7,pc}
    $d.3
    __arm_cp.1_0
        0x00007564:    2000023e    >..     DCD    536871486
    __arm_cp.1_1
        0x00007568:    2000023c    <..     DCD    536871484
    $t.4
    _7816_3_receiveCommandData
;;;56     
;;;57     /*
;;;58     * Receive command data
;;;59     *
;;;60     * @pre command supposed to be of Input type i.e. it must have command data
;;;61     */
;;;62     void _7816_3_receiveCommandData(void)
;;;63     {
        0x0000756c:    b570        p.      PUSH     {r4-r6,lr}
;;;64     #ifndef WIN32
;;;65     	SendByteToID(INS_BYTE);
        0x0000756e:    4c08        .L      LDR      r4,[pc,#32] ; [0x7590] = 0x2000023e
        0x00007570:    7860        `x      LDRB     r0,[r4,#1]
        0x00007572:    f7f8ff0f    ....    BL       Chip_THC80F340A_sendByte ; 0x394
;;;66     #endif
;;;67     	uMonoByte umbIndex;
;;;68     	for(umbIndex = 0; umbIndex< LC_BYTE; umbIndex++)
        0x00007576:    7920         y      LDRB     r0,[r4,#4]
        0x00007578:    2800        .(      CMP      r0,#0
        0x0000757a:    d008        ..      BEQ      0x758e ; _7816_3_receiveCommandData + 34
        0x0000757c:    2500        .%      MOVS     r5,#0
        0x0000757e:    1966        f.      ADDS     r6,r4,r5
        0x00007580:    f7f8ff14    ....    BL       Chip_THC80F340A_receiveByte ; 0x3ac
        0x00007584:    7170        pq      STRB     r0,[r6,#5]
        0x00007586:    1c6d        m.      ADDS     r5,r5,#1
        0x00007588:    7920         y      LDRB     r0,[r4,#4]
        0x0000758a:    4285        .B      CMP      r5,r0
        0x0000758c:    d3f7        ..      BCC      0x757e ; _7816_3_receiveCommandData + 18
;;;69     	{ 
;;;70     		gumbCmdApdu[INDEX_CMD_DATA + umbIndex] = receiveByte();
;;;71     	}
;;;72     }
        0x0000758e:    bd70        p.      POP      {r4-r6,pc}
    $d.5
    __arm_cp.2_0
        0x00007590:    2000023e    >..     DCD    536871486
    $t.6
    _7816_3_setProcedureByte
;;;73     /*
;;;74     * It sets status words acc. to requested procedure bytes
;;;75     * 
;;;76     * @param pbByte: contains requested procedure byte
;;;77     * 
;;;78     * @precondition: Requestor ensure that Procedure byte can never be PROCDEDURE_NULL_BYTE
;;;79     */
;;;80     void _7816_3_setProcedureByte(tProcedureByte pbByte) {
;;;81     
;;;82     	/*Set status words acc. to procedure byte*/
;;;83     	excepRet = (tSwExceps)pbByte;
        0x00007594:    4903        .I      LDR      r1,[pc,#12] ; [0x75a4] = 0x2000023a
        0x00007596:    7008        .p      STRB     r0,[r1,#0]
;;;84     
;;;85     	/*second byte of status words are*/
;;;86     	P3_BYTE = (uMonoByte)gudbOutputLen;
        0x00007598:    4803        .H      LDR      r0,[pc,#12] ; [0x75a8] = 0x2000023c
        0x0000759a:    7800        .x      LDRB     r0,[r0,#0]
        0x0000759c:    4903        .I      LDR      r1,[pc,#12] ; [0x75ac] = 0x2000023e
        0x0000759e:    7108        .q      STRB     r0,[r1,#4]
;;;87     }
        0x000075a0:    4770        pG      BX       lr
        0x000075a2:    46c0        .F      MOV      r8,r8
    $d.7
    __arm_cp.3_0
        0x000075a4:    2000023a    :..     DCD    536871482
    __arm_cp.3_1
        0x000075a8:    2000023c    <..     DCD    536871484
    __arm_cp.3_2
        0x000075ac:    2000023e    >..     DCD    536871486
    $t.8
    _7816_3_sendStatusWords
;;;88     
;;;89     void _7816_3_sendStatusWords(void) {
        0x000075b0:    b5b0        ..      PUSH     {r4,r5,r7,lr}
;;; HardwareLayers/Abstraction/7816_3/source\Communication.c
        0x000075b2:    4812        .H      LDR      r0,[pc,#72] ; [0x75fc] = 0x2000023a
        0x000075b4:    7800        .x      LDRB     r0,[r0,#0]
        0x000075b6:    0081        ..      LSLS     r1,r0,#2
        0x000075b8:    4a11        .J      LDR      r2,[pc,#68] ; [0x7600] = 0x80f0
        0x000075ba:    1889        ..      ADDS     r1,r1,r2
        0x000075bc:    4c11        .L      LDR      r4,[pc,#68] ; [0x7604] = 0x2000023e
        0x000075be:    7822        "x      LDRB     r2,[r4,#0]
        0x000075c0:    2aa0        .*      CMP      r2,#0xa0
        0x000075c2:    d005        ..      BEQ      0x75d0 ; _7816_3_sendStatusWords + 32
        0x000075c4:    1f09        ..      SUBS     r1,r1,#4
        0x000075c6:    8809        ..      LDRH     r1,[r1,#0]
        0x000075c8:    2819        .(      CMP      r0,#0x19
        0x000075ca:    460d        .F      MOV      r5,r1
        0x000075cc:    d905        ..      BLS      0x75da ; _7816_3_sendStatusWords + 42
        0x000075ce:    e00c        ..      B        0x75ea ; _7816_3_sendStatusWords + 58
        0x000075d0:    1e89        ..      SUBS     r1,r1,#2
        0x000075d2:    8809        ..      LDRH     r1,[r1,#0]
        0x000075d4:    2819        .(      CMP      r0,#0x19
        0x000075d6:    460d        .F      MOV      r5,r1
        0x000075d8:    d807        ..      BHI      0x75ea ; _7816_3_sendStatusWords + 58
        0x000075da:    2201        ."      MOVS     r2,#1
        0x000075dc:    4082        .@      LSLS     r2,r2,r0
        0x000075de:    480a        .H      LDR      r0,[pc,#40] ; [0x7608] = 0x2000086
        0x000075e0:    4202        .B      TST      r2,r0
        0x000075e2:    460d        .F      MOV      r5,r1
        0x000075e4:    d001        ..      BEQ      0x75ea ; _7816_3_sendStatusWords + 58
        0x000075e6:    7925        %y      LDRB     r5,[r4,#4]
        0x000075e8:    430d        .C      ORRS     r5,r5,r1
;;;1      #include "7816_3.h"
;;;2      
;;;3      /*Definition of variables*/
;;;4      uMonoByte	gumbCmdApdu[MAX_CMD_LEN];
;;;5      uDiByte		gudbOutputLen;
;;;6      /*
;;;7      * Recieve command header from ID (Terminal)
;;;8      * 
;;;9      * @pre OS supposed to receive header only, otherwise PCSC error will come
;;;10     */
;;;11     void _7816_3_receiveCommandHeader(void)
;;;12     {
;;;13     	INS_BYTE = receiveByte();
;;;14     	P1_BYTE = receiveByte();
;;;15     	P2_BYTE = receiveByte();
;;;16     	P3_BYTE = receiveByte();
;;;17     }
;;;18     
;;;19     
;;;20     /*
;;;21     * Sends the response data back to ID (interface device)
;;;22     */
;;;23     void _7816_3_sendResponseData(void)
;;;24     {	
;;;25     
;;;26     #ifndef WIN32
;;;27     	/*Send ACK byte first*/
;;;28     	SendByteToID(INS_BYTE);
;;;29     #endif
;;;30     
;;;31     	/*Below variable use for index*/
;;;32     	uDiByte udbIndex;
;;;33     	uDiByte udbLength;
;;;34     
;;;35     	if (0x00 == P3_BYTE) { // check if p3 is 00
;;;36     		
;;;37     		/*Max requested length will 256 bytes*/
;;;38     		udbLength = ((gudbOutputLen > 0x100) ? 0x100 : gudbOutputLen);
;;;39     	}
;;;40     	else { // if p3 is non-zero
;;;41     
;;;42     		/*keep same data*/
;;;43     		udbLength = P3_BYTE;
;;;44     	}
;;;45     
;;;46     	/*Send all prepared response data back to ID, 1-by-1*/
;;;47     	for (udbIndex = 0; udbIndex < udbLength; udbIndex++)
;;;48     	{
;;;49     		/*Send current element of Response buffer*/
;;;50     		SendByteToID( RESPONSE_BUFF[udbIndex]);
;;;51     	}
;;;52     
;;;53     	/*Reset the response length*/
;;;54     	gudbOutputLen -= udbLength;
;;;55     }
;;;56     
;;;57     /*
;;;58     * Receive command data
;;;59     *
;;;60     * @pre command supposed to be of Input type i.e. it must have command data
;;;61     */
;;;62     void _7816_3_receiveCommandData(void)
;;;63     {
;;;64     #ifndef WIN32
;;;65     	SendByteToID(INS_BYTE);
;;;66     #endif
;;;67     	uMonoByte umbIndex;
;;;68     	for(umbIndex = 0; umbIndex< LC_BYTE; umbIndex++)
;;;69     	{ 
;;;70     		gumbCmdApdu[INDEX_CMD_DATA + umbIndex] = receiveByte();
;;;71     	}
;;;72     }
;;;73     /*
;;;74     * It sets status words acc. to requested procedure bytes
;;;75     * 
;;;76     * @param pbByte: contains requested procedure byte
;;;77     * 
;;;78     * @precondition: Requestor ensure that Procedure byte can never be PROCDEDURE_NULL_BYTE
;;;79     */
;;;80     void _7816_3_setProcedureByte(tProcedureByte pbByte) {
;;;81     
;;;82     	/*Set status words acc. to procedure byte*/
;;;83     	excepRet = (tSwExceps)pbByte;
;;;84     
;;;85     	/*second byte of status words are*/
;;;86     	P3_BYTE = (uMonoByte)gudbOutputLen;
;;;87     }
;;;88     
;;;89     void _7816_3_sendStatusWords(void) {
;;;90     
;;;91     	/*Get status words*/
;;;92     	uDiByte udbSw = SIM ? SW[excepRet-1].udbSimSw :\
;;;93     							SW[excepRet-1].udbUiccSw;
;;;94     
;;;95     	if ((EXCEP_WRONG_P3 == excepRet)
;;;96     		||
        0x000075ea:    0a08        ..      LSRS     r0,r1,#8
;;;97     		(EXCEP_SEND_GET_RESPONSE == excepRet)
;;;98     		||
;;;99     		(EXCEP_RESEND_COMMAND_WITH_CORRECT_P3 == excepRet)
;;;100    		||
;;;101    		(EXCEP_PIN_VERIFICATION_FAILED == excepRet)) { // if its 67xx or 61xx or 6Cxx or 63Cx
;;;102    
;;;103    		/*P3 will help to provide SW2 in this case*/
;;;104    		udbSw |= ((uMonoByte)P3_BYTE);
;;;105    
;;;106    	}
;;;107    	/*Send SW1*/
;;;108    	SendByteToID((uMonoByte)SHIFT_RIGHT_BY_N_BITS(udbSw,0x08));
        0x000075ec:    f7f8fed2    ....    BL       Chip_THC80F340A_sendByte ; 0x394
;;;109    	
;;;110    	/*Send SW2 and receive next command*/
;;;111    	CLA_BYTE = SendLastByteToID((uMonoByte)(udbSw));
        0x000075f0:    b2e8        ..      UXTB     r0,r5
        0x000075f2:    f7f8fed3    ....    BL       Chip_THC80F340A_sendLastByte ; 0x39c
        0x000075f6:    7020         p      STRB     r0,[r4,#0]
;;;112    }
        0x000075f8:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x000075fa:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.4_0
        0x000075fc:    2000023a    :..     DCD    536871482
    __arm_cp.4_1
        0x00007600:    000080f0    ....    DCD    33008
    __arm_cp.4_2
        0x00007604:    2000023e    >..     DCD    536871486
    __arm_cp.4_3
        0x00007608:    02000086    ....    DCD    33554566
    $t.0
    _102225_VerifySecurityCommandHeader
;;; Core/102_225/source\102_225.c
;;;12     }
        0x0000760c:    4770        pG      BX       lr
        0x0000760e:    0000        ..      MOVS     r0,r0
    _102226_RfmParameters
;;; Core/102_226/source\102_226.c
;;;16     boolean _102226_RfmParameters(IN_ARG puMonoByte fhaTAR, OUT_ARG puMonoByte pumbrfmpr) {
        0x00007610:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00007612:    b089        ..      SUB      sp,sp,#0x24
        0x00007614:    2800        .(      CMP      r0,#0
        0x00007616:    d036        6.      BEQ      0x7686 ; _102226_RfmParameters + 118
;;; Core/102_226/source\102_226.c
        0x00007618:    460c        .F      MOV      r4,r1
        0x0000761a:    2900        .)      CMP      r1,#0
        0x0000761c:    d038        8.      BEQ      0x7690 ; _102226_RfmParameters + 128
        0x0000761e:    4605        .F      MOV      r5,r0
        0x00007620:    f7fbfcc8    ....    BL       _7816_4_getMfAddress ; 0x2fb4
        0x00007624:    4601        .F      MOV      r1,r0
        0x00007626:    481d        .H      LDR      r0,[pc,#116] ; [0x769c] = 0x7f49
        0x00007628:    2600        .&      MOVS     r6,#0
        0x0000762a:    af08        ..      ADD      r7,sp,#0x20
;;;1      #include "102_226.h"
;;;2      
;;;3      //Variables definition
;;;4      #define TAR_LENGTH								(0x02)
;;;5      #define FULL_ACCESS_DOMAIN						(0xFFFFFF)
;;;6      #define NO_ACCESS_DOMAIN						(0x000000)
;;;7      #define OFFSET_START_TAR						(0x04)
;;;8      #define TAR_CHECK								(0xB00001)
;;;9      
;;;10     /*
;;;11     *RFM Parameters
;;;12     *It search the given TAR with Different TAR's and return Acess_Domain and MSL
;;;13     *@fhaTAR It's Containes the TAR
;;;14     *@pumbrfmpr It's Containes the Access_Domain, MSL
;;;15     */
;;;16     boolean _102226_RfmParameters(IN_ARG puMonoByte fhaTAR, OUT_ARG puMonoByte pumbrfmpr) {
;;;17     
;;;18     	tFileHeaderAddr   fhaFile;
;;;19     	uMonoByte	      umbRecord;
;;;20     	uMonoByte	      umbFileRecord;
;;;21     	uMonoByte		  pumbrfmprRecord[0x07];
;;;22     	uMonoByte		  umbIndex;
;;;23     
;;;24     	/*Check address must not be NULL*/
;;;25     	assert(fhaTAR != NULL);
;;;26     	assert(pumbrfmpr != NULL);
;;;27     
;;;28     	DBG_FUNC_ENTRY(">>[102226] _102226_RfmParameters() \n");
;;;29     
;;;30     	/*Get file address of Prop. DF*/
;;;31     	_7816_4_ifFileExists(FID_PROP_ADMIN_USE, _7816_4_getMfAddress(), MODE_FIND_FID, &fhaFile);
        0x0000762c:    4632        2F      MOV      r2,r6
        0x0000762e:    463b        ;F      MOV      r3,r7
        0x00007630:    f7fbfd80    ....    BL       _7816_4_ifFileExists ; 0x3134
;;;32     
;;;33     	/*Get file address of Prop. Rfm Parameters file*/
;;;34     	_7816_4_ifFileExists(FID_PROP_RFM_PARAMETER, fhaFile, MODE_FIND_FID, &fhaFile);
        0x00007634:    8839        9.      LDRH     r1,[r7,#0]
        0x00007636:    481a        .H      LDR      r0,[pc,#104] ; [0x76a0] = 0x6f16
        0x00007638:    4632        2F      MOV      r2,r6
        0x0000763a:    463b        ;F      MOV      r3,r7
        0x0000763c:    f7fbfd7a    ..z.    BL       _7816_4_ifFileExists ; 0x3134
;;;35     
;;;36     	DBG_FUNC(">>[102226] _102226_RfmParameters() Get Rfm Parameters file \n");
;;;37     
;;;38     	umbRecord = _7816_4_SearchRecordFile(fhaFile,						//Address of file header which contains TAR
        0x00007640:    8838        8.      LDRH     r0,[r7,#0]
        0x00007642:    a907        ..      ADD      r1,sp,#0x1c
        0x00007644:    2204        ."      MOVS     r2,#4
        0x00007646:    2301        .#      MOVS     r3,#1
        0x00007648:    9600        ..      STR      r6,[sp,#0]
        0x0000764a:    9301        ..      STR      r3,[sp,#4]
        0x0000764c:    9202        ..      STR      r2,[sp,#8]
        0x0000764e:    9103        ..      STR      r1,[sp,#0xc]
        0x00007650:    2202        ."      MOVS     r2,#2
        0x00007652:    4629        )F      MOV      r1,r5
        0x00007654:    4633        3F      MOV      r3,r6
        0x00007656:    f7fbfff9    ....    BL       _7816_4_SearchRecordFile ; 0x364c
;;;39     										fhaTAR,							//contains TAR
;;;40     										(uMonoByte)TAR_LENGTH,			//search pattern length of TAR
;;;41     										SEARCH_RECORD_FORWARD,			//Search mode : forward or backward
;;;42     										SEARCH_FIRST_OCCURRENCE,		//Search occurrence: First or ALL
;;;43     										RECORD_FIRST,					//Record no. from where search starts
;;;44     										(uMonoByte)OFFSET_START_TAR,	//absoulte position in record for search
;;;45     										&umbFileRecord);				//Stores list of records matched with given pattern
;;;46     
;;;47     	/*pattern not matched with any record*/
;;;48     	if (0x00 == umbRecord)
        0x0000765a:    2800        .(      CMP      r0,#0
        0x0000765c:    d010        ..      BEQ      0x7680 ; _102226_RfmParameters + 112
        0x0000765e:    a807        ..      ADD      r0,sp,#0x1c
;;;49     	{
;;;50     		DBG_FUNC_EXIT("<<[102226] _102226_RfmParameters() returns FALSE %1\n", FALSE);
;;;51     		return FALSE;
;;;52     	}
;;;53     
;;;54     	/*Read record*/
;;;55     	_7816_4_readUpdateRecordFile(fhaFile, pumbrfmprRecord, umbFileRecord, ACC_MODE_FILE_READ);
        0x00007660:    7802        .x      LDRB     r2,[r0,#0]
        0x00007662:    a808        ..      ADD      r0,sp,#0x20
        0x00007664:    8800        ..      LDRH     r0,[r0,#0]
        0x00007666:    a905        ..      ADD      r1,sp,#0x14
        0x00007668:    2300        .#      MOVS     r3,#0
        0x0000766a:    f7fbfdbf    ....    BL       _7816_4_readUpdateRecordFile ; 0x31ec
;;;56     	DBG_FUNC("[102226] _102226_RfmParameters() Found RFM Parameters Access Domain,MSL,TAR \n");
;;;57     
;;;58     	/*Store Access Domain, MSL */
;;;59     	
;;;60     	for (umbIndex = 0x00; umbIndex <= 0x03;umbIndex++) {
;;;61     		pumbrfmpr[umbIndex] = pumbrfmprRecord[umbIndex];
        0x0000766e:    9805        ..      LDR      r0,[sp,#0x14]
        0x00007670:    7020         p      STRB     r0,[r4,#0]
        0x00007672:    0e01        ..      LSRS     r1,r0,#24
        0x00007674:    70e1        .p      STRB     r1,[r4,#3]
        0x00007676:    0c01        ..      LSRS     r1,r0,#16
        0x00007678:    70a1        .p      STRB     r1,[r4,#2]
        0x0000767a:    0a00        ..      LSRS     r0,r0,#8
        0x0000767c:    7060        `p      STRB     r0,[r4,#1]
        0x0000767e:    26ff        .&      MOVS     r6,#0xff
;;;62     	}
;;;63     	
;;;64     	DBG_FUNC_EXIT("<<[102226] _102226_RfmParameters() returns TRUE %1\n", TRUE);
;;;65     	return TRUE;
;;;66     }
        0x00007680:    4630        0F      MOV      r0,r6
        0x00007682:    b009        ..      ADD      sp,sp,#0x24
        0x00007684:    bdf0        ..      POP      {r4-r7,pc}
        0x00007686:    a00d        ..      ADR      r0,{pc}+0x36 ; 0x76bc
        0x00007688:    490b        .I      LDR      r1,[pc,#44] ; [0x76b8] = 0x8bd4
        0x0000768a:    2219        ."      MOVS     r2,#0x19
        0x0000768c:    f000f830    ..0.    BL       __aeabi_assert ; 0x76f0
        0x00007690:    a004        ..      ADR      r0,{pc}+0x14 ; 0x76a4
        0x00007692:    4909        .I      LDR      r1,[pc,#36] ; [0x76b8] = 0x8bd4
        0x00007694:    221a        ."      MOVS     r2,#0x1a
        0x00007696:    f000f82b    ..+.    BL       __aeabi_assert ; 0x76f0
        0x0000769a:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x0000769c:    00007f49    I...    DCD    32585
    __arm_cp.0_1
        0x000076a0:    00006f16    .o..    DCD    28438
        0x000076a4:    626d7570    pumb    DCD    1651340656
        0x000076a8:    706d6672    rfmp    DCD    1886217842
        0x000076ac:    3d212072    r !=    DCD    1025581170
        0x000076b0:    4c554e20     NUL    DCD    1280658976
        0x000076b4:    0000004c    L...    DCD    76
    __arm_cp.0_3
        0x000076b8:    00008bd4    ....    DCD    35796
        0x000076bc:    54616866    fhaT    DCD    1415669862
        0x000076c0:    21205241    AR !    DCD    555766337
        0x000076c4:    554e203d    = NU    DCD    1431183421
        0x000076c8:    00004c4c    LL..    DCD    19532
    $t.0
    _102226_ProcessRfm
;;; Core/102_226/source\Rfm.c
;;;18     }
        0x000076cc:    4770        pG      BX       lr
        0x000076ce:    0000        ..      MOVS     r0,r0
    _31115_SmsppImplementation
;;; BusinessComponent/Telecom/31_115/source\31_115.c
;;;10     void _31115_SmsppImplementation(IN_ARG puMonoByte pumbSmsData) {
        0x000076d0:    b580        ..      PUSH     {r7,lr}
;;;11     
;;;12     	uMonoByte	umbTpMessageTypeIndicator;
;;;13     	uMonoByte	umbTpMoreMessageToSend;
;;;14     	uMonoByte	umbTpLoopPrevention;
;;;15     	uMonoByte	umbTpStatusReportIndication;
;;;16     	uMonoByte	umbTpUserDataHeaderIndicator;
;;;17     	uMonoByte	umbTpReplyPath;
;;;18     	uMonoByte	umbTpOriginatingAddressLength;
;;;19     	uMonoByte	umbTpProtocolIdentifier;
;;;20     	uMonoByte	umbTpDataCodingScheme;
;;;21     	uMonoByte	umbTpServiceCentreTimeStamp;
;;;22     	uMonoByte	umbTpUserDataLength;
;;;23     	uMonoByte   umbIndex;
;;;24     	/*parsing of SMS-TPDU as per SMS-DELIVER type 23.040*/
;;;25     
;;;26     	DBG_FUNC_ENTRY(">>[31_115] _31115_SmsppImplementation() \n");
;;;27     	
;;;28     	umbTpMessageTypeIndicator = pumbSmsData[0x00] & 0x03;
;;;29     
;;;30     	switch (umbTpMessageTypeIndicator) {
;;;31     
;;;32     	case 0x00: DBG_FUNC("[31_115] _31115_SmsppImplementation: The b0b1 indicates message type as 'SMS-DELIVER'\n");
;;;33     		break;
;;;34     	case 0x01: DBG_FUNC("[31_115] _31115_SmsppImplementation: The b0b1 indicates message type as 'SMS-SUBMIT'\n");
;;;35     		break;
;;;36     	case 0x02: DBG_FUNC("[31_115] _31115_SmsppImplementation: The b0b1 indicates message type as 'SMS-COMMAND'\n");
;;;37     		break;
;;;38     	case 0x03: DBG_FUNC("[31_115] _31115_SmsppImplementation: The b0b1 indicates message type as 'Reserved'\n");
;;;39     		break;
;;;40     	}
;;;41     
;;;42     	/*tp_more_message_to_send = pumbSmsData[0x00] & 0x04;
;;;43     
;;;44     	if (tp_more_message_to_send) {
;;;45     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b2 indicates that no more messages are waiting for the MS in this SC\n");
;;;46     	}
;;;47     	else {
;;;48     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b2 indicates that more messages are waiting for the MS in this SC\n");
;;;49     	}*/
;;;50     
;;;51     	/*tp_loop_prevention = pumbSmsData[0x00] & 0x08;
;;;52     
;;;53     	if (tp_loop_prevention) {
;;;54     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b3 indicates that the message has either been forwarded or is a spawned message\n");
;;;55     	}
;;;56     	else {
;;;57     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b3 indicates that the message has not been forwarded and is not a spawned message\n");
;;;58     	}*/
;;;59     
;;;60     	/*tp_status_report_indication = pumbSmsData[0x00] & 0x20;
;;;61     
;;;62     	if (tp_status_report_indication) {
;;;63     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b5 indicates that a status report shall be returned to the SME\n");
;;;64     	}
;;;65     	else {
;;;66     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b5 indicates that a status report shall not be returned to the SME\n");
;;;67     	}*/
;;;68     
;;;69     	umbTpUserDataHeaderIndicator = pumbSmsData[0x00] & 0x40;
;;;70     
;;;71     	if (umbTpUserDataHeaderIndicator) {
;;;72     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b6 indicates that the beginning of the TP-UD field contains a Header in addition to the short message\n");
;;;73     	}
;;;74     	else {
;;;75     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b6 indicates that the TP-UD field contains only the short message\n");
;;;76     	}
;;;77     
;;;78     	umbTpReplyPath = pumbSmsData[0x00] & 0x80;
;;;79     
;;;80     	if (umbTpReplyPath) {
;;;81     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b7 indicates that TP-Reply-Path parameter is set in this SMS-SUBMIT/DELIVER\n");
;;;82     	}
;;;83     	else {
;;;84     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The b7 indicates that TP-Reply-Path parameter is not set in this SMS-SUBMIT/DELIVER\n");
;;;85     	}
;;;86     
;;;87     	umbTpOriginatingAddressLength = pumbSmsData[0x01];
        0x000076d2:    7841        Ax      LDRB     r1,[r0,#1]
;;;88     
;;;89     	umbIndex = 0x02 + umbTpOriginatingAddressLength / 2 + 0x01; //02 is index of add+type of address
        0x000076d4:    0849        I.      LSRS     r1,r1,#1
        0x000076d6:    1809        ..      ADDS     r1,r1,r0
;;;90     	
;;;91     	umbTpProtocolIdentifier = pumbSmsData[umbIndex];
        0x000076d8:    78ca        .x      LDRB     r2,[r1,#3]
;;;92     
;;;93     	if (umbTpProtocolIdentifier == 0x7F) {
        0x000076da:    2a7f        .*      CMP      r2,#0x7f
        0x000076dc:    d106        ..      BNE      0x76ec ; _31115_SmsppImplementation + 28
;;;94     		DBG_FUNC("[31_115] _31115_SmsppImplementation: The TP-Protocol-Identifier is (U)SIM Data download\n");
;;;95     
;;;96     		umbIndex++;
;;;97     
;;;98     		umbTpDataCodingScheme = pumbSmsData[umbIndex];
        0x000076de:    7909        .y      LDRB     r1,[r1,#4]
;;;99     
;;;100    		if (umbTpDataCodingScheme == 0xF6) {
        0x000076e0:    29f6        .)      CMP      r1,#0xf6
        0x000076e2:    d103        ..      BNE      0x76ec ; _31115_SmsppImplementation + 28
;;;101    			DBG_FUNC("[31_115] _31115_SmsppImplementation: The TP-Data-Coding-Scheme is Class 2 (U)SIM-specific message.\n");
;;;102    
;;;103    			umbIndex++;
;;;104    
;;;105    			/*Timestamp*/
;;;106    			umbIndex = umbIndex + 0x07;
;;;107    
;;;108    			umbTpUserDataLength = pumbSmsData[umbIndex];
;;;109    
;;;110    			umbIndex++;
;;;111    
;;;112    			/*TODO*/
;;;113    
;;;114    			_102225_VerifySecurityCommandHeader(pumbSmsData);
        0x000076e4:    f7ffff92    ....    BL       _102225_VerifySecurityCommandHeader ; 0x760c
;;;115    
;;;116    			/*Dispatch plain data to RFM application*/
;;;117    			_102226_ProcessRfm();
        0x000076e8:    f7fffff0    ....    BL       _102226_ProcessRfm ; 0x76cc
;;;118    		}
;;;119    	}
;;;120    
;;;121    	DBG_FUNC_EXIT("<<[31_115] _31115_SmsppImplementation() \n");
;;;122    }
        0x000076ec:    bd80        ..      POP      {r7,pc}
        0x000076ee:    0000        ..      MOVS     r0,r0
    $t
    .text
    __aeabi_assert
    __assert
        0x000076f0:    b50e        ..      PUSH     {r1-r3,lr}
        0x000076f2:    4604        .F      MOV      r4,r0
        0x000076f4:    4615        .F      MOV      r5,r2
        0x000076f6:    460e        .F      MOV      r6,r1
        0x000076f8:    a012        ..      ADR      r0,{pc}+0x4c ; 0x7744
        0x000076fa:    f000f9b6    ....    BL       __assert_puts ; 0x7a6a
        0x000076fe:    4620         F      MOV      r0,r4
        0x00007700:    f000f9b3    ....    BL       __assert_puts ; 0x7a6a
        0x00007704:    a015        ..      ADR      r0,{pc}+0x58 ; 0x775c
        0x00007706:    f000f9b0    ....    BL       __assert_puts ; 0x7a6a
        0x0000770a:    4630        0F      MOV      r0,r6
        0x0000770c:    f000f9ad    ....    BL       __assert_puts ; 0x7a6a
        0x00007710:    a014        ..      ADR      r0,{pc}+0x54 ; 0x7764
        0x00007712:    f000f9aa    ....    BL       __assert_puts ; 0x7a6a
        0x00007716:    466c        lF      MOV      r4,sp
        0x00007718:    2000        .       MOVS     r0,#0
        0x0000771a:    72e0        .r      STRB     r0,[r4,#0xb]
        0x0000771c:    200a        .       MOVS     r0,#0xa
        0x0000771e:    72a0        .r      STRB     r0,[r4,#0xa]
        0x00007720:    340a        .4      ADDS     r4,r4,#0xa
        0x00007722:    e007        ..      B        0x7734 ; __aeabi_assert + 68
        0x00007724:    210a        .!      MOVS     r1,#0xa
        0x00007726:    4628        (F      MOV      r0,r5
        0x00007728:    f000f878    ..x.    BL       __aeabi_idivmod ; 0x781c
        0x0000772c:    3130        01      ADDS     r1,r1,#0x30
        0x0000772e:    4605        .F      MOV      r5,r0
        0x00007730:    1e64        d.      SUBS     r4,r4,#1
        0x00007732:    7021        !p      STRB     r1,[r4,#0]
        0x00007734:    2d00        .-      CMP      r5,#0
        0x00007736:    dcf5        ..      BGT      0x7724 ; __aeabi_assert + 52
        0x00007738:    4620         F      MOV      r0,r4
        0x0000773a:    f000f996    ....    BL       __assert_puts ; 0x7a6a
        0x0000773e:    f000f98a    ....    BL       abort ; 0x7a56
    $d
        0x00007742:    0000        ..      DCW    0
        0x00007744:    202a2a2a    ***     DCD    539634218
        0x00007748:    65737361    asse    DCD    1702064993
        0x0000774c:    6f697472    rtio    DCD    1869182066
        0x00007750:    6166206e    n fa    DCD    1634082926
        0x00007754:    64656c69    iled    DCD    1684368489
        0x00007758:    0000203a    : ..    DCD    8250
        0x0000775c:    6966202c    , fi    DCD    1768300588
        0x00007760:    0020656c    le .    DCD    2123116
        0x00007764:    696c202c    , li    DCD    1768693804
        0x00007768:    0020656e    ne .    DCD    2123118
    $t
    .text
    __aeabi_memcpy
    __rt_memcpy
        0x0000776c:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0000776e:    2a04        .*      CMP      r2,#4
        0x00007770:    d32c        ,.      BCC      0x77cc ; __aeabi_memcpy + 96
        0x00007772:    0783        ..      LSLS     r3,r0,#30
        0x00007774:    d012        ..      BEQ      0x779c ; __aeabi_memcpy + 48
        0x00007776:    780b        .x      LDRB     r3,[r1,#0]
        0x00007778:    1c49        I.      ADDS     r1,r1,#1
        0x0000777a:    7003        .p      STRB     r3,[r0,#0]
        0x0000777c:    1c40        @.      ADDS     r0,r0,#1
        0x0000777e:    1e52        R.      SUBS     r2,r2,#1
        0x00007780:    0783        ..      LSLS     r3,r0,#30
        0x00007782:    d00b        ..      BEQ      0x779c ; __aeabi_memcpy + 48
        0x00007784:    780b        .x      LDRB     r3,[r1,#0]
        0x00007786:    1c49        I.      ADDS     r1,r1,#1
        0x00007788:    7003        .p      STRB     r3,[r0,#0]
        0x0000778a:    1c40        @.      ADDS     r0,r0,#1
        0x0000778c:    1e52        R.      SUBS     r2,r2,#1
        0x0000778e:    0783        ..      LSLS     r3,r0,#30
        0x00007790:    d004        ..      BEQ      0x779c ; __aeabi_memcpy + 48
        0x00007792:    780b        .x      LDRB     r3,[r1,#0]
        0x00007794:    1c49        I.      ADDS     r1,r1,#1
        0x00007796:    7003        .p      STRB     r3,[r0,#0]
        0x00007798:    1c40        @.      ADDS     r0,r0,#1
        0x0000779a:    1e52        R.      SUBS     r2,r2,#1
        0x0000779c:    078b        ..      LSLS     r3,r1,#30
        0x0000779e:    0f9b        ..      LSRS     r3,r3,#30
        0x000077a0:    d005        ..      BEQ      0x77ae ; __aeabi_memcpy + 66
        0x000077a2:    1ac9        ..      SUBS     r1,r1,r3
        0x000077a4:    00df        ..      LSLS     r7,r3,#3
        0x000077a6:    2320         #      MOVS     r3,#0x20
        0x000077a8:    1bde        ..      SUBS     r6,r3,r7
        0x000077aa:    c908        ..      LDM      r1!,{r3}
        0x000077ac:    e00a        ..      B        0x77c4 ; __aeabi_memcpy + 88
        0x000077ae:    f7f8fd27    ..'.    BL       __aeabi_memcpy4 ; 0x200
        0x000077b2:    bdf8        ..      POP      {r3-r7,pc}
        0x000077b4:    461d        .F      MOV      r5,r3
        0x000077b6:    c908        ..      LDM      r1!,{r3}
        0x000077b8:    40fd        .@      LSRS     r5,r5,r7
        0x000077ba:    461c        .F      MOV      r4,r3
        0x000077bc:    40b4        .@      LSLS     r4,r4,r6
        0x000077be:    432c        ,C      ORRS     r4,r4,r5
        0x000077c0:    c010        ..      STM      r0!,{r4}
        0x000077c2:    1f12        ..      SUBS     r2,r2,#4
        0x000077c4:    2a04        .*      CMP      r2,#4
        0x000077c6:    d2f5        ..      BCS      0x77b4 ; __aeabi_memcpy + 72
        0x000077c8:    08f3        ..      LSRS     r3,r6,#3
        0x000077ca:    1ac9        ..      SUBS     r1,r1,r3
        0x000077cc:    1e52        R.      SUBS     r2,r2,#1
        0x000077ce:    d4f0        ..      BMI      0x77b2 ; __aeabi_memcpy + 70
        0x000077d0:    780b        .x      LDRB     r3,[r1,#0]
        0x000077d2:    1c49        I.      ADDS     r1,r1,#1
        0x000077d4:    7003        .p      STRB     r3,[r0,#0]
        0x000077d6:    1c40        @.      ADDS     r0,r0,#1
        0x000077d8:    1e52        R.      SUBS     r2,r2,#1
        0x000077da:    d4ea        ..      BMI      0x77b2 ; __aeabi_memcpy + 70
        0x000077dc:    780b        .x      LDRB     r3,[r1,#0]
        0x000077de:    1c49        I.      ADDS     r1,r1,#1
        0x000077e0:    7003        .p      STRB     r3,[r0,#0]
        0x000077e2:    1c40        @.      ADDS     r0,r0,#1
        0x000077e4:    2a01        .*      CMP      r2,#1
        0x000077e6:    d4e4        ..      BMI      0x77b2 ; __aeabi_memcpy + 70
        0x000077e8:    7809        .x      LDRB     r1,[r1,#0]
        0x000077ea:    7001        .p      STRB     r1,[r0,#0]
        0x000077ec:    bdf8        ..      POP      {r3-r7,pc}
    .text
    __aeabi_memset
        0x000077ee:    b2d2        ..      UXTB     r2,r2
        0x000077f0:    b510        ..      PUSH     {r4,lr}
        0x000077f2:    0213        ..      LSLS     r3,r2,#8
        0x000077f4:    189a        ..      ADDS     r2,r3,r2
        0x000077f6:    0413        ..      LSLS     r3,r2,#16
        0x000077f8:    189a        ..      ADDS     r2,r3,r2
        0x000077fa:    f000f94d    ..M.    BL       _memset ; 0x7a98
        0x000077fe:    bd10        ..      POP      {r4,pc}
    .text
    __aeabi_uidivmod
        0x00007800:    2200        ."      MOVS     r2,#0
        0x00007802:    0903        ..      LSRS     r3,r0,#4
        0x00007804:    428b        .B      CMP      r3,r1
        0x00007806:    d373        s.      BCC      0x78f0 ; __aeabi_idivmod + 212
        0x00007808:    0a03        ..      LSRS     r3,r0,#8
        0x0000780a:    428b        .B      CMP      r3,r1
        0x0000780c:    d358        X.      BCC      0x78c0 ; __aeabi_idivmod + 164
        0x0000780e:    0b03        ..      LSRS     r3,r0,#12
        0x00007810:    428b        .B      CMP      r3,r1
        0x00007812:    d33c        <.      BCC      0x788e ; __aeabi_idivmod + 114
        0x00007814:    0c03        ..      LSRS     r3,r0,#16
        0x00007816:    428b        .B      CMP      r3,r1
        0x00007818:    d321        !.      BCC      0x785e ; __aeabi_idivmod + 66
        0x0000781a:    e012        ..      B        0x7842 ; __aeabi_idivmod + 38
    __aeabi_idivmod
        0x0000781c:    4603        .F      MOV      r3,r0
        0x0000781e:    430b        .C      ORRS     r3,r3,r1
        0x00007820:    d47f        ..      BMI      0x7922 ; __aeabi_idivmod + 262
        0x00007822:    2200        ."      MOVS     r2,#0
        0x00007824:    0843        C.      LSRS     r3,r0,#1
        0x00007826:    428b        .B      CMP      r3,r1
        0x00007828:    d374        t.      BCC      0x7914 ; __aeabi_idivmod + 248
        0x0000782a:    0903        ..      LSRS     r3,r0,#4
        0x0000782c:    428b        .B      CMP      r3,r1
        0x0000782e:    d35f        _.      BCC      0x78f0 ; __aeabi_idivmod + 212
        0x00007830:    0a03        ..      LSRS     r3,r0,#8
        0x00007832:    428b        .B      CMP      r3,r1
        0x00007834:    d344        D.      BCC      0x78c0 ; __aeabi_idivmod + 164
        0x00007836:    0b03        ..      LSRS     r3,r0,#12
        0x00007838:    428b        .B      CMP      r3,r1
        0x0000783a:    d328        (.      BCC      0x788e ; __aeabi_idivmod + 114
        0x0000783c:    0c03        ..      LSRS     r3,r0,#16
        0x0000783e:    428b        .B      CMP      r3,r1
        0x00007840:    d30d        ..      BCC      0x785e ; __aeabi_idivmod + 66
        0x00007842:    0209        ..      LSLS     r1,r1,#8
        0x00007844:    22ff        ."      MOVS     r2,#0xff
        0x00007846:    ba12        ..      REV      r2,r2
        0x00007848:    0c03        ..      LSRS     r3,r0,#16
        0x0000784a:    428b        .B      CMP      r3,r1
        0x0000784c:    d302        ..      BCC      0x7854 ; __aeabi_idivmod + 56
        0x0000784e:    1212        ..      ASRS     r2,r2,#8
        0x00007850:    0209        ..      LSLS     r1,r1,#8
        0x00007852:    d065        e.      BEQ      0x7920 ; __aeabi_idivmod + 260
        0x00007854:    0b03        ..      LSRS     r3,r0,#12
        0x00007856:    428b        .B      CMP      r3,r1
        0x00007858:    d319        ..      BCC      0x788e ; __aeabi_idivmod + 114
        0x0000785a:    e000        ..      B        0x785e ; __aeabi_idivmod + 66
        0x0000785c:    0a09        ..      LSRS     r1,r1,#8
        0x0000785e:    0bc3        ..      LSRS     r3,r0,#15
        0x00007860:    428b        .B      CMP      r3,r1
        0x00007862:    d301        ..      BCC      0x7868 ; __aeabi_idivmod + 76
        0x00007864:    03cb        ..      LSLS     r3,r1,#15
        0x00007866:    1ac0        ..      SUBS     r0,r0,r3
        0x00007868:    4152        RA      ADCS     r2,r2,r2
        0x0000786a:    0b83        ..      LSRS     r3,r0,#14
        0x0000786c:    428b        .B      CMP      r3,r1
        0x0000786e:    d301        ..      BCC      0x7874 ; __aeabi_idivmod + 88
        0x00007870:    038b        ..      LSLS     r3,r1,#14
        0x00007872:    1ac0        ..      SUBS     r0,r0,r3
        0x00007874:    4152        RA      ADCS     r2,r2,r2
        0x00007876:    0b43        C.      LSRS     r3,r0,#13
        0x00007878:    428b        .B      CMP      r3,r1
        0x0000787a:    d301        ..      BCC      0x7880 ; __aeabi_idivmod + 100
        0x0000787c:    034b        K.      LSLS     r3,r1,#13
        0x0000787e:    1ac0        ..      SUBS     r0,r0,r3
        0x00007880:    4152        RA      ADCS     r2,r2,r2
        0x00007882:    0b03        ..      LSRS     r3,r0,#12
        0x00007884:    428b        .B      CMP      r3,r1
        0x00007886:    d301        ..      BCC      0x788c ; __aeabi_idivmod + 112
        0x00007888:    030b        ..      LSLS     r3,r1,#12
        0x0000788a:    1ac0        ..      SUBS     r0,r0,r3
        0x0000788c:    4152        RA      ADCS     r2,r2,r2
        0x0000788e:    0ac3        ..      LSRS     r3,r0,#11
        0x00007890:    428b        .B      CMP      r3,r1
        0x00007892:    d301        ..      BCC      0x7898 ; __aeabi_idivmod + 124
        0x00007894:    02cb        ..      LSLS     r3,r1,#11
        0x00007896:    1ac0        ..      SUBS     r0,r0,r3
        0x00007898:    4152        RA      ADCS     r2,r2,r2
        0x0000789a:    0a83        ..      LSRS     r3,r0,#10
        0x0000789c:    428b        .B      CMP      r3,r1
        0x0000789e:    d301        ..      BCC      0x78a4 ; __aeabi_idivmod + 136
        0x000078a0:    028b        ..      LSLS     r3,r1,#10
        0x000078a2:    1ac0        ..      SUBS     r0,r0,r3
        0x000078a4:    4152        RA      ADCS     r2,r2,r2
        0x000078a6:    0a43        C.      LSRS     r3,r0,#9
        0x000078a8:    428b        .B      CMP      r3,r1
        0x000078aa:    d301        ..      BCC      0x78b0 ; __aeabi_idivmod + 148
        0x000078ac:    024b        K.      LSLS     r3,r1,#9
        0x000078ae:    1ac0        ..      SUBS     r0,r0,r3
        0x000078b0:    4152        RA      ADCS     r2,r2,r2
        0x000078b2:    0a03        ..      LSRS     r3,r0,#8
        0x000078b4:    428b        .B      CMP      r3,r1
        0x000078b6:    d301        ..      BCC      0x78bc ; __aeabi_idivmod + 160
        0x000078b8:    020b        ..      LSLS     r3,r1,#8
        0x000078ba:    1ac0        ..      SUBS     r0,r0,r3
        0x000078bc:    4152        RA      ADCS     r2,r2,r2
        0x000078be:    d2cd        ..      BCS      0x785c ; __aeabi_idivmod + 64
        0x000078c0:    09c3        ..      LSRS     r3,r0,#7
        0x000078c2:    428b        .B      CMP      r3,r1
        0x000078c4:    d301        ..      BCC      0x78ca ; __aeabi_idivmod + 174
        0x000078c6:    01cb        ..      LSLS     r3,r1,#7
        0x000078c8:    1ac0        ..      SUBS     r0,r0,r3
        0x000078ca:    4152        RA      ADCS     r2,r2,r2
        0x000078cc:    0983        ..      LSRS     r3,r0,#6
        0x000078ce:    428b        .B      CMP      r3,r1
        0x000078d0:    d301        ..      BCC      0x78d6 ; __aeabi_idivmod + 186
        0x000078d2:    018b        ..      LSLS     r3,r1,#6
        0x000078d4:    1ac0        ..      SUBS     r0,r0,r3
        0x000078d6:    4152        RA      ADCS     r2,r2,r2
        0x000078d8:    0943        C.      LSRS     r3,r0,#5
        0x000078da:    428b        .B      CMP      r3,r1
        0x000078dc:    d301        ..      BCC      0x78e2 ; __aeabi_idivmod + 198
        0x000078de:    014b        K.      LSLS     r3,r1,#5
        0x000078e0:    1ac0        ..      SUBS     r0,r0,r3
        0x000078e2:    4152        RA      ADCS     r2,r2,r2
        0x000078e4:    0903        ..      LSRS     r3,r0,#4
        0x000078e6:    428b        .B      CMP      r3,r1
        0x000078e8:    d301        ..      BCC      0x78ee ; __aeabi_idivmod + 210
        0x000078ea:    010b        ..      LSLS     r3,r1,#4
        0x000078ec:    1ac0        ..      SUBS     r0,r0,r3
        0x000078ee:    4152        RA      ADCS     r2,r2,r2
        0x000078f0:    08c3        ..      LSRS     r3,r0,#3
        0x000078f2:    428b        .B      CMP      r3,r1
        0x000078f4:    d301        ..      BCC      0x78fa ; __aeabi_idivmod + 222
        0x000078f6:    00cb        ..      LSLS     r3,r1,#3
        0x000078f8:    1ac0        ..      SUBS     r0,r0,r3
        0x000078fa:    4152        RA      ADCS     r2,r2,r2
        0x000078fc:    0883        ..      LSRS     r3,r0,#2
        0x000078fe:    428b        .B      CMP      r3,r1
        0x00007900:    d301        ..      BCC      0x7906 ; __aeabi_idivmod + 234
        0x00007902:    008b        ..      LSLS     r3,r1,#2
        0x00007904:    1ac0        ..      SUBS     r0,r0,r3
        0x00007906:    4152        RA      ADCS     r2,r2,r2
        0x00007908:    0843        C.      LSRS     r3,r0,#1
        0x0000790a:    428b        .B      CMP      r3,r1
        0x0000790c:    d301        ..      BCC      0x7912 ; __aeabi_idivmod + 246
        0x0000790e:    004b        K.      LSLS     r3,r1,#1
        0x00007910:    1ac0        ..      SUBS     r0,r0,r3
        0x00007912:    4152        RA      ADCS     r2,r2,r2
        0x00007914:    1a41        A.      SUBS     r1,r0,r1
        0x00007916:    d200        ..      BCS      0x791a ; __aeabi_idivmod + 254
        0x00007918:    4601        .F      MOV      r1,r0
        0x0000791a:    4152        RA      ADCS     r2,r2,r2
        0x0000791c:    4610        .F      MOV      r0,r2
        0x0000791e:    4770        pG      BX       lr
        0x00007920:    e05d        ].      B        0x79de ; __aeabi_idivmod + 450
        0x00007922:    0fca        ..      LSRS     r2,r1,#31
        0x00007924:    d000        ..      BEQ      0x7928 ; __aeabi_idivmod + 268
        0x00007926:    4249        IB      RSBS     r1,r1,#0
        0x00007928:    1003        ..      ASRS     r3,r0,#32
        0x0000792a:    d300        ..      BCC      0x792e ; __aeabi_idivmod + 274
        0x0000792c:    4240        @B      RSBS     r0,r0,#0
        0x0000792e:    4053        S@      EORS     r3,r3,r2
        0x00007930:    469c        .F      MOV      r12,r3
        0x00007932:    2200        ."      MOVS     r2,#0
        0x00007934:    0903        ..      LSRS     r3,r0,#4
        0x00007936:    428b        .B      CMP      r3,r1
        0x00007938:    d32d        -.      BCC      0x7996 ; __aeabi_idivmod + 378
        0x0000793a:    0a03        ..      LSRS     r3,r0,#8
        0x0000793c:    428b        .B      CMP      r3,r1
        0x0000793e:    d312        ..      BCC      0x7966 ; __aeabi_idivmod + 330
        0x00007940:    0189        ..      LSLS     r1,r1,#6
        0x00007942:    22fc        ."      MOVS     r2,#0xfc
        0x00007944:    ba12        ..      REV      r2,r2
        0x00007946:    0a03        ..      LSRS     r3,r0,#8
        0x00007948:    428b        .B      CMP      r3,r1
        0x0000794a:    d30c        ..      BCC      0x7966 ; __aeabi_idivmod + 330
        0x0000794c:    0189        ..      LSLS     r1,r1,#6
        0x0000794e:    1192        ..      ASRS     r2,r2,#6
        0x00007950:    428b        .B      CMP      r3,r1
        0x00007952:    d308        ..      BCC      0x7966 ; __aeabi_idivmod + 330
        0x00007954:    0189        ..      LSLS     r1,r1,#6
        0x00007956:    1192        ..      ASRS     r2,r2,#6
        0x00007958:    428b        .B      CMP      r3,r1
        0x0000795a:    d304        ..      BCC      0x7966 ; __aeabi_idivmod + 330
        0x0000795c:    0189        ..      LSLS     r1,r1,#6
        0x0000795e:    d03a        :.      BEQ      0x79d6 ; __aeabi_idivmod + 442
        0x00007960:    1192        ..      ASRS     r2,r2,#6
        0x00007962:    e000        ..      B        0x7966 ; __aeabi_idivmod + 330
        0x00007964:    0989        ..      LSRS     r1,r1,#6
        0x00007966:    09c3        ..      LSRS     r3,r0,#7
        0x00007968:    428b        .B      CMP      r3,r1
        0x0000796a:    d301        ..      BCC      0x7970 ; __aeabi_idivmod + 340
        0x0000796c:    01cb        ..      LSLS     r3,r1,#7
        0x0000796e:    1ac0        ..      SUBS     r0,r0,r3
        0x00007970:    4152        RA      ADCS     r2,r2,r2
        0x00007972:    0983        ..      LSRS     r3,r0,#6
        0x00007974:    428b        .B      CMP      r3,r1
        0x00007976:    d301        ..      BCC      0x797c ; __aeabi_idivmod + 352
        0x00007978:    018b        ..      LSLS     r3,r1,#6
        0x0000797a:    1ac0        ..      SUBS     r0,r0,r3
        0x0000797c:    4152        RA      ADCS     r2,r2,r2
        0x0000797e:    0943        C.      LSRS     r3,r0,#5
        0x00007980:    428b        .B      CMP      r3,r1
        0x00007982:    d301        ..      BCC      0x7988 ; __aeabi_idivmod + 364
        0x00007984:    014b        K.      LSLS     r3,r1,#5
        0x00007986:    1ac0        ..      SUBS     r0,r0,r3
        0x00007988:    4152        RA      ADCS     r2,r2,r2
        0x0000798a:    0903        ..      LSRS     r3,r0,#4
        0x0000798c:    428b        .B      CMP      r3,r1
        0x0000798e:    d301        ..      BCC      0x7994 ; __aeabi_idivmod + 376
        0x00007990:    010b        ..      LSLS     r3,r1,#4
        0x00007992:    1ac0        ..      SUBS     r0,r0,r3
        0x00007994:    4152        RA      ADCS     r2,r2,r2
        0x00007996:    08c3        ..      LSRS     r3,r0,#3
        0x00007998:    428b        .B      CMP      r3,r1
        0x0000799a:    d301        ..      BCC      0x79a0 ; __aeabi_idivmod + 388
        0x0000799c:    00cb        ..      LSLS     r3,r1,#3
        0x0000799e:    1ac0        ..      SUBS     r0,r0,r3
        0x000079a0:    4152        RA      ADCS     r2,r2,r2
        0x000079a2:    0883        ..      LSRS     r3,r0,#2
        0x000079a4:    428b        .B      CMP      r3,r1
        0x000079a6:    d301        ..      BCC      0x79ac ; __aeabi_idivmod + 400
        0x000079a8:    008b        ..      LSLS     r3,r1,#2
        0x000079aa:    1ac0        ..      SUBS     r0,r0,r3
        0x000079ac:    4152        RA      ADCS     r2,r2,r2
        0x000079ae:    d2d9        ..      BCS      0x7964 ; __aeabi_idivmod + 328
        0x000079b0:    0843        C.      LSRS     r3,r0,#1
        0x000079b2:    428b        .B      CMP      r3,r1
        0x000079b4:    d301        ..      BCC      0x79ba ; __aeabi_idivmod + 414
        0x000079b6:    004b        K.      LSLS     r3,r1,#1
        0x000079b8:    1ac0        ..      SUBS     r0,r0,r3
        0x000079ba:    4152        RA      ADCS     r2,r2,r2
        0x000079bc:    1a41        A.      SUBS     r1,r0,r1
        0x000079be:    d200        ..      BCS      0x79c2 ; __aeabi_idivmod + 422
        0x000079c0:    4601        .F      MOV      r1,r0
        0x000079c2:    4152        RA      ADCS     r2,r2,r2
        0x000079c4:    4610        .F      MOV      r0,r2
        0x000079c6:    4663        cF      MOV      r3,r12
        0x000079c8:    105b        [.      ASRS     r3,r3,#1
        0x000079ca:    d301        ..      BCC      0x79d0 ; __aeabi_idivmod + 436
        0x000079cc:    4240        @B      RSBS     r0,r0,#0
        0x000079ce:    2b00        .+      CMP      r3,#0
        0x000079d0:    d500        ..      BPL      0x79d4 ; __aeabi_idivmod + 440
        0x000079d2:    4249        IB      RSBS     r1,r1,#0
        0x000079d4:    4770        pG      BX       lr
        0x000079d6:    4663        cF      MOV      r3,r12
        0x000079d8:    105b        [.      ASRS     r3,r3,#1
        0x000079da:    d300        ..      BCC      0x79de ; __aeabi_idivmod + 450
        0x000079dc:    4240        @B      RSBS     r0,r0,#0
        0x000079de:    b501        ..      PUSH     {r0,lr}
        0x000079e0:    4904        .I      LDR      r1,[pc,#16] ; [0x79f4] = 0x7fffffff
        0x000079e2:    2800        .(      CMP      r0,#0
        0x000079e4:    dc02        ..      BGT      0x79ec ; __aeabi_idivmod + 464
        0x000079e6:    1c49        I.      ADDS     r1,r1,#1
        0x000079e8:    4008        .@      ANDS     r0,r0,r1
        0x000079ea:    e000        ..      B        0x79ee ; __aeabi_idivmod + 466
        0x000079ec:    4608        .F      MOV      r0,r1
        0x000079ee:    46c0        .F      MOV      r8,r8
        0x000079f0:    46c0        .F      MOV      r8,r8
        0x000079f2:    bd02        ..      POP      {r1,pc}
    $d
        0x000079f4:    7fffffff    ....    DCD    2147483647
    $t
    .text
    setjmp
        0x000079f8:    4641        AF      MOV      r1,r8
        0x000079fa:    6001        .`      STR      r1,[r0,#0]
        0x000079fc:    4649        IF      MOV      r1,r9
        0x000079fe:    6041        A`      STR      r1,[r0,#4]
        0x00007a00:    4651        QF      MOV      r1,r10
        0x00007a02:    6081        .`      STR      r1,[r0,#8]
        0x00007a04:    4659        YF      MOV      r1,r11
        0x00007a06:    60c1        .`      STR      r1,[r0,#0xc]
        0x00007a08:    4671        qF      MOV      r1,lr
        0x00007a0a:    6101        .a      STR      r1,[r0,#0x10]
        0x00007a0c:    3014        .0      ADDS     r0,r0,#0x14
        0x00007a0e:    c0f0        ..      STM      r0!,{r4-r7}
        0x00007a10:    4669        iF      MOV      r1,sp
        0x00007a12:    6001        .`      STR      r1,[r0,#0]
        0x00007a14:    1d00        ..      ADDS     r0,r0,#4
        0x00007a16:    b501        ..      PUSH     {r0,lr}
        0x00007a18:    46c0        .F      MOV      r8,r8
        0x00007a1a:    46c0        .F      MOV      r8,r8
        0x00007a1c:    bc06        ..      POP      {r1,r2}
        0x00007a1e:    4696        .F      MOV      lr,r2
        0x00007a20:    c101        ..      STM      r1!,{r0}
        0x00007a22:    2000        .       MOVS     r0,#0
        0x00007a24:    4770        pG      BX       lr
    longjmp
        0x00007a26:    0004        ..      MOVS     r4,r0
        0x00007a28:    000d        ..      MOVS     r5,r1
        0x00007a2a:    6aa0        .j      LDR      r0,[r4,#0x28]
        0x00007a2c:    46c0        .F      MOV      r8,r8
        0x00007a2e:    46c0        .F      MOV      r8,r8
        0x00007a30:    6a61        aj      LDR      r1,[r4,#0x24]
        0x00007a32:    468d        .F      MOV      sp,r1
        0x00007a34:    0022        ".      MOVS     r2,r4
        0x00007a36:    0028        (.      MOVS     r0,r5
        0x00007a38:    d100        ..      BNE      0x7a3c ; longjmp + 22
        0x00007a3a:    2001        .       MOVS     r0,#1
        0x00007a3c:    6811        .h      LDR      r1,[r2,#0]
        0x00007a3e:    4688        .F      MOV      r8,r1
        0x00007a40:    6851        Qh      LDR      r1,[r2,#4]
        0x00007a42:    4689        .F      MOV      r9,r1
        0x00007a44:    6891        .h      LDR      r1,[r2,#8]
        0x00007a46:    468a        .F      MOV      r10,r1
        0x00007a48:    68d1        .h      LDR      r1,[r2,#0xc]
        0x00007a4a:    468b        .F      MOV      r11,r1
        0x00007a4c:    6911        .i      LDR      r1,[r2,#0x10]
        0x00007a4e:    468e        .F      MOV      lr,r1
        0x00007a50:    3214        .2      ADDS     r2,r2,#0x14
        0x00007a52:    caf0        ..      LDM      r2!,{r4-r7}
        0x00007a54:    4770        pG      BX       lr
    .text
    abort
        0x00007a56:    b510        ..      PUSH     {r4,lr}
        0x00007a58:    2000        .       MOVS     r0,#0
        0x00007a5a:    f000f83d    ..=.    BL       __rt_SIGABRT ; 0x7ad8
        0x00007a5e:    46c0        .F      MOV      r8,r8
        0x00007a60:    46c0        .F      MOV      r8,r8
        0x00007a62:    2001        .       MOVS     r0,#1
        0x00007a64:    f000f832    ..2.    BL       _sys_exit ; 0x7acc
        0x00007a68:    bd10        ..      POP      {r4,pc}
    .text
    __assert_puts
        0x00007a6a:    b510        ..      PUSH     {r4,lr}
        0x00007a6c:    4604        .F      MOV      r4,r0
        0x00007a6e:    e002        ..      B        0x7a76 ; __assert_puts + 12
        0x00007a70:    1c64        d.      ADDS     r4,r4,#1
        0x00007a72:    f000f824    ..$.    BL       _ttywrch ; 0x7abe
        0x00007a76:    7820         x      LDRB     r0,[r4,#0]
        0x00007a78:    2800        .(      CMP      r0,#0
        0x00007a7a:    d1f9        ..      BNE      0x7a70 ; __assert_puts + 6
        0x00007a7c:    bd10        ..      POP      {r4,pc}
    .text
    _memset_w
        0x00007a7e:    e001        ..      B        0x7a84 ; _memset_w + 6
        0x00007a80:    c004        ..      STM      r0!,{r2}
        0x00007a82:    1f09        ..      SUBS     r1,r1,#4
        0x00007a84:    2904        .)      CMP      r1,#4
        0x00007a86:    d2fb        ..      BCS      0x7a80 ; _memset_w + 2
        0x00007a88:    078b        ..      LSLS     r3,r1,#30
        0x00007a8a:    d501        ..      BPL      0x7a90 ; _memset_w + 18
        0x00007a8c:    8002        ..      STRH     r2,[r0,#0]
        0x00007a8e:    1c80        ..      ADDS     r0,r0,#2
        0x00007a90:    07c9        ..      LSLS     r1,r1,#31
        0x00007a92:    d000        ..      BEQ      0x7a96 ; _memset_w + 24
        0x00007a94:    7002        .p      STRB     r2,[r0,#0]
        0x00007a96:    4770        pG      BX       lr
    _memset
        0x00007a98:    2900        .)      CMP      r1,#0
        0x00007a9a:    d00b        ..      BEQ      0x7ab4 ; _memset + 28
        0x00007a9c:    07c3        ..      LSLS     r3,r0,#31
        0x00007a9e:    d002        ..      BEQ      0x7aa6 ; _memset + 14
        0x00007aa0:    7002        .p      STRB     r2,[r0,#0]
        0x00007aa2:    1c40        @.      ADDS     r0,r0,#1
        0x00007aa4:    1e49        I.      SUBS     r1,r1,#1
        0x00007aa6:    2902        .)      CMP      r1,#2
        0x00007aa8:    d304        ..      BCC      0x7ab4 ; _memset + 28
        0x00007aaa:    0783        ..      LSLS     r3,r0,#30
        0x00007aac:    d502        ..      BPL      0x7ab4 ; _memset + 28
        0x00007aae:    8002        ..      STRH     r2,[r0,#0]
        0x00007ab0:    1c80        ..      ADDS     r0,r0,#2
        0x00007ab2:    1e89        ..      SUBS     r1,r1,#2
        0x00007ab4:    e7e3        ..      B        _memset_w ; 0x7a7e
    __aeabi_memclr
    __rt_memclr
        0x00007ab6:    2200        ."      MOVS     r2,#0
        0x00007ab8:    e7ee        ..      B        _memset ; 0x7a98
    __aeabi_memclr4
    __aeabi_memclr8
    __rt_memclr_w
        0x00007aba:    2200        ."      MOVS     r2,#0
        0x00007abc:    e7df        ..      B        _memset_w ; 0x7a7e
    .text
    _ttywrch
        0x00007abe:    b508        ..      PUSH     {r3,lr}
        0x00007ac0:    4669        iF      MOV      r1,sp
        0x00007ac2:    7008        .p      STRB     r0,[r1,#0]
        0x00007ac4:    2003        .       MOVS     r0,#3
        0x00007ac6:    beab        ..      BKPT     #0xab
        0x00007ac8:    bd08        ..      POP      {r3,pc}
        0x00007aca:    0000        ..      MOVS     r0,r0
    .text
    _sys_exit
        0x00007acc:    4901        .I      LDR      r1,[pc,#4] ; [0x7ad4] = 0x20026
        0x00007ace:    2018        .       MOVS     r0,#0x18
        0x00007ad0:    beab        ..      BKPT     #0xab
        0x00007ad2:    e7fe        ..      B        0x7ad2 ; _sys_exit + 6
    $d
        0x00007ad4:    00020026    &...    DCD    131110
    $t
    .text
    __rt_SIGABRT
        0x00007ad8:    b510        ..      PUSH     {r4,lr}
        0x00007ada:    f000f80b    ....    BL       __rt_SIGABRT_inner ; 0x7af4
        0x00007ade:    f000f802    ....    BL       __semihosting_library_function ; 0x7ae6
        0x00007ae2:    bd10        ..      POP      {r4,pc}
    .text
    __I$use$semihosting
    __use_no_semihosting_swi
        0x00007ae4:    4770        pG      BX       lr
    .text
    .text
    __semihosting_library_function
    __sig_exit
        0x00007ae6:    b510        ..      PUSH     {r4,lr}
        0x00007ae8:    2800        .(      CMP      r0,#0
        0x00007aea:    d001        ..      BEQ      0x7af0 ; __semihosting_library_function + 10
        0x00007aec:    f7ffffee    ....    BL       _sys_exit ; 0x7acc
        0x00007af0:    bd10        ..      POP      {r4,pc}
        0x00007af2:    0000        ..      MOVS     r0,r0
    .text
    __rt_SIGABRT_inner
        0x00007af4:    b510        ..      PUSH     {r4,lr}
        0x00007af6:    2100        .!      MOVS     r1,#0
        0x00007af8:    a002        ..      ADR      r0,{pc}+0xc ; 0x7b04
        0x00007afa:    f000f813    ....    BL       __default_signal_display ; 0x7b24
        0x00007afe:    2001        .       MOVS     r0,#1
        0x00007b00:    bd10        ..      POP      {r4,pc}
    $d
        0x00007b02:    0000        ..      DCW    0
        0x00007b04:    41474953    SIGA    DCD    1095190867
        0x00007b08:    3a545242    BRT:    DCD    978604610
        0x00007b0c:    6e624120     Abn    DCD    1851932960
        0x00007b10:    616d726f    orma    DCD    1634562671
        0x00007b14:    6574206c    l te    DCD    1702109292
        0x00007b18:    6e696d72    rmin    DCD    1852403058
        0x00007b1c:    6f697461    atio    DCD    1869182049
        0x00007b20:    0000006e    n...    DCD    110
    $t
    .text
    __default_signal_display
        0x00007b24:    b570        p.      PUSH     {r4-r6,lr}
        0x00007b26:    4605        .F      MOV      r5,r0
        0x00007b28:    460c        .F      MOV      r4,r1
        0x00007b2a:    200a        .       MOVS     r0,#0xa
        0x00007b2c:    e000        ..      B        0x7b30 ; __default_signal_display + 12
        0x00007b2e:    1c6d        m.      ADDS     r5,r5,#1
        0x00007b30:    f7ffffc5    ....    BL       _ttywrch ; 0x7abe
        0x00007b34:    2d00        .-      CMP      r5,#0
        0x00007b36:    d006        ..      BEQ      0x7b46 ; __default_signal_display + 34
        0x00007b38:    7828        (x      LDRB     r0,[r5,#0]
        0x00007b3a:    2800        .(      CMP      r0,#0
        0x00007b3c:    d1f7        ..      BNE      0x7b2e ; __default_signal_display + 10
        0x00007b3e:    e002        ..      B        0x7b46 ; __default_signal_display + 34
        0x00007b40:    1c64        d.      ADDS     r4,r4,#1
        0x00007b42:    f7ffffbc    ....    BL       _ttywrch ; 0x7abe
        0x00007b46:    2c00        .,      CMP      r4,#0
        0x00007b48:    d002        ..      BEQ      0x7b50 ; __default_signal_display + 44
        0x00007b4a:    7820         x      LDRB     r0,[r4,#0]
        0x00007b4c:    2800        .(      CMP      r0,#0
        0x00007b4e:    d1f7        ..      BNE      0x7b40 ; __default_signal_display + 28
        0x00007b50:    200a        .       MOVS     r0,#0xa
        0x00007b52:    f7ffffb4    ....    BL       _ttywrch ; 0x7abe
        0x00007b56:    bd70        p.      POP      {r4-r6,pc}
    .text_divfast
    __aeabi_uidiv
        0x00007b58:    0843        C.      LSRS     r3,r0,#1
        0x00007b5a:    428b        .B      CMP      r3,r1
        0x00007b5c:    d31a        ..      BCC      0x7b94 ; __aeabi_uidiv + 60
        0x00007b5e:    2200        ."      MOVS     r2,#0
        0x00007b60:    0903        ..      LSRS     r3,r0,#4
        0x00007b62:    428b        .B      CMP      r3,r1
        0x00007b64:    d379        y.      BCC      0x7c5a ; __aeabi_idiv + 190
        0x00007b66:    0a03        ..      LSRS     r3,r0,#8
        0x00007b68:    428b        .B      CMP      r3,r1
        0x00007b6a:    d35e        ^.      BCC      0x7c2a ; __aeabi_idiv + 142
        0x00007b6c:    0b03        ..      LSRS     r3,r0,#12
        0x00007b6e:    428b        .B      CMP      r3,r1
        0x00007b70:    d342        B.      BCC      0x7bf8 ; __aeabi_idiv + 92
        0x00007b72:    0c03        ..      LSRS     r3,r0,#16
        0x00007b74:    428b        .B      CMP      r3,r1
        0x00007b76:    d327        '.      BCC      0x7bc8 ; __aeabi_idiv + 44
        0x00007b78:    0209        ..      LSLS     r1,r1,#8
        0x00007b7a:    22ff        ."      MOVS     r2,#0xff
        0x00007b7c:    ba12        ..      REV      r2,r2
        0x00007b7e:    0c03        ..      LSRS     r3,r0,#16
        0x00007b80:    428b        .B      CMP      r3,r1
        0x00007b82:    d302        ..      BCC      0x7b8a ; __aeabi_uidiv + 50
        0x00007b84:    1212        ..      ASRS     r2,r2,#8
        0x00007b86:    0209        ..      LSLS     r1,r1,#8
        0x00007b88:    d003        ..      BEQ      0x7b92 ; __aeabi_uidiv + 58
        0x00007b8a:    0b03        ..      LSRS     r3,r0,#12
        0x00007b8c:    428b        .B      CMP      r3,r1
        0x00007b8e:    d333        3.      BCC      0x7bf8 ; __aeabi_idiv + 92
        0x00007b90:    e01a        ..      B        0x7bc8 ; __aeabi_idiv + 44
        0x00007b92:    e0d3        ..      B        0x7d3c ; __aeabi_idiv + 416
        0x00007b94:    1a41        A.      SUBS     r1,r0,r1
        0x00007b96:    4180        .A      SBCS     r0,r0,r0
        0x00007b98:    1c40        @.      ADDS     r0,r0,#1
        0x00007b9a:    4770        pG      BX       lr
    __aeabi_idiv
        0x00007b9c:    4603        .F      MOV      r3,r0
        0x00007b9e:    430b        .C      ORRS     r3,r3,r1
        0x00007ba0:    d471        q.      BMI      0x7c86 ; __aeabi_idiv + 234
        0x00007ba2:    0843        C.      LSRS     r3,r0,#1
        0x00007ba4:    428b        .B      CMP      r3,r1
        0x00007ba6:    d3f5        ..      BCC      0x7b94 ; __aeabi_uidiv + 60
        0x00007ba8:    2200        ."      MOVS     r2,#0
        0x00007baa:    0903        ..      LSRS     r3,r0,#4
        0x00007bac:    428b        .B      CMP      r3,r1
        0x00007bae:    d354        T.      BCC      0x7c5a ; __aeabi_idiv + 190
        0x00007bb0:    0a03        ..      LSRS     r3,r0,#8
        0x00007bb2:    428b        .B      CMP      r3,r1
        0x00007bb4:    d339        9.      BCC      0x7c2a ; __aeabi_idiv + 142
        0x00007bb6:    0b03        ..      LSRS     r3,r0,#12
        0x00007bb8:    428b        .B      CMP      r3,r1
        0x00007bba:    d31d        ..      BCC      0x7bf8 ; __aeabi_idiv + 92
        0x00007bbc:    0c03        ..      LSRS     r3,r0,#16
        0x00007bbe:    428b        .B      CMP      r3,r1
        0x00007bc0:    d302        ..      BCC      0x7bc8 ; __aeabi_idiv + 44
        0x00007bc2:    4694        .F      MOV      r12,r2
        0x00007bc4:    e06e        n.      B        0x7ca4 ; __aeabi_idiv + 264
        0x00007bc6:    0a09        ..      LSRS     r1,r1,#8
        0x00007bc8:    0bc3        ..      LSRS     r3,r0,#15
        0x00007bca:    428b        .B      CMP      r3,r1
        0x00007bcc:    d301        ..      BCC      0x7bd2 ; __aeabi_idiv + 54
        0x00007bce:    03cb        ..      LSLS     r3,r1,#15
        0x00007bd0:    1ac0        ..      SUBS     r0,r0,r3
        0x00007bd2:    4152        RA      ADCS     r2,r2,r2
        0x00007bd4:    0b83        ..      LSRS     r3,r0,#14
        0x00007bd6:    428b        .B      CMP      r3,r1
        0x00007bd8:    d301        ..      BCC      0x7bde ; __aeabi_idiv + 66
        0x00007bda:    038b        ..      LSLS     r3,r1,#14
        0x00007bdc:    1ac0        ..      SUBS     r0,r0,r3
        0x00007bde:    4152        RA      ADCS     r2,r2,r2
        0x00007be0:    0b43        C.      LSRS     r3,r0,#13
        0x00007be2:    428b        .B      CMP      r3,r1
        0x00007be4:    d301        ..      BCC      0x7bea ; __aeabi_idiv + 78
        0x00007be6:    034b        K.      LSLS     r3,r1,#13
        0x00007be8:    1ac0        ..      SUBS     r0,r0,r3
        0x00007bea:    4152        RA      ADCS     r2,r2,r2
        0x00007bec:    0b03        ..      LSRS     r3,r0,#12
        0x00007bee:    428b        .B      CMP      r3,r1
        0x00007bf0:    d301        ..      BCC      0x7bf6 ; __aeabi_idiv + 90
        0x00007bf2:    030b        ..      LSLS     r3,r1,#12
        0x00007bf4:    1ac0        ..      SUBS     r0,r0,r3
        0x00007bf6:    4152        RA      ADCS     r2,r2,r2
        0x00007bf8:    0ac3        ..      LSRS     r3,r0,#11
        0x00007bfa:    428b        .B      CMP      r3,r1
        0x00007bfc:    d301        ..      BCC      0x7c02 ; __aeabi_idiv + 102
        0x00007bfe:    02cb        ..      LSLS     r3,r1,#11
        0x00007c00:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c02:    4152        RA      ADCS     r2,r2,r2
        0x00007c04:    0a83        ..      LSRS     r3,r0,#10
        0x00007c06:    428b        .B      CMP      r3,r1
        0x00007c08:    d301        ..      BCC      0x7c0e ; __aeabi_idiv + 114
        0x00007c0a:    028b        ..      LSLS     r3,r1,#10
        0x00007c0c:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c0e:    4152        RA      ADCS     r2,r2,r2
        0x00007c10:    0a43        C.      LSRS     r3,r0,#9
        0x00007c12:    428b        .B      CMP      r3,r1
        0x00007c14:    d301        ..      BCC      0x7c1a ; __aeabi_idiv + 126
        0x00007c16:    024b        K.      LSLS     r3,r1,#9
        0x00007c18:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c1a:    4152        RA      ADCS     r2,r2,r2
        0x00007c1c:    0a03        ..      LSRS     r3,r0,#8
        0x00007c1e:    428b        .B      CMP      r3,r1
        0x00007c20:    d301        ..      BCC      0x7c26 ; __aeabi_idiv + 138
        0x00007c22:    020b        ..      LSLS     r3,r1,#8
        0x00007c24:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c26:    4152        RA      ADCS     r2,r2,r2
        0x00007c28:    d2cd        ..      BCS      0x7bc6 ; __aeabi_idiv + 42
        0x00007c2a:    09c3        ..      LSRS     r3,r0,#7
        0x00007c2c:    428b        .B      CMP      r3,r1
        0x00007c2e:    d301        ..      BCC      0x7c34 ; __aeabi_idiv + 152
        0x00007c30:    01cb        ..      LSLS     r3,r1,#7
        0x00007c32:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c34:    4152        RA      ADCS     r2,r2,r2
        0x00007c36:    0983        ..      LSRS     r3,r0,#6
        0x00007c38:    428b        .B      CMP      r3,r1
        0x00007c3a:    d301        ..      BCC      0x7c40 ; __aeabi_idiv + 164
        0x00007c3c:    018b        ..      LSLS     r3,r1,#6
        0x00007c3e:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c40:    4152        RA      ADCS     r2,r2,r2
        0x00007c42:    0943        C.      LSRS     r3,r0,#5
        0x00007c44:    428b        .B      CMP      r3,r1
        0x00007c46:    d301        ..      BCC      0x7c4c ; __aeabi_idiv + 176
        0x00007c48:    014b        K.      LSLS     r3,r1,#5
        0x00007c4a:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c4c:    4152        RA      ADCS     r2,r2,r2
        0x00007c4e:    0903        ..      LSRS     r3,r0,#4
        0x00007c50:    428b        .B      CMP      r3,r1
        0x00007c52:    d301        ..      BCC      0x7c58 ; __aeabi_idiv + 188
        0x00007c54:    010b        ..      LSLS     r3,r1,#4
        0x00007c56:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c58:    4152        RA      ADCS     r2,r2,r2
        0x00007c5a:    08c3        ..      LSRS     r3,r0,#3
        0x00007c5c:    428b        .B      CMP      r3,r1
        0x00007c5e:    d301        ..      BCC      0x7c64 ; __aeabi_idiv + 200
        0x00007c60:    00cb        ..      LSLS     r3,r1,#3
        0x00007c62:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c64:    4152        RA      ADCS     r2,r2,r2
        0x00007c66:    0883        ..      LSRS     r3,r0,#2
        0x00007c68:    428b        .B      CMP      r3,r1
        0x00007c6a:    d301        ..      BCC      0x7c70 ; __aeabi_idiv + 212
        0x00007c6c:    008b        ..      LSLS     r3,r1,#2
        0x00007c6e:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c70:    4152        RA      ADCS     r2,r2,r2
        0x00007c72:    0843        C.      LSRS     r3,r0,#1
        0x00007c74:    428b        .B      CMP      r3,r1
        0x00007c76:    d301        ..      BCC      0x7c7c ; __aeabi_idiv + 224
        0x00007c78:    004b        K.      LSLS     r3,r1,#1
        0x00007c7a:    1ac0        ..      SUBS     r0,r0,r3
        0x00007c7c:    4152        RA      ADCS     r2,r2,r2
        0x00007c7e:    1a41        A.      SUBS     r1,r0,r1
        0x00007c80:    4152        RA      ADCS     r2,r2,r2
        0x00007c82:    0010        ..      MOVS     r0,r2
        0x00007c84:    4770        pG      BX       lr
        0x00007c86:    0fca        ..      LSRS     r2,r1,#31
        0x00007c88:    d000        ..      BEQ      0x7c8c ; __aeabi_idiv + 240
        0x00007c8a:    4249        IB      RSBS     r1,r1,#0
        0x00007c8c:    1003        ..      ASRS     r3,r0,#32
        0x00007c8e:    d300        ..      BCC      0x7c92 ; __aeabi_idiv + 246
        0x00007c90:    4240        @B      RSBS     r0,r0,#0
        0x00007c92:    4053        S@      EORS     r3,r3,r2
        0x00007c94:    2200        ."      MOVS     r2,#0
        0x00007c96:    469c        .F      MOV      r12,r3
        0x00007c98:    0903        ..      LSRS     r3,r0,#4
        0x00007c9a:    428b        .B      CMP      r3,r1
        0x00007c9c:    d32d        -.      BCC      0x7cfa ; __aeabi_idiv + 350
        0x00007c9e:    0a03        ..      LSRS     r3,r0,#8
        0x00007ca0:    428b        .B      CMP      r3,r1
        0x00007ca2:    d312        ..      BCC      0x7cca ; __aeabi_idiv + 302
        0x00007ca4:    0189        ..      LSLS     r1,r1,#6
        0x00007ca6:    22fc        ."      MOVS     r2,#0xfc
        0x00007ca8:    ba12        ..      REV      r2,r2
        0x00007caa:    0a03        ..      LSRS     r3,r0,#8
        0x00007cac:    428b        .B      CMP      r3,r1
        0x00007cae:    d30c        ..      BCC      0x7cca ; __aeabi_idiv + 302
        0x00007cb0:    0189        ..      LSLS     r1,r1,#6
        0x00007cb2:    1192        ..      ASRS     r2,r2,#6
        0x00007cb4:    428b        .B      CMP      r3,r1
        0x00007cb6:    d308        ..      BCC      0x7cca ; __aeabi_idiv + 302
        0x00007cb8:    0189        ..      LSLS     r1,r1,#6
        0x00007cba:    1192        ..      ASRS     r2,r2,#6
        0x00007cbc:    428b        .B      CMP      r3,r1
        0x00007cbe:    d304        ..      BCC      0x7cca ; __aeabi_idiv + 302
        0x00007cc0:    0189        ..      LSLS     r1,r1,#6
        0x00007cc2:    d037        7.      BEQ      0x7d34 ; __aeabi_idiv + 408
        0x00007cc4:    1192        ..      ASRS     r2,r2,#6
        0x00007cc6:    e000        ..      B        0x7cca ; __aeabi_idiv + 302
        0x00007cc8:    0989        ..      LSRS     r1,r1,#6
        0x00007cca:    09c3        ..      LSRS     r3,r0,#7
        0x00007ccc:    428b        .B      CMP      r3,r1
        0x00007cce:    d301        ..      BCC      0x7cd4 ; __aeabi_idiv + 312
        0x00007cd0:    01cb        ..      LSLS     r3,r1,#7
        0x00007cd2:    1ac0        ..      SUBS     r0,r0,r3
        0x00007cd4:    4152        RA      ADCS     r2,r2,r2
        0x00007cd6:    0983        ..      LSRS     r3,r0,#6
        0x00007cd8:    428b        .B      CMP      r3,r1
        0x00007cda:    d301        ..      BCC      0x7ce0 ; __aeabi_idiv + 324
        0x00007cdc:    018b        ..      LSLS     r3,r1,#6
        0x00007cde:    1ac0        ..      SUBS     r0,r0,r3
        0x00007ce0:    4152        RA      ADCS     r2,r2,r2
        0x00007ce2:    0943        C.      LSRS     r3,r0,#5
        0x00007ce4:    428b        .B      CMP      r3,r1
        0x00007ce6:    d301        ..      BCC      0x7cec ; __aeabi_idiv + 336
        0x00007ce8:    014b        K.      LSLS     r3,r1,#5
        0x00007cea:    1ac0        ..      SUBS     r0,r0,r3
        0x00007cec:    4152        RA      ADCS     r2,r2,r2
        0x00007cee:    0903        ..      LSRS     r3,r0,#4
        0x00007cf0:    428b        .B      CMP      r3,r1
        0x00007cf2:    d301        ..      BCC      0x7cf8 ; __aeabi_idiv + 348
        0x00007cf4:    010b        ..      LSLS     r3,r1,#4
        0x00007cf6:    1ac0        ..      SUBS     r0,r0,r3
        0x00007cf8:    4152        RA      ADCS     r2,r2,r2
        0x00007cfa:    08c3        ..      LSRS     r3,r0,#3
        0x00007cfc:    428b        .B      CMP      r3,r1
        0x00007cfe:    d301        ..      BCC      0x7d04 ; __aeabi_idiv + 360
        0x00007d00:    00cb        ..      LSLS     r3,r1,#3
        0x00007d02:    1ac0        ..      SUBS     r0,r0,r3
        0x00007d04:    4152        RA      ADCS     r2,r2,r2
        0x00007d06:    0883        ..      LSRS     r3,r0,#2
        0x00007d08:    428b        .B      CMP      r3,r1
        0x00007d0a:    d301        ..      BCC      0x7d10 ; __aeabi_idiv + 372
        0x00007d0c:    008b        ..      LSLS     r3,r1,#2
        0x00007d0e:    1ac0        ..      SUBS     r0,r0,r3
        0x00007d10:    4152        RA      ADCS     r2,r2,r2
        0x00007d12:    d2d9        ..      BCS      0x7cc8 ; __aeabi_idiv + 300
        0x00007d14:    0843        C.      LSRS     r3,r0,#1
        0x00007d16:    428b        .B      CMP      r3,r1
        0x00007d18:    d301        ..      BCC      0x7d1e ; __aeabi_idiv + 386
        0x00007d1a:    004b        K.      LSLS     r3,r1,#1
        0x00007d1c:    1ac0        ..      SUBS     r0,r0,r3
        0x00007d1e:    4152        RA      ADCS     r2,r2,r2
        0x00007d20:    1a41        A.      SUBS     r1,r0,r1
        0x00007d22:    d200        ..      BCS      0x7d26 ; __aeabi_idiv + 394
        0x00007d24:    4601        .F      MOV      r1,r0
        0x00007d26:    4152        RA      ADCS     r2,r2,r2
        0x00007d28:    4610        .F      MOV      r0,r2
        0x00007d2a:    4663        cF      MOV      r3,r12
        0x00007d2c:    105b        [.      ASRS     r3,r3,#1
        0x00007d2e:    d300        ..      BCC      0x7d32 ; __aeabi_idiv + 406
        0x00007d30:    4240        @B      RSBS     r0,r0,#0
        0x00007d32:    4770        pG      BX       lr
        0x00007d34:    4663        cF      MOV      r3,r12
        0x00007d36:    105b        [.      ASRS     r3,r3,#1
        0x00007d38:    d300        ..      BCC      0x7d3c ; __aeabi_idiv + 416
        0x00007d3a:    4240        @B      RSBS     r0,r0,#0
        0x00007d3c:    b501        ..      PUSH     {r0,lr}
        0x00007d3e:    2100        .!      MOVS     r1,#0
        0x00007d40:    4200        .B      TST      r0,r0
        0x00007d42:    d001        ..      BEQ      0x7d48 ; __aeabi_idiv + 428
        0x00007d44:    43c9        .C      MVNS     r1,r1
        0x00007d46:    4608        .F      MOV      r0,r1
        0x00007d48:    46c0        .F      MOV      r8,r8
        0x00007d4a:    46c0        .F      MOV      r8,r8
        0x00007d4c:    bd02        ..      POP      {r1,pc}
        0x00007d4e:    0000        ..      MOVS     r0,r0
    Init
    Reset_Handler
;;; HardwareLayers/HAL_THC80F340A/Startup/SC000_SYS/SC000_Init.s
;;;22     	PUSH	{r0 - r4}						; For Cortex-M0
        0x00007d50:    b41f        ..      PUSH     {r0-r4}
;;;23     	LDR		r0, = ||Load$$RAM$$Base||;||ZISection$$Table$$Limit||
        0x00007d52:    4819        .H      LDR      r0,[pc,#100] ; [0x7db8] = 0x8c18
;;;24     	LDR		r1, = RAM_Start					; RAM start
        0x00007d54:    4919        .I      LDR      r1,[pc,#100] ; [0x7dbc] = 0x20000000
;;;25     	LDR		r3, = ||Image$$RAM$$ZI$$Base||
        0x00007d56:    4b1a        .K      LDR      r3,[pc,#104] ; [0x7dc0] = 0x20000008
;;;26     	LDR		r4,	= 0
        0x00007d58:    4c1a        .L      LDR      r4,[pc,#104] ; [0x7dc4] = 0
;;;27     
;;;28     	LDR   r3, = ||Image$$RAM$$ZI$$Base||
        0x00007d5a:    4b19        .K      LDR      r3,[pc,#100] ; [0x7dc0] = 0x20000008
;;;29     	
;;;30     	CMP		r1, r3							; There is no RW
        0x00007d5c:    4299        .B      CMP      r1,r3
;;;31         BEQ		%F1
        0x00007d5e:    d010        ..      BEQ      0x7d82 ; Reset_Handler + 50
;;;32         
;;;33     0   CMP		r1, r3
        0x00007d60:    4299        .B      CMP      r1,r3
;;;34     	BEQ		%F1
        0x00007d62:    d00e        ..      BEQ      0x7d82 ; Reset_Handler + 50
;;;35     	MRS		r2,	APSR						; For Cortex-M0,to save APSR in the stack
        0x00007d64:    f3ef8200    ....    MRS      r2,APSR ; formerly CPSR
;;;36     	PUSH	{r2}
        0x00007d68:    b404        ..      PUSH     {r2}
;;;37     
;;;38     	LDR		r2,	[r0,	r4]
        0x00007d6a:    5902        .Y      LDR      r2,[r0,r4]
;;;39     	STR		r2,	[r1,	r4]
        0x00007d6c:    510a        .Q      STR      r2,[r1,r4]
;;;40     	ADDS	r0,	r0,	#4						; Source added with 4
        0x00007d6e:    1d00        ..      ADDS     r0,r0,#4
;;;41     	ADDS	r1,	r1,	#4						; Destination added with 4
        0x00007d70:    1d09        ..      ADDS     r1,r1,#4
;;;42     
;;;43     	POP		{r2}
        0x00007d72:    bc04        ..      POP      {r2}
;;;44     	MSR		APSR,	r2
        0x00007d74:    f3828800    ....    MSR      APSR_nzcvq,r2 ; formerly CPSR_f
;;;45     	BNE		%B0
        0x00007d78:    d1f2        ..      BNE      0x7d60 ; Reset_Handler + 16
;;;46     
;;;47     	LDR		r1,	= 0x01000200
        0x00007d7a:    4913        .I      LDR      r1,[pc,#76] ; [0x7dc8] = 0x1000200
;;;48     	ANDS	r2,	r2,	r1						; Bit 24 and 9 of APSR reserved,other bits cleared
        0x00007d7c:    400a        .@      ANDS     r2,r2,r1
;;;49     	MSR		APSR,	r2
        0x00007d7e:    f3828800    ....    MSR      APSR_nzcvq,r2 ; formerly CPSR_f
;;;50         
;;;51     1  	LDR		r1, = ||Image$$RAM$$ZI$$Limit||
        0x00007d82:    4912        .I      LDR      r1,[pc,#72] ; [0x7dcc] = 0x20000c20
;;;52     	LDR		r2, = Stack_Size
        0x00007d84:    4a12        .J      LDR      r2,[pc,#72] ; [0x7dd0] = 0x200
;;;53     	SUBS	r1,	r1, r2
        0x00007d86:    1a89        ..      SUBS     r1,r1,r2
;;;54     	LDR		r2, = Heap_Size
        0x00007d88:    4a0e        .J      LDR      r2,[pc,#56] ; [0x7dc4] = 0
;;;55     	SUBS	r1,	r1, r2
        0x00007d8a:    1a89        ..      SUBS     r1,r1,r2
;;;56     	LDR		r2,	= 0
        0x00007d8c:    4a0d        .J      LDR      r2,[pc,#52] ; [0x7dc4] = 0
;;;57     	LDR		r4,	= 0
        0x00007d8e:    4c0d        .L      LDR      r4,[pc,#52] ; [0x7dc4] = 0
;;;58         
;;;59     2   CMP		r3, r1
        0x00007d90:    428b        .B      CMP      r3,r1
;;;60     	BEQ		JumpToMain
        0x00007d92:    d009        ..      BEQ      0x7da8 ; Reset_Handler + 88
;;;61     	MRS		r0,	APSR						; For Cortex-M0,to save APSR in the stack
        0x00007d94:    f3ef8000    ....    MRS      r0,APSR ; formerly CPSR
;;;62     	PUSH	{r0}
        0x00007d98:    b401        ..      PUSH     {r0}
;;;63     	STR		r2,	[r3,	r4]
        0x00007d9a:    511a        .Q      STR      r2,[r3,r4]
;;;64     	ADDS	r3,	r3,	#4						; Destination added with 4
        0x00007d9c:    1d1b        ..      ADDS     r3,r3,#4
;;;65     	POP		{r0}
        0x00007d9e:    bc01        ..      POP      {r0}
;;;66     	MSR		APSR,	r0
        0x00007da0:    f3808800    ....    MSR      APSR_nzcvq,r0 ; formerly CPSR_f
;;;67     	BNE		%B2
        0x00007da4:    d1f4        ..      BNE      0x7d90 ; Reset_Handler + 64
;;;68     	
;;;69     	POP		{r0 - r4}						; For Cortex-M0	
        0x00007da6:    bc1f        ..      POP      {r0-r4}
;;;70     
;;;71     ;	Branch to real main function BLmain() instead of __main provided by lib
;;;72     	IMPORT	Testmain
;;;73     
;;;74     ; --- Now enter the C code
;;;75     JumpToMain
;;;76     
;;;77     ;	Enable interrupt of sc000
;;;78     	LDR		R0,	= 0xE000E100				; Interrupt Set-Enable register,ISER
        0x00007da8:    480a        .H      LDR      r0,[pc,#40] ; [0x7dd4] = 0xe000e100
;;;79     	LDR		R1,	= 0xFFFFFFFF
        0x00007daa:    490b        .I      LDR      r1,[pc,#44] ; [0x7dd8] = 0xffffffff
;;;80     	STR		R1,	[R0,	#0]					; All interrupt enabled
        0x00007dac:    6001        .`      STR      r1,[r0,#0]
;;;81     
;;;82     	LDR		R0, =0x00000000
        0x00007dae:    4805        .H      LDR      r0,[pc,#20] ; [0x7dc4] = 0
;;;83     	MSR		PRIMASK,  R0
        0x00007db0:    f3808810    ....    MSR      PRIMASK,r0
;;;84     
;;;85     ;	B	Testmain							; note use B not BL, because an application will never return this way
;;;86     	LDR     R0, =Testmain
        0x00007db4:    4809        .H      LDR      r0,[pc,#36] ; [0x7ddc] = 0xc2d
;;;87     	BX      R0
        0x00007db6:    4700        .G      BX       r0
    $d
        0x00007db8:    00008c18    ....    DCD    35864
        0x00007dbc:    20000000    ...     DCD    536870912
        0x00007dc0:    20000008    ...     DCD    536870920
        0x00007dc4:    00000000    ....    DCD    0
        0x00007dc8:    01000200    ....    DCD    16777728
        0x00007dcc:    20000c20     ..     DCD    536874016
        0x00007dd0:    00000200    ....    DCD    512
        0x00007dd4:    e000e100    ....    DCD    3758153984
        0x00007dd8:    ffffffff    ....    DCD    4294967295
        0x00007ddc:    00000c2d    -...    DCD    3117
    $d.realdata
    CARD_ISSUER_PIN
        0x00007de0:    04030201    ....    DCD    67305985
        0x00007de4:    08070605    ....    DCD    134678021
        0x00007de8:    04030201    ....    DCD    67305985
        0x00007dec:    08070605    ....    DCD    134678021
    L1
        0x00007df0:    973cebc5    ..<.    DCD    2537352133
        0x00007df4:    64036062    b`.d    DCD    1677942882
        0x00007df8:    752a76f8    .v*u    DCD    1965717240
        0x00007dfc:    cbb5d3ac    ....    DCD    3417691052
        0x00007e00:    579c7e3d    =~.W    DCD    1469873725
        0x00007e04:    8437e095    ..7.    DCD    2218254485
        0x00007e08:    ffee3fba    .?..    DCD    4293803962
        0x00007e0c:    21985355    US.!    DCD    563630933
        0x00007e10:    dbd2b8a0    ....    DCD    3688020128
        0x00007e14:    c2b40b9f    ....    DCD    3266579359
        0x00007e18:    0593d482    ....    DCD    93574274
        0x00007e1c:    2e1b5cd7    .\..    DCD    773545175
        0x00007e20:    1934bb71    q.4.    DCD    422886257
        0x00007e24:    30dd4fb9    .O.0    DCD    819810233
        0x00007e28:    0f651f46    F.e.    DCD    258285382
        0x00007e2c:    de32c9c3    ..2.    DCD    3727870403
        0x00007e30:    6ae5e989    ...j    DCD    1793452425
        0x00007e34:    b1b2b77a    z...    DCD    2981279610
        0x00007e38:    b6eacf90    ....    DCD    3068841872
        0x00007e3c:    e7e3fe25    %...    DCD    3890478629
        0x00007e40:    4185d136    6..A    DCD    1099288886
        0x00007e44:    dced45ca    .E..    DCD    3706537418
        0x00007e48:    447892bd    ..xD    DCD    1148752573
        0x00007e4c:    1e267d15    .}&.    DCD    505838869
        0x00007e50:    c4359b02    ..5.    DCD    3291847426
        0x00007e54:    f633b0ae    ..3.    DCD    4130582702
        0x00007e58:    146e4ca7    .Ln.    DCD    342772903
        0x00007e5c:    70677952    Rygp    DCD    1885829458
        0x00007e60:    d931ad38    8.1.    DCD    3643911480
        0x00007e64:    e47200fc    ..r.    DCD    3832676604
        0x00007e68:    a15d0c7b    {.].    DCD    2707229819
        0x00007e6c:    aff0e8fd    ....    DCD    2951801085
        0x00007e70:    9e168043    C...    DCD    2652274755
        0x00007e74:    6d4d1259    Y.Mm    DCD    1833767513
        0x00007e78:    043e11be    ..>.    DCD    71176638
        0x00007e7c:    913ba399    ..;.    DCD    2436604825
        0x00007e80:    cd4a078a    ..J.    DCD    3444180874
        0x00007e84:    2d50a20a    ..P-    DCD    760259082
        0x00007e88:    d6966f68    ho..    DCD    3600183144
        0x00007e8c:    a9bf1c9a    ....    DCD    2847874202
        0x00007e90:    c6c158d5    .X..    DCD    3334559957
        0x00007e94:    a427f5c8    ..'.    DCD    2754082248
        0x00007e98:    014e547c    |TN.    DCD    21910652
        0x00007e9c:    5617aabc    ...V    DCD    1444391612
        0x00007ea0:    06208de2    .. .    DCD    102796770
        0x00007ea4:    28c77f83    ...(    DCD    684162947
        0x00007ea8:    47391087    ..9G    DCD    1194922119
        0x00007eac:    f2a8e15b    [...    DCD    4071154011
        0x00007eb0:    2ca661ce    .a.,    DCD    749101518
        0x00007eb4:    efec5a0e    .Z..    DCD    4025244174
        0x00007eb8:    6cdff4e6    ...l    DCD    1826616550
        0x00007ebc:    fb947766    fw..    DCD    4220811110
        0x00007ec0:    0908d81d    ....    DCD    151574557
        0x00007ec4:    6918d0f9    ...i    DCD    1763234041
        0x00007ec8:    5f40225e    ^"@_    DCD    1598038622
        0x00007ecc:    cc864873    sH..    DCD    3431352435
        0x00007ed0:    daf3f72b    +...    DCD    3673421611
        0x00007ed4:    6b493a2f    /:Ik    DCD    1799961135
        0x00007ed8:    4274b3f1    ..tB    DCD    1114944497
        0x00007edc:    fa518f24    $.Q.    DCD    4199649060
        0x00007ee0:    8e0d138b    ....    DCD    2383221643
        0x00007ee4:    63c0818c    ...c    DCD    1673560460
        0x00007ee8:    29889dab    ...)    DCD    696819115
        0x00007eec:    1aa5234b    K#..    DCD    447030091
    M11
        0x00007ef0:    8d5f2aaa    .*_.    DCD    2371824298
        0x00007ef4:    59471e6d    m.GY    DCD    1497833069
        0x00007ef8:    cde7931a    ....    DCD    3454505754
        0x00007efc:    817cd4ef    ..|.    DCD    2172441839
        0x00007f00:    b90f4fd8    .O..    DCD    3104788440
        0x00007f04:    a2fb0e99    ....    DCD    2734362265
        0x00007f08:    c5acf100    ....    DCD    3316445440
        0x00007f0c:    ebc20a2b    +...    DCD    3955362347
        0x00007f10:    2d481406    ..H-    DCD    759698438
        0x00007f14:    77a1688f    .h.w    DCD    2007066767
        0x00007f18:    bd268829    ).&.    DCD    3173419049
        0x00007f1c:    125d1987    ..].    DCD    308091271
        0x00007f20:    c3fcabe0    ....    DCD    3288116192
        0x00007f24:    a53a133f    ?.:.    DCD    2772046655
        0x00007f28:    fe853717    .7..    DCD    4270143255
        0x00007f2c:    b2dc90d6    ....    DCD    3000799446
        0x00007f30:    e16e349c    .4n.    DCD    3782096028
        0x00007f34:    278cb761    a..'    DCD    663533409
        0x00007f38:    a7db5835    5X..    DCD    2816170037
        0x00007f3c:    de3ec610    ..>.    DCD    3728655888
        0x00007f40:    5eaf8b4c    L..^    DCD    1588562764
        0x00007f44:    16738633    3.s.    DCD    376669747
        0x00007f48:    d9f90143    C...    DCD    3656974659
        0x00007f4c:    8ae80503    ....    DCD    2330461443
        0x00007f50:    a374381f    .8t.    DCD    2742302751
        0x00007f54:    84ea8046    F...    DCD    2229960774
        0x00007f58:    0df4b8e5    ....    DCD    234141925
        0x00007f5c:    9ae94922    "I..    DCD    2598979874
        0x00007f60:    ecd783b3    ....    DCD    3973546931
        0x00007f64:    391bdf8e    ...9    DCD    958128014
        0x00007f68:    08d36cf6    .l..    DCD    148073718
        0x00007f6c:    f54255fd    .UB.    DCD    4114765309
        0x00007f70:    04be4ec1    .N..    DCD    79580865
        0x00007f74:    7f960711    ....    DCD    2140538641
        0x00007f78:    ba25d598    ..%.    DCD    3123041688
        0x00007f7c:    a92ef302    ....    DCD    2838426370
        0x00007f80:    ae3c6544    De<.    DCD    2923193668
        0x00007f84:    45b09ed0    ...E    DCD    1169202896
        0x00007f88:    535abfee    ..ZS    DCD    1398456302
        0x00007f8c:    3b4d7da6    .}M;    DCD    994934182
        0x00007f90:    97315c15    .\1.    DCD    2536594453
        0x00007f94:    320963a8    .c.2    DCD    839476136
        0x00007f98:    e4757192    .qu.    DCD    3832902034
        0x00007f9c:    5228e641    A.(R    DCD    1378412097
        0x00007fa0:    66e3ed36    6..f    DCD    1726213430
        0x00007fa4:    186b241c    .$k.    DCD    409674780
        0x00007fa8:    c9ce7e2c    ,~..    DCD    3385753132
        0x00007fac:    cfa4723d    =r..    DCD    3483660861
        0x00007fb0:    405b1db5    ..[@    DCD    1079713205
        0x00007fb4:    9b30ffdd    ..0.    DCD    2603679709
        0x00007fb8:    d2b46fc0    .o..    DCD    3535040448
        0x00007fbc:    94cbf7b6    ....    DCD    2496395190
        0x00007fc0:    0bad62d1    .b..    DCD    195912401
        0x00007fc4:    76fa7b4b    K{.v    DCD    1996127051
        0x00007fc8:    caf02f20     /..    DCD    3404738336
        0x00007fcc:    5064b14a    J.dP    DCD    1348776266
        0x00007fd0:    56f821c4    .!.V    DCD    1459102148
        0x00007fd4:    8278899d    ..x.    DCD    2188937629
        0x00007fd8:    517acc54    T.zQ    DCD    1367002196
        0x00007fdc:    95c8bcf2    ....    DCD    2512960754
        0x00007fe0:    bba0dae2    ....    DCD    3147881186
        0x00007fe4:    6957236a    j#Wi    DCD    1767318378
        0x00007fe8:    9fc79160    `...    DCD    2680656224
        0x00007fec:    7067790c    .ygp    DCD    1885829388
    S
        0x00007ff0:    7b777c63    c|w{    DCD    2071428195
        0x00007ff4:    c56f6bf2    .ko.    DCD    3312413682
        0x00007ff8:    2b670130    0.g+    DCD    728170800
        0x00007ffc:    76abd7fe    ...v    DCD    1990973438
        0x00008000:    7dc982ca    ...}    DCD    2110358218
        0x00008004:    f04759fa    .YG.    DCD    4031207930
        0x00008008:    afa2d4ad    ....    DCD    2946684077
        0x0000800c:    c072a49c    ..r.    DCD    3228738716
        0x00008010:    2693fdb7    ...&    DCD    647232951
        0x00008014:    ccf73f36    6?..    DCD    3438755638
        0x00008018:    f1e5a534    4...    DCD    4058359092
        0x0000801c:    1531d871    q.1.    DCD    355588209
        0x00008020:    c323c704    ..#.    DCD    3273901828
        0x00008024:    9a059618    ....    DCD    2584057368
        0x00008028:    e2801207    ....    DCD    3800044039
        0x0000802c:    75b227eb    .'.u    DCD    1974609899
        0x00008030:    1a2c8309    ..,.    DCD    439124745
        0x00008034:    a05a6e1b    .nZ.    DCD    2690280987
        0x00008038:    b3d63b52    R;..    DCD    3017161554
        0x0000803c:    842fe329    )./.    DCD    2217730857
        0x00008040:    ed00d153    S...    DCD    3976253779
        0x00008044:    5bb1fc20     ..[    DCD    1538391072
        0x00008048:    39becb6a    j..9    DCD    968805226
        0x0000804c:    cf584c4a    JLX.    DCD    3478670410
        0x00008050:    fbaaefd0    ....    DCD    4222283728
        0x00008054:    85334d43    CM3.    DCD    2234731843
        0x00008058:    7f02f945    E...    DCD    2130901317
        0x0000805c:    a89f3c50    P<..    DCD    2829007952
        0x00008060:    8f40a351    Q.@.    DCD    2403378001
        0x00008064:    f5389d92    ..8.    DCD    4114128274
        0x00008068:    21dab6bc    ...!    DCD    567981756
        0x0000806c:    d2f3ff10    ....    DCD    3539205904
        0x00008070:    ec130ccd    ....    DCD    3960671437
        0x00008074:    1744975f    _.D.    DCD    390371167
        0x00008078:    3d7ea7c4    ..~=    DCD    1031710660
        0x0000807c:    73195d64    d].s    DCD    1931042148
        0x00008080:    dc4f8160    `.O.    DCD    3696197984
        0x00008084:    88902a22    "*..    DCD    2291149346
        0x00008088:    14b8ee46    F...    DCD    347663942
        0x0000808c:    db0b5ede    .^..    DCD    3674955486
        0x00008090:    0a3a32e0    .2:.    DCD    171586272
        0x00008094:    5c240649    I.$\    DCD    1545864777
        0x00008098:    62acd3c2    ...b    DCD    1655493570
        0x0000809c:    79e49591    ...y    DCD    2045023633
        0x000080a0:    6d37c8e7    ..7m    DCD    1832372455
        0x000080a4:    a94ed58d    ..N.    DCD    2840515981
        0x000080a8:    eaf4566c    lV..    DCD    3941881452
        0x000080ac:    08ae7a65    ez..    DCD    145652325
        0x000080b0:    2e2578ba    .x%.    DCD    774207674
        0x000080b4:    c6b4a61c    ....    DCD    3333727772
        0x000080b8:    1f74dde8    ..t.    DCD    527752680
        0x000080bc:    8a8bbd4b    K...    DCD    2324413771
        0x000080c0:    66b53e70    p>.f    DCD    1723154032
        0x000080c4:    0ef60348    H...    DCD    251003720
        0x000080c8:    b9573561    a5W.    DCD    3109500257
        0x000080cc:    9e1dc186    ....    DCD    2652750214
        0x000080d0:    1198f8e1    ....    DCD    295237857
        0x000080d4:    948ed969    i...    DCD    2492389737
        0x000080d8:    e9871e9b    ....    DCD    3917946523
        0x000080dc:    df2855ce    .U(.    DCD    3743962574
        0x000080e0:    0d89a18c    ....    DCD    227123596
        0x000080e4:    6842e6bf    ..Bh    DCD    1749214911
        0x000080e8:    0f2d9941    A.-.    DCD    254646593
        0x000080ec:    16bb54b0    .T..    DCD    381375664
    SW
        0x000080f0:    9f006100    .a..    DCD    2667602176
        0x000080f4:    67006c00    .l.g    DCD    1728080896
        0x000080f8:    90009000    ....    DCD    2415955968
        0x000080fc:    6e006e00    .n.n    DCD    1845521920
        0x00008100:    6d006d00    .m.m    DCD    1828744448
        0x00008104:    6b006b00    .k.k    DCD    1795189504
        0x00008108:    67006700    .g.g    DCD    1728079616
        0x0000810c:    6a806a80    .j.j    DCD    1786800768
        0x00008110:    69006900    .i.i    DCD    1761634560
        0x00008114:    6a846a84    .j.j    DCD    1787062916
        0x00008118:    6a896a89    .j.j    DCD    1787390601
        0x0000811c:    6a8a6a8a    .j.j    DCD    1787456138
        0x00008120:    94046a82    .j..    DCD    2483317378
        0x00008124:    94006986    .i..    DCD    2483054982
        0x00008128:    94086981    .i..    DCD    2483579265
        0x0000812c:    94026700    .g..    DCD    2483185408
        0x00008130:    98046982    .i..    DCD    2550425986
        0x00008134:    94026a83    .j..    DCD    2483186307
        0x00008138:    98106283    .b..    DCD    2551210627
        0x0000813c:    98509850    P.P.    DCD    2555418704
        0x00008140:    94049000    ....    DCD    2483326976
        0x00008144:    98106984    .i..    DCD    2551212420
        0x00008148:    6f006f00    .o.o    DCD    1862299392
        0x0000814c:    6f006a88    .j.o    DCD    1862298248
        0x00008150:    980463c0    .c..    DCD    2550424512
        0x00008154:    98406983    .i@.    DCD    2554358147
        0x00008158:    98086984    .i..    DCD    2550688132
        0x0000815c:    98026a88    .j..    DCD    2550295176
        0x00008160:    94086985    .i..    DCD    2483579269
        0x00008164:    6b006a81    .j.k    DCD    1795189377
        0x00008168:    6e006881    .h.n    DCD    1845520513
        0x0000816c:    98629862    b.b.    DCD    2556598370
    VectorTable
        0x00008170:    200011a8    ...     DCD    536875432
        0x00008174:    00000045    E...    DCD    69
        0x00008178:    00000059    Y...    DCD    89
        0x0000817c:    0000005b    [...    DCD    91
        0x00008180:    00000000    ....    DCD    0
        0x00008184:    00000000    ....    DCD    0
        0x00008188:    00000000    ....    DCD    0
        0x0000818c:    00000000    ....    DCD    0
        0x00008190:    00000000    ....    DCD    0
        0x00008194:    00000000    ....    DCD    0
        0x00008198:    00000000    ....    DCD    0
        0x0000819c:    0000005d    ]...    DCD    93
        0x000081a0:    00000000    ....    DCD    0
        0x000081a4:    00000000    ....    DCD    0
        0x000081a8:    0000005f    _...    DCD    95
        0x000081ac:    00000061    a...    DCD    97
        0x000081b0:    00054355    UC..    DCD    344917
        0x000081b4:    78014807    .H.x    DCD    2013349895
        0x000081b8:    42914a07    .J.B    DCD    1116817927
        0x000081bc:    4807d102    ...H    DCD    1208471810
        0x000081c0:    60014907    .I.`    DCD    1610696967
        0x000081c4:    47004807    .H.G    DCD    1191200775
        0x000081c8:    47704770    pGpG    DCD    1198540656
        0x000081cc:    47704770    pGpG    DCD    1198540656
        0x000081d0:    bf004770    pG..    DCD    3204466544
        0x000081d4:    00054400    .D..    DCD    345088
        0x000081d8:    000000a5    ....    DCD    165
        0x000081dc:    e000ed08    ....    DCD    3758157064
        0x000081e0:    00052c00    .,..    DCD    338944
        0x000081e4:    000542b9    .B..    DCD    344761
    Xtime
        0x000081e8:    06040200    ....    DCD    100925952
        0x000081ec:    0e0c0a08    ....    DCD    235670024
        0x000081f0:    16141210    ....    DCD    370414096
        0x000081f4:    1e1c1a18    ....    DCD    505158168
        0x000081f8:    26242220     "$&    DCD    639902240
        0x000081fc:    2e2c2a28    (*,.    DCD    774646312
        0x00008200:    36343230    0246    DCD    909390384
        0x00008204:    3e3c3a38    8:<>    DCD    1044134456
        0x00008208:    46444240    @BDF    DCD    1178878528
        0x0000820c:    4e4c4a48    HJLN    DCD    1313622600
        0x00008210:    56545250    PRTV    DCD    1448366672
        0x00008214:    5e5c5a58    XZ\^    DCD    1583110744
        0x00008218:    66646260    `bdf    DCD    1717854816
        0x0000821c:    6e6c6a68    hjln    DCD    1852598888
        0x00008220:    76747270    prtv    DCD    1987342960
        0x00008224:    7e7c7a78    xz|~    DCD    2122087032
        0x00008228:    86848280    ....    DCD    2256831104
        0x0000822c:    8e8c8a88    ....    DCD    2391575176
        0x00008230:    96949290    ....    DCD    2526319248
        0x00008234:    9e9c9a98    ....    DCD    2661063320
        0x00008238:    a6a4a2a0    ....    DCD    2795807392
        0x0000823c:    aeacaaa8    ....    DCD    2930551464
        0x00008240:    b6b4b2b0    ....    DCD    3065295536
        0x00008244:    bebcbab8    ....    DCD    3200039608
        0x00008248:    c6c4c2c0    ....    DCD    3334783680
        0x0000824c:    cecccac8    ....    DCD    3469527752
        0x00008250:    d6d4d2d0    ....    DCD    3604271824
        0x00008254:    dedcdad8    ....    DCD    3739015896
        0x00008258:    e6e4e2e0    ....    DCD    3873759968
        0x0000825c:    eeeceae8    ....    DCD    4008504040
        0x00008260:    f6f4f2f0    ....    DCD    4143248112
        0x00008264:    fefcfaf8    ....    DCD    4277992184
        0x00008268:    1d1f191b    ....    DCD    488577307
        0x0000826c:    15171113    ....    DCD    353833235
        0x00008270:    0d0f090b    ....    DCD    219089163
        0x00008274:    05070103    ....    DCD    84345091
        0x00008278:    3d3f393b    ;9?=    DCD    1027553595
        0x0000827c:    35373133    3175    DCD    892809523
        0x00008280:    2d2f292b    +)/-    DCD    758065451
        0x00008284:    25272123    #!'%    DCD    623321379
        0x00008288:    5d5f595b    [Y_]    DCD    1566529883
        0x0000828c:    55575153    SQWU    DCD    1431785811
        0x00008290:    4d4f494b    KIOM    DCD    1297041739
        0x00008294:    45474143    CAGE    DCD    1162297667
        0x00008298:    7d7f797b    {y.}    DCD    2105506171
        0x0000829c:    75777173    sqwu    DCD    1970762099
        0x000082a0:    6d6f696b    kiom    DCD    1836018027
        0x000082a4:    65676163    cage    DCD    1701273955
        0x000082a8:    9d9f999b    ....    DCD    2644482459
        0x000082ac:    95979193    ....    DCD    2509738387
        0x000082b0:    8d8f898b    ....    DCD    2374994315
        0x000082b4:    85878183    ....    DCD    2240250243
        0x000082b8:    bdbfb9bb    ....    DCD    3183458747
        0x000082bc:    b5b7b1b3    ....    DCD    3048714675
        0x000082c0:    adafa9ab    ....    DCD    2913970603
        0x000082c4:    a5a7a1a3    ....    DCD    2779226531
        0x000082c8:    dddfd9db    ....    DCD    3722435035
        0x000082cc:    d5d7d1d3    ....    DCD    3587690963
        0x000082d0:    cdcfc9cb    ....    DCD    3452946891
        0x000082d4:    c5c7c1c3    ....    DCD    3318202819
        0x000082d8:    fdfff9fb    ....    DCD    4261411323
        0x000082dc:    f5f7f1f3    ....    DCD    4126667251
        0x000082e0:    edefe9eb    ....    DCD    3991923179
        0x000082e4:    e5e7e1e3    ....    DCD    3857179107
    commandList
        0x000082e8:    00002ad9    .*..    DCD    10969
        0x000082ec:    00000000    ....    DCD    0
        0x000082f0:    000001e0    ....    DCD    480
        0x000082f4:    00001f81    ....    DCD    8065
        0x000082f8:    00006845    Eh..    DCD    26693
        0x000082fc:    000082f2    ....    DCD    33522
        0x00008300:    00002309    .#..    DCD    8969
        0x00008304:    000067dd    .g..    DCD    26589
        0x00008308:    000007a4    ....    DCD    1956
        0x0000830c:    000015cd    ....    DCD    5581
        0x00008310:    00006321    !c..    DCD    25377
        0x00008314:    000002b0    ....    DCD    688
        0x00008318:    000015cd    ....    DCD    5581
        0x0000831c:    00006321    !c..    DCD    25377
        0x00008320:    000003d6    ....    DCD    982
        0x00008324:    000016f5    ....    DCD    5877
        0x00008328:    00006301    .c..    DCD    25345
        0x0000832c:    000002b2    ....    DCD    690
        0x00008330:    000016f5    ....    DCD    5877
        0x00008334:    00006301    .c..    DCD    25345
        0x00008338:    000003dc    ....    DCD    988
        0x0000833c:    00001885    ....    DCD    6277
        0x00008340:    00006379    yc..    DCD    25465
        0x00008344:    00000704    ....    DCD    1796
        0x00008348:    00001885    ....    DCD    6277
        0x0000834c:    00006379    yc..    DCD    25465
        0x00008350:    00000744    D...    DCD    1860
        0x00008354:    000019a9    ....    DCD    6569
        0x00008358:    00006345    Ec..    DCD    25413
        0x0000835c:    00008332    2...    DCD    33586
        0x00008360:    00001c89    ....    DCD    7305
        0x00008364:    00006399    .c..    DCD    25497
        0x00008368:    000003a2    ....    DCD    930
        0x0000836c:    000014d1    ....    DCD    5329
        0x00008370:    000062f1    .b..    DCD    25329
        0x00008374:    00008310    ....    DCD    33552
        0x00008378:    00001561    a...    DCD    5473
        0x0000837c:    000062f3    .b..    DCD    25331
        0x00008380:    00008314    ....    DCD    33556
        0x00008384:    00001565    e...    DCD    5477
        0x00008388:    000062f5    .b..    DCD    25333
        0x0000838c:    000083c2    ....    DCD    33730
        0x00008390:    0000158d    ....    DCD    5517
        0x00008394:    000062fd    .b..    DCD    25341
        0x00008398:    00008212    ....    DCD    33298
        0x0000839c:    000027c1    .'..    DCD    10177
        0x000083a0:    000027c1    .'..    DCD    10177
        0x000083a4:    000002c0    ....    DCD    704
        0x000083a8:    00000000    ....    DCD    0
        0x000083ac:    00006899    .h..    DCD    26777
        0x000083b0:    000002fa    ....    DCD    762
        0x000083b4:    00005cd5    .\..    DCD    23765
        0x000083b8:    000068cd    .h..    DCD    26829
        0x000083bc:    00000188    ....    DCD    392
        0x000083c0:    00002559    Y%..    DCD    9561
        0x000083c4:    00006a41    Aj..    DCD    27201
        0x000083c8:    00000324    $...    DCD    804
        0x000083cc:    00002659    Y&..    DCD    9817
        0x000083d0:    000069d9    .i..    DCD    27097
        0x000083d4:    00000720     ...    DCD    1824
        0x000083d8:    000025d5    .%..    DCD    9685
        0x000083dc:    00006ac1    .j..    DCD    27329
        0x000083e0:    0000072c    ,...    DCD    1836
        0x000083e4:    000026d9    .&..    DCD    9945
        0x000083e8:    00006b29    )k..    DCD    27433
        0x000083ec:    00000328    (...    DCD    808
        0x000083f0:    00002751    Q'..    DCD    10065
        0x000083f4:    00006b81    .k..    DCD    27521
        0x000083f8:    00000326    &...    DCD    806
        0x000083fc:    0000246d    m$..    DCD    9325
        0x00008400:    00000000    ....    DCD    0
        0x00008404:    00000070    p...    DCD    112
        0x00008408:    00001239    9...    DCD    4665
        0x0000840c:    00001239    9...    DCD    4665
        0x00008410:    000000d9    ....    DCD    217
        0x00008414:    00001335    5...    DCD    4917
        0x00008418:    00001335    5...    DCD    4917
        0x0000841c:    000000f0    ....    DCD    240
        0x00008420:    00001265    e...    DCD    4709
        0x00008424:    00001265    e...    DCD    4709
        0x00008428:    000000da    ....    DCD    218
        0x0000842c:    626d7570    pumb    DCD    1651340656
        0x00008430:    61746144    Data    DCD    1635017028
        0x00008434:    203d2120     !=     DCD    540877088
        0x00008438:    4c4c554e    NULL    DCD    1280070990
        0x0000843c:    726f4300    .Cor    DCD    1919894272
        0x00008440:    654d2f65    e/Me    DCD    1699557221
        0x00008444:    79726f6d    mory    DCD    2037542765
        0x00008448:    616e614d    Mana    DCD    1634623821
        0x0000844c:    2f726567    ger/    DCD    796026215
        0x00008450:    72756f73    sour    DCD    1920298867
        0x00008454:    4d2f6563    ce/M    DCD    1294951779
        0x00008458:    726f6d65    emor    DCD    1919905125
        0x0000845c:    6e614d79    yMan    DCD    1851870585
        0x00008460:    72656761    ager    DCD    1919248225
        0x00008464:    7000632e    .c.p    DCD    1879073582
        0x00008468:    44626d75    umbD    DCD    1147301237
        0x0000846c:    20747365    est     DCD    544502629
        0x00008470:    4e203d21    != N    DCD    1310735649
        0x00008474:    004c4c55    ULL.    DCD    5000277
        0x00008478:    65726f43    Core    DCD    1701998403
        0x0000847c:    6d654d2f    /Mem    DCD    1835355439
        0x00008480:    4d79726f    oryM    DCD    1299804783
        0x00008484:    67616e61    anag    DCD    1734438497
        0x00008488:    732f7265    er/s    DCD    1932489317
        0x0000848c:    6372756f    ourc    DCD    1668445551
        0x00008490:    74552f65    e/Ut    DCD    1951739749
        0x00008494:    74696c69    ilit    DCD    1953066089
        0x00008498:    2e736569    ies.    DCD    779314537
        0x0000849c:    49280063    c.(I    DCD    1227358307
        0x000084a0:    464c2853    S(LF    DCD    1179396179
        0x000084a4:    6866202c    , fh    DCD    1751523372
        0x000084a8:    656c6946    File    DCD    1701603654
        0x000084ac:    626d752e    .umb    DCD    1651340590
        0x000084b0:    656c6946    File    DCD    1701603654
        0x000084b4:    63736544    Desc    DCD    1668506948
        0x000084b8:    7c202929    )) |    DCD    2082482473
        0x000084bc:    4928207c    | (I    DCD    1227366524
        0x000084c0:    46432853    S(CF    DCD    1178806355
        0x000084c4:    6866202c    , fh    DCD    1751523372
        0x000084c8:    656c6946    File    DCD    1701603654
        0x000084cc:    626d752e    .umb    DCD    1651340590
        0x000084d0:    656c6946    File    DCD    1701603654
        0x000084d4:    63736544    Desc    DCD    1668506948
        0x000084d8:    28002929    )).(    DCD    671099177
        0x000084dc:    6f4d6d73    smMo    DCD    1867345267
        0x000084e0:    3d206564    de =    DCD    1025533284
        0x000084e4:    4553203d    = SE    DCD    1163075645
        0x000084e8:    48435241    ARCH    DCD    1212371521
        0x000084ec:    4345525f    _REC    DCD    1128616543
        0x000084f0:    5f44524f    ORD_    DCD    1598313039
        0x000084f4:    4b434142    BACK    DCD    1262698818
        0x000084f8:    44524157    WARD    DCD    1146241367
        0x000084fc:    7c7c2029    ) ||    DCD    2088509481
        0x00008500:    6d732820     (sm    DCD    1836263456
        0x00008504:    65646f4d    Mode    DCD    1701080909
        0x00008508:    203d3d20     ==     DCD    540884256
        0x0000850c:    52414553    SEAR    DCD    1380009299
        0x00008510:    525f4843    CH_R    DCD    1381976131
        0x00008514:    524f4345    ECOR    DCD    1380926277
        0x00008518:    4f465f44    D_FO    DCD    1330011972
        0x0000851c:    52415752    RWAR    DCD    1380013906
        0x00008520:    61002944    D).a    DCD    1627400516
        0x00008524:    72615469    iTar    DCD    1918981225
        0x00008528:    46746567    getF    DCD    1182033255
        0x0000852c:    2e656c69    ile.    DCD    778398825
        0x00008530:    41626d75    umbA    DCD    1096969589
        0x00008534:    65527272    rrRe    DCD    1699902066
        0x00008538:    3d3c2063    c <=    DCD    1027350627
        0x0000853c:    38375f20     _78    DCD    943152928
        0x00008540:    345f3631    16_4    DCD    878655025
        0x00008544:    7465675f    _get    DCD    1952802655
        0x00008548:    664f6f4e    NoOf    DCD    1716481870
        0x0000854c:    6f636552    Reco    DCD    1868784978
        0x00008550:    28736472    rds(    DCD    678650994
        0x00008554:    46616866    fhaF    DCD    1180788838
        0x00008558:    29656c69    ile)    DCD    694512745
        0x0000855c:    6d757000    .pum    DCD    1836412928
        0x00008560:    61746144    Data    DCD    1635017028
        0x00008564:    203d2120     !=     DCD    540877088
        0x00008568:    4c4c554e    NULL    DCD    1280070990
        0x0000856c:    6d757000    .pum    DCD    1836412928
        0x00008570:    64694162    bAid    DCD    1684619618
        0x00008574:    203d2120     !=     DCD    540877088
        0x00008578:    4c4c554e    NULL    DCD    1280070990
        0x0000857c:    68667000    .pfh    DCD    1751543808
        0x00008580:    6c694661    aFil    DCD    1818838625
        0x00008584:    3d212065    e !=    DCD    1025581157
        0x00008588:    4c554e20     NUL    DCD    1280658976
        0x0000858c:    7567004c    L.gu    DCD    1969684556
        0x00008590:    6f57626d    mbWo    DCD    1867997805
        0x00008594:    6e696b72    rkin    DCD    1852402546
        0x00008598:    66754267    gBuf    DCD    1718960743
        0x0000859c:    5b726566    fer[    DCD    1534223718
        0x000085a0:    49626d75    umbI    DCD    1231187317
        0x000085a4:    7865646e    ndex    DCD    2019910766
        0x000085a8:    31202b20     + 1    DCD    824191776
        0x000085ac:    3d3d205d    ] ==    DCD    1027416157
        0x000085b0:    4e454c20     LEN    DCD    1313164320
        0x000085b4:    5f485447    GTH_    DCD    1598575687
        0x000085b8:    45434341    ACCE    DCD    1162036033
        0x000085bc:    4d5f5353    SS_M    DCD    1298092883
        0x000085c0:    5f45444f    ODE_    DCD    1598374991
        0x000085c4:    41544144    DATA    DCD    1096040772
        0x000085c8:    4a424f5f    _OBJ    DCD    1245859679
        0x000085cc:    00544345    ECT.    DCD    5522245
        0x000085d0:    626d7567    gumb    DCD    1651340647
        0x000085d4:    6b726f57    Work    DCD    1802661719
        0x000085d8:    42676e69    ingB    DCD    1114074729
        0x000085dc:    65666675    uffe    DCD    1701209717
        0x000085e0:    6d755b72    r[um    DCD    1836407666
        0x000085e4:    646e4962    bInd    DCD    1684949346
        0x000085e8:    2b207865    ex +    DCD    723548261
        0x000085ec:    30783020     0x0    DCD    813183008
        0x000085f0:    3d205d31    1] =    DCD    1025531185
        0x000085f4:    454c203d    = LE    DCD    1162616893
        0x000085f8:    4854474e    NGTH    DCD    1213482830
        0x000085fc:    4343415f    _ACC    DCD    1128481119
        0x00008600:    5f535345    ESS_    DCD    1599296325
        0x00008604:    45444f4d    MODE    DCD    1162104653
        0x00008608:    5441445f    _DAT    DCD    1413563487
        0x0000860c:    424f5f41    A_OB    DCD    1112497985
        0x00008610:    5443454a    JECT    DCD    1413694794
        0x00008614:    66702a00    .*pf    DCD    1718626816
        0x00008618:    69466168    haFi    DCD    1766220136
        0x0000861c:    2120656c    le !    DCD    555771244
        0x00008620:    4d45203d    = EM    DCD    1296375869
        0x00008624:    5f595450    PTY_    DCD    1599689808
        0x00008628:    454a424f    OBJE    DCD    1162494543
        0x0000862c:    54005443    CT.T    DCD    1409307715
        0x00008630:    4b5f4741    AG_K    DCD    1264535361
        0x00008634:    525f5945    EY_R    DCD    1381980485
        0x00008638:    52454645    EFER    DCD    1380271685
        0x0000863c:    45434e45    ENCE    DCD    1162038853
        0x00008640:    203d3d20     ==     DCD    540884256
        0x00008644:    626d7567    gumb    DCD    1651340647
        0x00008648:    6b726f57    Work    DCD    1802661719
        0x0000864c:    42676e69    ingB    DCD    1114074729
        0x00008650:    65666675    uffe    DCD    1701209717
        0x00008654:    6d755b72    r[um    DCD    1836407666
        0x00008658:    646e4962    bInd    DCD    1684949346
        0x0000865c:    2b207865    ex +    DCD    723548261
        0x00008660:    30783020     0x0    DCD    813183008
        0x00008664:    4c005d32    2].L    DCD    1275092274
        0x00008668:    54474e45    ENGT    DCD    1413959237
        0x0000866c:    454b5f48    H_KE    DCD    1162567496
        0x00008670:    45525f59    Y_RE    DCD    1163026265
        0x00008674:    45524546    FERE    DCD    1163019590
        0x00008678:    2045434e    NCE     DCD    541410126
        0x0000867c:    67203d3d    == g    DCD    1730166077
        0x00008680:    57626d75    umbW    DCD    1466068341
        0x00008684:    696b726f    orki    DCD    1768649327
        0x00008688:    7542676e    ngBu    DCD    1967286126
        0x0000868c:    72656666    ffer    DCD    1919247974
        0x00008690:    626d755b    [umb    DCD    1651340635
        0x00008694:    65646e49    Inde    DCD    1701080649
        0x00008698:    202b2078    x +     DCD    539697272
        0x0000869c:    33307830    0x03    DCD    858814512
        0x000086a0:    6f43005d    ].Co    DCD    1866661981
        0x000086a4:    372f6572    re/7    DCD    925853042
        0x000086a8:    5f363138    816_    DCD    1597387064
        0x000086ac:    6f732f34    4/so    DCD    1869819700
        0x000086b0:    65637275    urce    DCD    1701016181
        0x000086b4:    3138372f    /781    DCD    825767727
        0x000086b8:    2e345f36    6_4.    DCD    775184182
        0x000086bc:    28280063    c.((    DCD    673710179
        0x000086c0:    5f4e4950    PIN_    DCD    1598966096
        0x000086c4:    5f505041    APP_    DCD    1599098945
        0x000086c8:    3d3c2031    1 <=    DCD    1027350577
        0x000086cc:    626d7520     umb    DCD    1651340576
        0x000086d0:    5279654b    KeyR    DCD    1383687499
        0x000086d4:    20296665    ef)     DCD    539584101
        0x000086d8:    28202626    && (    DCD    673195558
        0x000086dc:    4b626d75    umbK    DCD    1264741749
        0x000086e0:    65527965    eyRe    DCD    1699903845
        0x000086e4:    3d3c2066    f <=    DCD    1027350630
        0x000086e8:    4e495020     PIN    DCD    1313427488
        0x000086ec:    5050415f    _APP    DCD    1347436895
        0x000086f0:    2929385f    _8))    DCD    690567263
        0x000086f4:    207c7c20     ||     DCD    545029152
        0x000086f8:    49502828    ((PI    DCD    1229989928
        0x000086fc:    45535f4e    N_SE    DCD    1163091790
        0x00008700:    444e4f43    COND    DCD    1145982787
        0x00008704:    5050415f    _APP    DCD    1347436895
        0x00008708:    3c20315f    _1 <    DCD    1008742751
        0x0000870c:    6d75203d    = um    DCD    1836392509
        0x00008710:    79654b62    bKey    DCD    2036681570
        0x00008714:    29666552    Ref)    DCD    694576466
        0x00008718:    20262620     &&     DCD    539371040
        0x0000871c:    626d7528    (umb    DCD    1651340584
        0x00008720:    5279654b    KeyR    DCD    1383687499
        0x00008724:    3c206665    ef <    DCD    1008756325
        0x00008728:    4950203d    = PI    DCD    1229987901
        0x0000872c:    45535f4e    N_SE    DCD    1163091790
        0x00008730:    444e4f43    COND    DCD    1145982787
        0x00008734:    5050415f    _APP    DCD    1347436895
        0x00008738:    2929385f    _8))    DCD    690567263
        0x0000873c:    207c7c20     ||     DCD    545029152
        0x00008740:    49502828    ((PI    DCD    1229989928
        0x00008744:    44415f4e    N_AD    DCD    1145134926
        0x00008748:    20315f4d    M_1     DCD    540106573
        0x0000874c:    75203d3c    <= u    DCD    1965047100
        0x00008750:    654b626d    mbKe    DCD    1699439213
        0x00008754:    66655279    yRef    DCD    1717916281
        0x00008758:    26262029    ) &&    DCD    640032809
        0x0000875c:    6d752820     (um    DCD    1836394528
        0x00008760:    79654b62    bKey    DCD    2036681570
        0x00008764:    20666552    Ref     DCD    543581522
        0x00008768:    50203d3c    <= P    DCD    1344290108
        0x0000876c:    415f4e49    IN_A    DCD    1096765001
        0x00008770:    355f4d44    DM_5    DCD    895438148
        0x00008774:    7c202929    )) |    DCD    2082482473
        0x00008778:    2828207c    | ((    DCD    673718396
        0x0000877c:    5f4e4950    PIN_    DCD    1598966096
        0x00008780:    5f4d4441    ADM_    DCD    1598899265
        0x00008784:    3d3c2036    6 <=    DCD    1027350582
        0x00008788:    626d7520     umb    DCD    1651340576
        0x0000878c:    5279654b    KeyR    DCD    1383687499
        0x00008790:    20296665    ef)     DCD    539584101
        0x00008794:    28202626    && (    DCD    673195558
        0x00008798:    4b626d75    umbK    DCD    1264741749
        0x0000879c:    65527965    eyRe    DCD    1699903845
        0x000087a0:    3d3c2066    f <=    DCD    1027350630
        0x000087a4:    4e495020     PIN    DCD    1313427488
        0x000087a8:    4d44415f    _ADM    DCD    1296318815
        0x000087ac:    2930315f    _10)    DCD    691024223
        0x000087b0:    454c0029    ).LE    DCD    1162608681
        0x000087b4:    4854474e    NGTH    DCD    1213482830
        0x000087b8:    4345525f    _REC    DCD    1128616543
        0x000087bc:    5f44524f    ORD_    DCD    1598313039
        0x000087c0:    4b5f464f    OF_K    DCD    1264535119
        0x000087c4:    435f5945    EY_C    DCD    1130322245
        0x000087c8:    49464e4f    ONFI    DCD    1229344335
        0x000087cc:    3d3d2047    G ==    DCD    1027416135
        0x000087d0:    38375f20     _78    DCD    943152928
        0x000087d4:    345f3631    16_4    DCD    878655025
        0x000087d8:    7465675f    _get    DCD    1952802655
        0x000087dc:    6f636552    Reco    DCD    1868784978
        0x000087e0:    654c6472    rdLe    DCD    1699505266
        0x000087e4:    6874676e    ngth    DCD    1752459118
        0x000087e8:    66702a28    (*pf    DCD    1718626856
        0x000087ec:    654b6168    haKe    DCD    1699438952
        0x000087f0:    6e6f4379    yCon    DCD    1852785529
        0x000087f4:    46676966    figF    DCD    1181182310
        0x000087f8:    29656c69    ile)    DCD    694512745
        0x000087fc:    4e454c00    .LEN    DCD    1313164288
        0x00008800:    5f485447    GTH_    DCD    1598575687
        0x00008804:    4f434552    RECO    DCD    1329808722
        0x00008808:    4f5f4452    RD_O    DCD    1331643474
        0x0000880c:    454b5f46    F_KE    DCD    1162567494
        0x00008810:    41565f59    Y_VA    DCD    1096179545
        0x00008814:    2045554c    LUE     DCD    541414732
        0x00008818:    5f203d3d    == _    DCD    1595948349
        0x0000881c:    36313837    7816    DCD    909195319
        0x00008820:    675f345f    _4_g    DCD    1734292575
        0x00008824:    65527465    etRe    DCD    1699902565
        0x00008828:    64726f63    cord    DCD    1685221219
        0x0000882c:    676e654c    Leng    DCD    1735288140
        0x00008830:    2a286874    th(*    DCD    707291252
        0x00008834:    61686670    pfha    DCD    1634231920
        0x00008838:    5679654b    KeyV    DCD    1450796363
        0x0000883c:    65756c61    alue    DCD    1702194273
        0x00008840:    6c694673    sFil    DCD    1818838643
        0x00008844:    28002965    e).(    DCD    671099237
        0x00008848:    4e495028    (PIN    DCD    1313427496
        0x0000884c:    5050415f    _APP    DCD    1347436895
        0x00008850:    3c20315f    _1 <    DCD    1008742751
        0x00008854:    6d75203d    = um    DCD    1836392509
        0x00008858:    79654b62    bKey    DCD    2036681570
        0x0000885c:    29666552    Ref)    DCD    694576466
        0x00008860:    20262620     &&     DCD    539371040
        0x00008864:    626d7528    (umb    DCD    1651340584
        0x00008868:    5279654b    KeyR    DCD    1383687499
        0x0000886c:    3c206665    ef <    DCD    1008756325
        0x00008870:    4950203d    = PI    DCD    1229987901
        0x00008874:    50415f4e    N_AP    DCD    1346461518
        0x00008878:    29385f50    P_8)    DCD    691560272
        0x0000887c:    7c7c2029    ) ||    DCD    2088509481
        0x00008880:    50282820     ((P    DCD    1344808992
        0x00008884:    535f4e49    IN_S    DCD    1398754889
        0x00008888:    4e4f4345    ECON    DCD    1313817413
        0x0000888c:    50415f44    D_AP    DCD    1346461508
        0x00008890:    20315f50    P_1     DCD    540106576
        0x00008894:    75203d3c    <= u    DCD    1965047100
        0x00008898:    654b626d    mbKe    DCD    1699439213
        0x0000889c:    66655279    yRef    DCD    1717916281
        0x000088a0:    26262029    ) &&    DCD    640032809
        0x000088a4:    6d752820     (um    DCD    1836394528
        0x000088a8:    79654b62    bKey    DCD    2036681570
        0x000088ac:    20666552    Ref     DCD    543581522
        0x000088b0:    50203d3c    <= P    DCD    1344290108
        0x000088b4:    535f4e49    IN_S    DCD    1398754889
        0x000088b8:    4e4f4345    ECON    DCD    1313817413
        0x000088bc:    50415f44    D_AP    DCD    1346461508
        0x000088c0:    29385f50    P_8)    DCD    691560272
        0x000088c4:    7c7c2029    ) ||    DCD    2088509481
        0x000088c8:    50282820     ((P    DCD    1344808992
        0x000088cc:    415f4e49    IN_A    DCD    1096765001
        0x000088d0:    315f4d44    DM_1    DCD    828329284
        0x000088d4:    203d3c20     <=     DCD    540884000
        0x000088d8:    4b626d75    umbK    DCD    1264741749
        0x000088dc:    65527965    eyRe    DCD    1699903845
        0x000088e0:    26202966    f) &    DCD    639641958
        0x000088e4:    75282026    & (u    DCD    1965563942
        0x000088e8:    654b626d    mbKe    DCD    1699439213
        0x000088ec:    66655279    yRef    DCD    1717916281
        0x000088f0:    203d3c20     <=     DCD    540884000
        0x000088f4:    5f4e4950    PIN_    DCD    1598966096
        0x000088f8:    5f4d4441    ADM_    DCD    1598899265
        0x000088fc:    20292935    5))     DCD    539568437
        0x00008900:    28207c7c    || (    DCD    673217660
        0x00008904:    4e495028    (PIN    DCD    1313427496
        0x00008908:    4d44415f    _ADM    DCD    1296318815
        0x0000890c:    3c20365f    _6 <    DCD    1008744031
        0x00008910:    6d75203d    = um    DCD    1836392509
        0x00008914:    79654b62    bKey    DCD    2036681570
        0x00008918:    29666552    Ref)    DCD    694576466
        0x0000891c:    20262620     &&     DCD    539371040
        0x00008920:    626d7528    (umb    DCD    1651340584
        0x00008924:    5279654b    KeyR    DCD    1383687499
        0x00008928:    3c206665    ef <    DCD    1008756325
        0x0000892c:    4950203d    = PI    DCD    1229987901
        0x00008930:    44415f4e    N_AD    DCD    1145134926
        0x00008934:    30315f4d    M_10    DCD    808542029
        0x00008938:    7c202929    )) |    DCD    2082482473
        0x0000893c:    5028207c    | (P    DCD    1344807036
        0x00008940:    415f4e49    IN_A    DCD    1096765001
        0x00008944:    5941574c    LWAY    DCD    1497454412
        0x00008948:    3d3d2053    S ==    DCD    1027416147
        0x0000894c:    626d7520     umb    DCD    1651340576
        0x00008950:    5279654b    KeyR    DCD    1383687499
        0x00008954:    00296665    ef).    DCD    2713189
        0x00008958:    65726f43    Core    DCD    1701998403
        0x0000895c:    3138372f    /781    DCD    825767727
        0x00008960:    2f345f36    6_4/    DCD    791961398
        0x00008964:    72756f73    sour    DCD    1920298867
        0x00008968:    502f6563    ce/P    DCD    1345283427
        0x0000896c:    614d6e69    inMa    DCD    1632464489
        0x00008970:    6567616e    nage    DCD    1701273966
        0x00008974:    746e656d    ment    DCD    1953391981
        0x00008978:    2800632e    .c.(    DCD    671114030
        0x0000897c:    50616866    fhaP    DCD    1348560998
        0x00008980:    46706f72    ropF    DCD    1181773682
        0x00008984:    20656c69    ile     DCD    543517801
        0x00008988:    4e203d21    != N    DCD    1310735649
        0x0000898c:    49465f4f    O_FI    DCD    1229348687
        0x00008990:    505f454c    LE_P    DCD    1348420940
        0x00008994:    45534552    RESE    DCD    1163085138
        0x00008998:    2029544e    NT)     DCD    539579470
        0x0000899c:    28202626    && (    DCD    673195558
        0x000089a0:    474e454c    LENG    DCD    1196311884
        0x000089a4:    415f4854    TH_A    DCD    1096763476
        0x000089a8:    5f485455    UTH_    DCD    1598575701
        0x000089ac:    2043504f    OPC     DCD    541282383
        0x000089b0:    5f203d3d    == _    DCD    1595948349
        0x000089b4:    36313837    7816    DCD    909195319
        0x000089b8:    675f345f    _4_g    DCD    1734292575
        0x000089bc:    69467465    etFi    DCD    1766224997
        0x000089c0:    6953656c    leSi    DCD    1767073132
        0x000089c4:    6628657a    ze(f    DCD    1713923450
        0x000089c8:    72506168    haPr    DCD    1917870440
        0x000089cc:    6946706f    opFi    DCD    1766223983
        0x000089d0:    2929656c    le))    DCD    690578796
        0x000089d4:    68662800    .(fh    DCD    1751525376
        0x000089d8:    6f725061    aPro    DCD    1869762657
        0x000089dc:    6c694670    pFil    DCD    1818838640
        0x000089e0:    3d212065    e !=    DCD    1025581157
        0x000089e4:    5f4f4e20     NO_    DCD    1599032864
        0x000089e8:    454c4946    FILE    DCD    1162627398
        0x000089ec:    4552505f    _PRE    DCD    1163022431
        0x000089f0:    544e4553    SENT    DCD    1414415699
        0x000089f4:    26262029    ) &&    DCD    640032809
        0x000089f8:    454c2820     (LE    DCD    1162618912
        0x000089fc:    4854474e    NGTH    DCD    1213482830
        0x00008a00:    5455415f    _AUT    DCD    1414873439
        0x00008a04:    46455f48    H_EF    DCD    1178951496
        0x00008a08:    4e51535f    _SQN    DCD    1313952607
        0x00008a0c:    4c49465f    _FIL    DCD    1279870559
        0x00008a10:    49535f45    E_SI    DCD    1230200645
        0x00008a14:    3d20455a    ZE =    DCD    1025525082
        0x00008a18:    375f203d    = _7    DCD    928981053
        0x00008a1c:    5f363138    816_    DCD    1597387064
        0x00008a20:    65675f34    4_ge    DCD    1701273396
        0x00008a24:    6c694674    tFil    DCD    1818838644
        0x00008a28:    7a695365    eSiz    DCD    2053722981
        0x00008a2c:    68662865    e(fh    DCD    1751525477
        0x00008a30:    6f725061    aPro    DCD    1869762657
        0x00008a34:    6c694670    pFil    DCD    1818838640
        0x00008a38:    00292965    e)).    DCD    2697573
        0x00008a3c:    61686628    (fha    DCD    1634231848
        0x00008a40:    706f7250    Prop    DCD    1886351952
        0x00008a44:    656c6946    File    DCD    1701603654
        0x00008a48:    203d2120     !=     DCD    540877088
        0x00008a4c:    465f4f4e    NO_F    DCD    1180651342
        0x00008a50:    5f454c49    ILE_    DCD    1598377033
        0x00008a54:    53455250    PRES    DCD    1397051984
        0x00008a58:    29544e45    ENT)    DCD    693390917
        0x00008a5c:    20262620     &&     DCD    539371040
        0x00008a60:    4e454c28    (LEN    DCD    1313164328
        0x00008a64:    5f485447    GTH_    DCD    1598575687
        0x00008a68:    48545541    AUTH    DCD    1213486401
        0x00008a6c:    59454b5f    _KEY    DCD    1497713503
        0x00008a70:    203d3d20     ==     DCD    540884256
        0x00008a74:    3138375f    _781    DCD    825767775
        0x00008a78:    5f345f36    6_4_    DCD    1597267766
        0x00008a7c:    46746567    getF    DCD    1182033255
        0x00008a80:    53656c69    ileS    DCD    1399155817
        0x00008a84:    28657a69    ize(    DCD    677739113
        0x00008a88:    50616866    fhaP    DCD    1348560998
        0x00008a8c:    46706f72    ropF    DCD    1181773682
        0x00008a90:    29656c69    ile)    DCD    694512745
        0x00008a94:    70280029    ).(p    DCD    1881669673
        0x00008a98:    75436363    ccCu    DCD    1967350627
        0x00008a9c:    6e657272    rren    DCD    1852142194
        0x00008aa0:    61684374    tCha    DCD    1634222964
        0x00008aa4:    6c656e6e    nnel    DCD    1818586734
        0x00008aa8:    68663e2d    ->fh    DCD    1751531053
        0x00008aac:    72754361    aCur    DCD    1920287585
        0x00008ab0:    746e6572    rent    DCD    1953391986
        0x00008ab4:    21206644    Df !    DCD    555771460
        0x00008ab8:    4f4e203d    = NO    DCD    1330520125
        0x00008abc:    4c49465f    _FIL    DCD    1279870559
        0x00008ac0:    52505f45    E_PR    DCD    1380998981
        0x00008ac4:    4e455345    ESEN    DCD    1313166149
        0x00008ac8:    26202954    T) &    DCD    639641940
        0x00008acc:    75282026    & (u    DCD    1965563942
        0x00008ad0:    6553626d    mbSe    DCD    1699963501
        0x00008ad4:    63697672    rvic    DCD    1667855986
        0x00008ad8:    206f4e65    eNo     DCD    544165477
        0x00008adc:    7830203e    > 0x    DCD    2016419902
        0x00008ae0:    00293030    00).    DCD    2699312
        0x00008ae4:    50616866    fhaP    DCD    1348560998
        0x00008ae8:    44706f72    ropD    DCD    1148219250
        0x00008aec:    3d212066    f !=    DCD    1025581158
        0x00008af0:    5f4f4e20     NO_    DCD    1599032864
        0x00008af4:    454c4946    FILE    DCD    1162627398
        0x00008af8:    4552505f    _PRE    DCD    1163022431
        0x00008afc:    544e4553    SENT    DCD    1414415699
        0x00008b00:    73754200    .Bus    DCD    1937064448
        0x00008b04:    73656e69    ines    DCD    1936027241
        0x00008b08:    6d6f4373    sCom    DCD    1836008307
        0x00008b0c:    656e6f70    pone    DCD    1701736304
        0x00008b10:    542f746e    nt/T    DCD    1412396142
        0x00008b14:    63656c65    elec    DCD    1667591269
        0x00008b18:    332f6d6f    om/3    DCD    858746223
        0x00008b1c:    30315f31    1_10    DCD    808542001
        0x00008b20:    6f732f32    2/so    DCD    1869819698
        0x00008b24:    65637275    urce    DCD    1701016181
        0x00008b28:    6973752f    /usi    DCD    1769174319
        0x00008b2c:    65475f6d    m_Ge    DCD    1699176301
        0x00008b30:    6972656e    neri    DCD    1769104750
        0x00008b34:    6d6f4363    cCom    DCD    1836008291
        0x00008b38:    646e616d    mand    DCD    1684955501
        0x00008b3c:    00632e73    s.c.    DCD    6499955
        0x00008b40:    61686628    (fha    DCD    1634231848
        0x00008b44:    68747541    Auth    DCD    1752462657
        0x00008b48:    2120694b    Ki !    DCD    555772235
        0x00008b4c:    4f4e203d    = NO    DCD    1330520125
        0x00008b50:    4c49465f    _FIL    DCD    1279870559
        0x00008b54:    52505f45    E_PR    DCD    1380998981
        0x00008b58:    4e455345    ESEN    DCD    1313166149
        0x00008b5c:    26202954    T) &    DCD    639641940
        0x00008b60:    4c282026    & (L    DCD    1277698086
        0x00008b64:    54474e45    ENGT    DCD    1413959237
        0x00008b68:    55415f48    H_AU    DCD    1430347592
        0x00008b6c:    4b5f4854    TH_K    DCD    1264535636
        0x00008b70:    3d205945    EY =    DCD    1025530181
        0x00008b74:    375f203d    = _7    DCD    928981053
        0x00008b78:    5f363138    816_    DCD    1597387064
        0x00008b7c:    65675f34    4_ge    DCD    1701273396
        0x00008b80:    6c694674    tFil    DCD    1818838644
        0x00008b84:    7a695365    eSiz    DCD    2053722981
        0x00008b88:    68662865    e(fh    DCD    1751525477
        0x00008b8c:    74754161    aAut    DCD    1953841505
        0x00008b90:    29694b68    hKi)    DCD    694766440
        0x00008b94:    75420029    ).Bu    DCD    1967259689
        0x00008b98:    656e6973    sine    DCD    1701734771
        0x00008b9c:    6f437373    ssCo    DCD    1866691443
        0x00008ba0:    6e6f706d    mpon    DCD    1852797037
        0x00008ba4:    2f746e65    ent/    DCD    796159589
        0x00008ba8:    656c6554    Tele    DCD    1701602644
        0x00008bac:    2f6d6f63    com/    DCD    795701091
        0x00008bb0:    305f3135    51_0    DCD    811544885
        0x00008bb4:    732f3131    11/s    DCD    1932472625
        0x00008bb8:    6372756f    ourc    DCD    1668445551
        0x00008bbc:    69732f65    e/si    DCD    1769156453
        0x00008bc0:    65475f6d    m_Ge    DCD    1699176301
        0x00008bc4:    6972656e    neri    DCD    1769104750
        0x00008bc8:    6d6f4363    cCom    DCD    1836008291
        0x00008bcc:    646e616d    mand    DCD    1684955501
        0x00008bd0:    00632e73    s.c.    DCD    6499955
        0x00008bd4:    65726f43    Core    DCD    1701998403
        0x00008bd8:    3230312f    /102    DCD    842019119
        0x00008bdc:    3632325f    _226    DCD    909259359
        0x00008be0:    756f732f    /sou    DCD    1970238255
        0x00008be4:    2f656372    rce/    DCD    795173746
        0x00008be8:    5f323031    102_    DCD    1597124657
        0x00008bec:    2e363232    226.    DCD    775303730
        0x00008bf0:    0063        c.      DCW    99
    umbATR
        0x00008bf2:    9f3b        ;.      DCW    40763
        0x00008bf4:    871f8096    ....    DCD    2266988694
        0x00008bf8:    73a03180    .1.s    DCD    1939878272
        0x00008bfc:    631121be    .!.c    DCD    1662067134
        0x00008c00:    83010000    ....    DCD    2197880832
        0x00008c04:    89009005    ....    DCD    2298515461
    umbSupportedFiDi
        0x00008c08:    1312110b    ....    DCD    319951115
        0x00008c0c:    93929118    ....    DCD    2475856152
        0x00008c10:    97969594    ....    DCD    2543228308

** Section #3 'RAM' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 8 bytes (alignment 8)
    Address: 0x20000000


** Section #4 'RAM' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 3096 bytes (alignment 8)
    Address: 0x20000008


** Section #5 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 9165 bytes


** Section #6 '.debug_frame' (SHT_PROGBITS)
    Size   : 5072 bytes


** Section #7 '.debug_info' (SHT_PROGBITS)
    Size   : 30082 bytes


** Section #8 '.debug_line' (SHT_PROGBITS)
    Size   : 36614 bytes


** Section #9 '.debug_loc' (SHT_PROGBITS)
    Size   : 38163 bytes


** Section #10 '.debug_str' (SHT_PROGBITS)
    Size   : 36297 bytes


** Section #11 '.debug_ranges' (SHT_PROGBITS)
    Size   : 1656 bytes


** Section #12 '.symtab' (SHT_SYMTAB)
    Size   : 15264 bytes (alignment 4)
    String table #13 '.strtab'
    Last local symbol no. 720


** Section #13 '.strtab' (SHT_STRTAB)
    Size   : 7488 bytes


** Section #14 '.note' (SHT_NOTE)
    Size   : 32 bytes (alignment 4)


** Section #15 '.comment' (SHT_PROGBITS)
    Size   : 1912 bytes


** Section #16 '.shstrtab' (SHT_STRTAB)
    Size   : 160 bytes


