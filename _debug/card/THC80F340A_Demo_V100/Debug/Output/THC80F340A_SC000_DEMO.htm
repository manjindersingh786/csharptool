<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\Output\THC80F340A_SC000_DEMO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\Output\THC80F340A_SC000_DEMO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Aug  2 13:51:27 2022
<BR><P>
<H3>Maximum Stack Usage =        164 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Testmain &rArr; ISO7816_main &rArr; CMD_Handle &rArr; UpdateMemory &rArr; Write_page &rArr; mem_cmp
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[3]">SVCall_Handler</a>
 <LI><a href="#[4]">PendSV_Handler</a>
 <LI><a href="#[5]">SysTick_Handler</a>
 <LI><a href="#[6]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">FIQ_Handler</a> from sc000_vect.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[8]">FLASH_ISR</a> from sc000_isr.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[2]">HardFault_Handler</a> from sc000_vect.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[1]">NMI_Handler</a> from sc000_vect.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[4]">PendSV_Handler</a> from sc000_vect.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[0]">Reset_Handler</a> from sc000_init.o(Init) referenced from sc000_vect.o(VECT)
 <LI><a href="#[3]">SVCall_Handler</a> from sc000_vect.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[5]">SysTick_Handler</a> from sc000_vect.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[7]">TMR_ISR</a> from sc000_isr.o(.text) referenced from sc000_vect.o(VECT)
 <LI><a href="#[9]">Testmain</a> from main.o(.text) referenced from sc000_init.o(Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9]"></a>Testmain</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Testmain &rArr; ISO7816_main &rArr; CMD_Handle &rArr; UpdateMemory &rArr; Write_page &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_main
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sc000_init.o(Init)
</UL>
<P><STRONG><a name="[2c]"></a>TransitBigLittle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memory_api.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>ExtractBEHalfword</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash
</UL>

<P><STRONG><a name="[21]"></a>mem_cpy</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, memory_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
</UL>

<P><STRONG><a name="[2a]"></a>mem_cmp</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, memory_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_ROW_Bytes
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bytes
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_page
</UL>

<P><STRONG><a name="[28]"></a>mem_cpy_autoadapt</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, memory_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cpy_autoadapt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
</UL>

<P><STRONG><a name="[25]"></a>IsFlash</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memory_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
</UL>

<P><STRONG><a name="[26]"></a>IsOTP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
</UL>

<P><STRONG><a name="[7]"></a>TMR_ISR</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sc000_isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_ISR</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sc000_isr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL>
<P><STRONG><a name="[a]"></a>HWInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sc_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testmain
</UL>

<P><STRONG><a name="[c]"></a>sleep_mode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sc_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testmain
</UL>

<P><STRONG><a name="[b]"></a>ISO7816_main</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, iso7816_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ISO7816_main &rArr; CMD_Handle &rArr; UpdateMemory &rArr; Write_page &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_ConfigFIDI
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_TxNByte
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_TxByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_AutoTxNULL
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvAPDU
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Testmain
</UL>

<P><STRONG><a name="[13]"></a>SendATR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iso7816_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_TxNByte
</UL>

<P><STRONG><a name="[d]"></a>RcvAPDU</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, iso7816_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RcvAPDU &rArr; ISO7816_PPS
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_PPS
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_RxNByte
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_RxByte
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_TxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_main
</UL>

<P><STRONG><a name="[f]"></a>CMD_Handle</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, iso7816_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CMD_Handle &rArr; UpdateMemory &rArr; Write_page &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomNumGen
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBase
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calCRC
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToBL
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_main
</UL>

<P><STRONG><a name="[1f]"></a>response</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iso7816_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_TxNByte
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_TxByte
</UL>

<P><STRONG><a name="[20]"></a>TxStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iso7816_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_TxByte
</UL>

<P><STRONG><a name="[2d]"></a>ETU_Delay</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, iso7816_main.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>SWHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iso7816_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash
</UL>

<P><STRONG><a name="[12]"></a>ISO7816_ConfigFIDI</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ISO7816_ConfigFIDI
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_main
</UL>

<P><STRONG><a name="[2e]"></a>ISO7816_PPS_ACK</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, iso7816_api.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>ISO7816_TxNByte</STRONG> (Thumb, 364 bytes, Stack size 28 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ISO7816_TxNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATR
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_main
</UL>

<P><STRONG><a name="[16]"></a>ISO7816_PPS</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO7816_PPS
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvAPDU
</UL>

<P><STRONG><a name="[14]"></a>ISO7816_RxByte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, iso7816_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvAPDU
</UL>

<P><STRONG><a name="[15]"></a>ISO7816_RxNByte</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ISO7816_RxNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvAPDU
</UL>

<P><STRONG><a name="[10]"></a>ISO7816_TxByte</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, iso7816_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxStatus
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvAPDU
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_main
</UL>

<P><STRONG><a name="[e]"></a>ISO7816_AutoTxNULL</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, iso7816_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO7816_main
</UL>

<P><STRONG><a name="[1a]"></a>SetBase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iso7816_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[1c]"></a>ReadFlash</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadFlash &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[17]"></a>EraseFlash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EraseFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Page
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractBEHalfword
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[1d]"></a>UpdateMemory</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UpdateMemory &rArr; Write_page &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_page
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Page
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOTP
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlash
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy_autoadapt
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[1b]"></a>WriteFlash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WriteFlash &rArr; Write_Bytes &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bytes
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[19]"></a>calCRC</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[1e]"></a>RandomNumGen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RandomNumGen
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[18]"></a>ReturnToBL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iso7816_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ReturnToBL &rArr; Write_Bytes &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bytes
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Handle
</UL>

<P><STRONG><a name="[23]"></a>Erase_Page</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, norflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToBL
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFlash
</UL>

<P><STRONG><a name="[29]"></a>Write_Bytes</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, norflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Write_Bytes &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToBL
</UL>

<P><STRONG><a name="[2b]"></a>Write_ROW_Bytes</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, norflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>

<P><STRONG><a name="[27]"></a>Write_page</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, norflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Write_page &rArr; mem_cmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateMemory
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sc000_init.o(Init))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sc000_vect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sc000_vect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL>
<P><STRONG><a name="[3]"></a>SVCall_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sc000_vect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sc000_vect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sc000_vect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sc000_vect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sc000_vect.o(VECT)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
